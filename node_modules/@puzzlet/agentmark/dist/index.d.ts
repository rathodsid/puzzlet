import { Ast, BaseMDXProvidedComponents } from '@puzzlet/templatedx';
export { FilterFunction, FilterRegistry, getFrontMatter, load, parse } from '@puzzlet/templatedx';
import { FC } from 'react';
import { GenerateTextResult, LanguageModelUsage, FinishReason, LanguageModel } from 'ai';
import { z } from 'zod';

declare const ChatMessageSchema: z.ZodObject<{
    role: z.ZodEnum<["system", "user", "assistant"]>;
    content: z.ZodString;
}, "strip", z.ZodTypeAny, {
    role: "system" | "user" | "assistant";
    content: string;
}, {
    role: "system" | "user" | "assistant";
    content: string;
}>;
declare const AgentMarkTextSettingsSchema: z.ZodObject<z.objectUtil.extendShape<{
    max_tokens: z.ZodOptional<z.ZodNumber>;
    temperature: z.ZodOptional<z.ZodNumber>;
    max_llm_calls: z.ZodOptional<z.ZodNumber>;
    top_p: z.ZodOptional<z.ZodNumber>;
    top_k: z.ZodOptional<z.ZodNumber>;
    presence_penalty: z.ZodOptional<z.ZodNumber>;
    frequency_penalty: z.ZodOptional<z.ZodNumber>;
    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    seed: z.ZodOptional<z.ZodNumber>;
    max_retries: z.ZodOptional<z.ZodNumber>;
    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, {
    tools: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        description: z.ZodString;
        parameters: z.ZodUnknown;
    }, "strip", z.ZodTypeAny, {
        description: string;
        parameters?: unknown;
    }, {
        description: string;
        parameters?: unknown;
    }>>>;
}>, "strip", z.ZodTypeAny, {
    max_tokens?: number | undefined;
    temperature?: number | undefined;
    max_llm_calls?: number | undefined;
    top_p?: number | undefined;
    top_k?: number | undefined;
    presence_penalty?: number | undefined;
    frequency_penalty?: number | undefined;
    stop_sequences?: string[] | undefined;
    seed?: number | undefined;
    max_retries?: number | undefined;
    headers?: Record<string, string> | undefined;
    tools?: Record<string, {
        description: string;
        parameters?: unknown;
    }> | undefined;
}, {
    max_tokens?: number | undefined;
    temperature?: number | undefined;
    max_llm_calls?: number | undefined;
    top_p?: number | undefined;
    top_k?: number | undefined;
    presence_penalty?: number | undefined;
    frequency_penalty?: number | undefined;
    stop_sequences?: string[] | undefined;
    seed?: number | undefined;
    max_retries?: number | undefined;
    headers?: Record<string, string> | undefined;
    tools?: Record<string, {
        description: string;
        parameters?: unknown;
    }> | undefined;
}>;
declare const AgentMarkSchemaSettingsSchema: z.ZodObject<z.objectUtil.extendShape<{
    max_tokens: z.ZodOptional<z.ZodNumber>;
    temperature: z.ZodOptional<z.ZodNumber>;
    max_llm_calls: z.ZodOptional<z.ZodNumber>;
    top_p: z.ZodOptional<z.ZodNumber>;
    top_k: z.ZodOptional<z.ZodNumber>;
    presence_penalty: z.ZodOptional<z.ZodNumber>;
    frequency_penalty: z.ZodOptional<z.ZodNumber>;
    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    seed: z.ZodOptional<z.ZodNumber>;
    max_retries: z.ZodOptional<z.ZodNumber>;
    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, {
    schema: z.ZodUnknown;
}>, "strip", z.ZodTypeAny, {
    max_tokens?: number | undefined;
    temperature?: number | undefined;
    max_llm_calls?: number | undefined;
    top_p?: number | undefined;
    top_k?: number | undefined;
    presence_penalty?: number | undefined;
    frequency_penalty?: number | undefined;
    stop_sequences?: string[] | undefined;
    seed?: number | undefined;
    max_retries?: number | undefined;
    headers?: Record<string, string> | undefined;
    schema?: unknown;
}, {
    max_tokens?: number | undefined;
    temperature?: number | undefined;
    max_llm_calls?: number | undefined;
    top_p?: number | undefined;
    top_k?: number | undefined;
    presence_penalty?: number | undefined;
    frequency_penalty?: number | undefined;
    stop_sequences?: string[] | undefined;
    seed?: number | undefined;
    max_retries?: number | undefined;
    headers?: Record<string, string> | undefined;
    schema?: unknown;
}>;
declare const AgentMarkSchema: z.ZodObject<{
    name: z.ZodString;
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["system", "user", "assistant"]>;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        role: "system" | "user" | "assistant";
        content: string;
    }, {
        role: "system" | "user" | "assistant";
        content: string;
    }>, "many">;
    metadata: z.ZodObject<{
        model: z.ZodObject<{
            name: z.ZodString;
            settings: z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
                max_tokens: z.ZodOptional<z.ZodNumber>;
                temperature: z.ZodOptional<z.ZodNumber>;
                max_llm_calls: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                seed: z.ZodOptional<z.ZodNumber>;
                max_retries: z.ZodOptional<z.ZodNumber>;
                headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            }, {
                schema: z.ZodOptional<z.ZodUnknown>;
                tools: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    description: z.ZodString;
                    parameters: z.ZodUnknown;
                }, "strip", z.ZodTypeAny, {
                    description: string;
                    parameters?: unknown;
                }, {
                    description: string;
                    parameters?: unknown;
                }>>>;
            }>, "strip", z.ZodTypeAny, {
                max_tokens?: number | undefined;
                temperature?: number | undefined;
                max_llm_calls?: number | undefined;
                top_p?: number | undefined;
                top_k?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                stop_sequences?: string[] | undefined;
                seed?: number | undefined;
                max_retries?: number | undefined;
                headers?: Record<string, string> | undefined;
                tools?: Record<string, {
                    description: string;
                    parameters?: unknown;
                }> | undefined;
                schema?: unknown;
            }, {
                max_tokens?: number | undefined;
                temperature?: number | undefined;
                max_llm_calls?: number | undefined;
                top_p?: number | undefined;
                top_k?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                stop_sequences?: string[] | undefined;
                seed?: number | undefined;
                max_retries?: number | undefined;
                headers?: Record<string, string> | undefined;
                tools?: Record<string, {
                    description: string;
                    parameters?: unknown;
                }> | undefined;
                schema?: unknown;
            }>, {
                max_tokens?: number | undefined;
                temperature?: number | undefined;
                max_llm_calls?: number | undefined;
                top_p?: number | undefined;
                top_k?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                stop_sequences?: string[] | undefined;
                seed?: number | undefined;
                max_retries?: number | undefined;
                headers?: Record<string, string> | undefined;
                tools?: Record<string, {
                    description: string;
                    parameters?: unknown;
                }> | undefined;
                schema?: unknown;
            }, {
                max_tokens?: number | undefined;
                temperature?: number | undefined;
                max_llm_calls?: number | undefined;
                top_p?: number | undefined;
                top_k?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                stop_sequences?: string[] | undefined;
                seed?: number | undefined;
                max_retries?: number | undefined;
                headers?: Record<string, string> | undefined;
                tools?: Record<string, {
                    description: string;
                    parameters?: unknown;
                }> | undefined;
                schema?: unknown;
            }>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            settings: {
                max_tokens?: number | undefined;
                temperature?: number | undefined;
                max_llm_calls?: number | undefined;
                top_p?: number | undefined;
                top_k?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                stop_sequences?: string[] | undefined;
                seed?: number | undefined;
                max_retries?: number | undefined;
                headers?: Record<string, string> | undefined;
                tools?: Record<string, {
                    description: string;
                    parameters?: unknown;
                }> | undefined;
                schema?: unknown;
            };
        }, {
            name: string;
            settings: {
                max_tokens?: number | undefined;
                temperature?: number | undefined;
                max_llm_calls?: number | undefined;
                top_p?: number | undefined;
                top_k?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                stop_sequences?: string[] | undefined;
                seed?: number | undefined;
                max_retries?: number | undefined;
                headers?: Record<string, string> | undefined;
                tools?: Record<string, {
                    description: string;
                    parameters?: unknown;
                }> | undefined;
                schema?: unknown;
            };
        }>;
    }, "strip", z.ZodTypeAny, {
        model: {
            name: string;
            settings: {
                max_tokens?: number | undefined;
                temperature?: number | undefined;
                max_llm_calls?: number | undefined;
                top_p?: number | undefined;
                top_k?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                stop_sequences?: string[] | undefined;
                seed?: number | undefined;
                max_retries?: number | undefined;
                headers?: Record<string, string> | undefined;
                tools?: Record<string, {
                    description: string;
                    parameters?: unknown;
                }> | undefined;
                schema?: unknown;
            };
        };
    }, {
        model: {
            name: string;
            settings: {
                max_tokens?: number | undefined;
                temperature?: number | undefined;
                max_llm_calls?: number | undefined;
                top_p?: number | undefined;
                top_k?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                stop_sequences?: string[] | undefined;
                seed?: number | undefined;
                max_retries?: number | undefined;
                headers?: Record<string, string> | undefined;
                tools?: Record<string, {
                    description: string;
                    parameters?: unknown;
                }> | undefined;
                schema?: unknown;
            };
        };
    }>;
}, "strip", z.ZodTypeAny, {
    name: string;
    messages: {
        role: "system" | "user" | "assistant";
        content: string;
    }[];
    metadata: {
        model: {
            name: string;
            settings: {
                max_tokens?: number | undefined;
                temperature?: number | undefined;
                max_llm_calls?: number | undefined;
                top_p?: number | undefined;
                top_k?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                stop_sequences?: string[] | undefined;
                seed?: number | undefined;
                max_retries?: number | undefined;
                headers?: Record<string, string> | undefined;
                tools?: Record<string, {
                    description: string;
                    parameters?: unknown;
                }> | undefined;
                schema?: unknown;
            };
        };
    };
}, {
    name: string;
    messages: {
        role: "system" | "user" | "assistant";
        content: string;
    }[];
    metadata: {
        model: {
            name: string;
            settings: {
                max_tokens?: number | undefined;
                temperature?: number | undefined;
                max_llm_calls?: number | undefined;
                top_p?: number | undefined;
                top_k?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                stop_sequences?: string[] | undefined;
                seed?: number | undefined;
                max_retries?: number | undefined;
                headers?: Record<string, string> | undefined;
                tools?: Record<string, {
                    description: string;
                    parameters?: unknown;
                }> | undefined;
                schema?: unknown;
            };
        };
    };
}>;

type JSONPrimitive = string | number | boolean | null | undefined;
type JSONValue = JSONPrimitive | JSONObject | JSONArray;
type JSONArray = JSONValue[];
interface ExtractTextProps {
    children: any;
}
type TelemetrySettings = {
    isEnabled?: boolean;
    functionId?: string;
    metadata?: Record<string, any>;
};
type InferenceOptions = {
    telemetry?: TelemetrySettings;
    apiKey?: string;
};
type AgentMarkTextSettings = z.infer<typeof AgentMarkTextSettingsSchema>;
type AgentMarkSchemaSettings = z.infer<typeof AgentMarkSchemaSettingsSchema>;
type AgentMarkSettings = AgentMarkTextSettings | AgentMarkSchemaSettings;
type ChatMessage = z.infer<typeof ChatMessageSchema>;
type JSONObject = {
    [member: string]: JSONValue | any;
};
type AgentMark = z.infer<typeof AgentMarkSchema>;
interface TypsafeTemplate<Input, Output> {
    content: Ast;
    run: (props: Input, options?: InferenceOptions) => Promise<AgentMarkOutput<Output>>;
    compile: (props?: Input) => Promise<AgentMark>;
    deserialize: (response: Input) => Promise<any>;
    stream: (props: Input, options?: InferenceOptions) => Promise<AgentMarkStreamOutput<Output>>;
}
interface AgentMarkLoader<Types extends Record<string, {
    input: any;
    output: any;
}>> {
    load<Path extends keyof Types>(templatePath: Path): Promise<TypsafeTemplate<Types[Path]["input"], Types[Path]["output"]>>;
}
interface AgentMarkOutputV1 {
    version?: undefined;
    result: {
        text?: string;
        object?: any;
    };
    tools?: Array<{
        name: string;
        input: Record<string, any>;
        output?: Record<string, any>;
    }>;
    toolResponses?: GenerateTextResult<any, never>['toolResults'];
    usage: {
        promptTokens: number;
        completionTokens: number;
        totalTokens: number;
    };
    finishReason: "stop" | "length" | "content-filter" | "tool-calls" | "error" | "other" | "unknown";
}
interface AgentMarkOutputV2<T = any> {
    result: T;
    version: "v2.0";
    tools?: Array<{
        name: string;
        input: Record<string, any>;
        output?: Record<string, any>;
    }>;
    toolResponses?: GenerateTextResult<any, never>['toolResults'];
    steps?: GenerateTextResult<any, never>['steps'];
    usage: {
        promptTokens: number;
        completionTokens: number;
        totalTokens: number;
    };
    finishReason: "stop" | "length" | "content-filter" | "tool-calls" | "error" | "other" | "unknown";
}
interface AgentMarkStreamOutput<T = any> {
    usage: Promise<LanguageModelUsage>;
    resultStream: AsyncIterable<Partial<T>>;
    version: "v2.0";
    tools?: Promise<Array<{
        name: string;
        input: Record<string, any>;
        output?: Record<string, any>;
    }>>;
    toolResponses?: Promise<GenerateTextResult<any, never>['toolResults']>;
    steps?: Promise<GenerateTextResult<any, never>['steps']>;
    finishReason: Promise<FinishReason>;
}
type AgentMarkOutput<T = any> = AgentMarkOutputV2<T>;
type VersionedAgentMarkOutput<T = any> = AgentMarkOutputV1 | AgentMarkOutputV2<T>;
interface Components extends BaseMDXProvidedComponents {
    User: FC<ExtractTextProps>;
    Assistant: FC<ExtractTextProps>;
    System: FC<ExtractTextProps>;
}
interface DeserializeConfig {
    withStream?: boolean;
}

declare function getRawConfig<I extends Record<string, any>>(ast: Ast, props?: I): Promise<{
    name: string;
    messages: {
        role: "system" | "user" | "assistant";
        content: string;
    }[];
    metadata: {
        model: {
            name: string;
            settings: {
                max_tokens?: number | undefined;
                temperature?: number | undefined;
                max_llm_calls?: number | undefined;
                top_p?: number | undefined;
                top_k?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                stop_sequences?: string[] | undefined;
                seed?: number | undefined;
                max_retries?: number | undefined;
                headers?: Record<string, string> | undefined;
                tools?: Record<string, {
                    description: string;
                    parameters?: unknown;
                }> | undefined;
                schema?: unknown;
            };
        };
    };
}>;
declare function runInference$1<Input extends Record<string, any>, Output>(ast: Ast, props: Input, options?: InferenceOptions): Promise<AgentMarkOutput<Output>>;
declare function streamInference$1<Input extends Record<string, any>, Output>(ast: Ast, props: Input, options?: InferenceOptions): Promise<AgentMarkStreamOutput<Output>>;
declare function serialize(completionParams: any, model: string, promptName: string): string | undefined;
declare function deserialize(ast: Ast, props?: {}, config?: DeserializeConfig): Promise<JSONObject>;
declare const getModel: (ast: Ast) => any;
interface Template<Input extends Record<string, any>, Output> {
    content: Ast;
    run: (props: Input, options?: InferenceOptions) => Promise<AgentMarkOutput<Output>>;
    compile: (props?: Input) => Promise<AgentMark>;
    deserialize: (props: Input, config?: DeserializeConfig) => Promise<any>;
}
declare function createTemplateRunner<Input extends Record<string, any>, Output>(ast: Ast): {
    run: (props: Input, options?: InferenceOptions) => Promise<AgentMarkOutput<Output>>;
    stream: (props: Input, options?: InferenceOptions) => Promise<AgentMarkStreamOutput<Output>>;
    compile: (props?: Input) => Promise<{
        name: string;
        messages: {
            role: "system" | "user" | "assistant";
            content: string;
        }[];
        metadata: {
            model: {
                name: string;
                settings: {
                    max_tokens?: number | undefined;
                    temperature?: number | undefined;
                    max_llm_calls?: number | undefined;
                    top_p?: number | undefined;
                    top_k?: number | undefined;
                    presence_penalty?: number | undefined;
                    frequency_penalty?: number | undefined;
                    stop_sequences?: string[] | undefined;
                    seed?: number | undefined;
                    max_retries?: number | undefined;
                    headers?: Record<string, string> | undefined;
                    tools?: Record<string, {
                        description: string;
                        parameters?: unknown;
                    }> | undefined;
                    schema?: unknown;
                };
            };
        };
    }>;
    deserialize: (props: Input, config?: DeserializeConfig) => Promise<JSONObject>;
};

declare function toFrontMatter(content: JSONObject): string;
declare function getEnv(key: string): string;
declare function runInference(config: AgentMarkSettings, model: LanguageModel, messages: Array<ChatMessage>, options?: InferenceOptions): Promise<AgentMarkOutput>;
declare function streamInference(config: AgentMarkSettings, model: LanguageModel, messages: Array<ChatMessage>, options?: InferenceOptions): Promise<AgentMarkStreamOutput>;

type TemplateRunner = <Input extends Record<string, any>, Output>(ast: Ast) => Omit<Template<Input, Output>, 'content'>;
type DefaultIO = {
    input: Record<string, any>;
    output: any;
};
declare class FileLoader<T extends {
    [P in keyof T]: {
        input: any;
        output: any;
    };
} = {
    [key: string]: DefaultIO;
}> implements AgentMarkLoader<T> {
    private rootDir;
    private createRunner;
    private basePath;
    constructor(rootDir: string, createRunner: TemplateRunner);
    load<Path extends keyof T | (T extends {
        [key: string]: DefaultIO;
    } ? string : never)>(templatePath: Path): Promise<Path extends keyof T ? TypsafeTemplate<T[Path]["input"], T[Path]["output"]> : TypsafeTemplate<any, any>>;
}

declare const PluginAPI: {
    toFrontMatter: typeof toFrontMatter;
    runInference: typeof runInference;
    getEnv: typeof getEnv;
    fetch: typeof fetch;
    streamInference: typeof streamInference;
};

type IPluginAPI = typeof PluginAPI;

interface IModelPlugin<T = JSONObject, R = T> {
    provider: string;
    setApiKey(apiKey: string): void;
    deserialize(agentMark: AgentMark, api: IPluginAPI, config?: DeserializeConfig): Promise<R>;
    runInference(agentMark: AgentMark, api: IPluginAPI, options?: InferenceOptions): Promise<AgentMarkOutput>;
    streamInference(agentMark: AgentMark, api: IPluginAPI, options?: InferenceOptions): Promise<AgentMarkStreamOutput>;
    serialize(completionParams: R, name: string, api: IPluginAPI): string;
}

declare class ModelPluginRegistry {
    static plugins: Map<string, IModelPlugin>;
    static register(modelPlugin: IModelPlugin<any, any>, ids: string[]): void;
    static registerAll(pluginEntries: {
        provider: IModelPlugin<any, any>;
        models: string[];
    }[]): void;
    static getPlugin(id: string): IModelPlugin<JSONObject, JSONObject> | undefined;
    static removePlugin(id: string): void;
    static clearRegistry(): void;
}

type Tool = (...args: any[]) => Promise<any>;
declare class ToolPluginRegistry {
    static tools: Map<string, Tool>;
    static register(toolFunction: Tool, name: string): void;
    static registerAll(toolEntries: {
        toolFunction: Tool;
        name: string;
    }[]): void;
    static getTool(name: string): Tool | undefined;
    static removeTool(name: string): void;
    static clearRegistry(): void;
}

declare global {
  interface MDXProvidedComponents extends Components {}
}

export { type AgentMark, type AgentMarkLoader, type AgentMarkOutput, type AgentMarkOutputV1, type AgentMarkOutputV2, type AgentMarkStreamOutput, type DeserializeConfig, FileLoader, type IModelPlugin, type IPluginAPI, type InferenceOptions, ModelPluginRegistry, PluginAPI, type Tool, ToolPluginRegistry, type TypsafeTemplate, type VersionedAgentMarkOutput, createTemplateRunner, deserialize, getModel, getRawConfig, runInference$1 as runInference, serialize, streamInference$1 as streamInference, toFrontMatter };
