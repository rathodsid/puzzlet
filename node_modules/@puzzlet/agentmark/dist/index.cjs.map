{"version":3,"sources":["../../../node_modules/extend/index.js","../../../node_modules/acorn-jsx/xhtml.js","../../../node_modules/acorn/dist/acorn.js","../../../node_modules/acorn-jsx/index.js","../../../node_modules/format/format.js","../../../node_modules/jsep/dist/jsep.js","../../../node_modules/@jsep-plugin/object/dist/index.js","../../../node_modules/bail/index.js","../../../node_modules/unified/lib/index.js","../../../node_modules/devlop/lib/default.js","../../../node_modules/unified/node_modules/is-plain-obj/index.js","../../../node_modules/trough/lib/index.js","../../../node_modules/unist-util-stringify-position/lib/index.js","../../../node_modules/vfile-message/lib/index.js","../../../node_modules/vfile/lib/minurl.shared.js","../../../node_modules/vfile/lib/index.js","../../../node_modules/unified/lib/callable-instance.js","../../../node_modules/mdast-util-to-string/lib/index.js","../../../node_modules/character-entities/index.js","../../../node_modules/decode-named-character-reference/index.js","../../../node_modules/micromark-util-chunked/index.js","../../../node_modules/micromark-util-combine-extensions/index.js","../../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../../node_modules/micromark-util-normalize-identifier/index.js","../../../node_modules/micromark-util-character/index.js","../../../node_modules/micromark-factory-space/index.js","../../../node_modules/micromark/lib/initialize/content.js","../../../node_modules/micromark/lib/initialize/document.js","../../../node_modules/micromark-util-classify-character/index.js","../../../node_modules/micromark-util-resolve-all/index.js","../../../node_modules/micromark-core-commonmark/lib/attention.js","../../../node_modules/micromark-core-commonmark/lib/autolink.js","../../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../../node_modules/micromark-core-commonmark/lib/code-text.js","../../../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../../../node_modules/micromark-util-subtokenize/index.js","../../../node_modules/micromark-core-commonmark/lib/content.js","../../../node_modules/micromark-factory-destination/index.js","../../../node_modules/micromark-factory-label/index.js","../../../node_modules/micromark-factory-title/index.js","../../../node_modules/micromark-factory-whitespace/index.js","../../../node_modules/micromark-core-commonmark/lib/definition.js","../../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../../node_modules/micromark-util-html-tag-name/index.js","../../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../../node_modules/micromark-core-commonmark/lib/html-text.js","../../../node_modules/micromark-core-commonmark/lib/label-end.js","../../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../../node_modules/micromark-core-commonmark/lib/list.js","../../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../../node_modules/micromark/lib/initialize/flow.js","../../../node_modules/micromark/lib/initialize/text.js","../../../node_modules/micromark/lib/constructs.js","../../../node_modules/micromark/lib/create-tokenizer.js","../../../node_modules/micromark/lib/parse.js","../../../node_modules/micromark/lib/postprocess.js","../../../node_modules/micromark/lib/preprocess.js","../../../node_modules/micromark-util-decode-string/index.js","../../../node_modules/mdast-util-from-markdown/lib/index.js","../../../node_modules/remark-parse/lib/index.js","../../../node_modules/mdast-util-mdx-expression/lib/index.js","../../../node_modules/ccount/index.js","../../../node_modules/character-entities-legacy/index.js","../../../node_modules/character-reference-invalid/index.js","../../../node_modules/is-decimal/index.js","../../../node_modules/is-hexadecimal/index.js","../../../node_modules/is-alphabetical/index.js","../../../node_modules/is-alphanumerical/index.js","../../../node_modules/parse-entities/lib/index.js","../../../node_modules/stringify-entities/lib/core.js","../../../node_modules/stringify-entities/lib/util/format-basic.js","../../../node_modules/stringify-entities/lib/index.js","../../../node_modules/mdast-util-mdx-jsx/lib/index.js","../../../node_modules/mdast-util-mdxjs-esm/lib/index.js","../../../node_modules/mdast-util-mdx/lib/index.js","../../../node_modules/acorn/dist/acorn.mjs","../../../node_modules/micromark-extension-mdxjs/index.js","../../../node_modules/estree-util-visit/lib/color.node.js","../../../node_modules/estree-util-visit/lib/index.js","../../../node_modules/micromark-util-events-to-acorn/index.js","../../../node_modules/unist-util-position-from-estree/lib/index.js","../../../node_modules/micromark-factory-mdx-expression/index.js","../../../node_modules/micromark-extension-mdx-expression/lib/syntax.js","../../../node_modules/estree-util-is-identifier-name/lib/index.js","../../../node_modules/micromark-extension-mdx-jsx/lib/factory-tag.js","../../../node_modules/micromark-extension-mdx-jsx/lib/jsx-text.js","../../../node_modules/micromark-extension-mdx-jsx/lib/jsx-flow.js","../../../node_modules/micromark-extension-mdx-jsx/lib/syntax.js","../../../node_modules/micromark-extension-mdx-md/index.js","../../../node_modules/micromark-extension-mdxjs-esm/lib/syntax.js","../../../node_modules/remark-mdx/lib/index.js","../../../node_modules/fault/index.js","../../../node_modules/micromark-extension-frontmatter/lib/to-matters.js","../../../node_modules/micromark-extension-frontmatter/lib/syntax.js","../../../node_modules/mdast-util-frontmatter/node_modules/escape-string-regexp/index.js","../../../node_modules/mdast-util-frontmatter/lib/index.js","../../../node_modules/remark-frontmatter/lib/index.js","../../../node_modules/zwitch/index.js","../../../node_modules/mdast-util-to-markdown/lib/configure.js","../../../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../../../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../../../node_modules/mdast-util-to-markdown/lib/handle/break.js","../../../node_modules/longest-streak/index.js","../../../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../../../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../../../node_modules/mdast-util-to-markdown/lib/handle/code.js","../../../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../../../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../../../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../../../node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","../../../node_modules/mdast-util-to-markdown/lib/util/encode-info.js","../../../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../../../node_modules/unist-util-is/lib/index.js","../../../node_modules/unist-util-visit-parents/lib/color.node.js","../../../node_modules/unist-util-visit-parents/lib/index.js","../../../node_modules/unist-util-visit/lib/index.js","../../../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../../../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../../../node_modules/mdast-util-to-markdown/lib/handle/html.js","../../../node_modules/mdast-util-to-markdown/lib/handle/image.js","../../../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../../../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../../../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../../../node_modules/mdast-util-to-markdown/lib/handle/link.js","../../../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../../../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../../../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../../../node_modules/mdast-util-to-markdown/lib/handle/list.js","../../../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../../../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../../../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../../../node_modules/mdast-util-phrasing/lib/index.js","../../../node_modules/mdast-util-to-markdown/lib/handle/root.js","../../../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../../../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../../../node_modules/mdast-util-to-markdown/lib/handle/text.js","../../../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../../../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../../../node_modules/mdast-util-to-markdown/lib/handle/index.js","../../../node_modules/mdast-util-to-markdown/lib/join.js","../../../node_modules/mdast-util-to-markdown/lib/unsafe.js","../../../node_modules/mdast-util-to-markdown/lib/util/association.js","../../../node_modules/mdast-util-to-markdown/lib/util/compile-pattern.js","../../../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","../../../node_modules/mdast-util-to-markdown/lib/util/container-flow.js","../../../node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","../../../node_modules/mdast-util-to-markdown/lib/util/safe.js","../../../node_modules/mdast-util-to-markdown/lib/util/track.js","../../../node_modules/mdast-util-to-markdown/lib/index.js","../../../node_modules/@puzzlet/templatedx/src/constants.ts","../../../node_modules/@puzzlet/templatedx/src/tag-plugin-registry.ts","../../../node_modules/@puzzlet/templatedx/src/ast-utils.ts","../../../node_modules/@puzzlet/templatedx/src/utils.ts","../../../node_modules/@puzzlet/templatedx/src/filter-registry.ts","../../../node_modules/@puzzlet/templatedx/src/scope.ts","../../../node_modules/@puzzlet/templatedx/node_modules/mdast-util-mdx-expression/lib/index.js","../../../node_modules/@puzzlet/templatedx/node_modules/ccount/index.js","../../../node_modules/@puzzlet/templatedx/node_modules/stringify-entities/lib/core.js","../../../node_modules/@puzzlet/templatedx/node_modules/stringify-entities/lib/util/format-basic.js","../../../node_modules/@puzzlet/templatedx/node_modules/stringify-entities/lib/index.js","../../../node_modules/@puzzlet/templatedx/node_modules/mdast-util-mdx-jsx/lib/index.js","../../../node_modules/@puzzlet/templatedx/node_modules/mdast-util-mdxjs-esm/lib/index.js","../../../node_modules/@puzzlet/templatedx/node_modules/mdast-util-mdx/lib/index.js","../../../node_modules/@puzzlet/templatedx/src/transformer.ts","../../../node_modules/@puzzlet/templatedx/src/bundler.ts","../../../node_modules/@puzzlet/templatedx/src/tag-plugin.ts","../../../node_modules/@puzzlet/templatedx/src/tag-plugins/for-each.ts","../../../node_modules/@puzzlet/templatedx/src/tag-plugins/conditional.ts","../../../node_modules/@puzzlet/templatedx/src/tag-plugins/raw.ts","../../../node_modules/@puzzlet/templatedx/src/filter-plugins/index.ts","../../../node_modules/@puzzlet/templatedx/src/register-builtin-plugins.ts","../../../node_modules/@puzzlet/templatedx/src/index.ts","../src/model-plugin-registry.ts","../src/extract-text.ts","../src/schemas.ts","../src/tool-plugin-registry.ts","../src/utils.ts","../src/plugin-api.ts","../src/runtime.ts","../src/file-loader.ts"],"names":["hasOwn","isArray","isPlainObject","setProperty","options","getProperty","name","extend","exports","astralIdentifierCodes","astralIdentifierStartCodes","nonASCIIidentifierChars","nonASCIIidentifierStartChars","reservedWords","ecma5AndLessKeywords","keywords$1","keywordRelationalOperator","nonASCIIidentifierStart","nonASCIIidentifier","isInAstralSet","code","i","isIdentifierStart","isIdentifierChar","TokenType","binop","beforeExpr","startsExpr","keywords","kw","types$1","lineBreak","lineBreakG","isNewLine","nextLineBreak","nonASCIIwhitespace","skipWhiteSpace","ref","hasOwnProperty","toString","regexpCache","wordsRegexp","codePointToString","loneSurrogate","Position","offset","SourceLocation","start","getLineInfo","defaultOptions","warnedAboutEcmaVersion","getOptions","pushComment","text","SCOPE_TOP","SCOPE_FUNCTION","SCOPE_ASYNC","SCOPE_GENERATOR","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS_STATIC_BLOCK","SCOPE_VAR","functionFlags","BIND_NONE","BIND_VAR","BIND_LEXICAL","BIND_FUNCTION","BIND_SIMPLE_CATCH","BIND_OUTSIDE","Parser","prototypeAccessors","parse","node","parseExpressionAt","tokenizer","pp$9","literal","DestructuringErrors","pp$8","list","loopLabel","switchLabel","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","empty$1","FUNC_NULLABLE_ID","isPrivateNameConflicted","ecmaVersion","checkKeyName","value","pp$7","close","TokContext","types","pp$6","index","pp$5","isLocalVariableAccess","isPrivateFieldAccess","empty","pp$4","pp$3","Scope","Node","pp$2","finishNodeAt","scriptValuesAddedInUnicode","ecma9BinaryProperties","ecma10BinaryProperties","ecma11BinaryProperties","ecma12BinaryProperties","ecma13BinaryProperties","ecma14BinaryProperties","unicodeBinaryProperties","ecma14BinaryPropertiesOfStrings","unicodeBinaryPropertiesOfStrings","unicodeGeneralCategoryValues","ecma9ScriptValues","ecma10ScriptValues","ecma11ScriptValues","ecma12ScriptValues","ecma13ScriptValues","ecma14ScriptValues","unicodeScriptValues","data","buildUnicodeData","pp$1","BranchID","separatedFrom","self","sibling","RegExpValidationState","reset","raise","at","nextIndex","current","lookahead","advance","eat","eatChars","hasProp","isRegularExpressionModifier","isSyntaxCharacter","isRegExpIdentifierStart","isRegExpIdentifierPart","isDecimalDigit","isControlLetter","isValidUnicode","CharSetNone","CharSetOk","CharSetString","isCharacterClassEscape","isUnicodePropertyNameCharacter","isUnicodePropertyValueCharacter","isOctalDigit","isClassSetReservedDoublePunctuatorCharacter","isClassSetSyntaxCharacter","isClassSetReservedPunctuator","isHexDigit","hexToInt","Token","pp","stringToNumber","stringToBigInt","INVALID_TEMPLATE_ESCAPE_ERROR","position","version","acornJsx","jsep","point","default","field","path","fileURLToPath","file","tree","compiler","parameters","isUint8Array","own","all","extension","ok","previous","constructs","attentionMarkers","effects","nok","furtherStart","between","content","titleBefore","definition","heading","paragraph","document","flow","string","exit","map","from","create","head","opener","link","blockQuote","codeText","emphasis","hardBreak","html","image","listItem","strong","thematicBreak","handler","indent","following","characterReference","visit","serializeChunks","emptyOptions","trouble","blankLineBefore","formatter","matter","bufferIndex","unsafe","fence","handle","pick","one","configure","color","CONTINUE","EXIT","SKIP","is","toResult","subexit","containerFlow","yaml","mdxExpressionToMarkdown","handleMdxExpression","ccount","defaultSubsetRegex","surrogatePairsRegex","controlCharactersRegex","regexEscapeRegex","subsetToRegexCache","core","charactersToExpressionCached","charactersToExpression","formatBasic","stringifyEntitiesLight","mdxJsxToMarkdown","peekElement","inferDepth","createIndent","mdxjsEsmToMarkdown","handleMdxjsEsm","mdxToMarkdown","left","childrenContent","nodeHelpers","hasFunctionBody","getFunctionBody","NODE_TYPES","resultNodesPerItem","Tags","join","search","replace","__require","readFile","z","jsonSchema","messages","generateObject","generateText","streamObject","streamText","Ajv","runInference","streamInference"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,cAAA,GAAA,UAAA,CAAA;AAAA,EAAA,oCAAA,CAAA,OAAA,EAAA,MAAA,EAAA;AAEA,IAAIA,IAAAA,OAAAA,GAAS,OAAO,SAAU,CAAA,cAAA;AAC9B,IAAI,IAAA,KAAA,GAAQ,OAAO,SAAU,CAAA,QAAA;AAC7B,IAAA,IAAI,iBAAiB,MAAO,CAAA,cAAA;AAC5B,IAAA,IAAI,OAAO,MAAO,CAAA,wBAAA;AAElB,IAAIC,IAAAA,QAAAA,GAAU,SAASA,QAAAA,CAAQ,GAAK,EAAA;AACnC,MAAI,IAAA,OAAO,KAAM,CAAA,OAAA,KAAY,UAAY,EAAA;AACxC,QAAO,OAAA,KAAA,CAAM,QAAQ,GAAG,CAAA;AAAA;AAGzB,MAAO,OAAA,KAAA,CAAM,IAAK,CAAA,GAAG,CAAM,KAAA,gBAAA;AAAA,KAC5B;AAEA,IAAIC,IAAAA,cAAAA,GAAgB,SAASA,cAAAA,CAAc,GAAK,EAAA;AAC/C,MAAA,IAAI,CAAC,GAAO,IAAA,KAAA,CAAM,IAAK,CAAA,GAAG,MAAM,iBAAmB,EAAA;AAClD,QAAO,OAAA,KAAA;AAAA;AAGR,MAAA,IAAI,iBAAoBF,GAAAA,OAAAA,CAAO,IAAK,CAAA,GAAA,EAAK,aAAa,CAAA;AACtD,MAAI,IAAA,gBAAA,GAAmB,GAAI,CAAA,WAAA,IAAe,GAAI,CAAA,WAAA,CAAY,SAAaA,IAAAA,OAAAA,CAAO,IAAK,CAAA,GAAA,CAAI,WAAY,CAAA,SAAA,EAAW,eAAe,CAAA;AAE7H,MAAA,IAAI,GAAI,CAAA,WAAA,IAAe,CAAC,iBAAA,IAAqB,CAAC,gBAAkB,EAAA;AAC/D,QAAO,OAAA,KAAA;AAAA;AAKR,MAAI,IAAA,GAAA;AACJ,MAAA,KAAK,OAAO,GAAK,EAAA;AAAA;AAEjB,MAAA,OAAO,OAAO,GAAQ,KAAA,WAAA,IAAeA,OAAO,CAAA,IAAA,CAAK,KAAK,GAAG,CAAA;AAAA,KAC1D;AAGA,IAAA,IAAI,WAAc,GAAA,SAASG,YAAY,CAAA,MAAA,EAAQC,QAAS,EAAA;AACvD,MAAI,IAAA,cAAA,IAAkBA,QAAQ,CAAA,IAAA,KAAS,WAAa,EAAA;AACnD,QAAe,cAAA,CAAA,MAAA,EAAQA,SAAQ,IAAM,EAAA;AAAA,UACpC,UAAY,EAAA,IAAA;AAAA,UACZ,YAAc,EAAA,IAAA;AAAA,UACd,OAAOA,QAAQ,CAAA,QAAA;AAAA,UACf,QAAU,EAAA;AAAA,SACV,CAAA;AAAA,OACK,MAAA;AACN,QAAOA,MAAAA,CAAAA,QAAAA,CAAQ,IAAI,CAAA,GAAIA,QAAQ,CAAA,QAAA;AAAA;AAChC,KACD;AAGA,IAAA,IAAI,WAAc,GAAA,SAASC,YAAY,CAAA,GAAA,EAAKC,KAAM,EAAA;AACjD,MAAA,IAAIA,UAAS,WAAa,EAAA;AACzB,QAAA,IAAI,CAACN,OAAAA,CAAO,IAAK,CAAA,GAAA,EAAKM,KAAI,CAAG,EAAA;AAC5B,UAAO,OAAA,KAAA,CAAA;AAAA,mBACG,IAAM,EAAA;AAGhB,UAAO,OAAA,IAAA,CAAK,GAAKA,EAAAA,KAAI,CAAE,CAAA,KAAA;AAAA;AACxB;AAGD,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA,KAChB;AAEA,IAAO,MAAA,CAAA,OAAA,GAAU,SAASC,OAAS,GAAA;AAClC,MAAA,IAAIH,QAASE,EAAAA,KAAAA,EAAM,GAAK,EAAA,IAAA,EAAM,WAAa,EAAA,KAAA;AAC3C,MAAI,IAAA,MAAA,GAAS,UAAU,CAAC,CAAA;AACxB,MAAA,IAAI,CAAI,GAAA,CAAA;AACR,MAAA,IAAI,SAAS,SAAU,CAAA,MAAA;AACvB,MAAA,IAAI,IAAO,GAAA,KAAA;AAGX,MAAI,IAAA,OAAO,WAAW,SAAW,EAAA;AAChC,QAAO,IAAA,GAAA,MAAA;AACP,QAAS,MAAA,GAAA,SAAA,CAAU,CAAC,CAAA,IAAK,EAAC;AAE1B,QAAI,CAAA,GAAA,CAAA;AAAA;AAEL,MAAA,IAAI,UAAU,IAAS,IAAA,OAAO,WAAW,QAAY,IAAA,OAAO,WAAW,UAAa,EAAA;AACnF,QAAA,MAAA,GAAS,EAAC;AAAA;AAGX,MAAO,OAAA,CAAA,GAAI,MAAQ,EAAA,EAAE,CAAG,EAAA;AACvB,QAAAF,QAAAA,GAAU,UAAU,CAAC,CAAA;AAErB,QAAA,IAAIA,YAAW,IAAM,EAAA;AAEpB,UAAA,KAAKE,SAAQF,QAAS,EAAA;AACrB,YAAM,GAAA,GAAA,WAAA,CAAY,QAAQE,KAAI,CAAA;AAC9B,YAAO,IAAA,GAAA,WAAA,CAAYF,UAASE,KAAI,CAAA;AAGhC,YAAA,IAAI,WAAW,IAAM,EAAA;AAEpB,cAAI,IAAA,IAAA,IAAQ,SAASJ,cAAc,CAAA,IAAI,MAAM,WAAcD,GAAAA,QAAAA,CAAQ,IAAI,CAAK,CAAA,CAAA,EAAA;AAC3E,gBAAA,IAAI,WAAa,EAAA;AAChB,kBAAc,WAAA,GAAA,KAAA;AACd,kBAAA,KAAA,GAAQ,GAAOA,IAAAA,QAAAA,CAAQ,GAAG,CAAA,GAAI,MAAM,EAAC;AAAA,iBAC/B,MAAA;AACN,kBAAA,KAAA,GAAQ,GAAOC,IAAAA,cAAAA,CAAc,GAAG,CAAA,GAAI,MAAM,EAAC;AAAA;AAI5C,gBAAY,WAAA,CAAA,MAAA,EAAQ,EAAE,IAAA,EAAMI,KAAM,EAAA,QAAA,EAAUC,QAAO,IAAM,EAAA,KAAA,EAAO,IAAI,CAAA,EAAG,CAAA;AAAA,eAGxE,MAAA,IAAW,OAAO,IAAA,KAAS,WAAa,EAAA;AACvC,gBAAA,WAAA,CAAY,QAAQ,EAAE,IAAA,EAAMD,KAAM,EAAA,QAAA,EAAU,MAAM,CAAA;AAAA;AACnD;AACD;AACD;AACD;AAID,MAAO,OAAA,MAAA;AAAA,KACR;AAAA;AAAA,CAAA,CAAA;;;ACpHA,IAAA,aAAA,GAAA,UAAA,CAAA;AAAA,EAAA,uCAAA,CAAA,OAAA,EAAA,MAAA,EAAA;AAAA,IAAA,MAAA,CAAO,OAAU,GAAA;AAAA,MACf,IAAM,EAAA,GAAA;AAAA,MACN,GAAK,EAAA,GAAA;AAAA,MACL,IAAM,EAAA,GAAA;AAAA,MACN,EAAI,EAAA,GAAA;AAAA,MACJ,EAAI,EAAA,GAAA;AAAA,MACJ,IAAM,EAAA,MAAA;AAAA,MACN,KAAO,EAAA,MAAA;AAAA,MACP,IAAM,EAAA,MAAA;AAAA,MACN,KAAO,EAAA,MAAA;AAAA,MACP,MAAQ,EAAA,MAAA;AAAA,MACR,GAAK,EAAA,MAAA;AAAA,MACL,MAAQ,EAAA,MAAA;AAAA,MACR,IAAM,EAAA,MAAA;AAAA,MACN,GAAK,EAAA,MAAA;AAAA,MACL,IAAM,EAAA,MAAA;AAAA,MACN,IAAM,EAAA,MAAA;AAAA,MACN,KAAO,EAAA,MAAA;AAAA,MACP,GAAK,EAAA,MAAA;AAAA,MACL,GAAK,EAAA,MAAA;AAAA,MACL,GAAK,EAAA,MAAA;AAAA,MACL,IAAM,EAAA,MAAA;AAAA,MACN,GAAK,EAAA,MAAA;AAAA,MACL,MAAQ,EAAA,MAAA;AAAA,MACR,IAAM,EAAA,MAAA;AAAA,MACN,IAAM,EAAA,MAAA;AAAA,MACN,KAAO,EAAA,MAAA;AAAA,MACP,KAAO,EAAA,MAAA;AAAA,MACP,IAAM,EAAA,MAAA;AAAA,MACN,MAAQ,EAAA,MAAA;AAAA,MACR,KAAO,EAAA,MAAA;AAAA,MACP,IAAM,EAAA,MAAA;AAAA,MACN,IAAM,EAAA,MAAA;AAAA,MACN,KAAO,EAAA,MAAA;AAAA,MACP,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,KAAO,EAAA,MAAA;AAAA,MACP,MAAQ,EAAA,MAAA;AAAA,MACR,IAAM,EAAA,MAAA;AAAA,MACN,KAAO,EAAA,MAAA;AAAA,MACP,KAAO,EAAA,MAAA;AAAA,MACP,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,KAAO,EAAA,MAAA;AAAA,MACP,IAAM,EAAA,MAAA;AAAA,MACN,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,KAAO,EAAA,MAAA;AAAA,MACP,IAAM,EAAA,MAAA;AAAA,MACN,GAAK,EAAA,MAAA;AAAA,MACL,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,KAAO,EAAA,MAAA;AAAA,MACP,MAAQ,EAAA,MAAA;AAAA,MACR,IAAM,EAAA,MAAA;AAAA,MACN,KAAO,EAAA,MAAA;AAAA,MACP,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,KAAO,EAAA,MAAA;AAAA,MACP,IAAM,EAAA,MAAA;AAAA,MACN,MAAQ,EAAA,MAAA;AAAA,MACR,KAAO,EAAA,MAAA;AAAA,MACP,KAAO,EAAA,MAAA;AAAA,MACP,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,KAAO,EAAA,MAAA;AAAA,MACP,MAAQ,EAAA,MAAA;AAAA,MACR,IAAM,EAAA,MAAA;AAAA,MACN,KAAO,EAAA,MAAA;AAAA,MACP,KAAO,EAAA,MAAA;AAAA,MACP,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,KAAO,EAAA,MAAA;AAAA,MACP,IAAM,EAAA,MAAA;AAAA,MACN,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,KAAO,EAAA,MAAA;AAAA,MACP,IAAM,EAAA,MAAA;AAAA,MACN,GAAK,EAAA,MAAA;AAAA,MACL,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,KAAO,EAAA,MAAA;AAAA,MACP,MAAQ,EAAA,MAAA;AAAA,MACR,IAAM,EAAA,MAAA;AAAA,MACN,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,MAAQ,EAAA,MAAA;AAAA,MACR,KAAO,EAAA,MAAA;AAAA,MACP,IAAM,EAAA,MAAA;AAAA,MACN,MAAQ,EAAA,MAAA;AAAA,MACR,KAAO,EAAA,MAAA;AAAA,MACP,IAAM,EAAA,MAAA;AAAA,MACN,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,MAAQ,EAAA,QAAA;AAAA,MACR,MAAQ,EAAA,QAAA;AAAA,MACR,IAAM,EAAA,QAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,IAAM,EAAA,QAAA;AAAA,MACN,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,OAAS,EAAA,QAAA;AAAA,MACT,IAAM,EAAA,QAAA;AAAA,MACN,GAAK,EAAA,QAAA;AAAA,MACL,KAAO,EAAA,QAAA;AAAA,MACP,IAAM,EAAA,QAAA;AAAA,MACN,KAAO,EAAA,QAAA;AAAA,MACP,MAAQ,EAAA,QAAA;AAAA,MACR,EAAI,EAAA,QAAA;AAAA,MACJ,EAAI,EAAA,QAAA;AAAA,MACJ,EAAI,EAAA,QAAA;AAAA,MACJ,OAAS,EAAA,QAAA;AAAA,MACT,EAAI,EAAA,QAAA;AAAA,MACJ,GAAK,EAAA,QAAA;AAAA,MACL,KAAO,EAAA,QAAA;AAAA,MACP,GAAK,EAAA,QAAA;AAAA,MACL,OAAS,EAAA,QAAA;AAAA,MACT,GAAK,EAAA,QAAA;AAAA,MACL,GAAK,EAAA,QAAA;AAAA,MACL,GAAK,EAAA,QAAA;AAAA,MACL,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,IAAM,EAAA,QAAA;AAAA,MACN,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,OAAS,EAAA,QAAA;AAAA,MACT,IAAM,EAAA,QAAA;AAAA,MACN,GAAK,EAAA,QAAA;AAAA,MACL,KAAO,EAAA,QAAA;AAAA,MACP,IAAM,EAAA,QAAA;AAAA,MACN,KAAO,EAAA,QAAA;AAAA,MACP,MAAQ,EAAA,QAAA;AAAA,MACR,EAAI,EAAA,QAAA;AAAA,MACJ,EAAI,EAAA,QAAA;AAAA,MACJ,EAAI,EAAA,QAAA;AAAA,MACJ,OAAS,EAAA,QAAA;AAAA,MACT,EAAI,EAAA,QAAA;AAAA,MACJ,GAAK,EAAA,QAAA;AAAA,MACL,MAAQ,EAAA,QAAA;AAAA,MACR,KAAO,EAAA,QAAA;AAAA,MACP,GAAK,EAAA,QAAA;AAAA,MACL,OAAS,EAAA,QAAA;AAAA,MACT,GAAK,EAAA,QAAA;AAAA,MACL,GAAK,EAAA,QAAA;AAAA,MACL,GAAK,EAAA,QAAA;AAAA,MACL,KAAO,EAAA,QAAA;AAAA,MACP,QAAU,EAAA,QAAA;AAAA,MACV,KAAO,EAAA,QAAA;AAAA,MACP,GAAK,EAAA,QAAA;AAAA,MACL,IAAM,EAAA,QAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,MAAQ,EAAA,QAAA;AAAA,MACR,IAAM,EAAA,QAAA;AAAA,MACN,GAAK,EAAA,QAAA;AAAA,MACL,GAAK,EAAA,QAAA;AAAA,MACL,GAAK,EAAA,QAAA;AAAA,MACL,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,MAAQ,EAAA,QAAA;AAAA,MACR,MAAQ,EAAA,QAAA;AAAA,MACR,IAAM,EAAA,QAAA;AAAA,MACN,MAAQ,EAAA,QAAA;AAAA,MACR,MAAQ,EAAA,QAAA;AAAA,MACR,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,MAAQ,EAAA,QAAA;AAAA,MACR,MAAQ,EAAA,QAAA;AAAA,MACR,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,IAAM,EAAA,QAAA;AAAA,MACN,KAAO,EAAA,QAAA;AAAA,MACP,MAAQ,EAAA,QAAA;AAAA,MACR,IAAM,EAAA,QAAA;AAAA,MACN,KAAO,EAAA,QAAA;AAAA,MACP,OAAS,EAAA,QAAA;AAAA,MACT,IAAM,EAAA,QAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,KAAO,EAAA,QAAA;AAAA,MACP,IAAM,EAAA,QAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,MAAQ,EAAA,QAAA;AAAA,MACR,IAAM,EAAA,QAAA;AAAA,MACN,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,IAAM,EAAA,QAAA;AAAA,MACN,KAAO,EAAA,QAAA;AAAA,MACP,EAAI,EAAA,QAAA;AAAA,MACJ,IAAM,EAAA,QAAA;AAAA,MACN,GAAK,EAAA,QAAA;AAAA,MACL,KAAO,EAAA,QAAA;AAAA,MACP,MAAQ,EAAA,QAAA;AAAA,MACR,KAAO,EAAA,QAAA;AAAA,MACP,IAAM,EAAA,QAAA;AAAA,MACN,KAAO,EAAA,QAAA;AAAA,MACP,GAAK,EAAA,QAAA;AAAA,MACL,GAAK,EAAA,QAAA;AAAA,MACL,EAAI,EAAA,QAAA;AAAA,MACJ,GAAK,EAAA,QAAA;AAAA,MACL,GAAK,EAAA,QAAA;AAAA,MACL,KAAO,EAAA,QAAA;AAAA,MACP,MAAQ,EAAA,QAAA;AAAA,MACR,GAAK,EAAA,QAAA;AAAA,MACL,IAAM,EAAA,QAAA;AAAA,MACN,KAAO,EAAA,QAAA;AAAA,MACP,EAAI,EAAA,QAAA;AAAA,MACJ,KAAO,EAAA,QAAA;AAAA,MACP,EAAI,EAAA,QAAA;AAAA,MACJ,EAAI,EAAA,QAAA;AAAA,MACJ,GAAK,EAAA,QAAA;AAAA,MACL,GAAK,EAAA,QAAA;AAAA,MACL,IAAM,EAAA,QAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,KAAO,EAAA,QAAA;AAAA,MACP,MAAQ,EAAA,QAAA;AAAA,MACR,IAAM,EAAA,QAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,KAAO,EAAA,QAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,MACP,MAAQ,EAAA,QAAA;AAAA,MACR,MAAQ,EAAA,QAAA;AAAA,MACR,IAAM,EAAA,QAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,GAAK,EAAA,QAAA;AAAA,MACL,MAAQ,EAAA,QAAA;AAAA,MACR,KAAO,EAAA,QAAA;AAAA,MACP,MAAQ,EAAA,QAAA;AAAA,MACR,KAAO,EAAA;AAAA,KACT;AAAA;AAAA,CAAA,CAAA;;;AC9PA,IAAA,aAAA,GAAA,UAAA,CAAA;AAAA,EAAA,wCAAA,CAAA,OAAA,EAAA,MAAA,EAAA;AAAA,IAAC,CAAA,SAAU,QAAQ,OAAS,EAAA;AAC1B,MAAA,OAAO,OAAY,KAAA,QAAA,IAAY,OAAO,MAAA,KAAW,WAAc,GAAA,OAAA,CAAQ,OAAO,CAAA,GAC9E,OAAO,MAAA,KAAW,UAAc,IAAA,MAAA,CAAO,MAAM,MAAO,CAAA,CAAC,SAAS,CAAA,EAAG,OAAO,CAAA,IACvE,MAAS,GAAA,OAAO,UAAe,KAAA,WAAA,GAAc,UAAa,GAAA,MAAA,IAAU,IAAM,EAAA,OAAA,CAAQ,MAAO,CAAA,KAAA,GAAQ,EAAE,CAAA,CAAA;AAAA,KACtG,EAAG,OAAO,EAAA,SAAUE,QAAS,EAAA;AAG3B,MAAA,IAAIC,yBAAwB,CAAC,GAAA,EAAK,CAAG,EAAA,GAAA,EAAK,GAAG,GAAK,EAAA,CAAA,EAAG,GAAK,EAAA,CAAA,EAAG,MAAM,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,KAAK,CAAG,EAAA,GAAA,EAAK,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,KAAK,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,CAAA,EAAG,GAAK,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,GAAK,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,GAAA,EAAK,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,GAAA,EAAK,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,GAAA,EAAK,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,GAAA,EAAK,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,GAAA,EAAK,GAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,IAAI,IAAM,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,OAAO,EAAI,EAAA,IAAA,EAAM,CAAG,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,EAAA,EAAI,GAAG,GAAK,EAAA,CAAA,EAAG,GAAK,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,CAAA,EAAG,KAAO,EAAA,CAAA,EAAG,MAAM,CAAG,EAAA,GAAA,EAAK,EAAI,EAAA,CAAA,EAAG,IAAI,GAAK,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAG,GAAK,EAAA,CAAA,EAAG,IAAM,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,IAAA,EAAM,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,GAAA,EAAK,CAAG,EAAA,GAAA,EAAK,GAAG,EAAI,EAAA,CAAA,EAAG,GAAK,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,GAAG,CAAG,EAAA,CAAA,EAAG,GAAK,EAAA,CAAA,EAAG,KAAK,CAAG,EAAA,CAAA,EAAG,GAAG,IAAM,EAAA,CAAA,EAAG,QAAQ,GAAG,CAAA;AAGzoC,MAAA,IAAIC,2BAA6B,GAAA,CAAC,CAAG,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,KAAK,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,IAAI,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,GAAA,EAAK,IAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,KAAK,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,IAAI,CAAG,EAAA,GAAA,EAAK,EAAI,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,GAAK,EAAA,CAAA,EAAG,EAAI,EAAA,GAAA,EAAK,KAAK,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,IAAA,EAAM,IAAI,EAAI,EAAA,IAAA,EAAM,EAAI,EAAA,CAAA,EAAG,IAAI,IAAM,EAAA,CAAA,EAAG,GAAK,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,GAAK,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,CAAG,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,IAAA,EAAM,GAAG,IAAM,EAAA,EAAA,EAAI,CAAG,EAAA,IAAA,EAAM,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,GAAA,EAAK,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,GAAA,EAAK,IAAM,EAAA,GAAA,EAAK,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,IAAA,EAAM,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,GAAK,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,IAAM,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,GAAA,EAAK,IAAI,EAAI,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,GAAA,EAAK,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,GAAA,EAAK,IAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,IAAA,EAAM,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,IAAM,EAAA,KAAA,EAAO,EAAI,EAAA,IAAA,EAAM,CAAG,EAAA,GAAA,EAAK,GAAG,IAAM,EAAA,EAAA,EAAI,IAAM,EAAA,EAAA,EAAI,KAAK,IAAM,EAAA,GAAA,EAAK,IAAM,EAAA,IAAA,EAAM,GAAG,IAAI,CAAA;AAGnpE,MAAA,IAAIC,wBAA0B,GAAA,2lFAAA;AAG9B,MAAA,IAAIC,6BAA+B,GAAA,8qIAAA;AASnC,MAAA,IAAIC,cAAgB,GAAA;AAAA,QAClB,CAAG,EAAA,qNAAA;AAAA,QACH,CAAG,EAAA,8CAAA;AAAA,QACH,CAAG,EAAA,MAAA;AAAA,QACH,MAAQ,EAAA,wEAAA;AAAA,QACR,UAAY,EAAA;AAAA,OACd;AAIA,MAAA,IAAIC,qBAAuB,GAAA,6KAAA;AAE3B,MAAA,IAAIC,WAAa,GAAA;AAAA,QACf,CAAGD,EAAAA,qBAAAA;AAAA,QACH,WAAWA,qBAAuB,GAAA,gBAAA;AAAA,QAClC,GAAGA,qBAAuB,GAAA;AAAA,OAC5B;AAEA,MAAA,IAAIE,0BAA4B,GAAA,iBAAA;AAIhC,MAAA,IAAIC,wBAA0B,GAAA,IAAI,MAAO,CAAA,GAAA,GAAML,gCAA+B,GAAG,CAAA;AACjF,MAAA,IAAIM,sBAAqB,IAAI,MAAA,CAAO,GAAMN,GAAAA,6BAAAA,GAA+BD,2BAA0B,GAAG,CAAA;AAKtG,MAASQ,SAAAA,cAAAA,CAAcC,OAAM,GAAK,EAAA;AAChC,QAAA,IAAI,GAAM,GAAA,KAAA;AACV,QAAA,KAAA,IAASC,KAAI,CAAGA,EAAAA,EAAAA,GAAI,GAAI,CAAA,MAAA,EAAQA,MAAK,CAAG,EAAA;AACtC,UAAA,GAAA,IAAO,IAAIA,EAAC,CAAA;AACZ,UAAA,IAAI,MAAMD,KAAM,EAAA;AAAE,YAAO,OAAA,KAAA;AAAA;AACzB,UAAO,GAAA,IAAA,GAAA,CAAIC,KAAI,CAAC,CAAA;AAChB,UAAA,IAAI,OAAOD,KAAM,EAAA;AAAE,YAAO,OAAA,IAAA;AAAA;AAAK;AAEjC,QAAO,OAAA,KAAA;AAAA;AAKT,MAASE,SAAAA,kBAAAA,CAAkBF,OAAM,MAAQ,EAAA;AACvC,QAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,UAAA,OAAOA,KAAS,KAAA,EAAA;AAAA;AACjC,QAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AACxB,QAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,UAAA,OAAOA,KAAS,KAAA,EAAA;AAAA;AACjC,QAAA,IAAIA,QAAO,GAAK,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AACzB,QAAA,IAAIA,SAAQ,KAAQ,EAAA;AAAE,UAAA,OAAOA,SAAQ,GAAQH,IAAAA,wBAAAA,CAAwB,KAAK,MAAO,CAAA,YAAA,CAAaG,KAAI,CAAC,CAAA;AAAA;AACnG,QAAA,IAAI,WAAW,KAAO,EAAA;AAAE,UAAO,OAAA,KAAA;AAAA;AAC/B,QAAOD,OAAAA,cAAAA,CAAcC,OAAMV,2BAA0B,CAAA;AAAA;AAKvD,MAASa,SAAAA,iBAAAA,CAAiBH,OAAM,MAAQ,EAAA;AACtC,QAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,UAAA,OAAOA,KAAS,KAAA,EAAA;AAAA;AACjC,QAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AACxB,QAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,UAAO,OAAA,KAAA;AAAA;AACxB,QAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AACxB,QAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,UAAA,OAAOA,KAAS,KAAA,EAAA;AAAA;AACjC,QAAA,IAAIA,QAAO,GAAK,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AACzB,QAAA,IAAIA,SAAQ,KAAQ,EAAA;AAAE,UAAA,OAAOA,SAAQ,GAAQF,IAAAA,mBAAAA,CAAmB,KAAK,MAAO,CAAA,YAAA,CAAaE,KAAI,CAAC,CAAA;AAAA;AAC9F,QAAA,IAAI,WAAW,KAAO,EAAA;AAAE,UAAO,OAAA,KAAA;AAAA;AAC/B,QAAA,OAAOD,eAAcC,KAAMV,EAAAA,2BAA0B,CAAKS,IAAAA,cAAAA,CAAcC,OAAMX,sBAAqB,CAAA;AAAA;AA0BrG,MAAA,IAAIe,UAAY,GAAA,SAASA,UAAU,CAAA,KAAA,EAAO,IAAM,EAAA;AAC9C,QAAK,IAAA,IAAA,KAAS,KAAS,CAAA,EAAA,IAAA,GAAO,EAAC;AAE/B,QAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AACb,QAAA,IAAA,CAAK,UAAU,IAAK,CAAA,OAAA;AACpB,QAAK,IAAA,CAAA,UAAA,GAAa,CAAC,CAAC,IAAK,CAAA,UAAA;AACzB,QAAK,IAAA,CAAA,UAAA,GAAa,CAAC,CAAC,IAAK,CAAA,UAAA;AACzB,QAAK,IAAA,CAAA,MAAA,GAAS,CAAC,CAAC,IAAK,CAAA,MAAA;AACrB,QAAK,IAAA,CAAA,QAAA,GAAW,CAAC,CAAC,IAAK,CAAA,QAAA;AACvB,QAAK,IAAA,CAAA,MAAA,GAAS,CAAC,CAAC,IAAK,CAAA,MAAA;AACrB,QAAK,IAAA,CAAA,OAAA,GAAU,CAAC,CAAC,IAAK,CAAA,OAAA;AACtB,QAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,KAAS,IAAA,IAAA;AAC3B,QAAA,IAAA,CAAK,aAAgB,GAAA,IAAA;AAAA,OACvB;AAEA,MAASC,SAAAA,MAAAA,CAAMnB,OAAM,IAAM,EAAA;AACzB,QAAO,OAAA,IAAIkB,WAAUlB,KAAM,EAAA,EAAC,YAAY,IAAM,EAAA,KAAA,EAAO,MAAK,CAAA;AAAA;AAE5D,MAAIoB,IAAAA,WAAAA,GAAa,EAAC,UAAY,EAAA,IAAA,IAAOC,WAAa,GAAA,EAAC,YAAY,IAAI,EAAA;AAInE,MAAA,IAAIC,YAAW,EAAC;AAGhB,MAASC,SAAAA,GAAAA,CAAGvB,OAAMF,QAAS,EAAA;AACzB,QAAA,IAAKA,QAAY,KAAA,KAAA,CAAA,EAASA,QAAAA,GAAU,EAAC;AAErC,QAAAA,SAAQ,OAAUE,GAAAA,KAAAA;AAClB,QAAA,OAAOsB,UAAStB,KAAI,CAAA,GAAI,IAAIkB,UAAAA,CAAUlB,OAAMF,QAAO,CAAA;AAAA;AAGrD,MAAA,IAAI0B,QAAU,GAAA;AAAA,QACZ,GAAK,EAAA,IAAIN,UAAU,CAAA,KAAA,EAAOG,WAAU,CAAA;AAAA,QACpC,MAAQ,EAAA,IAAIH,UAAU,CAAA,QAAA,EAAUG,WAAU,CAAA;AAAA,QAC1C,MAAQ,EAAA,IAAIH,UAAU,CAAA,QAAA,EAAUG,WAAU,CAAA;AAAA,QAC1C,IAAM,EAAA,IAAIH,UAAU,CAAA,MAAA,EAAQG,WAAU,CAAA;AAAA,QACtC,SAAW,EAAA,IAAIH,UAAU,CAAA,WAAA,EAAaG,WAAU,CAAA;AAAA,QAChD,GAAA,EAAK,IAAIH,UAAAA,CAAU,KAAK,CAAA;AAAA;AAAA,QAGxB,QAAA,EAAU,IAAIA,UAAU,CAAA,GAAA,EAAK,EAAC,UAAY,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA,QACjE,QAAA,EAAU,IAAIA,UAAAA,CAAU,GAAG,CAAA;AAAA,QAC3B,MAAA,EAAQ,IAAIA,UAAU,CAAA,GAAA,EAAK,EAAC,UAAY,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA,QAC/D,MAAA,EAAQ,IAAIA,UAAAA,CAAU,GAAG,CAAA;AAAA,QACzB,MAAA,EAAQ,IAAIA,UAAU,CAAA,GAAA,EAAK,EAAC,UAAY,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA,QAC/D,MAAA,EAAQ,IAAIA,UAAAA,CAAU,GAAG,CAAA;AAAA,QACzB,KAAO,EAAA,IAAIA,UAAU,CAAA,GAAA,EAAKE,WAAU,CAAA;AAAA,QACpC,IAAM,EAAA,IAAIF,UAAU,CAAA,GAAA,EAAKE,WAAU,CAAA;AAAA,QACnC,KAAO,EAAA,IAAIF,UAAU,CAAA,GAAA,EAAKE,WAAU,CAAA;AAAA,QACpC,GAAA,EAAK,IAAIF,UAAAA,CAAU,GAAG,CAAA;AAAA,QACtB,QAAU,EAAA,IAAIA,UAAU,CAAA,GAAA,EAAKE,WAAU,CAAA;AAAA,QACvC,WAAA,EAAa,IAAIF,UAAAA,CAAU,IAAI,CAAA;AAAA,QAC/B,KAAO,EAAA,IAAIA,UAAU,CAAA,IAAA,EAAME,WAAU,CAAA;AAAA,QACrC,QAAA,EAAU,IAAIF,UAAAA,CAAU,UAAU,CAAA;AAAA,QAClC,eAAA,EAAiB,IAAIA,UAAAA,CAAU,iBAAiB,CAAA;AAAA,QAChD,QAAU,EAAA,IAAIA,UAAU,CAAA,KAAA,EAAOE,WAAU,CAAA;AAAA,QACzC,SAAW,EAAA,IAAIF,UAAU,CAAA,GAAA,EAAKG,WAAU,CAAA;AAAA,QACxC,YAAA,EAAc,IAAIH,UAAU,CAAA,IAAA,EAAM,EAAC,UAAY,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAgBtE,EAAA,EAAI,IAAIA,UAAU,CAAA,GAAA,EAAK,EAAC,UAAY,EAAA,IAAA,EAAM,QAAU,EAAA,IAAA,EAAK,CAAA;AAAA,QACzD,MAAA,EAAQ,IAAIA,UAAU,CAAA,IAAA,EAAM,EAAC,UAAY,EAAA,IAAA,EAAM,QAAU,EAAA,IAAA,EAAK,CAAA;AAAA,QAC9D,MAAA,EAAQ,IAAIA,UAAAA,CAAU,OAAS,EAAA,EAAC,MAAQ,EAAA,IAAA,EAAM,OAAS,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA,QAC9E,MAAA,EAAQ,IAAIA,UAAAA,CAAU,KAAO,EAAA,EAAC,UAAY,EAAA,IAAA,EAAM,MAAQ,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA,QAC/E,SAAA,EAAWC,MAAM,CAAA,IAAA,EAAM,CAAC,CAAA;AAAA,QACxB,UAAA,EAAYA,MAAM,CAAA,IAAA,EAAM,CAAC,CAAA;AAAA,QACzB,SAAA,EAAWA,MAAM,CAAA,GAAA,EAAK,CAAC,CAAA;AAAA,QACvB,UAAA,EAAYA,MAAM,CAAA,GAAA,EAAK,CAAC,CAAA;AAAA,QACxB,UAAA,EAAYA,MAAM,CAAA,GAAA,EAAK,CAAC,CAAA;AAAA,QACxB,QAAA,EAAUA,MAAM,CAAA,eAAA,EAAiB,CAAC,CAAA;AAAA,QAClC,UAAA,EAAYA,MAAM,CAAA,WAAA,EAAa,CAAC,CAAA;AAAA,QAChC,QAAA,EAAUA,MAAM,CAAA,WAAA,EAAa,CAAC,CAAA;AAAA,QAC9B,OAAS,EAAA,IAAID,UAAU,CAAA,KAAA,EAAO,EAAC,UAAA,EAAY,IAAM,EAAA,KAAA,EAAO,CAAG,EAAA,MAAA,EAAQ,IAAM,EAAA,UAAA,EAAY,MAAK,CAAA;AAAA,QAC1F,MAAA,EAAQC,MAAM,CAAA,GAAA,EAAK,EAAE,CAAA;AAAA,QACrB,IAAA,EAAMA,MAAM,CAAA,GAAA,EAAK,EAAE,CAAA;AAAA,QACnB,KAAA,EAAOA,MAAM,CAAA,GAAA,EAAK,EAAE,CAAA;AAAA,QACpB,UAAU,IAAID,UAAAA,CAAU,MAAM,EAAC,UAAA,EAAY,MAAK,CAAA;AAAA,QAChD,QAAA,EAAUC,MAAM,CAAA,IAAA,EAAM,CAAC,CAAA;AAAA;AAAA,QAGvB,MAAA,EAAQI,IAAG,OAAO,CAAA;AAAA,QAClB,KAAA,EAAOA,GAAG,CAAA,MAAA,EAAQH,WAAU,CAAA;AAAA,QAC5B,MAAA,EAAQG,IAAG,OAAO,CAAA;AAAA,QAClB,SAAA,EAAWA,IAAG,UAAU,CAAA;AAAA,QACxB,SAAA,EAAWA,IAAG,UAAU,CAAA;AAAA,QACxB,QAAA,EAAUA,GAAG,CAAA,SAAA,EAAWH,WAAU,CAAA;AAAA,QAClC,GAAA,EAAKG,IAAG,IAAM,EAAA,EAAC,QAAQ,IAAM,EAAA,UAAA,EAAY,MAAK,CAAA;AAAA,QAC9C,KAAA,EAAOA,GAAG,CAAA,MAAA,EAAQH,WAAU,CAAA;AAAA,QAC5B,QAAA,EAAUG,IAAG,SAAS,CAAA;AAAA,QACtB,MAAMA,GAAG,CAAA,KAAA,EAAO,EAAC,MAAA,EAAQ,MAAK,CAAA;AAAA,QAC9B,SAAA,EAAWA,GAAG,CAAA,UAAA,EAAYF,WAAU,CAAA;AAAA,QACpC,GAAA,EAAKE,IAAG,IAAI,CAAA;AAAA,QACZ,OAAA,EAASA,GAAG,CAAA,QAAA,EAAUH,WAAU,CAAA;AAAA,QAChC,OAAA,EAASG,IAAG,QAAQ,CAAA;AAAA,QACpB,MAAA,EAAQA,GAAG,CAAA,OAAA,EAASH,WAAU,CAAA;AAAA,QAC9B,IAAA,EAAMG,IAAG,KAAK,CAAA;AAAA,QACd,IAAA,EAAMA,IAAG,KAAK,CAAA;AAAA,QACd,MAAA,EAAQA,IAAG,OAAO,CAAA;AAAA,QAClB,QAAQA,GAAG,CAAA,OAAA,EAAS,EAAC,MAAA,EAAQ,MAAK,CAAA;AAAA,QAClC,KAAA,EAAOA,IAAG,MAAM,CAAA;AAAA,QAChB,IAAA,EAAMA,IAAG,KAAO,EAAA,EAAC,YAAY,IAAM,EAAA,UAAA,EAAY,MAAK,CAAA;AAAA,QACpD,KAAA,EAAOA,GAAG,CAAA,MAAA,EAAQF,WAAU,CAAA;AAAA,QAC5B,MAAA,EAAQE,GAAG,CAAA,OAAA,EAASF,WAAU,CAAA;AAAA,QAC9B,MAAA,EAAQE,GAAG,CAAA,OAAA,EAASF,WAAU,CAAA;AAAA,QAC9B,QAAA,EAAUE,GAAG,CAAA,SAAA,EAAWH,WAAU,CAAA;AAAA,QAClC,OAAA,EAASG,IAAG,QAAQ,CAAA;AAAA,QACpB,OAAA,EAASA,GAAG,CAAA,QAAA,EAAUF,WAAU,CAAA;AAAA,QAChC,KAAA,EAAOE,GAAG,CAAA,MAAA,EAAQF,WAAU,CAAA;AAAA,QAC5B,KAAA,EAAOE,GAAG,CAAA,MAAA,EAAQF,WAAU,CAAA;AAAA,QAC5B,MAAA,EAAQE,GAAG,CAAA,OAAA,EAASF,WAAU,CAAA;AAAA,QAC9B,GAAA,EAAKE,IAAG,IAAM,EAAA,EAAC,YAAY,IAAM,EAAA,KAAA,EAAO,GAAE,CAAA;AAAA,QAC1C,WAAA,EAAaA,IAAG,YAAc,EAAA,EAAC,YAAY,IAAM,EAAA,KAAA,EAAO,GAAE,CAAA;AAAA,QAC1D,OAAA,EAASA,GAAG,CAAA,QAAA,EAAU,EAAC,UAAA,EAAY,MAAM,MAAQ,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA,QACxE,KAAA,EAAOA,GAAG,CAAA,MAAA,EAAQ,EAAC,UAAA,EAAY,MAAM,MAAQ,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA,QACpE,OAAA,EAASA,GAAG,CAAA,QAAA,EAAU,EAAC,UAAA,EAAY,MAAM,MAAQ,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK;AAAA,OAC1E;AAKA,MAAA,IAAIE,UAAY,GAAA,wBAAA;AAChB,MAAA,IAAIC,WAAa,GAAA,IAAI,MAAOD,CAAAA,UAAAA,CAAU,QAAQ,GAAG,CAAA;AAEjD,MAAA,SAASE,WAAUb,KAAM,EAAA;AACvB,QAAA,OAAOA,UAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,QAAUA,KAAS,KAAA,IAAA;AAAA;AAGnE,MAASc,SAAAA,cAAAA,CAAcd,KAAM,EAAA,IAAA,EAAM,GAAK,EAAA;AACtC,QAAK,IAAA,GAAA,KAAQ,KAAS,CAAA,EAAA,GAAA,GAAMA,KAAK,CAAA,MAAA;AAEjC,QAAA,KAAA,IAASC,EAAI,GAAA,IAAA,EAAMA,EAAI,GAAA,GAAA,EAAKA,EAAK,EAAA,EAAA;AAC/B,UAAI,IAAA,IAAA,GAAOD,KAAK,CAAA,UAAA,CAAWC,EAAC,CAAA;AAC5B,UAAIY,IAAAA,UAAAA,CAAU,IAAI,CAChB,EAAA;AAAE,YAAA,OAAOZ,EAAI,GAAA,GAAA,GAAM,CAAK,IAAA,IAAA,KAAS,EAAMD,IAAAA,KAAAA,CAAK,UAAWC,CAAAA,EAAAA,GAAI,CAAC,CAAA,KAAM,EAAKA,GAAAA,EAAAA,GAAI,IAAIA,EAAI,GAAA,CAAA;AAAA;AAAE;AAEzF,QAAO,OAAA,CAAA,CAAA;AAAA;AAGT,MAAA,IAAIc,mBAAqB,GAAA,+CAAA;AAEzB,MAAA,IAAIC,eAAiB,GAAA,+BAAA;AAErB,MAAA,IAAIC,OAAM,MAAO,CAAA,SAAA;AACjB,MAAA,IAAIC,kBAAiBD,IAAI,CAAA,cAAA;AACzB,MAAA,IAAIE,YAAWF,IAAI,CAAA,QAAA;AAEnB,MAAA,IAAIrC,OAAS,GAAA,MAAA,CAAO,MAAW,IAAA,SAAU,KAAK,QAAU,EAAA;AAAE,QACxDsC,OAAAA,eAAAA,CAAe,IAAK,CAAA,GAAA,EAAK,QAAQ,CAAA;AAAA,OAChC;AAEH,MAAA,IAAIrC,QAAU,GAAA,KAAA,CAAM,OAAY,IAAA,SAAU,GAAK,EAAA;AAAE,QAC/CsC,OAAAA,SAAAA,CAAS,IAAK,CAAA,GAAG,CAAM,KAAA,gBAAA;AAAA,OACtB;AAEH,MAAIC,IAAAA,YAAAA,mBAAqB,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA;AAEpC,MAAA,SAASC,aAAY,KAAO,EAAA;AAC1B,QAAA,OAAOD,YAAY,CAAA,KAAK,CAAMA,KAAAA,YAAAA,CAAY,KAAK,CAAI,GAAA,IAAI,MAAO,CAAA,MAAA,GAAS,KAAM,CAAA,OAAA,CAAQ,IAAM,EAAA,GAAG,IAAI,IAAI,CAAA,CAAA;AAAA;AAGxG,MAAA,SAASE,mBAAkBtB,KAAM,EAAA;AAE/B,QAAA,IAAIA,SAAQ,KAAQ,EAAA;AAAE,UAAO,OAAA,MAAA,CAAO,aAAaA,KAAI,CAAA;AAAA;AACrD,QAAAA,KAAQ,IAAA,KAAA;AACR,QAAA,OAAO,OAAO,YAAcA,CAAAA,CAAAA,KAAAA,IAAQ,MAAM,KAASA,EAAAA,CAAAA,KAAAA,GAAO,QAAQ,KAAM,CAAA;AAAA;AAG1E,MAAA,IAAIuB,cAAgB,GAAA,8EAAA;AAKpB,MAAA,IAAIC,SAAW,GAAA,SAASA,SAAS,CAAA,IAAA,EAAM,GAAK,EAAA;AAC1C,QAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AACZ,QAAA,IAAA,CAAK,MAAS,GAAA,GAAA;AAAA,OAChB;AAEA,MAAAA,SAAS,CAAA,SAAA,CAAU,MAAS,GAAA,SAASC,QAAQ,CAAG,EAAA;AAC9C,QAAA,OAAO,IAAID,SAAS,CAAA,IAAA,CAAK,IAAM,EAAA,IAAA,CAAK,SAAS,CAAC,CAAA;AAAA,OAChD;AAEA,MAAA,IAAIE,eAAiB,GAAA,SAASA,eAAe,CAAA,CAAA,EAAGC,QAAO,GAAK,EAAA;AAC1D,QAAA,IAAA,CAAK,KAAQA,GAAAA,MAAAA;AACb,QAAA,IAAA,CAAK,GAAM,GAAA,GAAA;AACX,QAAI,IAAA,CAAA,CAAE,eAAe,IAAM,EAAA;AAAE,UAAA,IAAA,CAAK,SAAS,CAAE,CAAA,UAAA;AAAA;AAAY,OAC3D;AAQA,MAASC,SAAAA,YAAAA,CAAY,OAAOH,OAAQ,EAAA;AAClC,QAAS,KAAA,IAAA,IAAA,GAAO,CAAG,EAAA,GAAA,GAAM,CAAK,MAAA;AAC5B,UAAA,IAAI,SAAYX,GAAAA,cAAAA,CAAc,KAAO,EAAA,GAAA,EAAKW,OAAM,CAAA;AAChD,UAAA,IAAI,YAAY,CAAG,EAAA;AAAE,YAAA,OAAO,IAAID,SAAAA,CAAS,IAAMC,EAAAA,OAAAA,GAAS,GAAG,CAAA;AAAA;AAC3D,UAAE,EAAA,IAAA;AACF,UAAM,GAAA,GAAA,SAAA;AAAA;AACR;AAMF,MAAA,IAAII,eAAiB,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOnB,WAAa,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA,QAIb,UAAY,EAAA,QAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMZ,mBAAqB,EAAA,IAAA;AAAA;AAAA;AAAA,QAGrB,eAAiB,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKjB,aAAe,EAAA,IAAA;AAAA;AAAA;AAAA,QAGf,0BAA4B,EAAA,KAAA;AAAA;AAAA;AAAA;AAAA,QAI5B,2BAA6B,EAAA,KAAA;AAAA;AAAA;AAAA;AAAA,QAI7B,yBAA2B,EAAA,IAAA;AAAA;AAAA;AAAA,QAG3B,uBAAyB,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA,QAIzB,aAAe,EAAA,KAAA;AAAA;AAAA;AAAA;AAAA,QAIf,kBAAoB,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKpB,SAAW,EAAA,KAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMX,OAAS,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAaT,SAAW,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASX,MAAQ,EAAA,KAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMR,OAAS,EAAA,IAAA;AAAA;AAAA;AAAA,QAGT,UAAY,EAAA,IAAA;AAAA;AAAA;AAAA,QAGZ,gBAAkB,EAAA,IAAA;AAAA;AAAA;AAAA,QAGlB,cAAgB,EAAA;AAAA,OAClB;AAIA,MAAA,IAAIC,uBAAyB,GAAA,KAAA;AAE7B,MAAA,SAASC,YAAW,IAAM,EAAA;AACxB,QAAA,IAAI/C,WAAU,EAAC;AAEf,QAAA,KAAA,IAAS,OAAO6C,eACd,EAAA;AAAE,UAAA7C,QAAQ,CAAA,GAAG,CAAI,GAAA,IAAA,IAAQJ,OAAO,CAAA,IAAA,EAAM,GAAG,CAAA,GAAI,IAAK,CAAA,GAAG,CAAIiD,GAAAA,eAAAA,CAAe,GAAG,CAAA;AAAA;AAE7E,QAAI7C,IAAAA,QAAAA,CAAQ,gBAAgB,QAAU,EAAA;AACpC,UAAAA,SAAQ,WAAc,GAAA,GAAA;AAAA,SACxB,MAAA,IAAWA,QAAQ,CAAA,WAAA,IAAe,IAAM,EAAA;AACtC,UAAA,IAAI,CAAC8C,uBAA0B,IAAA,OAAO,OAAY,KAAA,QAAA,IAAY,QAAQ,IAAM,EAAA;AAC1E,YAAAA,uBAAyB,GAAA,IAAA;AACzB,YAAA,OAAA,CAAQ,KAAK,oHAAoH,CAAA;AAAA;AAEnI,UAAA9C,SAAQ,WAAc,GAAA,EAAA;AAAA,SACxB,MAAA,IAAWA,QAAQ,CAAA,WAAA,IAAe,IAAM,EAAA;AACtC,UAAAA,SAAQ,WAAe,IAAA,IAAA;AAAA;AAGzB,QAAIA,IAAAA,QAAAA,CAAQ,iBAAiB,IAC3B,EAAA;AAAE,UAAAA,QAAAA,CAAQ,aAAgBA,GAAAA,QAAAA,CAAQ,WAAc,GAAA,CAAA;AAAA;AAElD,QAAA,IAAI,CAAC,IAAA,IAAQ,IAAK,CAAA,aAAA,IAAiB,IACjC,EAAA;AAAE,UAAAA,QAAAA,CAAQ,aAAgBA,GAAAA,QAAAA,CAAQ,WAAe,IAAA,EAAA;AAAA;AAEnD,QAAIH,IAAAA,QAAAA,CAAQG,QAAQ,CAAA,OAAO,CAAG,EAAA;AAC5B,UAAA,IAAI,SAASA,QAAQ,CAAA,OAAA;AACrB,UAAAA,QAAAA,CAAQ,OAAU,GAAA,SAAU,KAAO,EAAA;AAAE,YAAO,OAAA,MAAA,CAAO,KAAK,KAAK,CAAA;AAAA,WAAG;AAAA;AAElE,QAAIH,IAAAA,QAAAA,CAAQG,QAAQ,CAAA,SAAS,CAC3B,EAAA;AAAE,UAAAA,QAAQ,CAAA,SAAA,GAAYgD,YAAYhD,CAAAA,QAAAA,EAASA,SAAQ,SAAS,CAAA;AAAA;AAE9D,QAAOA,OAAAA,QAAAA;AAAA;AAGT,MAASgD,SAAAA,YAAAA,CAAYhD,UAAS,KAAO,EAAA;AACnC,QAAA,OAAO,SAAS,KAAOiD,EAAAA,KAAAA,EAAMN,MAAO,EAAA,GAAA,EAAK,UAAU,MAAQ,EAAA;AACzD,UAAA,IAAI,OAAU,GAAA;AAAA,YACZ,IAAA,EAAM,QAAQ,OAAU,GAAA,MAAA;AAAA,YACxB,KAAOM,EAAAA,KAAAA;AAAA,YACP,KAAON,EAAAA,MAAAA;AAAA,YACP;AAAA,WACF;AACA,UAAA,IAAI3C,SAAQ,SACV,EAAA;AAAE,YAAA,OAAA,CAAQ,GAAM,GAAA,IAAI0C,eAAe,CAAA,IAAA,EAAM,UAAU,MAAM,CAAA;AAAA;AAC3D,UAAA,IAAI1C,SAAQ,MACV,EAAA;AAAE,YAAQ,OAAA,CAAA,KAAA,GAAQ,CAAC2C,MAAAA,EAAO,GAAG,CAAA;AAAA;AAC/B,UAAA,KAAA,CAAM,KAAK,OAAO,CAAA;AAAA,SACpB;AAAA;AAIF,MACIO,IAAAA,UAAAA,GAAY,GACZC,eAAiB,GAAA,CAAA,EACjBC,eAAc,CACdC,EAAAA,gBAAAA,GAAkB,GAClBC,YAAc,GAAA,EAAA,EACdC,sBAAqB,EACrBC,EAAAA,YAAAA,GAAc,IACdC,mBAAqB,GAAA,GAAA,EACrBC,4BAA2B,GAC3BC,EAAAA,UAAAA,GAAYT,aAAYC,eAAiBO,GAAAA,yBAAAA;AAE7C,MAASE,SAAAA,cAAAA,CAAc,OAAO,SAAW,EAAA;AACvC,QAAA,OAAOT,eAAkB,IAAA,KAAA,GAAQC,YAAc,GAAA,CAAA,CAAA,IAAM,YAAYC,gBAAkB,GAAA,CAAA,CAAA;AAAA;AAIrF,MACIQ,IAAAA,UAAAA,GAAY,CACZC,EAAAA,SAAAA,GAAW,CACXC,EAAAA,aAAAA,GAAe,GACfC,cAAgB,GAAA,CAAA,EAChBC,kBAAoB,GAAA,CAAA,EACpBC,aAAe,GAAA,CAAA;AAEnB,MAAA,IAAIC,OAAS,GAAA,SAASA,OAAOnE,CAAAA,QAAAA,EAAS,OAAO,QAAU,EAAA;AACrD,QAAK,IAAA,CAAA,OAAA,GAAUA,QAAU+C,GAAAA,WAAAA,CAAW/C,QAAO,CAAA;AAC3C,QAAA,IAAA,CAAK,aAAaA,QAAQ,CAAA,UAAA;AAC1B,QAAA,IAAA,CAAK,QAAWqC,GAAAA,YAAAA,CAAY1B,WAAWX,CAAAA,QAAAA,CAAQ,WAAe,IAAA,CAAA,GAAI,CAAIA,GAAAA,QAAAA,CAAQ,UAAe,KAAA,QAAA,GAAW,SAAY,GAAA,CAAC,CAAC,CAAA;AACtH,QAAA,IAAI,QAAW,GAAA,EAAA;AACf,QAAIA,IAAAA,QAAAA,CAAQ,kBAAkB,IAAM,EAAA;AAClC,UAAWS,QAAAA,GAAAA,cAAAA,CAAcT,SAAQ,WAAe,IAAA,CAAA,GAAI,IAAIA,QAAQ,CAAA,WAAA,KAAgB,CAAI,GAAA,CAAA,GAAI,CAAC,CAAA;AACzF,UAAIA,IAAAA,QAAAA,CAAQ,eAAe,QAAU,EAAA;AAAE,YAAY,QAAA,IAAA,QAAA;AAAA;AAAU;AAE/D,QAAK,IAAA,CAAA,aAAA,GAAgBqC,aAAY,QAAQ,CAAA;AACzC,QAAA,IAAI,cAAkB,GAAA,CAAA,QAAA,GAAW,QAAW,GAAA,GAAA,GAAM,MAAM5B,cAAc,CAAA,MAAA;AACtE,QAAK,IAAA,CAAA,mBAAA,GAAsB4B,aAAY,cAAc,CAAA;AACrD,QAAA,IAAA,CAAK,uBAA0BA,GAAAA,YAAAA,CAAY,cAAiB,GAAA,GAAA,GAAM5B,eAAc,UAAU,CAAA;AAC1F,QAAK,IAAA,CAAA,KAAA,GAAQ,OAAO,KAAK,CAAA;AAKzB,QAAA,IAAA,CAAK,WAAc,GAAA,KAAA;AAKnB,QAAA,IAAI,QAAU,EAAA;AACZ,UAAA,IAAA,CAAK,GAAM,GAAA,QAAA;AACX,UAAA,IAAA,CAAK,YAAY,IAAK,CAAA,KAAA,CAAM,YAAY,IAAM,EAAA,QAAA,GAAW,CAAC,CAAI,GAAA,CAAA;AAC9D,UAAK,IAAA,CAAA,OAAA,GAAU,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,CAAA,EAAG,KAAK,SAAS,CAAA,CAAE,KAAMkB,CAAAA,UAAS,CAAE,CAAA,MAAA;AAAA,SAC/D,MAAA;AACL,UAAK,IAAA,CAAA,GAAA,GAAM,KAAK,SAAY,GAAA,CAAA;AAC5B,UAAA,IAAA,CAAK,OAAU,GAAA,CAAA;AAAA;AAKjB,QAAA,IAAA,CAAK,OAAOD,QAAQ,CAAA,GAAA;AAEpB,QAAA,IAAA,CAAK,KAAQ,GAAA,IAAA;AAEb,QAAK,IAAA,CAAA,KAAA,GAAQ,IAAK,CAAA,GAAA,GAAM,IAAK,CAAA,GAAA;AAG7B,QAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAK,WAAY,EAAA;AAG/C,QAAK,IAAA,CAAA,aAAA,GAAgB,KAAK,eAAkB,GAAA,IAAA;AAC5C,QAAK,IAAA,CAAA,YAAA,GAAe,IAAK,CAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAK3C,QAAK,IAAA,CAAA,OAAA,GAAU,KAAK,cAAe,EAAA;AACnC,QAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AAGnB,QAAK,IAAA,CAAA,QAAA,GAAW1B,SAAQ,UAAe,KAAA,QAAA;AACvC,QAAA,IAAA,CAAK,SAAS,IAAK,CAAA,QAAA,IAAY,IAAK,CAAA,eAAA,CAAgB,KAAK,GAAG,CAAA;AAG5D,QAAA,IAAA,CAAK,gBAAmB,GAAA,CAAA,CAAA;AACxB,QAAA,IAAA,CAAK,wBAA2B,GAAA,KAAA;AAGhC,QAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAK,aAAgB,GAAA,CAAA;AAErD,QAAA,IAAA,CAAK,SAAS,EAAC;AAEf,QAAK,IAAA,CAAA,gBAAA,mBAA0B,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA;AAG1C,QAAI,IAAA,IAAA,CAAK,GAAQ,KAAA,CAAA,IAAKA,QAAQ,CAAA,aAAA,IAAiB,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,CAAA,EAAG,CAAC,CAAA,KAAM,IACxE,EAAA;AAAE,UAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA;AAAA;AAG1B,QAAA,IAAA,CAAK,aAAa,EAAC;AACnB,QAAA,IAAA,CAAK,WAAWkD,UAAS,CAAA;AAGzB,QAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AAKnB,QAAA,IAAA,CAAK,mBAAmB,EAAC;AAAA,OAC3B;AAEA,MAAIkB,IAAAA,mBAAAA,GAAqB,EAAE,UAAY,EAAA,EAAE,cAAc,IAAK,EAAA,EAAE,aAAa,EAAE,YAAA,EAAc,MAAO,EAAA,OAAA,EAAS,EAAE,YAAc,EAAA,IAAA,IAAO,QAAU,EAAA,EAAE,YAAc,EAAA,IAAA,EAAO,EAAA,UAAA,EAAY,EAAE,YAAc,EAAA,IAAA,IAAO,gBAAkB,EAAA,EAAE,cAAc,IAAK,EAAA,EAAE,qBAAqB,EAAE,YAAA,EAAc,MAAO,EAAA,iBAAA,EAAmB,EAAE,YAAc,EAAA,IAAA,IAAO,kBAAoB,EAAA,EAAE,YAAc,EAAA,IAAA,EAAO,EAAA;AAEhX,MAAAD,OAAO,CAAA,SAAA,CAAU,KAAQ,GAAA,SAASE,MAAS,GAAA;AACzC,QAAA,IAAIC,KAAO,GAAA,IAAA,CAAK,OAAQ,CAAA,OAAA,IAAW,KAAK,SAAU,EAAA;AAClD,QAAA,IAAA,CAAK,SAAU,EAAA;AACf,QAAO,OAAA,IAAA,CAAK,cAAcA,KAAI,CAAA;AAAA,OAChC;AAEA,MAAAF,mBAAAA,CAAmB,UAAW,CAAA,GAAA,GAAM,WAAY;AAAE,QAAA,OAAA,CAAQ,IAAK,CAAA,eAAA,EAAkB,CAAA,KAAA,GAAQjB,eAAkB,IAAA,CAAA;AAAA,OAAE;AAE7G,MAAAiB,mBAAAA,CAAmB,WAAY,CAAA,GAAA,GAAM,WAAY;AAAE,QAAQ,OAAA,CAAA,IAAA,CAAK,iBAAkB,CAAA,KAAA,GAAQf,oBAAmB,CAAK,IAAA,CAAC,IAAK,CAAA,eAAA,EAAkB,CAAA,gBAAA;AAAA,OAAiB;AAE3J,MAAAe,mBAAAA,CAAmB,OAAQ,CAAA,GAAA,GAAM,WAAY;AAAE,QAAQ,OAAA,CAAA,IAAA,CAAK,iBAAkB,CAAA,KAAA,GAAQhB,gBAAe,CAAK,IAAA,CAAC,IAAK,CAAA,eAAA,EAAkB,CAAA,gBAAA;AAAA,OAAiB;AAEnJ,MAAAgB,mBAAAA,CAAmB,QAAS,CAAA,GAAA,GAAM,WAAY;AAC5C,QAAA,KAAA,IAASnD,KAAI,IAAK,CAAA,UAAA,CAAW,SAAS,CAAGA,EAAAA,EAAAA,IAAK,GAAGA,EAAK,EAAA,EAAA;AACpD,UAAI,IAAA,KAAA,GAAQ,IAAK,CAAA,UAAA,CAAWA,EAAC,CAAA;AAC7B,UAAA,IAAI,KAAM,CAAA,gBAAA,IAAoB,KAAM,CAAA,KAAA,GAAQyC,yBAA0B,EAAA;AAAE,YAAO,OAAA,KAAA;AAAA;AAC/E,UAAI,IAAA,KAAA,CAAM,QAAQP,eAAgB,EAAA;AAAE,YAAQ,OAAA,CAAA,KAAA,CAAM,QAAQC,YAAe,IAAA,CAAA;AAAA;AAAE;AAE7E,QAAA,OAAQ,KAAK,QAAY,IAAA,IAAA,CAAK,QAAQ,WAAe,IAAA,EAAA,IAAO,KAAK,OAAQ,CAAA,yBAAA;AAAA,OAC3E;AAEA,MAAAgB,mBAAAA,CAAmB,UAAW,CAAA,GAAA,GAAM,WAAY;AAC9C,QAAInC,IAAAA,IAAAA,GAAM,KAAK,gBAAiB,EAAA;AAC9B,QAAA,IAAI,QAAQA,IAAI,CAAA,KAAA;AAChB,QAAA,IAAI,mBAAmBA,IAAI,CAAA,gBAAA;AAC7B,QAAA,OAAA,CAAQ,KAAQuB,GAAAA,YAAAA,IAAe,CAAK,IAAA,gBAAA,IAAoB,KAAK,OAAQ,CAAA,uBAAA;AAAA,OACvE;AAEA,MAAAY,mBAAAA,CAAmB,gBAAiB,CAAA,GAAA,GAAM,WAAY;AAAE,QAAA,OAAA,CAAQ,IAAK,CAAA,gBAAA,EAAmB,CAAA,KAAA,GAAQX,mBAAsB,IAAA,CAAA;AAAA,OAAE;AAExH,MAAAW,mBAAAA,CAAmB,mBAAoB,CAAA,GAAA,GAAM,WAAY;AAAE,QAAA,OAAO,IAAK,CAAA,0BAAA,CAA2B,IAAK,CAAA,YAAA,EAAc,CAAA;AAAA,OAAE;AAEvH,MAAAA,mBAAAA,CAAmB,iBAAkB,CAAA,GAAA,GAAM,WAAY;AACrD,QAAInC,IAAAA,IAAAA,GAAM,KAAK,gBAAiB,EAAA;AAC9B,QAAA,IAAI,QAAQA,IAAI,CAAA,KAAA;AAChB,QAAA,IAAI,mBAAmBA,IAAI,CAAA,gBAAA;AAC7B,QAAQ,OAAA,CAAA,KAAA,IAASkB,eAAiBO,GAAAA,yBAAAA,CAAAA,IAA6B,CAAK,IAAA,gBAAA;AAAA,OACtE;AAEA,MAAAU,mBAAAA,CAAmB,kBAAmB,CAAA,GAAA,GAAM,WAAY;AACtD,QAAA,OAAA,CAAQ,IAAK,CAAA,eAAA,EAAkB,CAAA,KAAA,GAAQV,yBAA4B,IAAA,CAAA;AAAA,OACrE;AAEA,MAAAS,OAAAA,CAAO,MAAS,GAAA,SAAShE,OAAU,GAAA;AAC/B,QAAA,IAAI,OAAU,GAAA,EAAI,EAAA,GAAA,GAAM,SAAU,CAAA,MAAA;AAClC,QAAA,OAAQ,GAAQ,EAAA,EAAA,OAAA,CAAS,GAAI,CAAA,GAAI,UAAW,GAAI,CAAA;AAElD,QAAA,IAAI,GAAM,GAAA,IAAA;AACV,QAAA,KAAA,IAASc,EAAI,GAAA,CAAA,EAAGA,EAAI,GAAA,OAAA,CAAQ,QAAQA,EAAK,EAAA,EAAA;AAAE,UAAM,GAAA,GAAA,OAAA,CAAQA,EAAC,CAAA,CAAE,GAAG,CAAA;AAAA;AAC/D,QAAO,OAAA,GAAA;AAAA,OACT;AAEA,MAAAkD,OAAO,CAAA,KAAA,GAAQ,SAASE,MAAAA,CAAO,OAAOrE,QAAS,EAAA;AAC7C,QAAA,OAAO,IAAI,IAAA,CAAKA,QAAS,EAAA,KAAK,EAAE,KAAM,EAAA;AAAA,OACxC;AAEA,MAAAmE,QAAO,iBAAoB,GAAA,SAASI,kBAAmB,CAAA,KAAA,EAAO,KAAKvE,QAAS,EAAA;AAC1E,QAAA,IAAI,MAAS,GAAA,IAAI,IAAKA,CAAAA,QAAAA,EAAS,OAAO,GAAG,CAAA;AACzC,QAAA,MAAA,CAAO,SAAU,EAAA;AACjB,QAAA,OAAO,OAAO,eAAgB,EAAA;AAAA,OAChC;AAEA,MAAAmE,OAAO,CAAA,SAAA,GAAY,SAASK,UAAAA,CAAW,OAAOxE,QAAS,EAAA;AACrD,QAAO,OAAA,IAAI,IAAKA,CAAAA,QAAAA,EAAS,KAAK,CAAA;AAAA,OAChC;AAEA,MAAO,MAAA,CAAA,gBAAA,CAAkBmE,OAAO,CAAA,SAAA,EAAWC,mBAAmB,CAAA;AAE9D,MAAA,IAAIK,QAAON,OAAO,CAAA,SAAA;AAIlB,MAAA,IAAIO,QAAU,GAAA,oDAAA;AACd,MAAAD,KAAAA,CAAK,eAAkB,GAAA,SAAS9B,MAAO,EAAA;AACrC,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,GAAc,CAAG,EAAA;AAAE,UAAO,OAAA,KAAA;AAAA;AAC3C,QAAS,WAAA;AAEP,UAAAX,gBAAe,SAAYW,GAAAA,MAAAA;AAC3B,UAAAA,UAASX,eAAe,CAAA,IAAA,CAAK,KAAK,KAAK,CAAA,CAAE,CAAC,CAAE,CAAA,MAAA;AAC5C,UAAA,IAAI,QAAQ0C,QAAQ,CAAA,IAAA,CAAK,KAAK,KAAM,CAAA,KAAA,CAAM/B,MAAK,CAAC,CAAA;AAChD,UAAA,IAAI,CAAC,KAAO,EAAA;AAAE,YAAO,OAAA,KAAA;AAAA;AACrB,UAAA,IAAA,CAAK,MAAM,CAAC,CAAA,IAAK,KAAM,CAAA,CAAC,OAAO,YAAc,EAAA;AAC3C,YAAAX,eAAe,CAAA,SAAA,GAAYW,MAAQ,GAAA,KAAA,CAAM,CAAC,CAAE,CAAA,MAAA;AAC5C,YAAI,IAAA,UAAA,GAAaX,eAAe,CAAA,IAAA,CAAK,IAAK,CAAA,KAAK,CAAG,EAAA,GAAA,GAAM,UAAW,CAAA,KAAA,GAAQ,UAAW,CAAA,CAAC,CAAE,CAAA,MAAA;AACzF,YAAA,IAAI,IAAO,GAAA,IAAA,CAAK,KAAM,CAAA,MAAA,CAAO,GAAG,CAAA;AAChC,YAAO,OAAA,IAAA,KAAS,OAAO,IAAS,KAAA,GAAA,IAC7BL,WAAU,IAAK,CAAA,UAAA,CAAW,CAAC,CAAC,CAC5B,IAAA,EAAE,sBAAsB,IAAK,CAAA,IAAI,KAAK,IAAS,KAAA,GAAA,IAAO,KAAK,KAAM,CAAA,MAAA,CAAO,GAAM,GAAA,CAAC,CAAM,KAAA,GAAA,CAAA;AAAA;AAE1F,UAAAgB,MAAAA,IAAS,KAAM,CAAA,CAAC,CAAE,CAAA,MAAA;AAGlB,UAAAX,gBAAe,SAAYW,GAAAA,MAAAA;AAC3B,UAAAA,UAASX,eAAe,CAAA,IAAA,CAAK,KAAK,KAAK,CAAA,CAAE,CAAC,CAAE,CAAA,MAAA;AAC5C,UAAA,IAAI,IAAK,CAAA,KAAA,CAAMW,MAAK,CAAA,KAAM,GACxB,EAAA;AAAE,YAAAA,MAAAA,EAAAA;AAAA;AAAS;AACf,OACF;AAKA,MAAA8B,KAAAA,CAAK,GAAM,GAAA,SAAS,IAAM,EAAA;AACxB,QAAI,IAAA,IAAA,CAAK,SAAS,IAAM,EAAA;AACtB,UAAA,IAAA,CAAK,IAAK,EAAA;AACV,UAAO,OAAA,IAAA;AAAA,SACF,MAAA;AACL,UAAO,OAAA,KAAA;AAAA;AACT,OACF;AAIA,MAAAA,KAAAA,CAAK,YAAe,GAAA,SAASvE,KAAM,EAAA;AACjC,QAAO,OAAA,IAAA,CAAK,SAASwB,QAAQ,CAAA,IAAA,IAAQ,KAAK,KAAUxB,KAAAA,KAAAA,IAAQ,CAAC,IAAK,CAAA,WAAA;AAAA,OACpE;AAIA,MAAAuE,KAAAA,CAAK,aAAgB,GAAA,SAASvE,KAAM,EAAA;AAClC,QAAA,IAAI,CAAC,IAAA,CAAK,YAAaA,CAAAA,KAAI,CAAG,EAAA;AAAE,UAAO,OAAA,KAAA;AAAA;AACvC,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAO,OAAA,IAAA;AAAA,OACT;AAIA,MAAAuE,KAAAA,CAAK,gBAAmB,GAAA,SAASvE,KAAM,EAAA;AACrC,QAAA,IAAI,CAAC,IAAA,CAAK,aAAcA,CAAAA,KAAI,CAAG,EAAA;AAAE,UAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAAG,OACtD;AAIA,MAAAuE,KAAAA,CAAK,qBAAqB,WAAW;AACnC,QAAA,OAAO,KAAK,IAAS/C,KAAAA,QAAAA,CAAQ,GAC3B,IAAA,IAAA,CAAK,SAASA,QAAQ,CAAA,MAAA,IACtBC,UAAU,CAAA,IAAA,CAAK,KAAK,KAAM,CAAA,KAAA,CAAM,KAAK,UAAY,EAAA,IAAA,CAAK,KAAK,CAAC,CAAA;AAAA,OAChE;AAEA,MAAA8C,KAAAA,CAAK,kBAAkB,WAAW;AAChC,QAAI,IAAA,IAAA,CAAK,oBAAsB,EAAA;AAC7B,UAAI,IAAA,IAAA,CAAK,QAAQ,mBACf,EAAA;AAAE,YAAA,IAAA,CAAK,OAAQ,CAAA,mBAAA,CAAoB,IAAK,CAAA,UAAA,EAAY,KAAK,aAAa,CAAA;AAAA;AACxE,UAAO,OAAA,IAAA;AAAA;AACT,OACF;AAKA,MAAAA,KAAAA,CAAK,YAAY,WAAW;AAC1B,QAAI,IAAA,CAAC,KAAK,GAAI/C,CAAAA,QAAAA,CAAQ,IAAI,CAAK,IAAA,CAAC,IAAK,CAAA,eAAA,EAAmB,EAAA;AAAE,UAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAAG,OAC/E;AAEA,MAAA+C,KAAK,CAAA,kBAAA,GAAqB,SAAS,OAAA,EAAS,OAAS,EAAA;AACnD,QAAI,IAAA,IAAA,CAAK,SAAS,OAAS,EAAA;AACzB,UAAI,IAAA,IAAA,CAAK,QAAQ,eACf,EAAA;AAAE,YAAA,IAAA,CAAK,OAAQ,CAAA,eAAA,CAAgB,IAAK,CAAA,YAAA,EAAc,KAAK,eAAe,CAAA;AAAA;AACxE,UAAA,IAAI,CAAC,OACH,EAAA;AAAE,YAAA,IAAA,CAAK,IAAK,EAAA;AAAA;AACd,UAAO,OAAA,IAAA;AAAA;AACT,OACF;AAKA,MAAAA,KAAAA,CAAK,MAAS,GAAA,SAAS,IAAM,EAAA;AAC3B,QAAA,IAAA,CAAK,GAAI,CAAA,IAAI,CAAK,IAAA,IAAA,CAAK,UAAW,EAAA;AAAA,OACpC;AAIA,MAAAA,KAAAA,CAAK,UAAa,GAAA,SAAS,GAAK,EAAA;AAC9B,QAAA,IAAA,CAAK,MAAM,GAAO,IAAA,IAAA,GAAO,GAAM,GAAA,IAAA,CAAK,OAAO,kBAAkB,CAAA;AAAA,OAC/D;AAEA,MAAIE,IAAAA,oBAAAA,GAAsB,SAASA,oBAAsB,GAAA;AACvD,QAAK,IAAA,CAAA,eAAA,GACL,KAAK,aACL,GAAA,IAAA,CAAK,sBACL,IAAK,CAAA,iBAAA,GACL,KAAK,WACH,GAAA,CAAA,CAAA;AAAA,OACJ;AAEA,MAAAF,KAAK,CAAA,kBAAA,GAAqB,SAAS,sBAAA,EAAwB,QAAU,EAAA;AACnE,QAAA,IAAI,CAAC,sBAAwB,EAAA;AAAE,UAAA;AAAA;AAC/B,QAAI,IAAA,sBAAA,CAAuB,gBAAgB,CACzC,CAAA,EAAA;AAAE,UAAK,IAAA,CAAA,gBAAA,CAAiB,sBAAuB,CAAA,aAAA,EAAe,+CAA+C,CAAA;AAAA;AAC/G,QAAA,IAAI,MAAS,GAAA,QAAA,GAAW,sBAAuB,CAAA,mBAAA,GAAsB,sBAAuB,CAAA,iBAAA;AAC5F,QAAA,IAAI,SAAS,CAAI,CAAA,EAAA;AAAE,UAAA,IAAA,CAAK,gBAAiB,CAAA,MAAA,EAAQ,QAAW,GAAA,qBAAA,GAAwB,uBAAuB,CAAA;AAAA;AAAG,OAChH;AAEA,MAAAA,KAAK,CAAA,qBAAA,GAAwB,SAAS,sBAAA,EAAwB,QAAU,EAAA;AACtE,QAAA,IAAI,CAAC,sBAAwB,EAAA;AAAE,UAAO,OAAA,KAAA;AAAA;AACtC,QAAA,IAAI,kBAAkB,sBAAuB,CAAA,eAAA;AAC7C,QAAA,IAAI,cAAc,sBAAuB,CAAA,WAAA;AACzC,QAAA,IAAI,CAAC,QAAU,EAAA;AAAE,UAAO,OAAA,eAAA,IAAmB,KAAK,WAAe,IAAA,CAAA;AAAA;AAC/D,QAAA,IAAI,mBAAmB,CACrB,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAM,iBAAiB,yEAAyE,CAAA;AAAA;AACzG,QAAA,IAAI,eAAe,CACjB,EAAA;AAAE,UAAK,IAAA,CAAA,gBAAA,CAAiB,aAAa,oCAAoC,CAAA;AAAA;AAAG,OAChF;AAEA,MAAAA,KAAAA,CAAK,iCAAiC,WAAW;AAC/C,QAAI,IAAA,IAAA,CAAK,aAAa,CAAC,IAAA,CAAK,YAAY,IAAK,CAAA,QAAA,GAAW,KAAK,QAC3D,CAAA,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,QAAA,EAAU,4CAA4C,CAAA;AAAA;AAC1E,QAAA,IAAI,KAAK,QACP,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,QAAA,EAAU,4CAA4C,CAAA;AAAA;AAAG,OAC/E;AAEA,MAAAA,KAAAA,CAAK,oBAAuB,GAAA,SAAS,IAAM,EAAA;AACzC,QAAI,IAAA,IAAA,CAAK,SAAS,yBAChB,EAAA;AAAE,UAAO,OAAA,IAAA,CAAK,oBAAqB,CAAA,IAAA,CAAK,UAAU,CAAA;AAAA;AACpD,QAAA,OAAO,IAAK,CAAA,IAAA,KAAS,YAAgB,IAAA,IAAA,CAAK,IAAS,KAAA,kBAAA;AAAA,OACrD;AAEA,MAAA,IAAIG,QAAOT,OAAO,CAAA,SAAA;AASlB,MAAAS,KAAAA,CAAK,aAAgB,GAAA,SAASN,KAAM,EAAA;AAClC,QAAIlE,IAAAA,QAAAA,mBAAiB,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA;AAChC,QAAI,IAAA,CAACkE,MAAK,IAAM,EAAA;AAAE,UAAAA,KAAAA,CAAK,OAAO,EAAC;AAAA;AAC/B,QAAO,OAAA,IAAA,CAAK,IAAS5C,KAAAA,QAAAA,CAAQ,GAAK,EAAA;AAChC,UAAA,IAAI,IAAO,GAAA,IAAA,CAAK,cAAe,CAAA,IAAA,EAAM,MAAMtB,QAAO,CAAA;AAClD,UAAAkE,KAAAA,CAAK,IAAK,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA;AAErB,QAAA,IAAI,KAAK,QACP,EAAA;AAAE,UAAA,KAAA,IAASrD,EAAI,GAAA,CAAA,EAAG4D,KAAO,GAAA,MAAA,CAAO,IAAK,CAAA,IAAA,CAAK,gBAAgB,CAAA,EAAG5D,EAAI4D,GAAAA,KAAAA,CAAK,MAAQ5D,EAAAA,EAAAA,IAAK,CACjF,EAAA;AACE,YAAIf,IAAAA,KAAAA,GAAO2E,MAAK5D,EAAC,CAAA;AAEjB,YAAK,IAAA,CAAA,gBAAA,CAAiB,KAAK,gBAAiBf,CAAAA,KAAI,EAAE,KAAQ,EAAA,UAAA,GAAaA,QAAO,kBAAmB,CAAA;AAAA;AACnG;AACJ,QAAK,IAAA,CAAA,sBAAA,CAAuBoE,MAAK,IAAI,CAAA;AACrC,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAAA,KAAAA,CAAK,UAAa,GAAA,IAAA,CAAK,OAAQ,CAAA,UAAA;AAC/B,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,SAAS,CAAA;AAAA,OACxC;AAEA,MAAIQ,IAAAA,UAAAA,GAAY,EAAC,IAAM,EAAA,MAAA,IAASC,YAAc,GAAA,EAAC,MAAM,QAAQ,EAAA;AAE7D,MAAAH,KAAAA,CAAK,KAAQ,GAAA,SAAS,OAAS,EAAA;AAC7B,QAAI,IAAA,IAAA,CAAK,QAAQ,WAAc,GAAA,CAAA,IAAK,CAAC,IAAK,CAAA,YAAA,CAAa,KAAK,CAAG,EAAA;AAAE,UAAO,OAAA,KAAA;AAAA;AACxE,QAAA5C,eAAAA,CAAe,YAAY,IAAK,CAAA,GAAA;AAChC,QAAA,IAAI,IAAOA,GAAAA,eAAAA,CAAe,IAAK,CAAA,IAAA,CAAK,KAAK,CAAA;AACzC,QAAI,IAAA,IAAA,GAAO,IAAK,CAAA,GAAA,GAAM,IAAK,CAAA,CAAC,CAAE,CAAA,MAAA,EAAQ,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,IAAI,CAAA;AAKzE,QAAI,IAAA,MAAA,KAAW,EAAM,IAAA,MAAA,KAAW,EAAI,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AAC7C,QAAA,IAAI,OAAS,EAAA;AAAE,UAAO,OAAA,KAAA;AAAA;AAEtB,QAAA,IAAI,MAAW,KAAA,GAAA,IAAO,MAAS,GAAA,KAAA,IAAU,SAAS,KAAQ,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AACnE,QAAId,IAAAA,kBAAAA,CAAkB,MAAQ,EAAA,IAAI,CAAG,EAAA;AACnC,UAAA,IAAI,MAAM,IAAO,GAAA,CAAA;AACjB,UAAOC,OAAAA,iBAAAA,CAAiB,SAAS,IAAK,CAAA,KAAA,CAAM,WAAW,GAAG,CAAA,EAAG,IAAI,CAAG,EAAA;AAAE,YAAE,EAAA,GAAA;AAAA;AACxE,UAAA,IAAI,MAAW,KAAA,EAAA,IAAM,MAAS,GAAA,KAAA,IAAU,SAAS,KAAQ,EAAA;AAAE,YAAO,OAAA,IAAA;AAAA;AAClE,UAAA,IAAI,KAAQ,GAAA,IAAA,CAAK,KAAM,CAAA,KAAA,CAAM,MAAM,GAAG,CAAA;AACtC,UAAA,IAAI,CAACP,0BAAAA,CAA0B,IAAK,CAAA,KAAK,CAAG,EAAA;AAAE,YAAO,OAAA,IAAA;AAAA;AAAK;AAE5D,QAAO,OAAA,KAAA;AAAA,OACT;AAKA,MAAAgE,KAAAA,CAAK,kBAAkB,WAAW;AAChC,QAAI,IAAA,IAAA,CAAK,QAAQ,WAAc,GAAA,CAAA,IAAK,CAAC,IAAK,CAAA,YAAA,CAAa,OAAO,CAC5D,EAAA;AAAE,UAAO,OAAA,KAAA;AAAA;AAEX,QAAA5C,eAAAA,CAAe,YAAY,IAAK,CAAA,GAAA;AAChC,QAAA,IAAI,IAAOA,GAAAA,eAAAA,CAAe,IAAK,CAAA,IAAA,CAAK,KAAK,CAAA;AACzC,QAAA,IAAI,OAAO,IAAK,CAAA,GAAA,GAAM,IAAK,CAAA,CAAC,EAAE,MAAQ,EAAA,KAAA;AACtC,QAAA,OAAO,CAACL,UAAU,CAAA,IAAA,CAAK,IAAK,CAAA,KAAA,CAAM,MAAM,IAAK,CAAA,GAAA,EAAK,IAAI,CAAC,KACrD,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,IAAA,EAAM,OAAO,CAAC,CAAA,KAAM,UACpC,KAAA,IAAA,GAAO,MAAM,IAAK,CAAA,KAAA,CAAM,MACxB,IAAA,EAAER,kBAAiB,KAAQ,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,OAAO,CAAC,CAAC,CAAK,IAAA,KAAA,GAAQ,SAAU,KAAQ,GAAA,KAAA,CAAA,CAAA;AAAA,OAC9F;AASA,MAAAyD,KAAK,CAAA,cAAA,GAAiB,SAAS,OAAA,EAAS,UAAUxE,QAAS,EAAA;AACzD,QAAA,IAAI,YAAY,IAAK,CAAA,IAAA,EAAMkE,KAAO,GAAA,IAAA,CAAK,WAAa,EAAA,IAAA;AAEpD,QAAI,IAAA,IAAA,CAAK,KAAM,CAAA,OAAO,CAAG,EAAA;AACvB,UAAA,SAAA,GAAY5C,QAAQ,CAAA,IAAA;AACpB,UAAO,IAAA,GAAA,KAAA;AAAA;AAOT,QAAA,QAAQ,SAAW;AAAA,UACnB,KAAKA,QAAQ,CAAA,MAAA;AAAA,UAAQ,KAAKA,QAAQ,CAAA,SAAA;AAAW,YAAA,OAAO,IAAK,CAAA,2BAAA,CAA4B4C,KAAM,EAAA,SAAA,CAAU,OAAO,CAAA;AAAA,UAC5G,KAAK5C,QAAQ,CAAA,SAAA;AAAW,YAAO,OAAA,IAAA,CAAK,uBAAuB4C,KAAI,CAAA;AAAA,UAC/D,KAAK5C,QAAQ,CAAA,GAAA;AAAK,YAAO,OAAA,IAAA,CAAK,iBAAiB4C,KAAI,CAAA;AAAA,UACnD,KAAK5C,QAAQ,CAAA,IAAA;AAAM,YAAO,OAAA,IAAA,CAAK,kBAAkB4C,KAAI,CAAA;AAAA,UACrD,KAAK5C,QAAQ,CAAA,SAAA;AAIX,YAAK,IAAA,OAAA,KAAY,IAAK,CAAA,MAAA,IAAU,OAAY,KAAA,IAAA,IAAQ,YAAY,OAAa,CAAA,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AAAE,cAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC9H,YAAA,OAAO,IAAK,CAAA,sBAAA,CAAuB4C,KAAM,EAAA,KAAA,EAAO,CAAC,OAAO,CAAA;AAAA,UAC1D,KAAK5C,QAAQ,CAAA,MAAA;AACX,YAAA,IAAI,OAAS,EAAA;AAAE,cAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC/B,YAAO,OAAA,IAAA,CAAK,UAAW4C,CAAAA,KAAAA,EAAM,IAAI,CAAA;AAAA,UACnC,KAAK5C,QAAQ,CAAA,GAAA;AAAK,YAAO,OAAA,IAAA,CAAK,iBAAiB4C,KAAI,CAAA;AAAA,UACnD,KAAK5C,QAAQ,CAAA,OAAA;AAAS,YAAO,OAAA,IAAA,CAAK,qBAAqB4C,KAAI,CAAA;AAAA,UAC3D,KAAK5C,QAAQ,CAAA,OAAA;AAAS,YAAO,OAAA,IAAA,CAAK,qBAAqB4C,KAAI,CAAA;AAAA,UAC3D,KAAK5C,QAAQ,CAAA,MAAA;AAAQ,YAAO,OAAA,IAAA,CAAK,oBAAoB4C,KAAI,CAAA;AAAA,UACzD,KAAK5C,QAAQ,CAAA,IAAA;AAAM,YAAO,OAAA,IAAA,CAAK,kBAAkB4C,KAAI,CAAA;AAAA,UACrD,KAAK5C,QAAQ,CAAA,MAAA;AAAA,UAAQ,KAAKA,QAAQ,CAAA,IAAA;AAChC,YAAA,IAAA,GAAO,QAAQ,IAAK,CAAA,KAAA;AACpB,YAAI,IAAA,OAAA,IAAW,SAAS,KAAO,EAAA;AAAE,cAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACjD,YAAO,OAAA,IAAA,CAAK,iBAAkB4C,CAAAA,KAAAA,EAAM,IAAI,CAAA;AAAA,UAC1C,KAAK5C,QAAQ,CAAA,MAAA;AAAQ,YAAO,OAAA,IAAA,CAAK,oBAAoB4C,KAAI,CAAA;AAAA,UACzD,KAAK5C,QAAQ,CAAA,KAAA;AAAO,YAAO,OAAA,IAAA,CAAK,mBAAmB4C,KAAI,CAAA;AAAA,UACvD,KAAK5C,QAAQ,CAAA,MAAA;AAAQ,YAAO,OAAA,IAAA,CAAK,UAAW,CAAA,IAAA,EAAM4C,KAAI,CAAA;AAAA,UACtD,KAAK5C,QAAQ,CAAA,IAAA;AAAM,YAAO,OAAA,IAAA,CAAK,oBAAoB4C,KAAI,CAAA;AAAA,UACvD,KAAK5C,QAAQ,CAAA,OAAA;AAAA,UACb,KAAKA,QAAQ,CAAA,OAAA;AACX,YAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,GAAc,EAAM,IAAA,SAAA,KAAcA,SAAQ,OAAS,EAAA;AAClE,cAAAM,eAAAA,CAAe,YAAY,IAAK,CAAA,GAAA;AAChC,cAAA,IAAI,IAAOA,GAAAA,eAAAA,CAAe,IAAK,CAAA,IAAA,CAAK,KAAK,CAAA;AACzC,cAAI,IAAA,IAAA,GAAO,IAAK,CAAA,GAAA,GAAM,IAAK,CAAA,CAAC,CAAE,CAAA,MAAA,EAAQ,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,IAAI,CAAA;AACzE,cAAI,IAAA,MAAA,KAAW,EAAM,IAAA,MAAA,KAAW,EAC9B,EAAA;AAAE,gBAAA,OAAO,IAAK,CAAA,wBAAA,CAAyBsC,KAAM,EAAA,IAAA,CAAK,iBAAiB,CAAA;AAAA;AAAE;AAGzE,YAAI,IAAA,CAAC,IAAK,CAAA,OAAA,CAAQ,2BAA6B,EAAA;AAC7C,cAAA,IAAI,CAAC,QACH,EAAA;AAAE,gBAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,wDAAwD,CAAA;AAAA;AACnF,cAAI,IAAA,CAAC,KAAK,QACR,EAAA;AAAE,gBAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,iEAAiE,CAAA;AAAA;AAAG;AAEjG,YAAO,OAAA,SAAA,KAAc5C,QAAQ,CAAA,OAAA,GAAU,IAAK,CAAA,WAAA,CAAY4C,KAAI,CAAI,GAAA,IAAA,CAAK,WAAYA,CAAAA,KAAAA,EAAMlE,QAAO,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAOhG;AACE,YAAI,IAAA,IAAA,CAAK,iBAAmB,EAAA;AAC1B,cAAA,IAAI,OAAS,EAAA;AAAE,gBAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC/B,cAAA,IAAA,CAAK,IAAK,EAAA;AACV,cAAA,OAAO,IAAK,CAAA,sBAAA,CAAuBkE,KAAM,EAAA,IAAA,EAAM,CAAC,OAAO,CAAA;AAAA;AAGzD,YAAA,IAAI,SAAY,GAAA,IAAA,CAAK,KAAO,EAAA,IAAA,GAAO,KAAK,eAAgB,EAAA;AACxD,YAAI,IAAA,SAAA,KAAc5C,QAAQ,CAAA,IAAA,IAAQ,IAAK,CAAA,IAAA,KAAS,gBAAgB,IAAK,CAAA,GAAA,CAAIA,QAAQ,CAAA,KAAK,CACpF,EAAA;AAAE,cAAA,OAAO,IAAK,CAAA,qBAAA,CAAsB4C,KAAM,EAAA,SAAA,EAAW,MAAM,OAAO,CAAA;AAAA,aAC/D,MAAA;AAAE,cAAO,OAAA,IAAA,CAAK,wBAAyBA,CAAAA,KAAAA,EAAM,IAAI,CAAA;AAAA;AAAE;AAC1D,OACF;AAEA,MAAAM,KAAK,CAAA,2BAAA,GAA8B,SAASN,KAAAA,EAAM,OAAS,EAAA;AACzD,QAAA,IAAI,UAAU,OAAY,KAAA,OAAA;AAC1B,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAA,IAAI,KAAK,GAAI5C,CAAAA,QAAAA,CAAQ,IAAI,CAAK,IAAA,IAAA,CAAK,iBAAmB,EAAA;AAAE,UAAA4C,MAAK,KAAQ,GAAA,IAAA;AAAA,SAC5D,MAAA,IAAA,IAAA,CAAK,IAAS5C,KAAAA,QAAAA,CAAQ,IAAM,EAAA;AAAE,UAAA,IAAA,CAAK,UAAW,EAAA;AAAA,SAClD,MAAA;AACH,UAAA4C,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,UAAW,EAAA;AAC7B,UAAA,IAAA,CAAK,SAAU,EAAA;AAAA;AAKjB,QAAA,IAAIrD,EAAI,GAAA,CAAA;AACR,QAAA,OAAOA,EAAI,GAAA,IAAA,CAAK,MAAO,CAAA,MAAA,EAAQ,EAAEA,EAAG,EAAA;AAClC,UAAI,IAAA,GAAA,GAAM,IAAK,CAAA,MAAA,CAAOA,EAAC,CAAA;AACvB,UAAA,IAAIqD,MAAK,KAAS,IAAA,IAAA,IAAQ,IAAI,IAASA,KAAAA,KAAAA,CAAK,MAAM,IAAM,EAAA;AACtD,YAAA,IAAI,IAAI,IAAQ,IAAA,IAAA,KAAS,OAAW,IAAA,GAAA,CAAI,SAAS,MAAS,CAAA,EAAA;AAAE,cAAA;AAAA;AAC5D,YAAIA,IAAAA,KAAAA,CAAK,SAAS,OAAS,EAAA;AAAE,cAAA;AAAA;AAAM;AACrC;AAEF,QAAIrD,IAAAA,EAAAA,KAAM,IAAK,CAAA,MAAA,CAAO,MAAQ,EAAA;AAAE,UAAA,IAAA,CAAK,KAAMqD,CAAAA,KAAAA,CAAK,KAAO,EAAA,cAAA,GAAiB,OAAO,CAAA;AAAA;AAC/E,QAAA,OAAO,IAAK,CAAA,UAAA,CAAWA,KAAM,EAAA,OAAA,GAAU,mBAAmB,mBAAmB,CAAA;AAAA,OAC/E;AAEA,MAAAM,KAAAA,CAAK,sBAAyB,GAAA,SAASN,KAAM,EAAA;AAC3C,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAA,IAAA,CAAK,SAAU,EAAA;AACf,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,mBAAmB,CAAA;AAAA,OAClD;AAEA,MAAAM,KAAAA,CAAK,gBAAmB,GAAA,SAASN,KAAM,EAAA;AACrC,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAK,IAAA,CAAA,MAAA,CAAO,KAAKQ,UAAS,CAAA;AAC1B,QAAAR,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,IAAI,CAAA;AACpC,QAAA,IAAA,CAAK,OAAO,GAAI,EAAA;AAChB,QAAK,IAAA,CAAA,MAAA,CAAO5C,SAAQ,MAAM,CAAA;AAC1B,QAAA4C,KAAAA,CAAK,IAAO,GAAA,IAAA,CAAK,oBAAqB,EAAA;AACtC,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAC9B,EAAA;AAAE,UAAK,IAAA,CAAA,GAAA,CAAI5C,SAAQ,IAAI,CAAA;AAAA,SAEvB,MAAA;AAAE,UAAA,IAAA,CAAK,SAAU,EAAA;AAAA;AACnB,QAAO,OAAA,IAAA,CAAK,UAAW4C,CAAAA,KAAAA,EAAM,kBAAkB,CAAA;AAAA,OACjD;AAUA,MAAAM,KAAAA,CAAK,iBAAoB,GAAA,SAASN,KAAM,EAAA;AACtC,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAA,IAAI,OAAW,GAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,IAAA,CAAK,QAAY,IAAA,IAAA,CAAK,aAAc,CAAA,OAAO,CAAK,GAAA,IAAA,CAAK,YAAe,GAAA,CAAA,CAAA;AACpH,QAAK,IAAA,CAAA,MAAA,CAAO,KAAKQ,UAAS,CAAA;AAC1B,QAAA,IAAA,CAAK,WAAW,CAAC,CAAA;AACjB,QAAK,IAAA,CAAA,MAAA,CAAOpD,SAAQ,MAAM,CAAA;AAC1B,QAAI,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,IAAM,EAAA;AAC9B,UAAA,IAAI,UAAU,CAAI,CAAA,EAAA;AAAE,YAAA,IAAA,CAAK,WAAW,OAAO,CAAA;AAAA;AAC3C,UAAO,OAAA,IAAA,CAAK,QAAS4C,CAAAA,KAAAA,EAAM,IAAI,CAAA;AAAA;AAEjC,QAAI,IAAA,KAAA,GAAQ,KAAK,KAAM,EAAA;AACvB,QAAI,IAAA,IAAA,CAAK,SAAS5C,QAAQ,CAAA,IAAA,IAAQ,KAAK,IAASA,KAAAA,QAAAA,CAAQ,UAAU,KAAO,EAAA;AACvE,UAAA,IAAI,SAAS,IAAK,CAAA,SAAA,IAAa,IAAO,GAAA,KAAA,GAAQ,QAAQ,IAAK,CAAA,KAAA;AAC3D,UAAA,IAAA,CAAK,IAAK,EAAA;AACV,UAAK,IAAA,CAAA,QAAA,CAAS,MAAQ,EAAA,IAAA,EAAM,IAAI,CAAA;AAChC,UAAK,IAAA,CAAA,UAAA,CAAW,QAAQ,qBAAqB,CAAA;AAC7C,UAAA,IAAA,CAAK,IAAK,CAAA,IAAA,KAASA,QAAQ,CAAA,GAAA,IAAQ,KAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,IAAA,CAAK,aAAa,IAAI,CAAA,KAAO,MAAO,CAAA,YAAA,CAAa,WAAW,CAAG,EAAA;AACjI,YAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,cAAI,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,GAAK,EAAA;AAC7B,gBAAA,IAAI,UAAU,CAAI,CAAA,EAAA;AAAE,kBAAA,IAAA,CAAK,WAAW,OAAO,CAAA;AAAA;AAAG,eACzC,MAAA;AAAE,gBAAA4C,KAAAA,CAAK,QAAQ,OAAU,GAAA,CAAA,CAAA;AAAA;AAAI;AAEtC,YAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,MAAM,CAAA;AAAA;AAErC,UAAA,IAAI,UAAU,CAAI,CAAA,EAAA;AAAE,YAAA,IAAA,CAAK,WAAW,OAAO,CAAA;AAAA;AAC3C,UAAO,OAAA,IAAA,CAAK,QAASA,CAAAA,KAAAA,EAAM,MAAM,CAAA;AAAA;AAEnC,QAAA,IAAI,aAAgB,GAAA,IAAA,CAAK,YAAa,CAAA,KAAK,GAAG,OAAU,GAAA,KAAA;AACxD,QAAA,IAAI,cAAc,IAAK,CAAA,WAAA;AACvB,QAAA,IAAI,yBAAyB,IAAIK,oBAAAA,EAAAA;AACjC,QAAA,IAAI,UAAU,IAAK,CAAA,KAAA;AACnB,QAAI,IAAA,IAAA,GAAO,OAAU,GAAA,CAAA,CAAA,GACjB,IAAK,CAAA,mBAAA,CAAoB,sBAAwB,EAAA,OAAO,CACxD,GAAA,IAAA,CAAK,eAAgB,CAAA,IAAA,EAAM,sBAAsB,CAAA;AACrD,QAAA,IAAI,IAAK,CAAA,IAAA,KAASjD,QAAQ,CAAA,GAAA,KAAQ,OAAU,GAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,IAAA,CAAK,YAAa,CAAA,IAAI,CAAI,CAAA,EAAA;AACrG,UAAA,IAAI,UAAU,CAAI,CAAA,EAAA;AAChB,YAAI,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,GAAK,EAAA;AAAE,cAAA,IAAA,CAAK,WAAW,OAAO,CAAA;AAAA;AACxD,YAAA4C,MAAK,KAAQ,GAAA,IAAA;AAAA,WACJ,MAAA,IAAA,OAAA,IAAW,IAAK,CAAA,OAAA,CAAQ,eAAe,CAAG,EAAA;AACnD,YAAI,IAAA,IAAA,CAAK,KAAU,KAAA,OAAA,IAAW,CAAC,WAAA,IAAe,KAAK,IAAS,KAAA,YAAA,IAAgB,IAAK,CAAA,IAAA,KAAS,OAAS,EAAA;AAAE,cAAA,IAAA,CAAK,UAAW,EAAA;AAAA,aAC5G,MAAA,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AAAE,cAAAA,MAAK,KAAQ,GAAA,KAAA;AAAA;AAAO;AAEhE,UAAA,IAAI,iBAAiB,OAAS,EAAA;AAAE,YAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,+DAA+D,CAAA;AAAA;AACtH,UAAK,IAAA,CAAA,YAAA,CAAa,IAAM,EAAA,KAAA,EAAO,sBAAsB,CAAA;AACrD,UAAA,IAAA,CAAK,iBAAiB,IAAI,CAAA;AAC1B,UAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,IAAI,CAAA;AAAA,SAC5B,MAAA;AACL,UAAK,IAAA,CAAA,qBAAA,CAAsB,wBAAwB,IAAI,CAAA;AAAA;AAEzD,QAAA,IAAI,UAAU,CAAI,CAAA,EAAA;AAAE,UAAA,IAAA,CAAK,WAAW,OAAO,CAAA;AAAA;AAC3C,QAAO,OAAA,IAAA,CAAK,QAASA,CAAAA,KAAAA,EAAM,IAAI,CAAA;AAAA,OACjC;AAEA,MAAAM,KAAK,CAAA,sBAAA,GAAyB,SAASN,KAAAA,EAAM,SAAS,mBAAqB,EAAA;AACzE,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAO,OAAA,IAAA,CAAK,cAAcA,KAAMU,EAAAA,eAAAA,IAAkB,sBAAsB,CAAIC,GAAAA,uBAAAA,CAAAA,EAAyB,OAAO,OAAO,CAAA;AAAA,OACrH;AAEA,MAAAL,KAAAA,CAAK,gBAAmB,GAAA,SAASN,KAAM,EAAA;AACrC,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAAA,KAAAA,CAAK,IAAO,GAAA,IAAA,CAAK,oBAAqB,EAAA;AAEtC,QAAAA,KAAK,CAAA,UAAA,GAAa,IAAK,CAAA,cAAA,CAAe,IAAI,CAAA;AAC1C,QAAAA,KAAAA,CAAK,SAAY,GAAA,IAAA,CAAK,GAAI5C,CAAAA,QAAAA,CAAQ,KAAK,CAAI,GAAA,IAAA,CAAK,cAAe,CAAA,IAAI,CAAI,GAAA,IAAA;AACvE,QAAO,OAAA,IAAA,CAAK,UAAW4C,CAAAA,KAAAA,EAAM,aAAa,CAAA;AAAA,OAC5C;AAEA,MAAAM,KAAAA,CAAK,oBAAuB,GAAA,SAASN,KAAM,EAAA;AACzC,QAAA,IAAI,CAAC,IAAK,CAAA,UAAA,IAAc,CAAC,IAAA,CAAK,QAAQ,0BACpC,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,8BAA8B,CAAA;AAAA;AACzD,QAAA,IAAA,CAAK,IAAK,EAAA;AAMV,QAAA,IAAI,KAAK,GAAI5C,CAAAA,QAAAA,CAAQ,IAAI,CAAK,IAAA,IAAA,CAAK,iBAAmB,EAAA;AAAE,UAAA4C,MAAK,QAAW,GAAA,IAAA;AAAA,SACnE,MAAA;AAAE,UAAAA,KAAAA,CAAK,QAAW,GAAA,IAAA,CAAK,eAAgB,EAAA;AAAG,UAAA,IAAA,CAAK,SAAU,EAAA;AAAA;AAC9D,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAAA,OAChD;AAEA,MAAAM,KAAAA,CAAK,oBAAuB,GAAA,SAASN,KAAM,EAAA;AACzC,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAAA,KAAAA,CAAK,YAAe,GAAA,IAAA,CAAK,oBAAqB,EAAA;AAC9C,QAAAA,KAAAA,CAAK,QAAQ,EAAC;AACd,QAAK,IAAA,CAAA,MAAA,CAAO5C,SAAQ,MAAM,CAAA;AAC1B,QAAK,IAAA,CAAA,MAAA,CAAO,KAAKqD,YAAW,CAAA;AAC5B,QAAA,IAAA,CAAK,WAAW,CAAC,CAAA;AAMjB,QAAI,IAAA,GAAA;AACJ,QAAA,KAAA,IAAS,UAAa,GAAA,KAAA,EAAO,IAAK,CAAA,IAAA,KAASrD,SAAQ,MAAS,IAAA;AAC1D,UAAA,IAAI,KAAK,IAASA,KAAAA,QAAAA,CAAQ,SAAS,IAAK,CAAA,IAAA,KAASA,SAAQ,QAAU,EAAA;AACjE,YAAI,IAAA,MAAA,GAAS,IAAK,CAAA,IAAA,KAASA,QAAQ,CAAA,KAAA;AACnC,YAAA,IAAI,GAAK,EAAA;AAAE,cAAK,IAAA,CAAA,UAAA,CAAW,KAAK,YAAY,CAAA;AAAA;AAC5C,YAAA4C,MAAK,KAAM,CAAA,IAAA,CAAK,GAAM,GAAA,IAAA,CAAK,WAAW,CAAA;AACtC,YAAA,GAAA,CAAI,aAAa,EAAC;AAClB,YAAA,IAAA,CAAK,IAAK,EAAA;AACV,YAAA,IAAI,MAAQ,EAAA;AACV,cAAI,GAAA,CAAA,IAAA,GAAO,KAAK,eAAgB,EAAA;AAAA,aAC3B,MAAA;AACL,cAAA,IAAI,UAAY,EAAA;AAAE,gBAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,YAAA,EAAc,0BAA0B,CAAA;AAAA;AACrF,cAAa,UAAA,GAAA,IAAA;AACb,cAAA,GAAA,CAAI,IAAO,GAAA,IAAA;AAAA;AAEb,YAAK,IAAA,CAAA,MAAA,CAAO5C,SAAQ,KAAK,CAAA;AAAA,WACpB,MAAA;AACL,YAAA,IAAI,CAAC,GAAK,EAAA;AAAE,cAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC5B,YAAA,GAAA,CAAI,UAAW,CAAA,IAAA,CAAK,IAAK,CAAA,cAAA,CAAe,IAAI,CAAC,CAAA;AAAA;AAC/C;AAEF,QAAA,IAAA,CAAK,SAAU,EAAA;AACf,QAAA,IAAI,GAAK,EAAA;AAAE,UAAK,IAAA,CAAA,UAAA,CAAW,KAAK,YAAY,CAAA;AAAA;AAC5C,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAA,IAAA,CAAK,OAAO,GAAI,EAAA;AAChB,QAAO,OAAA,IAAA,CAAK,UAAW4C,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAAA,OAChD;AAEA,MAAAM,KAAAA,CAAK,mBAAsB,GAAA,SAASN,KAAM,EAAA;AACxC,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAI3C,IAAAA,UAAAA,CAAU,IAAK,CAAA,IAAA,CAAK,KAAM,CAAA,KAAA,CAAM,KAAK,UAAY,EAAA,IAAA,CAAK,KAAK,CAAC,CAC9D,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,UAAA,EAAY,6BAA6B,CAAA;AAAA;AAC7D,QAAA2C,KAAAA,CAAK,QAAW,GAAA,IAAA,CAAK,eAAgB,EAAA;AACrC,QAAA,IAAA,CAAK,SAAU,EAAA;AACf,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,gBAAgB,CAAA;AAAA,OAC/C;AAIA,MAAA,IAAIY,WAAU,EAAC;AAEf,MAAAN,KAAAA,CAAK,wBAAwB,WAAW;AACtC,QAAI,IAAA,KAAA,GAAQ,KAAK,gBAAiB,EAAA;AAClC,QAAI,IAAA,MAAA,GAAS,MAAM,IAAS,KAAA,YAAA;AAC5B,QAAK,IAAA,CAAA,UAAA,CAAW,MAASrB,GAAAA,mBAAAA,GAAqB,CAAC,CAAA;AAC/C,QAAA,IAAA,CAAK,gBAAiB,CAAA,KAAA,EAAO,MAASU,GAAAA,kBAAAA,GAAoBF,aAAY,CAAA;AACtE,QAAK,IAAA,CAAA,MAAA,CAAOrC,SAAQ,MAAM,CAAA;AAE1B,QAAO,OAAA,KAAA;AAAA,OACT;AAEA,MAAAkD,KAAAA,CAAK,iBAAoB,GAAA,SAASN,KAAM,EAAA;AACtC,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAAA,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,UAAW,EAAA;AAC7B,QAAAA,MAAK,OAAU,GAAA,IAAA;AACf,QAAI,IAAA,IAAA,CAAK,IAAS5C,KAAAA,QAAAA,CAAQ,MAAQ,EAAA;AAChC,UAAI,IAAA,MAAA,GAAS,KAAK,SAAU,EAAA;AAC5B,UAAA,IAAA,CAAK,IAAK,EAAA;AACV,UAAA,IAAI,IAAK,CAAA,GAAA,CAAIA,QAAQ,CAAA,MAAM,CAAG,EAAA;AAC5B,YAAO,MAAA,CAAA,KAAA,GAAQ,KAAK,qBAAsB,EAAA;AAAA,WACrC,MAAA;AACL,YAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,GAAc,EAAI,EAAA;AAAE,cAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACrD,YAAA,MAAA,CAAO,KAAQ,GAAA,IAAA;AACf,YAAA,IAAA,CAAK,WAAW,CAAC,CAAA;AAAA;AAEnB,UAAO,MAAA,CAAA,IAAA,GAAO,IAAK,CAAA,UAAA,CAAW,KAAK,CAAA;AACnC,UAAA,IAAA,CAAK,SAAU,EAAA;AACf,UAAA4C,KAAK,CAAA,OAAA,GAAU,IAAK,CAAA,UAAA,CAAW,QAAQ,aAAa,CAAA;AAAA;AAEtD,QAAAA,KAAAA,CAAK,YAAY,IAAK,CAAA,GAAA,CAAI5C,SAAQ,QAAQ,CAAA,GAAI,IAAK,CAAA,UAAA,EAAe,GAAA,IAAA;AAClE,QAAA,IAAI,CAAC4C,KAAAA,CAAK,OAAW,IAAA,CAACA,MAAK,SACzB,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAMA,KAAK,CAAA,KAAA,EAAO,iCAAiC,CAAA;AAAA;AAC5D,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,cAAc,CAAA;AAAA,OAC7C;AAEA,MAAAM,KAAK,CAAA,iBAAA,GAAoB,SAASN,KAAAA,EAAM,MAAM,uBAAyB,EAAA;AACrE,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAA,IAAA,CAAK,QAASA,CAAAA,KAAAA,EAAM,KAAO,EAAA,IAAA,EAAM,uBAAuB,CAAA;AACxD,QAAA,IAAA,CAAK,SAAU,EAAA;AACf,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,qBAAqB,CAAA;AAAA,OACpD;AAEA,MAAAM,KAAAA,CAAK,mBAAsB,GAAA,SAASN,KAAM,EAAA;AACxC,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAAA,KAAAA,CAAK,IAAO,GAAA,IAAA,CAAK,oBAAqB,EAAA;AACtC,QAAK,IAAA,CAAA,MAAA,CAAO,KAAKQ,UAAS,CAAA;AAC1B,QAAAR,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,OAAO,CAAA;AACvC,QAAA,IAAA,CAAK,OAAO,GAAI,EAAA;AAChB,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,gBAAgB,CAAA;AAAA,OAC/C;AAEA,MAAAM,KAAAA,CAAK,kBAAqB,GAAA,SAASN,KAAM,EAAA;AACvC,QAAA,IAAI,KAAK,MAAQ,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,uBAAuB,CAAA;AAAA;AACjE,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAAA,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,oBAAqB,EAAA;AACxC,QAAAA,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,MAAM,CAAA;AACtC,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,eAAe,CAAA;AAAA,OAC9C;AAEA,MAAAM,KAAAA,CAAK,mBAAsB,GAAA,SAASN,KAAM,EAAA;AACxC,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,gBAAgB,CAAA;AAAA,OAC/C;AAEA,MAAAM,MAAK,qBAAwB,GAAA,SAASN,KAAM,EAAA,SAAA,EAAW,MAAM,OAAS,EAAA;AACpE,QAAS,KAAA,IAAA,GAAA,GAAM,GAAGO,KAAO,GAAA,IAAA,CAAK,QAAQ,GAAMA,GAAAA,KAAAA,CAAK,MAAQ,EAAA,GAAA,IAAO,CAC9D,EAAA;AACA,UAAI,IAAA,KAAA,GAAQA,MAAK,GAAG,CAAA;AAEpB,UAAI,IAAA,KAAA,CAAM,SAAS,SACjB,EAAA;AAAE,YAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,KAAO,EAAA,SAAA,GAAY,YAAY,uBAAuB,CAAA;AAAA;AAC5E;AACA,QAAI,IAAA,IAAA,GAAO,KAAK,IAAK,CAAA,MAAA,GAAS,SAAS,IAAK,CAAA,IAAA,KAASnD,QAAQ,CAAA,OAAA,GAAU,QAAW,GAAA,IAAA;AAClF,QAAA,KAAA,IAAST,KAAI,IAAK,CAAA,MAAA,CAAO,SAAS,CAAGA,EAAAA,EAAAA,IAAK,GAAGA,EAAK,EAAA,EAAA;AAChD,UAAI,IAAA,OAAA,GAAU,IAAK,CAAA,MAAA,CAAOA,EAAC,CAAA;AAC3B,UAAI,IAAA,OAAA,CAAQ,cAAmBqD,KAAAA,KAAAA,CAAK,KAAO,EAAA;AAEzC,YAAA,OAAA,CAAQ,iBAAiB,IAAK,CAAA,KAAA;AAC9B,YAAA,OAAA,CAAQ,IAAO,GAAA,IAAA;AAAA,WACV,MAAA;AAAE,YAAA;AAAA;AAAM;AAEjB,QAAK,IAAA,CAAA,MAAA,CAAO,KAAK,EAAC,IAAA,EAAM,WAAW,IAAY,EAAA,cAAA,EAAgB,IAAK,CAAA,KAAA,EAAM,CAAA;AAC1E,QAAAA,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,OAAU,GAAA,OAAA,CAAQ,OAAQ,CAAA,OAAO,CAAM,KAAA,CAAA,CAAA,GAAK,OAAU,GAAA,OAAA,GAAU,UAAU,OAAO,CAAA;AACjH,QAAA,IAAA,CAAK,OAAO,GAAI,EAAA;AAChB,QAAAA,MAAK,KAAQ,GAAA,IAAA;AACb,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,kBAAkB,CAAA;AAAA,OACjD;AAEA,MAAAM,KAAK,CAAA,wBAAA,GAA2B,SAASN,KAAAA,EAAM,IAAM,EAAA;AACnD,QAAAA,MAAK,UAAa,GAAA,IAAA;AAClB,QAAA,IAAA,CAAK,SAAU,EAAA;AACf,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,qBAAqB,CAAA;AAAA,OACpD;AAMA,MAAAM,KAAK,CAAA,UAAA,GAAa,SAAS,qBAAA,EAAuBN,OAAM,UAAY,EAAA;AAClE,QAAK,IAAA,qBAAA,KAA0B,QAAiC,qBAAA,GAAA,IAAA;AAChE,QAAA,IAAKA,KAAS,KAAA,KAAA,CAAA,EAASA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAE7C,QAAAA,KAAAA,CAAK,OAAO,EAAC;AACb,QAAK,IAAA,CAAA,MAAA,CAAO5C,SAAQ,MAAM,CAAA;AAC1B,QAAA,IAAI,qBAAuB,EAAA;AAAE,UAAA,IAAA,CAAK,WAAW,CAAC,CAAA;AAAA;AAC9C,QAAO,OAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,MAAQ,EAAA;AACnC,UAAI,IAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,IAAI,CAAA;AACnC,UAAA4C,KAAAA,CAAK,IAAK,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA;AAErB,QAAA,IAAI,UAAY,EAAA;AAAE,UAAA,IAAA,CAAK,MAAS,GAAA,KAAA;AAAA;AAChC,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAA,IAAI,qBAAuB,EAAA;AAAE,UAAA,IAAA,CAAK,SAAU,EAAA;AAAA;AAC5C,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,gBAAgB,CAAA;AAAA,OAC/C;AAMA,MAAAM,KAAK,CAAA,QAAA,GAAW,SAASN,KAAAA,EAAM,IAAM,EAAA;AACnC,QAAAA,MAAK,IAAO,GAAA,IAAA;AACZ,QAAK,IAAA,CAAA,MAAA,CAAO5C,SAAQ,IAAI,CAAA;AACxB,QAAA4C,KAAAA,CAAK,OAAO,IAAK,CAAA,IAAA,KAAS5C,SAAQ,IAAO,GAAA,IAAA,GAAO,KAAK,eAAgB,EAAA;AACrE,QAAK,IAAA,CAAA,MAAA,CAAOA,SAAQ,IAAI,CAAA;AACxB,QAAA4C,KAAAA,CAAK,SAAS,IAAK,CAAA,IAAA,KAAS5C,SAAQ,MAAS,GAAA,IAAA,GAAO,KAAK,eAAgB,EAAA;AACzE,QAAK,IAAA,CAAA,MAAA,CAAOA,SAAQ,MAAM,CAAA;AAC1B,QAAA4C,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,KAAK,CAAA;AACrC,QAAA,IAAA,CAAK,SAAU,EAAA;AACf,QAAA,IAAA,CAAK,OAAO,GAAI,EAAA;AAChB,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,cAAc,CAAA;AAAA,OAC7C;AAKA,MAAAM,KAAK,CAAA,UAAA,GAAa,SAASN,KAAAA,EAAM,IAAM,EAAA;AACrC,QAAI,IAAA,OAAA,GAAU,IAAK,CAAA,IAAA,KAAS5C,QAAQ,CAAA,GAAA;AACpC,QAAA,IAAA,CAAK,IAAK,EAAA;AAEV,QACE,IAAA,IAAA,CAAK,IAAS,KAAA,qBAAA,IACd,IAAK,CAAA,YAAA,CAAa,CAAC,CAAA,CAAE,IAAQ,IAAA,IAAA,KAE3B,CAAC,OAAA,IACD,IAAK,CAAA,OAAA,CAAQ,cAAc,CAC3B,IAAA,IAAA,CAAK,MACL,IAAA,IAAA,CAAK,IAAS,KAAA,KAAA,IACd,IAAK,CAAA,YAAA,CAAa,CAAC,CAAA,CAAE,EAAG,CAAA,IAAA,KAAS,YAEnC,CAAA,EAAA;AACA,UAAK,IAAA,CAAA,KAAA;AAAA,YACH,IAAK,CAAA,KAAA;AAAA,YACH,CAAA,OAAA,GAAU,WAAW,QAAY,IAAA;AAAA,WACrC;AAAA;AAEF,QAAA4C,MAAK,IAAO,GAAA,IAAA;AACZ,QAAAA,MAAK,KAAQ,GAAA,OAAA,GAAU,KAAK,eAAgB,EAAA,GAAI,KAAK,gBAAiB,EAAA;AACtE,QAAK,IAAA,CAAA,MAAA,CAAO5C,SAAQ,MAAM,CAAA;AAC1B,QAAA4C,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,KAAK,CAAA;AACrC,QAAA,IAAA,CAAK,SAAU,EAAA;AACf,QAAA,IAAA,CAAK,OAAO,GAAI,EAAA;AAChB,QAAA,OAAO,IAAK,CAAA,UAAA,CAAWA,KAAM,EAAA,OAAA,GAAU,mBAAmB,gBAAgB,CAAA;AAAA,OAC5E;AAIA,MAAAM,MAAK,QAAW,GAAA,SAASN,KAAM,EAAA,KAAA,EAAO,MAAM,uBAAyB,EAAA;AACnE,QAAAA,KAAAA,CAAK,eAAe,EAAC;AACrB,QAAAA,MAAK,IAAO,GAAA,IAAA;AACZ,QAAS,WAAA;AACP,UAAI,IAAA,IAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,UAAK,IAAA,CAAA,UAAA,CAAW,MAAM,IAAI,CAAA;AAC1B,UAAA,IAAI,IAAK,CAAA,GAAA,CAAI5C,QAAQ,CAAA,EAAE,CAAG,EAAA;AACxB,YAAK,IAAA,CAAA,IAAA,GAAO,IAAK,CAAA,gBAAA,CAAiB,KAAK,CAAA;AAAA,qBAC9B,CAAC,uBAAA,IAA2B,IAAS,KAAA,OAAA,IAAW,EAAE,IAAK,CAAA,IAAA,KAASA,QAAQ,CAAA,GAAA,IAAQ,KAAK,OAAQ,CAAA,WAAA,IAAe,KAAK,IAAK,CAAA,YAAA,CAAa,IAAI,CAAK,CAAA,EAAA;AACrJ,YAAA,IAAA,CAAK,UAAW,EAAA;AAAA,qBACP,CAAC,uBAAA,IAA2B,IAAK,CAAA,EAAA,CAAG,SAAS,YAAgB,IAAA,EAAE,KAAU,KAAA,IAAA,CAAK,SAASA,QAAQ,CAAA,GAAA,IAAO,IAAK,CAAA,YAAA,CAAa,IAAI,CAAK,CAAA,CAAA,EAAA;AAC1I,YAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,UAAA,EAAY,0DAA0D,CAAA;AAAA,WACjF,MAAA;AACL,YAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AAAA;AAEd,UAAA4C,MAAK,YAAa,CAAA,IAAA,CAAK,KAAK,UAAW,CAAA,IAAA,EAAM,oBAAoB,CAAC,CAAA;AAClE,UAAA,IAAI,CAAC,IAAA,CAAK,GAAI5C,CAAAA,QAAAA,CAAQ,KAAK,CAAG,EAAA;AAAE,YAAA;AAAA;AAAM;AAExC,QAAO4C,OAAAA,KAAAA;AAAA,OACT;AAEA,MAAAM,KAAK,CAAA,UAAA,GAAa,SAAS,IAAA,EAAM,IAAM,EAAA;AACrC,QAAK,IAAA,CAAA,EAAA,GAAK,KAAK,gBAAiB,EAAA;AAChC,QAAA,IAAA,CAAK,iBAAiB,IAAK,CAAA,EAAA,EAAI,SAAS,KAAQd,GAAAA,SAAAA,GAAWC,eAAc,KAAK,CAAA;AAAA,OAChF;AAEA,MAAA,IAAIiB,eAAiB,GAAA,CAAA,EAAGC,uBAAyB,GAAA,CAAA,EAAGE,iBAAmB,GAAA,CAAA;AAMvE,MAAAP,MAAK,aAAgB,GAAA,SAASN,OAAM,SAAW,EAAA,mBAAA,EAAqB,SAAS,OAAS,EAAA;AACpF,QAAA,IAAA,CAAK,aAAaA,KAAI,CAAA;AACtB,QAAI,IAAA,IAAA,CAAK,QAAQ,WAAe,IAAA,CAAA,IAAK,KAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,CAAC,OAAS,EAAA;AAC9E,UAAA,IAAI,IAAK,CAAA,IAAA,KAAS5C,QAAQ,CAAA,IAAA,IAAS,YAAYuD,uBAC7C,EAAA;AAAE,YAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACpB,UAAAX,KAAK,CAAA,SAAA,GAAY,IAAK,CAAA,GAAA,CAAI5C,SAAQ,IAAI,CAAA;AAAA;AAExC,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAC9B,EAAA;AAAE,UAAA4C,KAAAA,CAAK,KAAQ,GAAA,CAAC,CAAC,OAAA;AAAA;AAEnB,QAAA,IAAI,YAAYU,eAAgB,EAAA;AAC9B,UAAAV,KAAAA,CAAK,EAAM,GAAA,SAAA,GAAYa,iBAAqB,IAAA,IAAA,CAAK,SAASzD,QAAQ,CAAA,IAAA,GAAO,IAAO,GAAA,IAAA,CAAK,UAAW,EAAA;AAChG,UAAA,IAAI4C,KAAK,CAAA,EAAA,IAAM,EAAE,SAAA,GAAYW,uBAK3B,CAAA,EAAA;AAAE,YAAA,IAAA,CAAK,eAAgBX,CAAAA,KAAAA,CAAK,EAAK,EAAA,IAAA,CAAK,MAAUA,IAAAA,KAAAA,CAAK,SAAaA,IAAAA,KAAAA,CAAK,KAAS,GAAA,IAAA,CAAK,mBAAsBR,GAAAA,SAAAA,GAAWC,gBAAeC,cAAa,CAAA;AAAA;AAAG;AAGzJ,QAAA,IAAI,cAAc,IAAK,CAAA,QAAA,EAAU,cAAc,IAAK,CAAA,QAAA,EAAU,mBAAmB,IAAK,CAAA,aAAA;AACtF,QAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,QAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,QAAA,IAAA,CAAK,aAAgB,GAAA,CAAA;AACrB,QAAA,IAAA,CAAK,WAAWJ,cAAcU,CAAAA,KAAAA,CAAK,KAAOA,EAAAA,KAAAA,CAAK,SAAS,CAAC,CAAA;AAEzD,QAAI,IAAA,EAAE,YAAYU,eAChB,CAAA,EAAA;AAAE,UAAAV,KAAAA,CAAK,KAAK,IAAK,CAAA,IAAA,KAAS5C,SAAQ,IAAO,GAAA,IAAA,CAAK,YAAe,GAAA,IAAA;AAAA;AAE/D,QAAA,IAAA,CAAK,oBAAoB4C,KAAI,CAAA;AAC7B,QAAA,IAAA,CAAK,iBAAkBA,CAAAA,KAAAA,EAAM,mBAAqB,EAAA,KAAA,EAAO,OAAO,CAAA;AAEhE,QAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,QAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,QAAA,IAAA,CAAK,aAAgB,GAAA,gBAAA;AACrB,QAAA,OAAO,KAAK,UAAWA,CAAAA,KAAAA,EAAO,SAAYU,GAAAA,eAAAA,GAAkB,wBAAwB,oBAAoB,CAAA;AAAA,OAC1G;AAEA,MAAAJ,KAAAA,CAAK,mBAAsB,GAAA,SAASN,KAAM,EAAA;AACxC,QAAK,IAAA,CAAA,MAAA,CAAO5C,SAAQ,MAAM,CAAA;AAC1B,QAAA4C,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,gBAAiB5C,CAAAA,QAAAA,CAAQ,QAAQ,KAAO,EAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAC,CAAA;AACxF,QAAA,IAAA,CAAK,8BAA+B,EAAA;AAAA,OACtC;AAKA,MAAAkD,KAAK,CAAA,UAAA,GAAa,SAASN,KAAAA,EAAM,WAAa,EAAA;AAC5C,QAAA,IAAA,CAAK,IAAK,EAAA;AAIV,QAAA,IAAI,YAAY,IAAK,CAAA,MAAA;AACrB,QAAA,IAAA,CAAK,MAAS,GAAA,IAAA;AAEd,QAAK,IAAA,CAAA,YAAA,CAAaA,OAAM,WAAW,CAAA;AACnC,QAAA,IAAA,CAAK,gBAAgBA,KAAI,CAAA;AACzB,QAAI,IAAA,cAAA,GAAiB,KAAK,cAAe,EAAA;AACzC,QAAI,IAAA,SAAA,GAAY,KAAK,SAAU,EAAA;AAC/B,QAAA,IAAI,cAAiB,GAAA,KAAA;AACrB,QAAA,SAAA,CAAU,OAAO,EAAC;AAClB,QAAK,IAAA,CAAA,MAAA,CAAO5C,SAAQ,MAAM,CAAA;AAC1B,QAAO,OAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,MAAQ,EAAA;AACnC,UAAA,IAAI,OAAU,GAAA,IAAA,CAAK,iBAAkB4C,CAAAA,KAAAA,CAAK,eAAe,IAAI,CAAA;AAC7D,UAAA,IAAI,OAAS,EAAA;AACX,YAAU,SAAA,CAAA,IAAA,CAAK,KAAK,OAAO,CAAA;AAC3B,YAAA,IAAI,OAAQ,CAAA,IAAA,KAAS,kBAAsB,IAAA,OAAA,CAAQ,SAAS,aAAe,EAAA;AACzE,cAAA,IAAI,cAAgB,EAAA;AAAE,gBAAK,IAAA,CAAA,gBAAA,CAAiB,OAAQ,CAAA,KAAA,EAAO,yCAAyC,CAAA;AAAA;AACpG,cAAiB,cAAA,GAAA,IAAA;AAAA,aACnB,MAAA,IAAW,OAAQ,CAAA,GAAA,IAAO,OAAQ,CAAA,GAAA,CAAI,SAAS,mBAAuBc,IAAAA,wBAAAA,CAAwB,cAAgB,EAAA,OAAO,CAAG,EAAA;AACtH,cAAK,IAAA,CAAA,gBAAA,CAAiB,QAAQ,GAAI,CAAA,KAAA,EAAQ,kBAAmB,OAAQ,CAAA,GAAA,CAAI,OAAQ,6BAA8B,CAAA;AAAA;AACjH;AACF;AAEF,QAAA,IAAA,CAAK,MAAS,GAAA,SAAA;AACd,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAAd,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,UAAA,CAAW,WAAW,WAAW,CAAA;AAClD,QAAA,IAAA,CAAK,aAAc,EAAA;AACnB,QAAA,OAAO,IAAK,CAAA,UAAA,CAAWA,KAAM,EAAA,WAAA,GAAc,qBAAqB,iBAAiB,CAAA;AAAA,OACnF;AAEA,MAAAM,KAAAA,CAAK,iBAAoB,GAAA,SAAS,sBAAwB,EAAA;AACxD,QAAA,IAAI,IAAK,CAAA,GAAA,CAAIlD,QAAQ,CAAA,IAAI,CAAG,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AAErC,QAAI2D,IAAAA,YAAAA,GAAc,KAAK,OAAQ,CAAA,WAAA;AAC/B,QAAIf,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAA,IAAI,OAAU,GAAA,EAAA;AACd,QAAA,IAAI,WAAc,GAAA,KAAA;AAClB,QAAA,IAAI,OAAU,GAAA,KAAA;AACd,QAAA,IAAI,IAAO,GAAA,QAAA;AACX,QAAA,IAAI,QAAW,GAAA,KAAA;AAEf,QAAI,IAAA,IAAA,CAAK,aAAc,CAAA,QAAQ,CAAG,EAAA;AAEhC,UAAA,IAAIe,gBAAe,EAAM,IAAA,IAAA,CAAK,GAAI3D,CAAAA,QAAAA,CAAQ,MAAM,CAAG,EAAA;AACjD,YAAA,IAAA,CAAK,sBAAsB4C,KAAI,CAAA;AAC/B,YAAOA,OAAAA,KAAAA;AAAA;AAET,UAAA,IAAI,KAAK,uBAAwB,EAAA,IAAK,IAAK,CAAA,IAAA,KAAS5C,SAAQ,IAAM,EAAA;AAChE,YAAW,QAAA,GAAA,IAAA;AAAA,WACN,MAAA;AACL,YAAU,OAAA,GAAA,QAAA;AAAA;AACZ;AAEF,QAAA4C,MAAK,MAAS,GAAA,QAAA;AACd,QAAA,IAAI,CAAC,OAAWe,IAAAA,YAAAA,IAAe,KAAK,IAAK,CAAA,aAAA,CAAc,OAAO,CAAG,EAAA;AAC/D,UAAK,IAAA,CAAA,IAAA,CAAK,uBAAwB,EAAA,IAAK,IAAK,CAAA,IAAA,KAAS3D,SAAQ,IAAS,KAAA,CAAC,IAAK,CAAA,kBAAA,EAAsB,EAAA;AAChG,YAAU,OAAA,GAAA,IAAA;AAAA,WACL,MAAA;AACL,YAAU,OAAA,GAAA,OAAA;AAAA;AACZ;AAEF,QAAI,IAAA,CAAC,OAAY2D,KAAAA,YAAAA,IAAe,CAAK,IAAA,CAAC,YAAY,IAAK,CAAA,GAAA,CAAI3D,QAAQ,CAAA,IAAI,CAAG,EAAA;AACxE,UAAc,WAAA,GAAA,IAAA;AAAA;AAEhB,QAAA,IAAI,CAAC,OAAA,IAAW,CAAC,OAAA,IAAW,CAAC,WAAa,EAAA;AACxC,UAAA,IAAI,YAAY,IAAK,CAAA,KAAA;AACrB,UAAA,IAAI,KAAK,aAAc,CAAA,KAAK,KAAK,IAAK,CAAA,aAAA,CAAc,KAAK,CAAG,EAAA;AAC1D,YAAI,IAAA,IAAA,CAAK,yBAA2B,EAAA;AAClC,cAAO,IAAA,GAAA,SAAA;AAAA,aACF,MAAA;AACL,cAAU,OAAA,GAAA,SAAA;AAAA;AACZ;AACF;AAIF,QAAA,IAAI,OAAS,EAAA;AAGX,UAAA4C,MAAK,QAAW,GAAA,KAAA;AAChB,UAAAA,MAAK,GAAM,GAAA,IAAA,CAAK,YAAY,IAAK,CAAA,YAAA,EAAc,KAAK,eAAe,CAAA;AACnE,UAAAA,KAAAA,CAAK,IAAI,IAAO,GAAA,OAAA;AAChB,UAAK,IAAA,CAAA,UAAA,CAAWA,KAAK,CAAA,GAAA,EAAK,YAAY,CAAA;AAAA,SACjC,MAAA;AACL,UAAA,IAAA,CAAK,sBAAsBA,KAAI,CAAA;AAAA;AAIjC,QAAIe,IAAAA,YAAAA,GAAc,MAAM,IAAK,CAAA,IAAA,KAAS3D,SAAQ,MAAU,IAAA,IAAA,KAAS,QAAY,IAAA,WAAA,IAAe,OAAS,EAAA;AACnG,UAAA,IAAI,gBAAgB,CAAC4C,KAAAA,CAAK,MAAUgB,IAAAA,aAAAA,CAAahB,OAAM,aAAa,CAAA;AACpE,UAAA,IAAI,oBAAoB,aAAiB,IAAA,sBAAA;AAEzC,UAAI,IAAA,aAAA,IAAiB,SAAS,QAAU,EAAA;AAAE,YAAA,IAAA,CAAK,KAAMA,CAAAA,KAAAA,CAAK,GAAI,CAAA,KAAA,EAAO,yCAAyC,CAAA;AAAA;AAC9G,UAAAA,KAAAA,CAAK,IAAO,GAAA,aAAA,GAAgB,aAAgB,GAAA,IAAA;AAC5C,UAAA,IAAA,CAAK,gBAAiBA,CAAAA,KAAAA,EAAM,WAAa,EAAA,OAAA,EAAS,iBAAiB,CAAA;AAAA,SAC9D,MAAA;AACL,UAAA,IAAA,CAAK,gBAAgBA,KAAI,CAAA;AAAA;AAG3B,QAAOA,OAAAA,KAAAA;AAAA,OACT;AAEA,MAAAM,KAAAA,CAAK,0BAA0B,WAAW;AACxC,QACE,OAAA,IAAA,CAAK,SAASlD,QAAQ,CAAA,IAAA,IACtB,KAAK,IAASA,KAAAA,QAAAA,CAAQ,aACtB,IAAK,CAAA,IAAA,KAASA,SAAQ,GACtB,IAAA,IAAA,CAAK,SAASA,QAAQ,CAAA,MAAA,IACtB,KAAK,IAASA,KAAAA,QAAAA,CAAQ,QACtB,IAAA,IAAA,CAAK,IAAK,CAAA,OAAA;AAAA,OAEd;AAEA,MAAAkD,KAAAA,CAAK,qBAAwB,GAAA,SAAS,OAAS,EAAA;AAC7C,QAAI,IAAA,IAAA,CAAK,IAASlD,KAAAA,QAAAA,CAAQ,SAAW,EAAA;AACnC,UAAI,IAAA,IAAA,CAAK,UAAU,aAAe,EAAA;AAChC,YAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,oDAAoD,CAAA;AAAA;AAE7E,UAAA,OAAA,CAAQ,QAAW,GAAA,KAAA;AACnB,UAAQ,OAAA,CAAA,GAAA,GAAM,KAAK,iBAAkB,EAAA;AAAA,SAChC,MAAA;AACL,UAAA,IAAA,CAAK,kBAAkB,OAAO,CAAA;AAAA;AAChC,OACF;AAEA,MAAAkD,MAAK,gBAAmB,GAAA,SAAS,MAAQ,EAAA,WAAA,EAAa,SAAS,iBAAmB,EAAA;AAEhF,QAAA,IAAI,MAAM,MAAO,CAAA,GAAA;AACjB,QAAI,IAAA,MAAA,CAAO,SAAS,aAAe,EAAA;AACjC,UAAA,IAAI,WAAa,EAAA;AAAE,YAAK,IAAA,CAAA,KAAA,CAAM,GAAI,CAAA,KAAA,EAAO,kCAAkC,CAAA;AAAA;AAC3E,UAAA,IAAI,OAAS,EAAA;AAAE,YAAK,IAAA,CAAA,KAAA,CAAM,GAAI,CAAA,KAAA,EAAO,sCAAsC,CAAA;AAAA;AAAG,mBACrE,MAAO,CAAA,MAAA,IAAUU,aAAa,CAAA,MAAA,EAAQ,WAAW,CAAG,EAAA;AAC7D,UAAK,IAAA,CAAA,KAAA,CAAM,GAAI,CAAA,KAAA,EAAO,wDAAwD,CAAA;AAAA;AAIhF,QAAA,IAAIC,SAAQ,MAAO,CAAA,KAAA,GAAQ,KAAK,WAAY,CAAA,WAAA,EAAa,SAAS,iBAAiB,CAAA;AAGnF,QAAA,IAAI,OAAO,IAAS,KAAA,KAAA,IAASA,MAAM,CAAA,MAAA,CAAO,WAAW,CACnD,EAAA;AAAE,UAAK,IAAA,CAAA,gBAAA,CAAiBA,MAAM,CAAA,KAAA,EAAO,8BAA8B,CAAA;AAAA;AACrE,QAAA,IAAI,OAAO,IAAS,KAAA,KAAA,IAASA,MAAM,CAAA,MAAA,CAAO,WAAW,CACnD,EAAA;AAAE,UAAK,IAAA,CAAA,gBAAA,CAAiBA,MAAM,CAAA,KAAA,EAAO,sCAAsC,CAAA;AAAA;AAC7E,QAAI,IAAA,MAAA,CAAO,SAAS,KAASA,IAAAA,MAAAA,CAAM,OAAO,CAAC,CAAA,CAAE,SAAS,aACpD,EAAA;AAAE,UAAA,IAAA,CAAK,iBAAiBA,MAAM,CAAA,MAAA,CAAO,CAAC,CAAA,CAAE,OAAO,+BAA+B,CAAA;AAAA;AAEhF,QAAO,OAAA,IAAA,CAAK,UAAW,CAAA,MAAA,EAAQ,kBAAkB,CAAA;AAAA,OACnD;AAEA,MAAAX,KAAAA,CAAK,eAAkB,GAAA,SAAS,KAAO,EAAA;AACrC,QAAIU,IAAAA,aAAAA,CAAa,KAAO,EAAA,aAAa,CAAG,EAAA;AACtC,UAAA,IAAA,CAAK,KAAM,CAAA,KAAA,CAAM,GAAI,CAAA,KAAA,EAAO,gDAAgD,CAAA;AAAA,mBACnE,KAAM,CAAA,MAAA,IAAUA,aAAa,CAAA,KAAA,EAAO,WAAW,CAAG,EAAA;AAC3D,UAAA,IAAA,CAAK,KAAM,CAAA,KAAA,CAAM,GAAI,CAAA,KAAA,EAAO,qDAAqD,CAAA;AAAA;AAGnF,QAAA,IAAI,IAAK,CAAA,GAAA,CAAI5D,QAAQ,CAAA,EAAE,CAAG,EAAA;AAExB,UAAI,IAAA,KAAA,GAAQ,KAAK,gBAAiB,EAAA;AAClC,UAAA,IAAI,mBAAmB,KAAM,CAAA,gBAAA;AAC7B,UAAA,KAAA,CAAM,gBAAmB,GAAA,IAAA;AACzB,UAAM,KAAA,CAAA,KAAA,GAAQ,KAAK,gBAAiB,EAAA;AACpC,UAAA,KAAA,CAAM,gBAAmB,GAAA,gBAAA;AAAA,SACpB,MAAA;AACL,UAAA,KAAA,CAAM,KAAQ,GAAA,IAAA;AAAA;AAEhB,QAAA,IAAA,CAAK,SAAU,EAAA;AAEf,QAAO,OAAA,IAAA,CAAK,UAAW,CAAA,KAAA,EAAO,oBAAoB,CAAA;AAAA,OACpD;AAEA,MAAAkD,KAAAA,CAAK,qBAAwB,GAAA,SAASN,KAAM,EAAA;AAC1C,QAAAA,KAAAA,CAAK,OAAO,EAAC;AAEb,QAAA,IAAI,YAAY,IAAK,CAAA,MAAA;AACrB,QAAA,IAAA,CAAK,SAAS,EAAC;AACf,QAAK,IAAA,CAAA,UAAA,CAAWZ,4BAA2BF,YAAW,CAAA;AACtD,QAAO,OAAA,IAAA,CAAK,IAAS9B,KAAAA,QAAAA,CAAQ,MAAQ,EAAA;AACnC,UAAI,IAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,IAAI,CAAA;AACnC,UAAA4C,KAAAA,CAAK,IAAK,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA;AAErB,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAA,IAAA,CAAK,SAAU,EAAA;AACf,QAAA,IAAA,CAAK,MAAS,GAAA,SAAA;AAEd,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,aAAa,CAAA;AAAA,OAC5C;AAEA,MAAAM,KAAK,CAAA,YAAA,GAAe,SAASN,KAAAA,EAAM,WAAa,EAAA;AAC9C,QAAI,IAAA,IAAA,CAAK,IAAS5C,KAAAA,QAAAA,CAAQ,IAAM,EAAA;AAC9B,UAAA4C,KAAAA,CAAK,EAAK,GAAA,IAAA,CAAK,UAAW,EAAA;AAC1B,UAAA,IAAI,WACF,EAAA;AAAE,YAAA,IAAA,CAAK,eAAgBA,CAAAA,KAAAA,CAAK,EAAIP,EAAAA,aAAAA,EAAc,KAAK,CAAA;AAAA;AAAG,SACnD,MAAA;AACL,UAAA,IAAI,gBAAgB,IAClB,EAAA;AAAE,YAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACpB,UAAAO,MAAK,EAAK,GAAA,IAAA;AAAA;AACZ,OACF;AAEA,MAAAM,KAAAA,CAAK,eAAkB,GAAA,SAASN,KAAM,EAAA;AACpC,QAAAA,KAAAA,CAAK,UAAa,GAAA,IAAA,CAAK,GAAI5C,CAAAA,QAAAA,CAAQ,QAAQ,CAAA,GAAI,IAAK,CAAA,mBAAA,CAAoB,IAAM,EAAA,KAAK,CAAI,GAAA,IAAA;AAAA,OACzF;AAEA,MAAAkD,KAAAA,CAAK,iBAAiB,WAAW;AAC/B,QAAI,IAAA,OAAA,GAAU,EAAC,QAAU,kBAAA,MAAA,CAAO,OAAO,IAAI,CAAA,EAAG,IAAM,EAAA,EAAE,EAAA;AACtD,QAAK,IAAA,CAAA,gBAAA,CAAiB,KAAK,OAAO,CAAA;AAClC,QAAA,OAAO,OAAQ,CAAA,QAAA;AAAA,OACjB;AAEA,MAAAA,KAAAA,CAAK,gBAAgB,WAAW;AAC9B,QAAI3C,IAAAA,IAAAA,GAAM,IAAK,CAAA,gBAAA,CAAiB,GAAI,EAAA;AACpC,QAAA,IAAI,WAAWA,IAAI,CAAA,QAAA;AACnB,QAAA,IAAI,OAAOA,IAAI,CAAA,IAAA;AACf,QAAI,IAAA,CAAC,IAAK,CAAA,OAAA,CAAQ,kBAAoB,EAAA;AAAE,UAAA;AAAA;AACxC,QAAI,IAAA,GAAA,GAAM,KAAK,gBAAiB,CAAA,MAAA;AAChC,QAAA,IAAI,SAAS,GAAQ,KAAA,CAAA,GAAI,OAAO,IAAK,CAAA,gBAAA,CAAiB,MAAM,CAAC,CAAA;AAC7D,QAAA,KAAA,IAAShB,KAAI,CAAGA,EAAAA,EAAAA,GAAI,IAAK,CAAA,MAAA,EAAQ,EAAEA,EAAG,EAAA;AACpC,UAAI,IAAA,EAAA,GAAK,KAAKA,EAAC,CAAA;AACf,UAAA,IAAI,CAACrB,OAAAA,CAAO,QAAU,EAAA,EAAA,CAAG,IAAI,CAAG,EAAA;AAC9B,YAAA,IAAI,MAAQ,EAAA;AACV,cAAO,MAAA,CAAA,IAAA,CAAK,KAAK,EAAE,CAAA;AAAA,aACd,MAAA;AACL,cAAA,IAAA,CAAK,iBAAiB,EAAG,CAAA,KAAA,EAAQ,kBAAsB,GAAA,EAAA,CAAG,OAAQ,0CAA2C,CAAA;AAAA;AAC/G;AACF;AACF,OACF;AAEA,MAASwF,SAAAA,wBAAAA,CAAwB,gBAAgB,OAAS,EAAA;AACxD,QAAIlF,IAAAA,KAAAA,GAAO,QAAQ,GAAI,CAAA,IAAA;AACvB,QAAI,IAAA,IAAA,GAAO,eAAeA,KAAI,CAAA;AAE9B,QAAA,IAAI,IAAO,GAAA,MAAA;AACX,QAAI,IAAA,OAAA,CAAQ,SAAS,kBAAuB,KAAA,OAAA,CAAQ,SAAS,KAAS,IAAA,OAAA,CAAQ,SAAS,KAAQ,CAAA,EAAA;AAC7F,UAAA,IAAA,GAAA,CAAQ,OAAQ,CAAA,MAAA,GAAS,GAAM,GAAA,GAAA,IAAO,OAAQ,CAAA,IAAA;AAAA;AAIhD,QAAA,IACE,IAAS,KAAA,MAAA,IAAU,IAAS,KAAA,MAAA,IAC5B,SAAS,MAAU,IAAA,IAAA,KAAS,MAC5B,IAAA,IAAA,KAAS,UAAU,IAAS,KAAA,MAAA,IAC5B,IAAS,KAAA,MAAA,IAAU,SAAS,MAC5B,EAAA;AACA,UAAA,cAAA,CAAeA,KAAI,CAAI,GAAA,MAAA;AACvB,UAAO,OAAA,KAAA;AAAA,SACT,MAAA,IAAW,CAAC,IAAM,EAAA;AAChB,UAAA,cAAA,CAAeA,KAAI,CAAI,GAAA,IAAA;AACvB,UAAO,OAAA,KAAA;AAAA,SACF,MAAA;AACL,UAAO,OAAA,IAAA;AAAA;AACT;AAGF,MAASoF,SAAAA,aAAAA,CAAahB,OAAMpE,KAAM,EAAA;AAChC,QAAA,IAAI,WAAWoE,KAAK,CAAA,QAAA;AACpB,QAAA,IAAI,MAAMA,KAAK,CAAA,GAAA;AACf,QAAA,OAAO,CAAC,QAAA,KACN,GAAI,CAAA,IAAA,KAAS,YAAgB,IAAA,GAAA,CAAI,IAASpE,KAAAA,KAAAA,IAC1C,GAAI,CAAA,IAAA,KAAS,SAAa,IAAA,GAAA,CAAI,KAAUA,KAAAA,KAAAA,CAAAA;AAAA;AAM5C,MAAA0E,KAAK,CAAA,yBAAA,GAA4B,SAASN,KAAAA,EAAMlE,QAAS,EAAA;AACvD,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAAI,EAAA;AAClC,UAAI,IAAA,IAAA,CAAK,aAAc,CAAA,IAAI,CAAG,EAAA;AAC5B,YAAAkE,KAAAA,CAAK,QAAW,GAAA,IAAA,CAAK,qBAAsB,EAAA;AAC3C,YAAA,IAAA,CAAK,WAAYlE,CAAAA,QAAAA,EAASkE,KAAK,CAAA,QAAA,EAAU,KAAK,YAAY,CAAA;AAAA,WACrD,MAAA;AACL,YAAAA,MAAK,QAAW,GAAA,IAAA;AAAA;AAClB;AAEF,QAAA,IAAA,CAAK,iBAAiB,MAAM,CAAA;AAC5B,QAAI,IAAA,IAAA,CAAK,IAAS5C,KAAAA,QAAAA,CAAQ,MAAQ,EAAA;AAAE,UAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACpD,QAAA4C,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,aAAc,EAAA;AACjC,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAC9B,EAAA;AAAE,UAAAA,KAAAA,CAAK,UAAa,GAAA,IAAA,CAAK,eAAgB,EAAA;AAAA;AAC3C,QAAA,IAAA,CAAK,SAAU,EAAA;AACf,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,sBAAsB,CAAA;AAAA,OACrD;AAEA,MAAAM,KAAK,CAAA,WAAA,GAAc,SAASN,KAAAA,EAAMlE,QAAS,EAAA;AACzC,QAAA,IAAA,CAAK,IAAK,EAAA;AAEV,QAAA,IAAI,IAAK,CAAA,GAAA,CAAIsB,QAAQ,CAAA,IAAI,CAAG,EAAA;AAC1B,UAAO,OAAA,IAAA,CAAK,yBAA0B4C,CAAAA,KAAAA,EAAMlE,QAAO,CAAA;AAAA;AAErD,QAAA,IAAI,IAAK,CAAA,GAAA,CAAIsB,QAAQ,CAAA,QAAQ,CAAG,EAAA;AAC9B,UAAA,IAAA,CAAK,WAAYtB,CAAAA,QAAAA,EAAS,SAAW,EAAA,IAAA,CAAK,YAAY,CAAA;AACtD,UAAAkE,KAAAA,CAAK,WAAc,GAAA,IAAA,CAAK,6BAA8B,EAAA;AACtD,UAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,0BAA0B,CAAA;AAAA;AAGzD,QAAI,IAAA,IAAA,CAAK,4BAA8B,EAAA;AACrC,UAAAA,KAAK,CAAA,WAAA,GAAc,IAAK,CAAA,sBAAA,CAAuBA,KAAI,CAAA;AACnD,UAAIA,IAAAA,KAAAA,CAAK,WAAY,CAAA,IAAA,KAAS,qBAC5B,EAAA;AAAE,YAAA,IAAA,CAAK,mBAAoBlE,CAAAA,QAAAA,EAASkE,KAAK,CAAA,WAAA,CAAY,YAAY,CAAA;AAAA,WAEjE,MAAA;AAAE,YAAK,IAAA,CAAA,WAAA,CAAYlE,UAASkE,KAAK,CAAA,WAAA,CAAY,IAAIA,KAAK,CAAA,WAAA,CAAY,GAAG,KAAK,CAAA;AAAA;AAC5E,UAAAA,KAAAA,CAAK,aAAa,EAAC;AACnB,UAAAA,MAAK,MAAS,GAAA,IAAA;AAAA,SACT,MAAA;AACL,UAAAA,MAAK,WAAc,GAAA,IAAA;AACnB,UAAAA,KAAK,CAAA,UAAA,GAAa,IAAK,CAAA,qBAAA,CAAsBlE,QAAO,CAAA;AACpD,UAAI,IAAA,IAAA,CAAK,aAAc,CAAA,MAAM,CAAG,EAAA;AAC9B,YAAI,IAAA,IAAA,CAAK,IAASsB,KAAAA,QAAAA,CAAQ,MAAQ,EAAA;AAAE,cAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACpD,YAAA4C,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,aAAc,EAAA;AACjC,YAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAC9B,EAAA;AAAE,cAAAA,KAAAA,CAAK,UAAa,GAAA,IAAA,CAAK,eAAgB,EAAA;AAAA;AAAG,WACzC,MAAA;AACL,YAASrD,KAAAA,IAAAA,EAAAA,GAAI,GAAG4D,KAAOP,GAAAA,KAAAA,CAAK,YAAYrD,EAAI4D,GAAAA,KAAAA,CAAK,MAAQ5D,EAAAA,EAAAA,IAAK,CAAG,EAAA;AAE/D,cAAI,IAAA,IAAA,GAAO4D,MAAK5D,EAAC,CAAA;AAEjB,cAAK,IAAA,CAAA,eAAA,CAAgB,KAAK,KAAK,CAAA;AAE/B,cAAK,IAAA,CAAA,gBAAA,CAAiB,KAAK,KAAK,CAAA;AAEhC,cAAI,IAAA,IAAA,CAAK,KAAM,CAAA,IAAA,KAAS,SAAW,EAAA;AACjC,gBAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,KAAM,CAAA,KAAA,EAAO,wEAAwE,CAAA;AAAA;AACvG;AAGF,YAAAqD,MAAK,MAAS,GAAA,IAAA;AAAA;AAEhB,UAAA,IAAA,CAAK,SAAU,EAAA;AAAA;AAEjB,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,wBAAwB,CAAA;AAAA,OACvD;AAEA,MAAAM,KAAAA,CAAK,sBAAyB,GAAA,SAASN,KAAM,EAAA;AAC3C,QAAO,OAAA,IAAA,CAAK,eAAe,IAAI,CAAA;AAAA,OACjC;AAEA,MAAAM,KAAAA,CAAK,gCAAgC,WAAW;AAC9C,QAAI,IAAA,OAAA;AACJ,QAAA,IAAI,KAAK,IAASlD,KAAAA,QAAAA,CAAQ,cAAc,OAAU,GAAA,IAAA,CAAK,iBAAoB,CAAA,EAAA;AACzE,UAAI,IAAA,KAAA,GAAQ,KAAK,SAAU,EAAA;AAC3B,UAAA,IAAA,CAAK,IAAK,EAAA;AACV,UAAA,IAAI,OAAS,EAAA;AAAE,YAAA,IAAA,CAAK,IAAK,EAAA;AAAA;AACzB,UAAA,OAAO,KAAK,aAAc,CAAA,KAAA,EAAOsD,eAAiBG,GAAAA,iBAAAA,EAAkB,OAAO,OAAO,CAAA;AAAA,SACzE,MAAA,IAAA,IAAA,CAAK,IAASzD,KAAAA,QAAAA,CAAQ,MAAQ,EAAA;AACvC,UAAI,IAAA,KAAA,GAAQ,KAAK,SAAU,EAAA;AAC3B,UAAO,OAAA,IAAA,CAAK,UAAW,CAAA,KAAA,EAAO,YAAY,CAAA;AAAA,SACrC,MAAA;AACL,UAAI,IAAA,WAAA,GAAc,KAAK,gBAAiB,EAAA;AACxC,UAAA,IAAA,CAAK,SAAU,EAAA;AACf,UAAO,OAAA,WAAA;AAAA;AACT,OACF;AAEA,MAAAkD,KAAK,CAAA,WAAA,GAAc,SAASxE,QAAAA,EAASF,OAAM,GAAK,EAAA;AAC9C,QAAA,IAAI,CAACE,QAAS,EAAA;AAAE,UAAA;AAAA;AAChB,QAAI,IAAA,OAAOF,UAAS,QAClB,EAAA;AAAE,UAAAA,QAAOA,KAAK,CAAA,IAAA,KAAS,YAAeA,GAAAA,KAAAA,CAAK,OAAOA,KAAK,CAAA,KAAA;AAAA;AACzD,QAAIN,IAAAA,OAAAA,CAAOQ,QAASF,EAAAA,KAAI,CACtB,EAAA;AAAE,UAAA,IAAA,CAAK,gBAAiB,CAAA,GAAA,EAAK,oBAAuBA,GAAAA,KAAAA,GAAO,GAAG,CAAA;AAAA;AAChE,QAAAE,QAAAA,CAAQF,KAAI,CAAI,GAAA,IAAA;AAAA,OAClB;AAEA,MAAA0E,KAAK,CAAA,kBAAA,GAAqB,SAASxE,QAAAA,EAAS,GAAK,EAAA;AAC/C,QAAA,IAAI,OAAO,GAAI,CAAA,IAAA;AACf,QAAA,IAAI,SAAS,YACX,EAAA;AAAE,UAAA,IAAA,CAAK,WAAYA,CAAAA,QAAAA,EAAS,GAAK,EAAA,GAAA,CAAI,KAAK,CAAA;AAAA,SAAG,MAAA,IACtC,SAAS,eAChB,EAAA;AAAE,UAASa,KAAAA,IAAAA,EAAAA,GAAI,GAAG4D,KAAO,GAAA,GAAA,CAAI,YAAY5D,EAAI4D,GAAAA,KAAAA,CAAK,MAAQ5D,EAAAA,EAAAA,IAAK,CAC7D,EAAA;AACE,YAAI,IAAA,IAAA,GAAO4D,MAAK5D,EAAC,CAAA;AAEjB,YAAK,IAAA,CAAA,kBAAA,CAAmBb,UAAS,IAAI,CAAA;AAAA;AACvC,SAAE,MAAA,IACG,SAAS,cAChB,EAAA;AAAE,UAAS,KAAA,IAAA,GAAA,GAAM,GAAG,MAAS,GAAA,GAAA,CAAI,UAAU,GAAM,GAAA,MAAA,CAAO,MAAQ,EAAA,GAAA,IAAO,CAAG,EAAA;AACxE,YAAI,IAAA,GAAA,GAAM,OAAO,GAAG,CAAA;AAElB,YAAA,IAAI,GAAK,EAAA;AAAE,cAAK,IAAA,CAAA,kBAAA,CAAmBA,UAAS,GAAG,CAAA;AAAA;AAAG;AACtD,SAAE,MAAA,IACK,SAAS,UAChB,EAAA;AAAE,UAAK,IAAA,CAAA,kBAAA,CAAmBA,QAAS,EAAA,GAAA,CAAI,KAAK,CAAA;AAAA,SAAG,MAAA,IACxC,SAAS,mBAChB,EAAA;AAAE,UAAK,IAAA,CAAA,kBAAA,CAAmBA,QAAS,EAAA,GAAA,CAAI,IAAI,CAAA;AAAA,SAAG,MAAA,IACvC,SAAS,aAChB,EAAA;AAAE,UAAK,IAAA,CAAA,kBAAA,CAAmBA,QAAS,EAAA,GAAA,CAAI,QAAQ,CAAA;AAAA;AAAG,OACtD;AAEA,MAAAwE,KAAK,CAAA,mBAAA,GAAsB,SAASxE,QAAAA,EAAS,KAAO,EAAA;AAClD,QAAA,IAAI,CAACA,QAAS,EAAA;AAAE,UAAA;AAAA;AAChB,QAASa,KAAAA,IAAAA,EAAAA,GAAI,GAAG4D,KAAO,GAAA,KAAA,EAAO5D,KAAI4D,KAAK,CAAA,MAAA,EAAQ5D,MAAK,CAClD,EAAA;AACA,UAAI,IAAA,IAAA,GAAO4D,MAAK5D,EAAC,CAAA;AAEjB,UAAK,IAAA,CAAA,kBAAA,CAAmBb,QAAS,EAAA,IAAA,CAAK,EAAE,CAAA;AAAA;AAC1C,OACF;AAEA,MAAAwE,KAAAA,CAAK,6BAA6B,WAAW;AAC3C,QAAO,OAAA,IAAA,CAAK,KAAK,OAAY,KAAA,KAAA,IAC3B,KAAK,IAAK,CAAA,OAAA,KAAY,WACtB,IAAK,CAAA,IAAA,CAAK,YAAY,OACtB,IAAA,IAAA,CAAK,KAAK,OAAY,KAAA,UAAA,IACtB,KAAK,KAAM,EAAA,IACX,KAAK,eAAgB,EAAA;AAAA,OACzB;AAIA,MAAAA,KAAAA,CAAK,oBAAuB,GAAA,SAASxE,QAAS,EAAA;AAC5C,QAAIkE,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAAA,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,qBAAsB,EAAA;AAExC,QAAAA,KAAAA,CAAK,WAAW,IAAK,CAAA,aAAA,CAAc,IAAI,CAAI,GAAA,IAAA,CAAK,qBAAsB,EAAA,GAAIA,KAAK,CAAA,KAAA;AAC/E,QAAK,IAAA,CAAA,WAAA;AAAA,UACHlE,QAAAA;AAAA,UACAkE,KAAK,CAAA,QAAA;AAAA,UACLA,MAAK,QAAS,CAAA;AAAA,SAChB;AAEA,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAAA,OAChD;AAEA,MAAAM,KAAAA,CAAK,qBAAwB,GAAA,SAASxE,QAAS,EAAA;AAC7C,QAAI,IAAA,KAAA,GAAQ,EAAC,EAAG,KAAQ,GAAA,IAAA;AAExB,QAAK,IAAA,CAAA,MAAA,CAAOsB,SAAQ,MAAM,CAAA;AAC1B,QAAA,OAAO,CAAC,IAAA,CAAK,GAAIA,CAAAA,QAAAA,CAAQ,MAAM,CAAG,EAAA;AAChC,UAAA,IAAI,CAAC,KAAO,EAAA;AACV,YAAK,IAAA,CAAA,MAAA,CAAOA,SAAQ,KAAK,CAAA;AACzB,YAAA,IAAI,IAAK,CAAA,kBAAA,CAAmBA,QAAQ,CAAA,MAAM,CAAG,EAAA;AAAE,cAAA;AAAA;AAAM,WAChD,MAAA;AAAE,YAAQ,KAAA,GAAA,KAAA;AAAA;AAEjB,UAAA,KAAA,CAAM,IAAK,CAAA,IAAA,CAAK,oBAAqBtB,CAAAA,QAAO,CAAC,CAAA;AAAA;AAE/C,QAAO,OAAA,KAAA;AAAA,OACT;AAIA,MAAAwE,KAAAA,CAAK,WAAc,GAAA,SAASN,KAAM,EAAA;AAChC,QAAA,IAAA,CAAK,IAAK,EAAA;AAGV,QAAI,IAAA,IAAA,CAAK,IAAS5C,KAAAA,QAAAA,CAAQ,MAAQ,EAAA;AAChC,UAAA4C,MAAK,UAAaY,GAAAA,QAAAA;AAClB,UAAAZ,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,aAAc,EAAA;AAAA,SAC5B,MAAA;AACL,UAAAA,KAAAA,CAAK,UAAa,GAAA,IAAA,CAAK,qBAAsB,EAAA;AAC7C,UAAA,IAAA,CAAK,iBAAiB,MAAM,CAAA;AAC5B,UAAAA,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,IAAS5C,KAAAA,QAAAA,CAAQ,SAAS,IAAK,CAAA,aAAA,EAAkB,GAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAEtF,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAC9B,EAAA;AAAE,UAAA4C,KAAAA,CAAK,UAAa,GAAA,IAAA,CAAK,eAAgB,EAAA;AAAA;AAC3C,QAAA,IAAA,CAAK,SAAU,EAAA;AACf,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,mBAAmB,CAAA;AAAA,OAClD;AAIA,MAAAM,KAAAA,CAAK,uBAAuB,WAAW;AACrC,QAAIN,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAAA,KAAAA,CAAK,QAAW,GAAA,IAAA,CAAK,qBAAsB,EAAA;AAE3C,QAAI,IAAA,IAAA,CAAK,aAAc,CAAA,IAAI,CAAG,EAAA;AAC5B,UAAAA,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,UAAW,EAAA;AAAA,SACxB,MAAA;AACL,UAAK,IAAA,CAAA,eAAA,CAAgBA,MAAK,QAAQ,CAAA;AAClC,UAAAA,KAAAA,CAAK,QAAQA,KAAK,CAAA,QAAA;AAAA;AAEpB,QAAK,IAAA,CAAA,eAAA,CAAgBA,KAAK,CAAA,KAAA,EAAOP,aAAY,CAAA;AAE7C,QAAO,OAAA,IAAA,CAAK,UAAWO,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAAA,OAChD;AAEA,MAAAM,KAAAA,CAAK,8BAA8B,WAAW;AAE5C,QAAIN,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAAA,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,UAAW,EAAA;AAC7B,QAAK,IAAA,CAAA,eAAA,CAAgBA,KAAK,CAAA,KAAA,EAAOP,aAAY,CAAA;AAC7C,QAAO,OAAA,IAAA,CAAK,UAAWO,CAAAA,KAAAA,EAAM,wBAAwB,CAAA;AAAA,OACvD;AAEA,MAAAM,KAAAA,CAAK,gCAAgC,WAAW;AAC9C,QAAIN,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAA,IAAA,CAAK,iBAAiB,IAAI,CAAA;AAC1B,QAAAA,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,UAAW,EAAA;AAC7B,QAAK,IAAA,CAAA,eAAA,CAAgBA,KAAK,CAAA,KAAA,EAAOP,aAAY,CAAA;AAC7C,QAAO,OAAA,IAAA,CAAK,UAAWO,CAAAA,KAAAA,EAAM,0BAA0B,CAAA;AAAA,OACzD;AAEA,MAAAM,KAAAA,CAAK,wBAAwB,WAAW;AACtC,QAAI,IAAA,KAAA,GAAQ,EAAC,EAAG,KAAQ,GAAA,IAAA;AACxB,QAAI,IAAA,IAAA,CAAK,IAASlD,KAAAA,QAAAA,CAAQ,IAAM,EAAA;AAC9B,UAAM,KAAA,CAAA,IAAA,CAAK,IAAK,CAAA,2BAAA,EAA6B,CAAA;AAC7C,UAAA,IAAI,CAAC,IAAA,CAAK,GAAIA,CAAAA,QAAAA,CAAQ,KAAK,CAAG,EAAA;AAAE,YAAO,OAAA,KAAA;AAAA;AAAM;AAE/C,QAAI,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,IAAM,EAAA;AAC9B,UAAM,KAAA,CAAA,IAAA,CAAK,IAAK,CAAA,6BAAA,EAA+B,CAAA;AAC/C,UAAO,OAAA,KAAA;AAAA;AAET,QAAK,IAAA,CAAA,MAAA,CAAOA,SAAQ,MAAM,CAAA;AAC1B,QAAA,OAAO,CAAC,IAAA,CAAK,GAAIA,CAAAA,QAAAA,CAAQ,MAAM,CAAG,EAAA;AAChC,UAAA,IAAI,CAAC,KAAO,EAAA;AACV,YAAK,IAAA,CAAA,MAAA,CAAOA,SAAQ,KAAK,CAAA;AACzB,YAAA,IAAI,IAAK,CAAA,kBAAA,CAAmBA,QAAQ,CAAA,MAAM,CAAG,EAAA;AAAE,cAAA;AAAA;AAAM,WAChD,MAAA;AAAE,YAAQ,KAAA,GAAA,KAAA;AAAA;AAEjB,UAAM,KAAA,CAAA,IAAA,CAAK,IAAK,CAAA,oBAAA,EAAsB,CAAA;AAAA;AAExC,QAAO,OAAA,KAAA;AAAA,OACT;AAEA,MAAAkD,KAAAA,CAAK,kBAAkB,WAAW;AAChC,QAAA,IAAI,QAAQ,EAAC;AACb,QAAA,IAAI,CAAC,IAAA,CAAK,GAAIlD,CAAAA,QAAAA,CAAQ,KAAK,CAAG,EAAA;AAC5B,UAAO,OAAA,KAAA;AAAA;AAET,QAAK,IAAA,CAAA,MAAA,CAAOA,SAAQ,MAAM,CAAA;AAC1B,QAAA,IAAI,gBAAgB,EAAC;AACrB,QAAA,IAAI,KAAQ,GAAA,IAAA;AACZ,QAAA,OAAO,CAAC,IAAA,CAAK,GAAIA,CAAAA,QAAAA,CAAQ,MAAM,CAAG,EAAA;AAChC,UAAA,IAAI,CAAC,KAAO,EAAA;AACV,YAAK,IAAA,CAAA,MAAA,CAAOA,SAAQ,KAAK,CAAA;AACzB,YAAA,IAAI,IAAK,CAAA,kBAAA,CAAmBA,QAAQ,CAAA,MAAM,CAAG,EAAA;AAAE,cAAA;AAAA;AAAM,WAChD,MAAA;AAAE,YAAQ,KAAA,GAAA,KAAA;AAAA;AAEjB,UAAI,IAAA,IAAA,GAAO,KAAK,oBAAqB,EAAA;AACrC,UAAI,IAAA,OAAA,GAAU,KAAK,GAAI,CAAA,IAAA,KAAS,eAAe,IAAK,CAAA,GAAA,CAAI,IAAO,GAAA,IAAA,CAAK,GAAI,CAAA,KAAA;AACxE,UAAI9B,IAAAA,OAAAA,CAAO,aAAe,EAAA,OAAO,CAC/B,EAAA;AAAE,YAAA,IAAA,CAAK,iBAAiB,IAAK,CAAA,GAAA,CAAI,KAAO,EAAA,2BAAA,GAA8B,UAAU,GAAG,CAAA;AAAA;AACrF,UAAA,aAAA,CAAc,OAAO,CAAI,GAAA,IAAA;AACzB,UAAA,KAAA,CAAM,KAAK,IAAI,CAAA;AAAA;AAEjB,QAAO,OAAA,KAAA;AAAA,OACT;AAEA,MAAAgF,KAAAA,CAAK,uBAAuB,WAAW;AACrC,QAAIN,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAAA,KAAK,CAAA,GAAA,GAAM,IAAK,CAAA,IAAA,KAAS5C,SAAQ,MAAS,GAAA,IAAA,CAAK,aAAc,EAAA,GAAI,IAAK,CAAA,UAAA,CAAW,IAAK,CAAA,OAAA,CAAQ,kBAAkB,OAAO,CAAA;AACvH,QAAK,IAAA,CAAA,MAAA,CAAOA,SAAQ,KAAK,CAAA;AACzB,QAAI,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,MAAQ,EAAA;AAChC,UAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAElB,QAAA4C,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,aAAc,EAAA;AAChC,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAAA,OAChD;AAEA,MAAAM,KAAAA,CAAK,wBAAwB,WAAW;AACtC,QAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,IAAe,MAAM,IAAK,CAAA,IAAA,KAASlD,SAAQ,MAAQ,EAAA;AAClE,UAAA,IAAI,aAAgB,GAAA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,KAAK,CAAA;AAChD,UAAA,IAAIa,cAAc,CAAA,IAAA,CAAK,aAAc,CAAA,KAAK,CAAG,EAAA;AAC3C,YAAK,IAAA,CAAA,KAAA,CAAM,aAAc,CAAA,KAAA,EAAO,iDAAiD,CAAA;AAAA;AAEnF,UAAO,OAAA,aAAA;AAAA;AAET,QAAO,OAAA,IAAA,CAAK,WAAW,IAAI,CAAA;AAAA,OAC7B;AAGA,MAAAqC,KAAAA,CAAK,sBAAyB,GAAA,SAAS,UAAY,EAAA;AACjD,QAAA,KAAA,IAAS3D,EAAI,GAAA,CAAA,EAAGA,EAAI,GAAA,UAAA,CAAW,MAAU,IAAA,IAAA,CAAK,oBAAqB,CAAA,UAAA,CAAWA,EAAC,CAAC,CAAG,EAAA,EAAEA,EAAG,EAAA;AACtF,UAAWA,UAAAA,CAAAA,EAAC,CAAE,CAAA,SAAA,GAAY,UAAWA,CAAAA,EAAC,EAAE,UAAW,CAAA,GAAA,CAAI,KAAM,CAAA,CAAA,EAAG,CAAE,CAAA,CAAA;AAAA;AACpE,OACF;AACA,MAAA2D,KAAAA,CAAK,oBAAuB,GAAA,SAAS,SAAW,EAAA;AAC9C,QAAA,OACE,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,IAC5B,UAAU,IAAS,KAAA,qBAAA,IACnB,SAAU,CAAA,UAAA,CAAW,IAAS,KAAA,SAAA,IAC9B,OAAO,SAAA,CAAU,WAAW,KAAU,KAAA,QAAA;AAAA,SAErC,IAAA,CAAK,KAAM,CAAA,SAAA,CAAU,KAAK,CAAA,KAAM,OAAQ,IAAK,CAAA,KAAA,CAAM,SAAU,CAAA,KAAK,CAAM,KAAA,GAAA,CAAA;AAAA,OAE7E;AAEA,MAAA,IAAIY,QAAOrB,OAAO,CAAA,SAAA;AAKlB,MAAAqB,KAAK,CAAA,YAAA,GAAe,SAASlB,KAAAA,EAAM,WAAW,sBAAwB,EAAA;AACpE,QAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,IAAKA,KAAM,EAAA;AACzC,UAAA,QAAQA,MAAK,IAAM;AAAA,YACnB,KAAK,YAAA;AACH,cAAA,IAAI,IAAK,CAAA,OAAA,IAAWA,KAAK,CAAA,IAAA,KAAS,OAChC,EAAA;AAAE,gBAAK,IAAA,CAAA,KAAA,CAAMA,KAAK,CAAA,KAAA,EAAO,2DAA2D,CAAA;AAAA;AACtF,cAAA;AAAA,YAEF,KAAK,eAAA;AAAA,YACL,KAAK,cAAA;AAAA,YACL,KAAK,mBAAA;AAAA,YACL,KAAK,aAAA;AACH,cAAA;AAAA,YAEF,KAAK,kBAAA;AACH,cAAAA,MAAK,IAAO,GAAA,eAAA;AACZ,cAAA,IAAI,sBAAwB,EAAA;AAAE,gBAAK,IAAA,CAAA,kBAAA,CAAmB,wBAAwB,IAAI,CAAA;AAAA;AAClF,cAASrD,KAAAA,IAAAA,EAAAA,GAAI,GAAG4D,KAAOP,GAAAA,KAAAA,CAAK,YAAYrD,EAAI4D,GAAAA,KAAAA,CAAK,MAAQ5D,EAAAA,EAAAA,IAAK,CAAG,EAAA;AAC/D,gBAAI,IAAA,IAAA,GAAO4D,MAAK5D,EAAC,CAAA;AAEnB,gBAAK,IAAA,CAAA,YAAA,CAAa,MAAM,SAAS,CAAA;AAM/B,gBACE,IAAA,IAAA,CAAK,IAAS,KAAA,aAAA,KACb,IAAK,CAAA,QAAA,CAAS,SAAS,cAAkB,IAAA,IAAA,CAAK,QAAS,CAAA,IAAA,KAAS,eACjE,CAAA,EAAA;AACA,kBAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,QAAS,CAAA,KAAA,EAAO,kBAAkB,CAAA;AAAA;AACpD;AAEF,cAAA;AAAA,YAEF,KAAK,UAAA;AAEH,cAAIqD,IAAAA,KAAAA,CAAK,SAAS,MAAQ,EAAA;AAAE,gBAAA,IAAA,CAAK,KAAMA,CAAAA,KAAAA,CAAK,GAAI,CAAA,KAAA,EAAO,+CAA+C,CAAA;AAAA;AACtG,cAAK,IAAA,CAAA,YAAA,CAAaA,KAAK,CAAA,KAAA,EAAO,SAAS,CAAA;AACvC,cAAA;AAAA,YAEF,KAAK,iBAAA;AACH,cAAAA,MAAK,IAAO,GAAA,cAAA;AACZ,cAAA,IAAI,sBAAwB,EAAA;AAAE,gBAAK,IAAA,CAAA,kBAAA,CAAmB,wBAAwB,IAAI,CAAA;AAAA;AAClF,cAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,QAAA,EAAU,SAAS,CAAA;AAC9C,cAAA;AAAA,YAEF,KAAK,eAAA;AACH,cAAAA,MAAK,IAAO,GAAA,aAAA;AACZ,cAAK,IAAA,CAAA,YAAA,CAAaA,KAAK,CAAA,QAAA,EAAU,SAAS,CAAA;AAC1C,cAAIA,IAAAA,KAAAA,CAAK,QAAS,CAAA,IAAA,KAAS,mBACzB,EAAA;AAAE,gBAAA,IAAA,CAAK,KAAMA,CAAAA,KAAAA,CAAK,QAAS,CAAA,KAAA,EAAO,2CAA2C,CAAA;AAAA;AAC/E,cAAA;AAAA,YAEF,KAAK,sBAAA;AACH,cAAIA,IAAAA,KAAAA,CAAK,aAAa,GAAK,EAAA;AAAE,gBAAA,IAAA,CAAK,KAAMA,CAAAA,KAAAA,CAAK,IAAK,CAAA,GAAA,EAAK,6DAA6D,CAAA;AAAA;AACpH,cAAAA,MAAK,IAAO,GAAA,mBAAA;AACZ,cAAA,OAAOA,KAAK,CAAA,QAAA;AACZ,cAAK,IAAA,CAAA,YAAA,CAAaA,KAAK,CAAA,IAAA,EAAM,SAAS,CAAA;AACtC,cAAA;AAAA,YAEF,KAAK,yBAAA;AACH,cAAA,IAAA,CAAK,YAAaA,CAAAA,KAAAA,CAAK,UAAY,EAAA,SAAA,EAAW,sBAAsB,CAAA;AACpE,cAAA;AAAA,YAEF,KAAK,iBAAA;AACH,cAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,mDAAmD,CAAA;AACrF,cAAA;AAAA,YAEF,KAAK,kBAAA;AACH,cAAA,IAAI,CAAC,SAAW,EAAA;AAAE,gBAAA;AAAA;AAAM,YAE1B;AACE,cAAK,IAAA,CAAA,KAAA,CAAMA,KAAK,CAAA,KAAA,EAAO,qBAAqB,CAAA;AAAA;AAC9C,mBACS,sBAAwB,EAAA;AAAE,UAAK,IAAA,CAAA,kBAAA,CAAmB,wBAAwB,IAAI,CAAA;AAAA;AACzF,QAAOA,OAAAA,KAAAA;AAAA,OACT;AAIA,MAAAkB,KAAK,CAAA,gBAAA,GAAmB,SAAS,QAAA,EAAU,SAAW,EAAA;AACpD,QAAA,IAAI,MAAM,QAAS,CAAA,MAAA;AACnB,QAAA,KAAA,IAASvE,EAAI,GAAA,CAAA,EAAGA,EAAI,GAAA,GAAA,EAAKA,EAAK,EAAA,EAAA;AAC5B,UAAI,IAAA,GAAA,GAAM,SAASA,EAAC,CAAA;AACpB,UAAA,IAAI,GAAK,EAAA;AAAE,YAAK,IAAA,CAAA,YAAA,CAAa,KAAK,SAAS,CAAA;AAAA;AAAG;AAEhD,QAAA,IAAI,GAAK,EAAA;AACP,UAAI,IAAA,IAAA,GAAO,QAAS,CAAA,GAAA,GAAM,CAAC,CAAA;AAC3B,UAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,WAAgB,KAAA,CAAA,IAAK,SAAa,IAAA,IAAA,IAAQ,IAAK,CAAA,IAAA,KAAS,aAAiB,IAAA,IAAA,CAAK,QAAS,CAAA,IAAA,KAAS,YAC/G,EAAA;AAAE,YAAK,IAAA,CAAA,UAAA,CAAW,IAAK,CAAA,QAAA,CAAS,KAAK,CAAA;AAAA;AAAG;AAE5C,QAAO,OAAA,QAAA;AAAA,OACT;AAIA,MAAAuE,KAAAA,CAAK,WAAc,GAAA,SAAS,sBAAwB,EAAA;AAClD,QAAIlB,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAAA,KAAK,CAAA,QAAA,GAAW,IAAK,CAAA,gBAAA,CAAiB,OAAO,sBAAsB,CAAA;AACnE,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,eAAe,CAAA;AAAA,OAC9C;AAEA,MAAAkB,KAAAA,CAAK,mBAAmB,WAAW;AACjC,QAAIlB,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAA,IAAA,CAAK,IAAK,EAAA;AAGV,QAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,KAAgB,KAAK,IAAK,CAAA,IAAA,KAAS5C,SAAQ,IAC1D,EAAA;AAAE,UAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAEpB,QAAA4C,KAAAA,CAAK,QAAW,GAAA,IAAA,CAAK,gBAAiB,EAAA;AAEtC,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,aAAa,CAAA;AAAA,OAC5C;AAIA,MAAAkB,KAAAA,CAAK,mBAAmB,WAAW;AACjC,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,UAAA,QAAQ,KAAK,IAAM;AAAA,YACnB,KAAK9D,QAAQ,CAAA,QAAA;AACX,cAAI4C,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,cAAA,IAAA,CAAK,IAAK,EAAA;AACV,cAAAA,MAAK,QAAW,GAAA,IAAA,CAAK,iBAAiB5C,QAAQ,CAAA,QAAA,EAAU,MAAM,IAAI,CAAA;AAClE,cAAO,OAAA,IAAA,CAAK,UAAW4C,CAAAA,KAAAA,EAAM,cAAc,CAAA;AAAA,YAE7C,KAAK5C,QAAQ,CAAA,MAAA;AACX,cAAO,OAAA,IAAA,CAAK,SAAS,IAAI,CAAA;AAAA;AAC3B;AAEF,QAAA,OAAO,KAAK,UAAW,EAAA;AAAA,OACzB;AAEA,MAAA8D,MAAK,gBAAmB,GAAA,SAASC,MAAO,EAAA,UAAA,EAAY,oBAAoB,cAAgB,EAAA;AACtF,QAAI,IAAA,IAAA,GAAO,EAAC,EAAG,KAAQ,GAAA,IAAA;AACvB,QAAA,OAAO,CAAC,IAAA,CAAK,GAAIA,CAAAA,MAAK,CAAG,EAAA;AACvB,UAAA,IAAI,KAAO,EAAA;AAAE,YAAQ,KAAA,GAAA,KAAA;AAAA,WAChB,MAAA;AAAE,YAAK,IAAA,CAAA,MAAA,CAAO/D,SAAQ,KAAK,CAAA;AAAA;AAChC,UAAA,IAAI,UAAc,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,KAAO,EAAA;AAC7C,YAAA,IAAA,CAAK,KAAK,IAAI,CAAA;AAAA,WACL,MAAA,IAAA,kBAAA,IAAsB,IAAK,CAAA,kBAAA,CAAmB+D,MAAK,CAAG,EAAA;AAC/D,YAAA;AAAA,WACS,MAAA,IAAA,IAAA,CAAK,IAAS/D,KAAAA,QAAAA,CAAQ,QAAU,EAAA;AACzC,YAAI,IAAA,IAAA,GAAO,KAAK,gBAAiB,EAAA;AACjC,YAAA,IAAA,CAAK,qBAAqB,IAAI,CAAA;AAC9B,YAAA,IAAA,CAAK,KAAK,IAAI,CAAA;AACd,YAAI,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,KAAO,EAAA;AAAE,cAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,+CAA+C,CAAA;AAAA;AACpH,YAAA,IAAA,CAAK,OAAO+D,MAAK,CAAA;AACjB,YAAA;AAAA,WACK,MAAA;AACL,YAAA,IAAA,CAAK,IAAK,CAAA,IAAA,CAAK,uBAAwB,CAAA,cAAc,CAAC,CAAA;AAAA;AACxD;AAEF,QAAO,OAAA,IAAA;AAAA,OACT;AAEA,MAAAD,KAAAA,CAAK,uBAA0B,GAAA,SAAS,cAAgB,EAAA;AACtD,QAAA,IAAI,OAAO,IAAK,CAAA,iBAAA,CAAkB,IAAK,CAAA,KAAA,EAAO,KAAK,QAAQ,CAAA;AAC3D,QAAA,IAAA,CAAK,qBAAqB,IAAI,CAAA;AAC9B,QAAO,OAAA,IAAA;AAAA,OACT;AAEA,MAAAA,KAAAA,CAAK,oBAAuB,GAAA,SAAS,KAAO,EAAA;AAC1C,QAAO,OAAA,KAAA;AAAA,OACT;AAIA,MAAAA,KAAK,CAAA,iBAAA,GAAoB,SAAS,QAAA,EAAU,UAAU,IAAM,EAAA;AAC1D,QAAO,IAAA,GAAA,IAAA,IAAQ,KAAK,gBAAiB,EAAA;AACrC,QAAI,IAAA,IAAA,CAAK,QAAQ,WAAc,GAAA,CAAA,IAAK,CAAC,IAAK,CAAA,GAAA,CAAI9D,QAAQ,CAAA,EAAE,CAAG,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AACpE,QAAA,IAAI4C,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,QAAAA,MAAK,IAAO,GAAA,IAAA;AACZ,QAAAA,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,gBAAiB,EAAA;AACnC,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,mBAAmB,CAAA;AAAA,OAClD;AAkEA,MAAAkB,KAAK,CAAA,eAAA,GAAkB,SAAS,IAAA,EAAM,aAAa,YAAc,EAAA;AAC/D,QAAK,IAAA,WAAA,KAAgB,QAAuB3B,WAAAA,GAAAA,UAAAA;AAE5C,QAAA,IAAI,SAAS,WAAgBA,KAAAA,UAAAA;AAE7B,QAAA,QAAQ,KAAK,IAAM;AAAA,UACnB,KAAK,YAAA;AACH,YAAA,IAAI,KAAK,MAAU,IAAA,IAAA,CAAK,wBAAwB,IAAK,CAAA,IAAA,CAAK,IAAI,CAC5D,EAAA;AAAE,cAAK,IAAA,CAAA,gBAAA,CAAiB,KAAK,KAAQ,EAAA,CAAA,MAAA,GAAS,aAAa,eAAmB,IAAA,IAAA,CAAK,OAAO,iBAAiB,CAAA;AAAA;AAC7G,YAAA,IAAI,MAAQ,EAAA;AACV,cAAA,IAAI,WAAgBE,KAAAA,aAAAA,IAAgB,IAAK,CAAA,IAAA,KAAS,KAChD,EAAA;AAAE,gBAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,6CAA6C,CAAA;AAAA;AACnF,cAAA,IAAI,YAAc,EAAA;AAChB,gBAAA,IAAInE,OAAO,CAAA,YAAA,EAAc,IAAK,CAAA,IAAI,CAChC,EAAA;AAAE,kBAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,qBAAqB,CAAA;AAAA;AAC3D,gBAAa,YAAA,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,IAAA;AAAA;AAE5B,cAAA,IAAI,gBAAgBsE,aAAc,EAAA;AAAE,gBAAA,IAAA,CAAK,WAAY,CAAA,IAAA,CAAK,IAAM,EAAA,WAAA,EAAa,KAAK,KAAK,CAAA;AAAA;AAAG;AAE5F,YAAA;AAAA,UAEF,KAAK,iBAAA;AACH,YAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,mDAAmD,CAAA;AACrF,YAAA;AAAA,UAEF,KAAK,kBAAA;AACH,YAAA,IAAI,MAAQ,EAAA;AAAE,cAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,2BAA2B,CAAA;AAAA;AAC3E,YAAA;AAAA,UAEF,KAAK,yBAAA;AACH,YAAA,IAAI,MAAQ,EAAA;AAAE,cAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,kCAAkC,CAAA;AAAA;AAClF,YAAA,OAAO,IAAK,CAAA,eAAA,CAAgB,IAAK,CAAA,UAAA,EAAY,aAAa,YAAY,CAAA;AAAA,UAExE;AACE,YAAA,IAAA,CAAK,MAAM,IAAK,CAAA,KAAA,EAAA,CAAQ,MAAS,GAAA,SAAA,GAAY,kBAAkB,SAAS,CAAA;AAAA;AAC1E,OACF;AAEA,MAAAsB,KAAK,CAAA,gBAAA,GAAmB,SAAS,IAAA,EAAM,aAAa,YAAc,EAAA;AAChE,QAAK,IAAA,WAAA,KAAgB,QAAuB3B,WAAAA,GAAAA,UAAAA;AAE5C,QAAA,QAAQ,KAAK,IAAM;AAAA,UACnB,KAAK,eAAA;AACH,YAAS5C,KAAAA,IAAAA,EAAAA,GAAI,GAAG4D,KAAO,GAAA,IAAA,CAAK,YAAY5D,EAAI4D,GAAAA,KAAAA,CAAK,MAAQ5D,EAAAA,EAAAA,IAAK,CAAG,EAAA;AAC/D,cAAI,IAAA,IAAA,GAAO4D,MAAK5D,EAAC,CAAA;AAEnB,cAAK,IAAA,CAAA,qBAAA,CAAsB,IAAM,EAAA,WAAA,EAAa,YAAY,CAAA;AAAA;AAE1D,YAAA;AAAA,UAEF,KAAK,cAAA;AACH,YAAS,KAAA,IAAA,GAAA,GAAM,GAAG,MAAS,GAAA,IAAA,CAAK,UAAU,GAAM,GAAA,MAAA,CAAO,MAAQ,EAAA,GAAA,IAAO,CAAG,EAAA;AACvE,cAAI,IAAA,IAAA,GAAO,OAAO,GAAG,CAAA;AAEvB,cAAA,IAAI,IAAM,EAAA;AAAE,gBAAK,IAAA,CAAA,qBAAA,CAAsB,IAAM,EAAA,WAAA,EAAa,YAAY,CAAA;AAAA;AAAG;AAEzE,YAAA;AAAA,UAEF;AACE,YAAK,IAAA,CAAA,eAAA,CAAgB,IAAM,EAAA,WAAA,EAAa,YAAY,CAAA;AAAA;AACtD,OACF;AAEA,MAAAuE,KAAK,CAAA,qBAAA,GAAwB,SAAS,IAAA,EAAM,aAAa,YAAc,EAAA;AACrE,QAAK,IAAA,WAAA,KAAgB,QAAuB3B,WAAAA,GAAAA,UAAAA;AAE5C,QAAA,QAAQ,KAAK,IAAM;AAAA,UACnB,KAAK,UAAA;AAEH,YAAA,IAAA,CAAK,qBAAsB,CAAA,IAAA,CAAK,KAAO,EAAA,WAAA,EAAa,YAAY,CAAA;AAChE,YAAA;AAAA,UAEF,KAAK,mBAAA;AACH,YAAA,IAAA,CAAK,gBAAiB,CAAA,IAAA,CAAK,IAAM,EAAA,WAAA,EAAa,YAAY,CAAA;AAC1D,YAAA;AAAA,UAEF,KAAK,aAAA;AACH,YAAA,IAAA,CAAK,gBAAiB,CAAA,IAAA,CAAK,QAAU,EAAA,WAAA,EAAa,YAAY,CAAA;AAC9D,YAAA;AAAA,UAEF;AACE,YAAK,IAAA,CAAA,gBAAA,CAAiB,IAAM,EAAA,WAAA,EAAa,YAAY,CAAA;AAAA;AACvD,OACF;AAOA,MAAA,IAAI6B,cAAa,SAASA,WAAAA,CAAW,OAAO,MAAQ,EAAA,aAAA,EAAe,UAAU,SAAW,EAAA;AACtF,QAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AACb,QAAK,IAAA,CAAA,MAAA,GAAS,CAAC,CAAC,MAAA;AAChB,QAAK,IAAA,CAAA,aAAA,GAAgB,CAAC,CAAC,aAAA;AACvB,QAAA,IAAA,CAAK,QAAW,GAAA,QAAA;AAChB,QAAK,IAAA,CAAA,SAAA,GAAY,CAAC,CAAC,SAAA;AAAA,OACrB;AAEA,MAAA,IAAIC,MAAQ,GAAA;AAAA,QACV,MAAQ,EAAA,IAAID,WAAW,CAAA,GAAA,EAAK,KAAK,CAAA;AAAA,QACjC,MAAQ,EAAA,IAAIA,WAAW,CAAA,GAAA,EAAK,IAAI,CAAA;AAAA,QAChC,MAAQ,EAAA,IAAIA,WAAW,CAAA,IAAA,EAAM,KAAK,CAAA;AAAA,QAClC,MAAQ,EAAA,IAAIA,WAAW,CAAA,GAAA,EAAK,KAAK,CAAA;AAAA,QACjC,MAAQ,EAAA,IAAIA,WAAW,CAAA,GAAA,EAAK,IAAI,CAAA;AAAA,QAChC,QAAQ,IAAIA,WAAAA,CAAW,KAAK,IAAM,EAAA,IAAA,EAAM,SAAU,CAAG,EAAA;AAAE,UAAA,OAAO,EAAE,oBAAqB,EAAA;AAAA,SAAI,CAAA;AAAA,QACzF,MAAQ,EAAA,IAAIA,WAAW,CAAA,UAAA,EAAY,KAAK,CAAA;AAAA,QACxC,MAAQ,EAAA,IAAIA,WAAW,CAAA,UAAA,EAAY,IAAI,CAAA;AAAA,QACvC,YAAY,IAAIA,WAAAA,CAAW,YAAY,IAAM,EAAA,KAAA,EAAO,MAAM,IAAI,CAAA;AAAA,QAC9D,OAAO,IAAIA,WAAAA,CAAW,YAAY,KAAO,EAAA,KAAA,EAAO,MAAM,IAAI;AAAA,OAC5D;AAEA,MAAA,IAAIE,QAAOzB,OAAO,CAAA,SAAA;AAElB,MAAAyB,KAAAA,CAAK,iBAAiB,WAAW;AAC/B,QAAO,OAAA,CAACD,OAAM,MAAM,CAAA;AAAA,OACtB;AAEA,MAAAC,KAAAA,CAAK,aAAa,WAAW;AAC3B,QAAA,OAAO,IAAK,CAAA,OAAA,CAAQ,IAAK,CAAA,OAAA,CAAQ,SAAS,CAAC,CAAA;AAAA,OAC7C;AAEA,MAAAA,KAAAA,CAAK,YAAe,GAAA,SAAS,QAAU,EAAA;AACrC,QAAI,IAAA,MAAA,GAAS,KAAK,UAAW,EAAA;AAC7B,QAAA,IAAI,MAAWD,KAAAA,MAAAA,CAAM,MAAU,IAAA,MAAA,KAAWA,OAAM,MAC9C,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AACX,QAAI,IAAA,QAAA,KAAajE,SAAQ,KAAU,KAAA,MAAA,KAAWiE,OAAM,MAAU,IAAA,MAAA,KAAWA,OAAM,MAC7E,CAAA,EAAA;AAAE,UAAA,OAAO,CAAC,MAAO,CAAA,MAAA;AAAA;AAKnB,QAAA,IAAI,aAAajE,QAAQ,CAAA,OAAA,IAAW,aAAaA,QAAQ,CAAA,IAAA,IAAQ,KAAK,WACpE,EAAA;AAAE,UAAOC,OAAAA,UAAAA,CAAU,KAAK,IAAK,CAAA,KAAA,CAAM,MAAM,IAAK,CAAA,UAAA,EAAY,IAAK,CAAA,KAAK,CAAC,CAAA;AAAA;AACvE,QAAA,IAAI,QAAaD,KAAAA,QAAAA,CAAQ,KAAS,IAAA,QAAA,KAAaA,SAAQ,IAAQ,IAAA,QAAA,KAAaA,QAAQ,CAAA,GAAA,IAAO,QAAaA,KAAAA,QAAAA,CAAQ,MAAU,IAAA,QAAA,KAAaA,SAAQ,KAC7I,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AACX,QAAI,IAAA,QAAA,KAAaA,SAAQ,MACvB,EAAA;AAAE,UAAA,OAAO,WAAWiE,MAAM,CAAA,MAAA;AAAA;AAC5B,QAAI,IAAA,QAAA,KAAajE,SAAQ,IAAQ,IAAA,QAAA,KAAaA,SAAQ,MAAU,IAAA,QAAA,KAAaA,SAAQ,IACnF,EAAA;AAAE,UAAO,OAAA,KAAA;AAAA;AACX,QAAA,OAAO,CAAC,IAAK,CAAA,WAAA;AAAA,OACf;AAEA,MAAAkE,KAAAA,CAAK,qBAAqB,WAAW;AACnC,QAAA,KAAA,IAAS3E,KAAI,IAAK,CAAA,OAAA,CAAQ,SAAS,CAAGA,EAAAA,EAAAA,IAAK,GAAGA,EAAK,EAAA,EAAA;AACjD,UAAI,IAAA,OAAA,GAAU,IAAK,CAAA,OAAA,CAAQA,EAAC,CAAA;AAC5B,UAAI,IAAA,OAAA,CAAQ,UAAU,UACpB,EAAA;AAAE,YAAA,OAAO,OAAQ,CAAA,SAAA;AAAA;AAAU;AAE/B,QAAO,OAAA,KAAA;AAAA,OACT;AAEA,MAAA2E,KAAAA,CAAK,aAAgB,GAAA,SAAS,QAAU,EAAA;AACtC,QAAI,IAAA,MAAA,EAAQ,OAAO,IAAK,CAAA,IAAA;AACxB,QAAA,IAAI,IAAK,CAAA,OAAA,IAAW,QAAalE,KAAAA,QAAAA,CAAQ,GACvC,EAAA;AAAE,UAAA,IAAA,CAAK,WAAc,GAAA,KAAA;AAAA,SAAO,MAAA,IACrB,MAAS,GAAA,IAAA,CAAK,aACrB,EAAA;AAAE,UAAO,MAAA,CAAA,IAAA,CAAK,MAAM,QAAQ,CAAA;AAAA,SAE5B,MAAA;AAAE,UAAA,IAAA,CAAK,cAAc,IAAK,CAAA,UAAA;AAAA;AAAY,OAC1C;AAIA,MAAAkE,KAAAA,CAAK,eAAkB,GAAA,SAAS,QAAU,EAAA;AACxC,QAAI,IAAA,IAAA,CAAK,UAAW,EAAA,KAAM,QAAU,EAAA;AAClC,UAAA,IAAA,CAAK,OAAQ,CAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,GAAS,CAAC,CAAI,GAAA,QAAA;AAAA;AAC1C,OACF;AAIA,MAAAlE,SAAQ,MAAO,CAAA,aAAA,GAAgBA,QAAQ,CAAA,MAAA,CAAO,gBAAgB,WAAW;AACvE,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,KAAW,CAAG,EAAA;AAC7B,UAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AACnB,UAAA;AAAA;AAEF,QAAI,IAAA,GAAA,GAAM,IAAK,CAAA,OAAA,CAAQ,GAAI,EAAA;AAC3B,QAAA,IAAI,QAAQiE,MAAM,CAAA,MAAA,IAAU,KAAK,UAAW,EAAA,CAAE,UAAU,UAAY,EAAA;AAClE,UAAM,GAAA,GAAA,IAAA,CAAK,QAAQ,GAAI,EAAA;AAAA;AAEzB,QAAK,IAAA,CAAA,WAAA,GAAc,CAAC,GAAI,CAAA,MAAA;AAAA,OAC1B;AAEA,MAAAjE,QAAQ,CAAA,MAAA,CAAO,aAAgB,GAAA,SAAS,QAAU,EAAA;AAChD,QAAK,IAAA,CAAA,OAAA,CAAQ,KAAK,IAAK,CAAA,YAAA,CAAa,QAAQ,CAAIiE,GAAAA,MAAAA,CAAM,MAASA,GAAAA,MAAAA,CAAM,MAAM,CAAA;AAC3E,QAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AAAA,OACrB;AAEA,MAAAjE,QAAAA,CAAQ,YAAa,CAAA,aAAA,GAAgB,WAAW;AAC9C,QAAK,IAAA,CAAA,OAAA,CAAQ,IAAKiE,CAAAA,MAAAA,CAAM,MAAM,CAAA;AAC9B,QAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AAAA,OACrB;AAEA,MAAAjE,QAAQ,CAAA,MAAA,CAAO,aAAgB,GAAA,SAAS,QAAU,EAAA;AAChD,QAAI,IAAA,eAAA,GAAkB,QAAaA,KAAAA,QAAAA,CAAQ,GAAO,IAAA,QAAA,KAAaA,QAAQ,CAAA,IAAA,IAAQ,QAAaA,KAAAA,QAAAA,CAAQ,KAAS,IAAA,QAAA,KAAaA,QAAQ,CAAA,MAAA;AAClI,QAAA,IAAA,CAAK,QAAQ,IAAK,CAAA,eAAA,GAAkBiE,MAAM,CAAA,MAAA,GAASA,OAAM,MAAM,CAAA;AAC/D,QAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AAAA,OACrB;AAEA,MAAAjE,QAAAA,CAAQ,MAAO,CAAA,aAAA,GAAgB,WAAW;AAAA,OAE1C;AAEA,MAAAA,SAAQ,SAAU,CAAA,aAAA,GAAgBA,SAAQ,MAAO,CAAA,aAAA,GAAgB,SAAS,QAAU,EAAA;AAClF,QAAA,IAAI,SAAS,UAAc,IAAA,QAAA,KAAaA,SAAQ,KAC5C,IAAA,EAAE,aAAaA,QAAQ,CAAA,IAAA,IAAQ,IAAK,CAAA,UAAA,OAAiBiE,MAAM,CAAA,MAAA,CAAA,IAC3D,EAAE,QAAajE,KAAAA,QAAAA,CAAQ,WAAWC,UAAU,CAAA,IAAA,CAAK,IAAK,CAAA,KAAA,CAAM,MAAM,IAAK,CAAA,UAAA,EAAY,KAAK,KAAK,CAAC,MAC9F,EAAG,CAAA,QAAA,KAAaD,QAAQ,CAAA,KAAA,IAAS,aAAaA,QAAQ,CAAA,MAAA,KAAW,KAAK,UAAW,EAAA,KAAMiE,OAAM,MAC/F,CAAA,EAAA;AAAE,UAAK,IAAA,CAAA,OAAA,CAAQ,IAAKA,CAAAA,MAAAA,CAAM,MAAM,CAAA;AAAA,SAEhC,MAAA;AAAE,UAAK,IAAA,CAAA,OAAA,CAAQ,IAAKA,CAAAA,MAAAA,CAAM,MAAM,CAAA;AAAA;AAClC,QAAA,IAAA,CAAK,WAAc,GAAA,KAAA;AAAA,OACrB;AAEA,MAAAjE,QAAAA,CAAQ,KAAM,CAAA,aAAA,GAAgB,WAAW;AACvC,QAAA,IAAI,IAAK,CAAA,UAAA,EAAa,CAAA,KAAA,KAAU,UAAY,EAAA;AAAE,UAAA,IAAA,CAAK,QAAQ,GAAI,EAAA;AAAA;AAC/D,QAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AAAA,OACrB;AAEA,MAAAA,QAAAA,CAAQ,SAAU,CAAA,aAAA,GAAgB,WAAW;AAC3C,QAAA,IAAI,IAAK,CAAA,UAAA,EAAiBiE,KAAAA,MAAAA,CAAM,MAC9B,EAAA;AAAE,UAAA,IAAA,CAAK,QAAQ,GAAI,EAAA;AAAA,SAEnB,MAAA;AAAE,UAAK,IAAA,CAAA,OAAA,CAAQ,IAAKA,CAAAA,MAAAA,CAAM,MAAM,CAAA;AAAA;AAClC,QAAA,IAAA,CAAK,WAAc,GAAA,KAAA;AAAA,OACrB;AAEA,MAAAjE,QAAQ,CAAA,IAAA,CAAK,aAAgB,GAAA,SAAS,QAAU,EAAA;AAC9C,QAAI,IAAA,QAAA,KAAaA,SAAQ,SAAW,EAAA;AAClC,UAAImE,IAAAA,MAAAA,GAAQ,IAAK,CAAA,OAAA,CAAQ,MAAS,GAAA,CAAA;AAClC,UAAA,IAAI,IAAK,CAAA,OAAA,CAAQA,MAAK,CAAA,KAAMF,OAAM,MAChC,EAAA;AAAE,YAAK,IAAA,CAAA,OAAA,CAAQE,MAAK,CAAA,GAAIF,MAAM,CAAA,UAAA;AAAA,WAE9B,MAAA;AAAE,YAAK,IAAA,CAAA,OAAA,CAAQE,MAAK,CAAA,GAAIF,MAAM,CAAA,KAAA;AAAA;AAAO;AAEzC,QAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AAAA,OACrB;AAEA,MAAAjE,QAAQ,CAAA,IAAA,CAAK,aAAgB,GAAA,SAAS,QAAU,EAAA;AAC9C,QAAA,IAAI,OAAU,GAAA,KAAA;AACd,QAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,QAAA,KAAaA,SAAQ,GAAK,EAAA;AAC7D,UAAI,IAAA,IAAA,CAAK,KAAU,KAAA,IAAA,IAAQ,CAAC,IAAA,CAAK,WAC7B,IAAA,IAAA,CAAK,KAAU,KAAA,OAAA,IAAW,IAAK,CAAA,kBAAA,EACjC,EAAA;AAAE,YAAU,OAAA,GAAA,IAAA;AAAA;AAAM;AAEtB,QAAA,IAAA,CAAK,WAAc,GAAA,OAAA;AAAA,OACrB;AAqBA,MAAA,IAAIoE,QAAO3B,OAAO,CAAA,SAAA;AAOlB,MAAA2B,KAAK,CAAA,cAAA,GAAiB,SAAS,IAAA,EAAM,UAAU,sBAAwB,EAAA;AACrE,QAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,IAAA,CAAK,SAAS,eACjD,EAAA;AAAE,UAAA;AAAA;AACJ,QAAI,IAAA,IAAA,CAAK,QAAQ,WAAe,IAAA,CAAA,KAAM,KAAK,QAAY,IAAA,IAAA,CAAK,MAAU,IAAA,IAAA,CAAK,SACzE,CAAA,EAAA;AAAE,UAAA;AAAA;AACJ,QAAA,IAAI,MAAM,IAAK,CAAA,GAAA;AACf,QAAI5F,IAAAA,KAAAA;AACJ,QAAA,QAAQ,IAAI,IAAM;AAAA,UAClB,KAAK,YAAA;AAAc,YAAAA,QAAO,GAAI,CAAA,IAAA;AAAM,YAAA;AAAA,UACpC,KAAK,SAAA;AAAW,YAAAA,KAAAA,GAAO,MAAO,CAAA,GAAA,CAAI,KAAK,CAAA;AAAG,YAAA;AAAA,UAC1C;AAAS,YAAA;AAAA;AAET,QAAA,IAAI,OAAO,IAAK,CAAA,IAAA;AAChB,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,UAAIA,IAAAA,KAAAA,KAAS,WAAe,IAAA,IAAA,KAAS,MAAQ,EAAA;AAC3C,YAAA,IAAI,SAAS,KAAO,EAAA;AAClB,cAAA,IAAI,sBAAwB,EAAA;AAC1B,gBAAI,IAAA,sBAAA,CAAuB,cAAc,CAAG,EAAA;AAC1C,kBAAA,sBAAA,CAAuB,cAAc,GAAI,CAAA,KAAA;AAAA;AAC3C,eACK,MAAA;AACL,gBAAK,IAAA,CAAA,gBAAA,CAAiB,GAAI,CAAA,KAAA,EAAO,oCAAoC,CAAA;AAAA;AACvE;AAEF,YAAA,QAAA,CAAS,KAAQ,GAAA,IAAA;AAAA;AAEnB,UAAA;AAAA;AAEF,QAAAA,QAAO,GAAMA,GAAAA,KAAAA;AACb,QAAI,IAAA,KAAA,GAAQ,SAASA,KAAI,CAAA;AACzB,QAAA,IAAI,KAAO,EAAA;AACT,UAAI,IAAA,YAAA;AACJ,UAAA,IAAI,SAAS,MAAQ,EAAA;AACnB,YAAA,YAAA,GAAe,KAAK,MAAU,IAAA,KAAA,CAAM,IAAQ,IAAA,KAAA,CAAM,OAAO,KAAM,CAAA,GAAA;AAAA,WAC1D,MAAA;AACL,YAAe,YAAA,GAAA,KAAA,CAAM,IAAQ,IAAA,KAAA,CAAM,IAAI,CAAA;AAAA;AAEzC,UAAA,IAAI,YACF,EAAA;AAAE,YAAK,IAAA,CAAA,gBAAA,CAAiB,GAAI,CAAA,KAAA,EAAO,0BAA0B,CAAA;AAAA;AAAG,SAC7D,MAAA;AACL,UAAQ,KAAA,GAAA,QAAA,CAASA,KAAI,CAAI,GAAA;AAAA,YACvB,IAAM,EAAA,KAAA;AAAA,YACN,GAAK,EAAA,KAAA;AAAA,YACL,GAAK,EAAA;AAAA,WACP;AAAA;AAEF,QAAA,KAAA,CAAM,IAAI,CAAI,GAAA,IAAA;AAAA,OAChB;AAiBA,MAAA4F,KAAK,CAAA,eAAA,GAAkB,SAAS,OAAA,EAAS,sBAAwB,EAAA;AAC/D,QAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,QAAA,IAAI,IAAO,GAAA,IAAA,CAAK,gBAAiB,CAAA,OAAA,EAAS,sBAAsB,CAAA;AAChE,QAAI,IAAA,IAAA,CAAK,IAASpE,KAAAA,QAAAA,CAAQ,KAAO,EAAA;AAC/B,UAAA,IAAI4C,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,UAAAA,KAAAA,CAAK,WAAc,GAAA,CAAC,IAAI,CAAA;AACxB,UAAA,OAAO,IAAK,CAAA,GAAA,CAAI5C,QAAQ,CAAA,KAAK,CAAG,EAAA;AAAE,YAAA4C,MAAK,WAAY,CAAA,IAAA,CAAK,KAAK,gBAAiB,CAAA,OAAA,EAAS,sBAAsB,CAAC,CAAA;AAAA;AAC9G,UAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,oBAAoB,CAAA;AAAA;AAEnD,QAAO,OAAA,IAAA;AAAA,OACT;AAKA,MAAAwB,KAAK,CAAA,gBAAA,GAAmB,SAAS,OAAA,EAAS,wBAAwB,cAAgB,EAAA;AAChF,QAAI,IAAA,IAAA,CAAK,YAAa,CAAA,OAAO,CAAG,EAAA;AAC9B,UAAA,IAAI,KAAK,WAAa,EAAA;AAAE,YAAO,OAAA,IAAA,CAAK,WAAW,OAAO,CAAA;AAAA,WAGjD,MAAA;AAAE,YAAA,IAAA,CAAK,WAAc,GAAA,KAAA;AAAA;AAAO;AAGnC,QAAA,IAAI,yBAAyB,KAAO,EAAA,cAAA,GAAiB,CAAI,CAAA,EAAA,gBAAA,GAAmB,IAAI,cAAiB,GAAA,CAAA,CAAA;AACjG,QAAA,IAAI,sBAAwB,EAAA;AAC1B,UAAA,cAAA,GAAiB,sBAAuB,CAAA,mBAAA;AACxC,UAAA,gBAAA,GAAmB,sBAAuB,CAAA,aAAA;AAC1C,UAAA,cAAA,GAAiB,sBAAuB,CAAA,WAAA;AACxC,UAAuB,sBAAA,CAAA,mBAAA,GAAsB,uBAAuB,aAAgB,GAAA,CAAA,CAAA;AAAA,SAC/E,MAAA;AACL,UAAA,sBAAA,GAAyB,IAAInB,oBAAAA,EAAAA;AAC7B,UAAyB,sBAAA,GAAA,IAAA;AAAA;AAG3B,QAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,QAAA,IAAI,KAAK,IAASjD,KAAAA,QAAAA,CAAQ,UAAU,IAAK,CAAA,IAAA,KAASA,SAAQ,IAAM,EAAA;AAC9D,UAAA,IAAA,CAAK,mBAAmB,IAAK,CAAA,KAAA;AAC7B,UAAA,IAAA,CAAK,2BAA2B,OAAY,KAAA,OAAA;AAAA;AAE9C,QAAA,IAAI,IAAO,GAAA,IAAA,CAAK,qBAAsB,CAAA,OAAA,EAAS,sBAAsB,CAAA;AACrE,QAAA,IAAI,cAAgB,EAAA;AAAE,UAAA,IAAA,GAAO,cAAe,CAAA,IAAA,CAAK,IAAM,EAAA,IAAA,EAAM,UAAU,QAAQ,CAAA;AAAA;AAC/E,QAAI,IAAA,IAAA,CAAK,KAAK,QAAU,EAAA;AACtB,UAAA,IAAI4C,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,UAAAA,KAAAA,CAAK,WAAW,IAAK,CAAA,KAAA;AACrB,UAAI,IAAA,IAAA,CAAK,IAAS5C,KAAAA,QAAAA,CAAQ,EACxB,EAAA;AAAE,YAAA,IAAA,GAAO,IAAK,CAAA,YAAA,CAAa,IAAM,EAAA,KAAA,EAAO,sBAAsB,CAAA;AAAA;AAChE,UAAA,IAAI,CAAC,sBAAwB,EAAA;AAC3B,YAAA,sBAAA,CAAuB,mBAAsB,GAAA,sBAAA,CAAuB,aAAgB,GAAA,sBAAA,CAAuB,WAAc,GAAA,CAAA,CAAA;AAAA;AAE3H,UAAI,IAAA,sBAAA,CAAuB,eAAmB,IAAA,IAAA,CAAK,KACjD,EAAA;AAAE,YAAA,sBAAA,CAAuB,eAAkB,GAAA,CAAA,CAAA;AAAA;AAC7C,UAAI,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,EACxB,EAAA;AAAE,YAAA,IAAA,CAAK,iBAAiB,IAAI,CAAA;AAAA,WAE5B,MAAA;AAAE,YAAA,IAAA,CAAK,gBAAgB,IAAI,CAAA;AAAA;AAC7B,UAAA4C,MAAK,IAAO,GAAA,IAAA;AACZ,UAAA,IAAA,CAAK,IAAK,EAAA;AACV,UAAAA,KAAK,CAAA,KAAA,GAAQ,IAAK,CAAA,gBAAA,CAAiB,OAAO,CAAA;AAC1C,UAAA,IAAI,iBAAiB,CAAI,CAAA,EAAA;AAAE,YAAA,sBAAA,CAAuB,WAAc,GAAA,cAAA;AAAA;AAChE,UAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,sBAAsB,CAAA;AAAA,SAC9C,MAAA;AACL,UAAA,IAAI,sBAAwB,EAAA;AAAE,YAAK,IAAA,CAAA,qBAAA,CAAsB,wBAAwB,IAAI,CAAA;AAAA;AAAG;AAE1F,QAAA,IAAI,iBAAiB,CAAI,CAAA,EAAA;AAAE,UAAA,sBAAA,CAAuB,mBAAsB,GAAA,cAAA;AAAA;AACxE,QAAA,IAAI,mBAAmB,CAAI,CAAA,EAAA;AAAE,UAAA,sBAAA,CAAuB,aAAgB,GAAA,gBAAA;AAAA;AACpE,QAAO,OAAA,IAAA;AAAA,OACT;AAIA,MAAAwB,KAAK,CAAA,qBAAA,GAAwB,SAAS,OAAA,EAAS,sBAAwB,EAAA;AACrE,QAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,QAAA,IAAI,IAAO,GAAA,IAAA,CAAK,YAAa,CAAA,OAAA,EAAS,sBAAsB,CAAA;AAC5D,QAAI,IAAA,IAAA,CAAK,qBAAsB,CAAA,sBAAsB,CAAG,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AACjE,QAAA,IAAI,IAAK,CAAA,GAAA,CAAIpE,QAAQ,CAAA,QAAQ,CAAG,EAAA;AAC9B,UAAA,IAAI4C,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,UAAAA,MAAK,IAAO,GAAA,IAAA;AACZ,UAAAA,KAAAA,CAAK,UAAa,GAAA,IAAA,CAAK,gBAAiB,EAAA;AACxC,UAAK,IAAA,CAAA,MAAA,CAAO5C,SAAQ,KAAK,CAAA;AACzB,UAAA4C,KAAK,CAAA,SAAA,GAAY,IAAK,CAAA,gBAAA,CAAiB,OAAO,CAAA;AAC9C,UAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,uBAAuB,CAAA;AAAA;AAEtD,QAAO,OAAA,IAAA;AAAA,OACT;AAIA,MAAAwB,KAAK,CAAA,YAAA,GAAe,SAAS,OAAA,EAAS,sBAAwB,EAAA;AAC5D,QAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,QAAA,IAAI,OAAO,IAAK,CAAA,eAAA,CAAgB,sBAAwB,EAAA,KAAA,EAAO,OAAO,OAAO,CAAA;AAC7E,QAAI,IAAA,IAAA,CAAK,qBAAsB,CAAA,sBAAsB,CAAG,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AACjE,QAAA,OAAO,IAAK,CAAA,KAAA,KAAU,QAAY,IAAA,IAAA,CAAK,IAAS,KAAA,yBAAA,GAA4B,IAAO,GAAA,IAAA,CAAK,WAAY,CAAA,IAAA,EAAM,QAAU,EAAA,QAAA,EAAU,IAAI,OAAO,CAAA;AAAA,OAC3I;AAQA,MAAAA,MAAK,WAAc,GAAA,SAAS,MAAM,YAAc,EAAA,YAAA,EAAc,SAAS,OAAS,EAAA;AAC9E,QAAI,IAAA,IAAA,GAAO,KAAK,IAAK,CAAA,KAAA;AACrB,QAAA,IAAI,QAAQ,IAAS,KAAA,CAAC,WAAW,IAAK,CAAA,IAAA,KAASpE,SAAQ,GAAM,CAAA,EAAA;AAC3D,UAAA,IAAI,OAAO,OAAS,EAAA;AAClB,YAAA,IAAI,UAAU,IAAK,CAAA,IAAA,KAASA,SAAQ,SAAa,IAAA,IAAA,CAAK,SAASA,QAAQ,CAAA,UAAA;AACvE,YAAI,IAAA,QAAA,GAAW,IAAK,CAAA,IAAA,KAASA,QAAQ,CAAA,QAAA;AACrC,YAAA,IAAI,QAAU,EAAA;AAGZ,cAAA,IAAA,GAAOA,SAAQ,UAAW,CAAA,KAAA;AAAA;AAE5B,YAAA,IAAI,KAAK,IAAK,CAAA,KAAA;AACd,YAAA,IAAA,CAAK,IAAK,EAAA;AACV,YAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,YAAA,IAAI,KAAQ,GAAA,IAAA,CAAK,WAAY,CAAA,IAAA,CAAK,eAAgB,CAAA,IAAA,EAAM,KAAO,EAAA,KAAA,EAAO,OAAO,CAAA,EAAG,QAAU,EAAA,QAAA,EAAU,MAAM,OAAO,CAAA;AACjH,YAAI4C,IAAAA,KAAAA,GAAO,KAAK,WAAY,CAAA,YAAA,EAAc,cAAc,IAAM,EAAA,KAAA,EAAO,EAAI,EAAA,OAAA,IAAW,QAAQ,CAAA;AAC5F,YAAA,IAAK,OAAW,IAAA,IAAA,CAAK,IAAS5C,KAAAA,QAAAA,CAAQ,QAAc,IAAA,QAAA,KAAa,IAAK,CAAA,IAAA,KAASA,QAAQ,CAAA,SAAA,IAAa,IAAK,CAAA,IAAA,KAASA,SAAQ,UAAc,CAAA,EAAA;AACtI,cAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,0FAA0F,CAAA;AAAA;AAE9H,YAAA,OAAO,KAAK,WAAY4C,CAAAA,KAAAA,EAAM,YAAc,EAAA,YAAA,EAAc,SAAS,OAAO,CAAA;AAAA;AAC5E;AAEF,QAAO,OAAA,IAAA;AAAA,OACT;AAEA,MAAAwB,KAAAA,CAAK,cAAc,SAAS,QAAA,EAAU,UAAU,IAAM,EAAA,KAAA,EAAO,IAAI,OAAS,EAAA;AACxE,QAAI,IAAA,KAAA,CAAM,SAAS,mBAAqB,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAM,KAAM,CAAA,KAAA,EAAO,+DAA+D,CAAA;AAAA;AACjI,QAAA,IAAIxB,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,QAAAA,MAAK,IAAO,GAAA,IAAA;AACZ,QAAAA,MAAK,QAAW,GAAA,EAAA;AAChB,QAAAA,MAAK,KAAQ,GAAA,KAAA;AACb,QAAA,OAAO,IAAK,CAAA,UAAA,CAAWA,KAAM,EAAA,OAAA,GAAU,sBAAsB,kBAAkB,CAAA;AAAA,OACjF;AAIA,MAAAwB,MAAK,eAAkB,GAAA,SAAS,sBAAwB,EAAA,QAAA,EAAU,QAAQ,OAAS,EAAA;AACjF,QAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,KAAK,QAAU,EAAA,IAAA;AACrD,QAAA,IAAI,IAAK,CAAA,YAAA,CAAa,OAAO,CAAA,IAAK,KAAK,QAAU,EAAA;AAC/C,UAAO,IAAA,GAAA,IAAA,CAAK,WAAW,OAAO,CAAA;AAC9B,UAAW,QAAA,GAAA,IAAA;AAAA,SACb,MAAA,IAAW,IAAK,CAAA,IAAA,CAAK,MAAQ,EAAA;AAC3B,UAAA,IAAIxB,QAAO,IAAK,CAAA,SAAA,IAAa,MAAS,GAAA,IAAA,CAAK,SAAS5C,QAAQ,CAAA,MAAA;AAC5D,UAAA4C,KAAAA,CAAK,WAAW,IAAK,CAAA,KAAA;AACrB,UAAAA,MAAK,MAAS,GAAA,IAAA;AACd,UAAA,IAAA,CAAK,IAAK,EAAA;AACV,UAAAA,MAAK,QAAW,GAAA,IAAA,CAAK,gBAAgB,IAAM,EAAA,IAAA,EAAM,QAAQ,OAAO,CAAA;AAChE,UAAK,IAAA,CAAA,qBAAA,CAAsB,wBAAwB,IAAI,CAAA;AACvD,UAAA,IAAI,MAAQ,EAAA;AAAE,YAAK,IAAA,CAAA,eAAA,CAAgBA,MAAK,QAAQ,CAAA;AAAA,WAAG,MAAA,IAC1C,KAAK,MAAUA,IAAAA,KAAAA,CAAK,aAAa,QAAYyB,IAAAA,sBAAAA,CAAsBzB,KAAK,CAAA,QAAQ,CACvF,EAAA;AAAE,YAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,wCAAwC,CAAA;AAAA,qBACrEA,KAAK,CAAA,QAAA,KAAa,YAAY0B,qBAAqB1B,CAAAA,KAAAA,CAAK,QAAQ,CACvE,EAAA;AAAE,YAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,mCAAmC,CAAA;AAAA,WACpE,MAAA;AAAE,YAAW,QAAA,GAAA,IAAA;AAAA;AAClB,UAAA,IAAA,GAAO,IAAK,CAAA,UAAA,CAAWA,KAAM,EAAA,MAAA,GAAS,qBAAqB,iBAAiB,CAAA;AAAA,mBACnE,CAAC,QAAA,IAAY,IAAK,CAAA,IAAA,KAAS5C,SAAQ,SAAW,EAAA;AACvD,UAAA,IAAA,CAAK,WAAW,IAAK,CAAA,gBAAA,CAAiB,WAAW,CAAM,KAAA,IAAA,CAAK,QAAQ,kBAAoB,EAAA;AAAE,YAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC1G,UAAA,IAAA,GAAO,KAAK,iBAAkB,EAAA;AAE9B,UAAI,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,GAAK,EAAA;AAAE,YAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAAG,SAC/C,MAAA;AACL,UAAO,IAAA,GAAA,IAAA,CAAK,mBAAoB,CAAA,sBAAA,EAAwB,OAAO,CAAA;AAC/D,UAAI,IAAA,IAAA,CAAK,qBAAsB,CAAA,sBAAsB,CAAG,EAAA;AAAE,YAAO,OAAA,IAAA;AAAA;AACjE,UAAA,OAAO,KAAK,IAAK,CAAA,OAAA,IAAW,CAAC,IAAA,CAAK,oBAAsB,EAAA;AACtD,YAAA,IAAI,MAAS,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAChD,YAAA,MAAA,CAAO,WAAW,IAAK,CAAA,KAAA;AACvB,YAAA,MAAA,CAAO,MAAS,GAAA,KAAA;AAChB,YAAA,MAAA,CAAO,QAAW,GAAA,IAAA;AAClB,YAAA,IAAA,CAAK,gBAAgB,IAAI,CAAA;AACzB,YAAA,IAAA,CAAK,IAAK,EAAA;AACV,YAAO,IAAA,GAAA,IAAA,CAAK,UAAW,CAAA,MAAA,EAAQ,kBAAkB,CAAA;AAAA;AACnD;AAGF,QAAA,IAAI,CAAC,MAAU,IAAA,IAAA,CAAK,GAAIA,CAAAA,QAAAA,CAAQ,QAAQ,CAAG,EAAA;AACzC,UAAA,IAAI,QACF,EAAA;AAAE,YAAK,IAAA,CAAA,UAAA,CAAW,KAAK,YAAY,CAAA;AAAA,WAEnC,MAAA;AAAE,YAAA,OAAO,IAAK,CAAA,WAAA,CAAY,QAAU,EAAA,QAAA,EAAU,IAAM,EAAA,IAAA,CAAK,eAAgB,CAAA,IAAA,EAAM,KAAO,EAAA,KAAA,EAAO,OAAO,CAAA,EAAG,MAAM,KAAK,CAAA;AAAA;AAAE,SACjH,MAAA;AACL,UAAO,OAAA,IAAA;AAAA;AACT,OACF;AAEA,MAAA,SAASqE,uBAAsBzB,KAAM,EAAA;AACnC,QACEA,OAAAA,KAAAA,CAAK,SAAS,YACdA,IAAAA,KAAAA,CAAK,SAAS,yBAA6ByB,IAAAA,sBAAAA,CAAsBzB,MAAK,UAAU,CAAA;AAAA;AAIpF,MAAA,SAAS0B,sBAAqB1B,KAAM,EAAA;AAClC,QAAA,OACEA,MAAK,IAAS,KAAA,kBAAA,IAAsBA,MAAK,QAAS,CAAA,IAAA,KAAS,uBAC3DA,KAAK,CAAA,IAAA,KAAS,qBAAqB0B,qBAAqB1B,CAAAA,KAAAA,CAAK,UAAU,CACvEA,IAAAA,KAAAA,CAAK,SAAS,yBAA6B0B,IAAAA,qBAAAA,CAAqB1B,MAAK,UAAU,CAAA;AAAA;AAMnF,MAAAwB,KAAK,CAAA,mBAAA,GAAsB,SAAS,sBAAA,EAAwB,OAAS,EAAA;AACnE,QAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,QAAA,IAAI,IAAO,GAAA,IAAA,CAAK,aAAc,CAAA,sBAAA,EAAwB,OAAO,CAAA;AAC7D,QAAI,IAAA,IAAA,CAAK,IAAS,KAAA,yBAAA,IAA6B,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,IAAA,CAAK,YAAc,EAAA,IAAA,CAAK,UAAU,CAAA,KAAM,GACtG,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AACX,QAAA,IAAI,SAAS,IAAK,CAAA,eAAA,CAAgB,MAAM,QAAU,EAAA,QAAA,EAAU,OAAO,OAAO,CAAA;AAC1E,QAAI,IAAA,sBAAA,IAA0B,MAAO,CAAA,IAAA,KAAS,kBAAoB,EAAA;AAChE,UAAI,IAAA,sBAAA,CAAuB,mBAAuB,IAAA,MAAA,CAAO,KAAO,EAAA;AAAE,YAAA,sBAAA,CAAuB,mBAAsB,GAAA,CAAA,CAAA;AAAA;AAC/G,UAAI,IAAA,sBAAA,CAAuB,iBAAqB,IAAA,MAAA,CAAO,KAAO,EAAA;AAAE,YAAA,sBAAA,CAAuB,iBAAoB,GAAA,CAAA,CAAA;AAAA;AAC3G,UAAI,IAAA,sBAAA,CAAuB,aAAiB,IAAA,MAAA,CAAO,KAAO,EAAA;AAAE,YAAA,sBAAA,CAAuB,aAAgB,GAAA,CAAA,CAAA;AAAA;AAAI;AAEzG,QAAO,OAAA,MAAA;AAAA,OACT;AAEA,MAAAA,MAAK,eAAkB,GAAA,SAAS,MAAM,QAAU,EAAA,QAAA,EAAU,SAAS,OAAS,EAAA;AAC1E,QAAI,IAAA,eAAA,GAAkB,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,IAAK,IAAK,CAAA,IAAA,KAAS,YAAgB,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,IAC/F,IAAK,CAAA,UAAA,KAAe,KAAK,GAAO,IAAA,CAAC,IAAK,CAAA,kBAAA,EAAwB,IAAA,IAAA,CAAK,GAAM,GAAA,IAAA,CAAK,KAAU,KAAA,CAAA,IACxF,IAAK,CAAA,gBAAA,KAAqB,IAAK,CAAA,KAAA;AACnC,QAAA,IAAI,eAAkB,GAAA,KAAA;AAEtB,QAAA,OAAO,IAAM,EAAA;AACX,UAAI,IAAA,OAAA,GAAU,KAAK,cAAe,CAAA,IAAA,EAAM,UAAU,QAAU,EAAA,OAAA,EAAS,eAAiB,EAAA,eAAA,EAAiB,OAAO,CAAA;AAE9G,UAAA,IAAI,QAAQ,QAAU,EAAA;AAAE,YAAkB,eAAA,GAAA,IAAA;AAAA;AAC1C,UAAA,IAAI,OAAY,KAAA,IAAA,IAAQ,OAAQ,CAAA,IAAA,KAAS,yBAA2B,EAAA;AAClE,YAAA,IAAI,eAAiB,EAAA;AACnB,cAAA,IAAI,SAAY,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AACnD,cAAA,SAAA,CAAU,UAAa,GAAA,OAAA;AACvB,cAAU,OAAA,GAAA,IAAA,CAAK,UAAW,CAAA,SAAA,EAAW,iBAAiB,CAAA;AAAA;AAExD,YAAO,OAAA,OAAA;AAAA;AAGT,UAAO,IAAA,GAAA,OAAA;AAAA;AACT,OACF;AAEA,MAAAA,KAAAA,CAAK,wBAAwB,WAAW;AACtC,QAAA,OAAO,CAAC,IAAK,CAAA,kBAAA,MAAwB,IAAK,CAAA,GAAA,CAAIpE,SAAQ,KAAK,CAAA;AAAA,OAC7D;AAEA,MAAAoE,MAAK,wBAA2B,GAAA,SAAS,QAAU,EAAA,QAAA,EAAU,UAAU,OAAS,EAAA;AAC9E,QAAO,OAAA,IAAA,CAAK,qBAAqB,IAAK,CAAA,WAAA,CAAY,UAAU,QAAQ,CAAA,EAAG,QAAU,EAAA,IAAA,EAAM,OAAO,CAAA;AAAA,OAChG;AAEA,MAAAA,KAAAA,CAAK,iBAAiB,SAAS,IAAA,EAAM,UAAU,QAAU,EAAA,OAAA,EAAS,eAAiB,EAAA,eAAA,EAAiB,OAAS,EAAA;AAC3G,QAAI,IAAA,iBAAA,GAAoB,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,EAAA;AACpD,QAAA,IAAI,QAAW,GAAA,iBAAA,IAAqB,IAAK,CAAA,GAAA,CAAIpE,SAAQ,WAAW,CAAA;AAChE,QAAA,IAAI,WAAW,QAAU,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,YAAA,EAAc,kEAAkE,CAAA;AAAA;AAE3H,QAAA,IAAI,QAAW,GAAA,IAAA,CAAK,GAAIA,CAAAA,QAAAA,CAAQ,QAAQ,CAAA;AACxC,QAAA,IAAI,QAAa,IAAA,QAAA,IAAY,IAAK,CAAA,IAAA,KAASA,SAAQ,MAAU,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,SAAc,IAAA,IAAA,CAAK,GAAIA,CAAAA,QAAAA,CAAQ,GAAG,CAAG,EAAA;AACtH,UAAA,IAAI4C,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,UAAAA,MAAK,MAAS,GAAA,IAAA;AACd,UAAA,IAAI,QAAU,EAAA;AACZ,YAAAA,KAAAA,CAAK,QAAW,GAAA,IAAA,CAAK,eAAgB,EAAA;AACrC,YAAK,IAAA,CAAA,MAAA,CAAO5C,SAAQ,QAAQ,CAAA;AAAA,qBACnB,IAAK,CAAA,IAAA,KAASA,SAAQ,SAAa,IAAA,IAAA,CAAK,SAAS,OAAS,EAAA;AACnE,YAAA4C,KAAAA,CAAK,QAAW,GAAA,IAAA,CAAK,iBAAkB,EAAA;AAAA,WAClC,MAAA;AACL,YAAAA,MAAK,QAAW,GAAA,IAAA,CAAK,WAAW,IAAK,CAAA,OAAA,CAAQ,kBAAkB,OAAO,CAAA;AAAA;AAExE,UAAAA,KAAAA,CAAK,QAAW,GAAA,CAAC,CAAC,QAAA;AAClB,UAAA,IAAI,iBAAmB,EAAA;AACrB,YAAAA,MAAK,QAAW,GAAA,QAAA;AAAA;AAElB,UAAO,IAAA,GAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,kBAAkB,CAAA;AAAA,mBACtC,CAAC,OAAA,IAAW,KAAK,GAAI5C,CAAAA,QAAAA,CAAQ,MAAM,CAAG,EAAA;AAC/C,UAAI,IAAA,sBAAA,GAAyB,IAAIiD,oBAAAA,EAAAA,EAAqB,WAAc,GAAA,IAAA,CAAK,UAAU,WAAc,GAAA,IAAA,CAAK,QAAU,EAAA,gBAAA,GAAmB,IAAK,CAAA,aAAA;AACxI,UAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,UAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,UAAA,IAAA,CAAK,aAAgB,GAAA,CAAA;AACrB,UAAI,IAAA,QAAA,GAAW,IAAK,CAAA,aAAA,CAAcjD,QAAQ,CAAA,MAAA,EAAQ,KAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA,KAAA,EAAO,sBAAsB,CAAA;AAC9G,UAAA,IAAI,eAAmB,IAAA,CAAC,QAAY,IAAA,IAAA,CAAK,uBAAyB,EAAA;AAChE,YAAK,IAAA,CAAA,kBAAA,CAAmB,wBAAwB,KAAK,CAAA;AACrD,YAAA,IAAA,CAAK,8BAA+B,EAAA;AACpC,YAAI,IAAA,IAAA,CAAK,gBAAgB,CACvB,EAAA;AAAE,cAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,aAAA,EAAe,2DAA2D,CAAA;AAAA;AAC9F,YAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,YAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,YAAA,IAAA,CAAK,aAAgB,GAAA,gBAAA;AACrB,YAAA,OAAO,IAAK,CAAA,wBAAA,CAAyB,QAAU,EAAA,QAAA,EAAU,UAAU,OAAO,CAAA;AAAA;AAE5E,UAAK,IAAA,CAAA,qBAAA,CAAsB,wBAAwB,IAAI,CAAA;AACvD,UAAK,IAAA,CAAA,QAAA,GAAW,eAAe,IAAK,CAAA,QAAA;AACpC,UAAK,IAAA,CAAA,QAAA,GAAW,eAAe,IAAK,CAAA,QAAA;AACpC,UAAK,IAAA,CAAA,aAAA,GAAgB,oBAAoB,IAAK,CAAA,aAAA;AAC9C,UAAA,IAAI,MAAS,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAChD,UAAA,MAAA,CAAO,MAAS,GAAA,IAAA;AAChB,UAAA,MAAA,CAAO,SAAY,GAAA,QAAA;AACnB,UAAA,IAAI,iBAAmB,EAAA;AACrB,YAAA,MAAA,CAAO,QAAW,GAAA,QAAA;AAAA;AAEpB,UAAO,IAAA,GAAA,IAAA,CAAK,UAAW,CAAA,MAAA,EAAQ,gBAAgB,CAAA;AAAA,SACtC,MAAA,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,SAAW,EAAA;AAC1C,UAAA,IAAI,YAAY,eAAiB,EAAA;AAC/B,YAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,2EAA2E,CAAA;AAAA;AAEpG,UAAA,IAAI,MAAS,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAChD,UAAA,MAAA,CAAO,GAAM,GAAA,IAAA;AACb,UAAA,MAAA,CAAO,QAAQ,IAAK,CAAA,aAAA,CAAc,EAAC,QAAA,EAAU,MAAK,CAAA;AAClD,UAAO,IAAA,GAAA,IAAA,CAAK,UAAW,CAAA,MAAA,EAAQ,0BAA0B,CAAA;AAAA;AAE3D,QAAO,OAAA,IAAA;AAAA,OACT;AAOA,MAAAoE,KAAK,CAAA,aAAA,GAAgB,SAAS,sBAAA,EAAwB,SAAS,MAAQ,EAAA;AAGrE,QAAI,IAAA,IAAA,CAAK,IAASpE,KAAAA,QAAAA,CAAQ,KAAO,EAAA;AAAE,UAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAEnD,QAAA,IAAI4C,KAAM,EAAA,UAAA,GAAa,IAAK,CAAA,gBAAA,KAAqB,IAAK,CAAA,KAAA;AACtD,QAAA,QAAQ,KAAK,IAAM;AAAA,UACnB,KAAK5C,QAAQ,CAAA,MAAA;AACX,YAAI,IAAA,CAAC,KAAK,UACR,EAAA;AAAE,cAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,kCAAkC,CAAA;AAAA;AAC7D,YAAA4C,KAAAA,GAAO,KAAK,SAAU,EAAA;AACtB,YAAA,IAAA,CAAK,IAAK,EAAA;AACV,YAAA,IAAI,KAAK,IAAS5C,KAAAA,QAAAA,CAAQ,MAAU,IAAA,CAAC,KAAK,gBACxC,EAAA;AAAE,cAAK,IAAA,CAAA,KAAA,CAAM4C,KAAK,CAAA,KAAA,EAAO,gDAAgD,CAAA;AAAA;AAO3E,YAAI,IAAA,IAAA,CAAK,IAAS5C,KAAAA,QAAAA,CAAQ,GAAO,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,QAAY,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,MACvF,EAAA;AAAE,cAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACpB,YAAO,OAAA,IAAA,CAAK,UAAW4C,CAAAA,KAAAA,EAAM,OAAO,CAAA;AAAA,UAEtC,KAAK5C,QAAQ,CAAA,KAAA;AACX,YAAA4C,KAAAA,GAAO,KAAK,SAAU,EAAA;AACtB,YAAA,IAAA,CAAK,IAAK,EAAA;AACV,YAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,gBAAgB,CAAA;AAAA,UAE/C,KAAK5C,QAAQ,CAAA,IAAA;AACX,YAAA,IAAI,WAAW,IAAK,CAAA,KAAA,EAAO,WAAW,IAAK,CAAA,QAAA,EAAU,cAAc,IAAK,CAAA,WAAA;AACxE,YAAI,IAAA,EAAA,GAAK,IAAK,CAAA,UAAA,CAAW,KAAK,CAAA;AAC9B,YAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,CAAC,eAAe,EAAG,CAAA,IAAA,KAAS,OAAW,IAAA,CAAC,KAAK,kBAAmB,EAAA,IAAK,KAAK,GAAIA,CAAAA,QAAAA,CAAQ,SAAS,CAAG,EAAA;AACrI,cAAK,IAAA,CAAA,eAAA,CAAgBiE,OAAM,MAAM,CAAA;AACjC,cAAO,OAAA,IAAA,CAAK,aAAc,CAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAG,EAAA,CAAA,EAAG,KAAO,EAAA,IAAA,EAAM,OAAO,CAAA;AAAA;AAEzF,YAAA,IAAI,UAAc,IAAA,CAAC,IAAK,CAAA,kBAAA,EAAsB,EAAA;AAC5C,cAAA,IAAI,IAAK,CAAA,GAAA,CAAIjE,QAAQ,CAAA,KAAK,CACxB,EAAA;AAAE,gBAAO,OAAA,IAAA,CAAK,oBAAqB,CAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA,EAAG,CAAC,EAAE,CAAG,EAAA,KAAA,EAAO,OAAO,CAAA;AAAA;AAC/F,cAAI,IAAA,IAAA,CAAK,QAAQ,WAAe,IAAA,CAAA,IAAK,GAAG,IAAS,KAAA,OAAA,IAAW,KAAK,IAASA,KAAAA,QAAAA,CAAQ,QAAQ,CAAC,WAAA,KACtF,CAAC,IAAK,CAAA,wBAAA,IAA4B,KAAK,KAAU,KAAA,IAAA,IAAQ,KAAK,WAAc,CAAA,EAAA;AAC/E,gBAAK,EAAA,GAAA,IAAA,CAAK,WAAW,KAAK,CAAA;AAC1B,gBAAI,IAAA,IAAA,CAAK,oBAAwB,IAAA,CAAC,KAAK,GAAIA,CAAAA,QAAAA,CAAQ,KAAK,CACtD,EAAA;AAAE,kBAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACpB,gBAAO,OAAA,IAAA,CAAK,oBAAqB,CAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA,EAAG,CAAC,EAAE,CAAG,EAAA,IAAA,EAAM,OAAO,CAAA;AAAA;AAC5F;AAEF,YAAO,OAAA,EAAA;AAAA,UAET,KAAKA,QAAQ,CAAA,MAAA;AACX,YAAA,IAAI6D,SAAQ,IAAK,CAAA,KAAA;AACjB,YAAAjB,KAAO,GAAA,IAAA,CAAK,YAAaiB,CAAAA,MAAAA,CAAM,KAAK,CAAA;AACpC,YAAAjB,KAAAA,CAAK,QAAQ,EAAC,OAAA,EAASiB,OAAM,OAAS,EAAA,KAAA,EAAOA,OAAM,KAAK,EAAA;AACxD,YAAOjB,OAAAA,KAAAA;AAAA,UAET,KAAK5C,QAAQ,CAAA,GAAA;AAAA,UAAK,KAAKA,QAAQ,CAAA,MAAA;AAC7B,YAAO,OAAA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,KAAK,CAAA;AAAA,UAErC,KAAKA,QAAQ,CAAA,KAAA;AAAA,UAAO,KAAKA,QAAQ,CAAA,KAAA;AAAA,UAAO,KAAKA,QAAQ,CAAA,MAAA;AACnD,YAAA4C,KAAAA,GAAO,KAAK,SAAU,EAAA;AACtB,YAAAA,KAAAA,CAAK,QAAQ,IAAK,CAAA,IAAA,KAAS5C,SAAQ,KAAQ,GAAA,IAAA,GAAO,IAAK,CAAA,IAAA,KAASA,QAAQ,CAAA,KAAA;AACxE,YAAA4C,KAAAA,CAAK,GAAM,GAAA,IAAA,CAAK,IAAK,CAAA,OAAA;AACrB,YAAA,IAAA,CAAK,IAAK,EAAA;AACV,YAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,SAAS,CAAA;AAAA,UAExC,KAAK5C,QAAQ,CAAA,MAAA;AACX,YAAA,IAAIiB,SAAQ,IAAK,CAAA,KAAA,EAAO,OAAO,IAAK,CAAA,kCAAA,CAAmC,YAAY,OAAO,CAAA;AAC1F,YAAA,IAAI,sBAAwB,EAAA;AAC1B,cAAA,IAAI,uBAAuB,mBAAsB,GAAA,CAAA,IAAK,CAAC,IAAK,CAAA,oBAAA,CAAqB,IAAI,CACnF,EAAA;AAAE,gBAAA,sBAAA,CAAuB,mBAAsBA,GAAAA,MAAAA;AAAA;AACjD,cAAI,IAAA,sBAAA,CAAuB,oBAAoB,CAC7C,EAAA;AAAE,gBAAA,sBAAA,CAAuB,iBAAoBA,GAAAA,MAAAA;AAAA;AAAO;AAExD,YAAO,OAAA,IAAA;AAAA,UAET,KAAKjB,QAAQ,CAAA,QAAA;AACX,YAAA4C,KAAAA,GAAO,KAAK,SAAU,EAAA;AACtB,YAAA,IAAA,CAAK,IAAK,EAAA;AACV,YAAAA,KAAAA,CAAK,WAAW,IAAK,CAAA,aAAA,CAAc5C,SAAQ,QAAU,EAAA,IAAA,EAAM,MAAM,sBAAsB,CAAA;AACvF,YAAO,OAAA,IAAA,CAAK,UAAW4C,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAAA,UAEhD,KAAK5C,QAAQ,CAAA,MAAA;AACX,YAAK,IAAA,CAAA,eAAA,CAAgBiE,OAAM,MAAM,CAAA;AACjC,YAAO,OAAA,IAAA,CAAK,QAAS,CAAA,KAAA,EAAO,sBAAsB,CAAA;AAAA,UAEpD,KAAKjE,QAAQ,CAAA,SAAA;AACX,YAAA4C,KAAAA,GAAO,KAAK,SAAU,EAAA;AACtB,YAAA,IAAA,CAAK,IAAK,EAAA;AACV,YAAO,OAAA,IAAA,CAAK,aAAcA,CAAAA,KAAAA,EAAM,CAAC,CAAA;AAAA,UAEnC,KAAK5C,QAAQ,CAAA,MAAA;AACX,YAAA,OAAO,IAAK,CAAA,UAAA,CAAW,IAAK,CAAA,SAAA,IAAa,KAAK,CAAA;AAAA,UAEhD,KAAKA,QAAQ,CAAA,IAAA;AACX,YAAA,OAAO,KAAK,QAAS,EAAA;AAAA,UAEvB,KAAKA,QAAQ,CAAA,SAAA;AACX,YAAA,OAAO,KAAK,aAAc,EAAA;AAAA,UAE5B,KAAKA,QAAQ,CAAA,OAAA;AACX,YAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAAI,EAAA;AAClC,cAAO,OAAA,IAAA,CAAK,gBAAgB,MAAM,CAAA;AAAA,aAC7B,MAAA;AACL,cAAA,OAAO,KAAK,UAAW,EAAA;AAAA;AACzB,UAEF;AACE,YAAA,OAAO,KAAK,oBAAqB,EAAA;AAAA;AACnC,OACF;AAEA,MAAAoE,KAAAA,CAAK,uBAAuB,WAAW;AACrC,QAAA,IAAA,CAAK,UAAW,EAAA;AAAA,OAClB;AAEA,MAAAA,KAAAA,CAAK,eAAkB,GAAA,SAAS,MAAQ,EAAA;AACtC,QAAIxB,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAI1B,QAAA,IAAI,KAAK,WAAa,EAAA;AAAE,UAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,mCAAmC,CAAA;AAAA;AAC7F,QAAA,IAAA,CAAK,IAAK,EAAA;AAEV,QAAA,IAAI,IAAK,CAAA,IAAA,KAAS5C,QAAQ,CAAA,MAAA,IAAU,CAAC,MAAQ,EAAA;AAC3C,UAAO,OAAA,IAAA,CAAK,mBAAmB4C,KAAI,CAAA;AAAA,SAC1B,MAAA,IAAA,IAAA,CAAK,IAAS5C,KAAAA,QAAAA,CAAQ,GAAK,EAAA;AACpC,UAAI,IAAA,IAAA,GAAO,KAAK,WAAY4C,CAAAA,KAAAA,CAAK,OAAOA,KAAK,CAAA,GAAA,IAAOA,KAAK,CAAA,GAAA,CAAI,KAAK,CAAA;AAClE,UAAA,IAAA,CAAK,IAAO,GAAA,QAAA;AACZ,UAAAA,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,UAAA,CAAW,MAAM,YAAY,CAAA;AAC9C,UAAO,OAAA,IAAA,CAAK,gBAAgBA,KAAI,CAAA;AAAA,SAC3B,MAAA;AACL,UAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAClB,OACF;AAEA,MAAAwB,KAAAA,CAAK,kBAAqB,GAAA,SAASxB,KAAM,EAAA;AACvC,QAAA,IAAA,CAAK,IAAK,EAAA;AAGV,QAAAA,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,gBAAiB,EAAA;AAEpC,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAAI,EAAA;AAClC,UAAA,IAAI,CAAC,IAAA,CAAK,GAAI5C,CAAAA,QAAAA,CAAQ,MAAM,CAAG,EAAA;AAC7B,YAAK,IAAA,CAAA,MAAA,CAAOA,SAAQ,KAAK,CAAA;AACzB,YAAA,IAAI,CAAC,IAAA,CAAK,kBAAmBA,CAAAA,QAAAA,CAAQ,MAAM,CAAG,EAAA;AAC5C,cAAA4C,KAAAA,CAAK,OAAU,GAAA,IAAA,CAAK,gBAAiB,EAAA;AACrC,cAAA,IAAI,CAAC,IAAA,CAAK,GAAI5C,CAAAA,QAAAA,CAAQ,MAAM,CAAG,EAAA;AAC7B,gBAAK,IAAA,CAAA,MAAA,CAAOA,SAAQ,KAAK,CAAA;AACzB,gBAAA,IAAI,CAAC,IAAA,CAAK,kBAAmBA,CAAAA,QAAAA,CAAQ,MAAM,CAAG,EAAA;AAC5C,kBAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAClB;AACF,aACK,MAAA;AACL,cAAA4C,MAAK,OAAU,GAAA,IAAA;AAAA;AACjB,WACK,MAAA;AACL,YAAAA,MAAK,OAAU,GAAA,IAAA;AAAA;AACjB,SACK,MAAA;AAEL,UAAA,IAAI,CAAC,IAAA,CAAK,GAAI5C,CAAAA,QAAAA,CAAQ,MAAM,CAAG,EAAA;AAC7B,YAAA,IAAI,WAAW,IAAK,CAAA,KAAA;AACpB,YAAI,IAAA,IAAA,CAAK,IAAIA,QAAQ,CAAA,KAAK,KAAK,IAAK,CAAA,GAAA,CAAIA,QAAQ,CAAA,MAAM,CAAG,EAAA;AACvD,cAAK,IAAA,CAAA,gBAAA,CAAiB,UAAU,2CAA2C,CAAA;AAAA,aACtE,MAAA;AACL,cAAA,IAAA,CAAK,WAAW,QAAQ,CAAA;AAAA;AAC1B;AACF;AAGF,QAAO,OAAA,IAAA,CAAK,UAAW4C,CAAAA,KAAAA,EAAM,kBAAkB,CAAA;AAAA,OACjD;AAEA,MAAAwB,KAAAA,CAAK,eAAkB,GAAA,SAASxB,KAAM,EAAA;AACpC,QAAA,IAAA,CAAK,IAAK,EAAA;AAEV,QAAA,IAAI,cAAc,IAAK,CAAA,WAAA;AACvB,QAAAA,KAAK,CAAA,QAAA,GAAW,IAAK,CAAA,UAAA,CAAW,IAAI,CAAA;AAEpC,QAAIA,IAAAA,KAAAA,CAAK,QAAS,CAAA,IAAA,KAAS,MACzB,EAAA;AAAE,UAAA,IAAA,CAAK,gBAAiBA,CAAAA,KAAAA,CAAK,QAAS,CAAA,KAAA,EAAO,0DAA0D,CAAA;AAAA;AACzG,QAAA,IAAI,WACF,EAAA;AAAE,UAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,mDAAmD,CAAA;AAAA;AACzF,QAAA,IAAI,KAAK,OAAQ,CAAA,UAAA,KAAe,YAAY,CAAC,IAAA,CAAK,QAAQ,2BACxD,EAAA;AAAE,UAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,2CAA2C,CAAA;AAAA;AAEjF,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,cAAc,CAAA;AAAA,OAC7C;AAEA,MAAAwB,KAAAA,CAAK,YAAe,GAAA,SAASP,MAAO,EAAA;AAClC,QAAIjB,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAAA,MAAK,KAAQiB,GAAAA,MAAAA;AACb,QAAAjB,KAAAA,CAAK,MAAM,IAAK,CAAA,KAAA,CAAM,MAAM,IAAK,CAAA,KAAA,EAAO,KAAK,GAAG,CAAA;AAChD,QAAIA,IAAAA,KAAAA,CAAK,IAAI,UAAWA,CAAAA,KAAAA,CAAK,IAAI,MAAS,GAAA,CAAC,MAAM,GAAK,EAAA;AAAE,UAAAA,KAAAA,CAAK,MAASA,GAAAA,KAAAA,CAAK,GAAI,CAAA,KAAA,CAAM,GAAG,CAAE,CAAA,CAAA,CAAE,OAAQ,CAAA,IAAA,EAAM,EAAE,CAAA;AAAA;AAC5G,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,SAAS,CAAA;AAAA,OACxC;AAEA,MAAAwB,KAAAA,CAAK,uBAAuB,WAAW;AACrC,QAAK,IAAA,CAAA,MAAA,CAAOpE,SAAQ,MAAM,CAAA;AAC1B,QAAI,IAAA,GAAA,GAAM,KAAK,eAAgB,EAAA;AAC/B,QAAK,IAAA,CAAA,MAAA,CAAOA,SAAQ,MAAM,CAAA;AAC1B,QAAO,OAAA,GAAA;AAAA,OACT;AAEA,MAAAoE,KAAAA,CAAK,gBAAmB,GAAA,SAAS,QAAU,EAAA;AACzC,QAAO,OAAA,CAAC,KAAK,kBAAmB,EAAA;AAAA,OAClC;AAEA,MAAAA,KAAK,CAAA,kCAAA,GAAqC,SAAS,UAAA,EAAY,OAAS,EAAA;AACtE,QAAI,IAAA,QAAA,GAAW,IAAK,CAAA,KAAA,EAAO,QAAW,GAAA,IAAA,CAAK,UAAU,GAAK,EAAA,kBAAA,GAAqB,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA;AAC3G,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,UAAA,IAAA,CAAK,IAAK,EAAA;AAEV,UAAA,IAAI,aAAgB,GAAA,IAAA,CAAK,KAAO,EAAA,aAAA,GAAgB,IAAK,CAAA,QAAA;AACrD,UAAA,IAAI,QAAW,GAAA,EAAI,EAAA,KAAA,GAAQ,MAAM,WAAc,GAAA,KAAA;AAC/C,UAAI,IAAA,sBAAA,GAAyB,IAAInB,oBAAqB,EAAA,EAAA,WAAA,GAAc,KAAK,QAAU,EAAA,WAAA,GAAc,KAAK,QAAU,EAAA,WAAA;AAChH,UAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,UAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAEhB,UAAO,OAAA,IAAA,CAAK,IAASjD,KAAAA,QAAAA,CAAQ,MAAQ,EAAA;AACnC,YAAA,KAAA,GAAQ,KAAQ,GAAA,KAAA,GAAQ,IAAK,CAAA,MAAA,CAAOA,SAAQ,KAAK,CAAA;AACjD,YAAA,IAAI,sBAAsB,IAAK,CAAA,kBAAA,CAAmBA,QAAQ,CAAA,MAAA,EAAQ,IAAI,CAAG,EAAA;AACvE,cAAc,WAAA,GAAA,IAAA;AACd,cAAA;AAAA,aACS,MAAA,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,QAAU,EAAA;AACzC,cAAA,WAAA,GAAc,IAAK,CAAA,KAAA;AACnB,cAAA,QAAA,CAAS,KAAK,IAAK,CAAA,cAAA,CAAe,IAAK,CAAA,gBAAA,EAAkB,CAAC,CAAA;AAC1D,cAAI,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,KAAO,EAAA;AAC/B,gBAAK,IAAA,CAAA,gBAAA;AAAA,kBACH,IAAK,CAAA,KAAA;AAAA,kBACL;AAAA,iBACF;AAAA;AAEF,cAAA;AAAA,aACK,MAAA;AACL,cAAA,QAAA,CAAS,KAAK,IAAK,CAAA,gBAAA,CAAiB,OAAO,sBAAwB,EAAA,IAAA,CAAK,cAAc,CAAC,CAAA;AAAA;AACzF;AAEF,UAAA,IAAI,WAAc,GAAA,IAAA,CAAK,UAAY,EAAA,WAAA,GAAc,IAAK,CAAA,aAAA;AACtD,UAAK,IAAA,CAAA,MAAA,CAAOA,SAAQ,MAAM,CAAA;AAE1B,UAAI,IAAA,UAAA,IAAc,KAAK,gBAAiB,CAAA,QAAQ,KAAK,IAAK,CAAA,GAAA,CAAIA,QAAQ,CAAA,KAAK,CAAG,EAAA;AAC5E,YAAK,IAAA,CAAA,kBAAA,CAAmB,wBAAwB,KAAK,CAAA;AACrD,YAAA,IAAA,CAAK,8BAA+B,EAAA;AACpC,YAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,YAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,YAAA,OAAO,IAAK,CAAA,mBAAA,CAAoB,QAAU,EAAA,QAAA,EAAU,UAAU,OAAO,CAAA;AAAA;AAGvE,UAAI,IAAA,CAAC,QAAS,CAAA,MAAA,IAAU,WAAa,EAAA;AAAE,YAAK,IAAA,CAAA,UAAA,CAAW,KAAK,YAAY,CAAA;AAAA;AACxE,UAAA,IAAI,WAAa,EAAA;AAAE,YAAA,IAAA,CAAK,WAAW,WAAW,CAAA;AAAA;AAC9C,UAAK,IAAA,CAAA,qBAAA,CAAsB,wBAAwB,IAAI,CAAA;AACvD,UAAK,IAAA,CAAA,QAAA,GAAW,eAAe,IAAK,CAAA,QAAA;AACpC,UAAK,IAAA,CAAA,QAAA,GAAW,eAAe,IAAK,CAAA,QAAA;AAEpC,UAAI,IAAA,QAAA,CAAS,SAAS,CAAG,EAAA;AACvB,YAAM,GAAA,GAAA,IAAA,CAAK,WAAY,CAAA,aAAA,EAAe,aAAa,CAAA;AACnD,YAAA,GAAA,CAAI,WAAc,GAAA,QAAA;AAClB,YAAA,IAAA,CAAK,YAAa,CAAA,GAAA,EAAK,oBAAsB,EAAA,WAAA,EAAa,WAAW,CAAA;AAAA,WAChE,MAAA;AACL,YAAA,GAAA,GAAM,SAAS,CAAC,CAAA;AAAA;AAClB,SACK,MAAA;AACL,UAAA,GAAA,GAAM,KAAK,oBAAqB,EAAA;AAAA;AAGlC,QAAI,IAAA,IAAA,CAAK,QAAQ,cAAgB,EAAA;AAC/B,UAAA,IAAI,GAAM,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC7C,UAAA,GAAA,CAAI,UAAa,GAAA,GAAA;AACjB,UAAO,OAAA,IAAA,CAAK,UAAW,CAAA,GAAA,EAAK,yBAAyB,CAAA;AAAA,SAChD,MAAA;AACL,UAAO,OAAA,GAAA;AAAA;AACT,OACF;AAEA,MAAAoE,KAAAA,CAAK,cAAiB,GAAA,SAAS,IAAM,EAAA;AACnC,QAAO,OAAA,IAAA;AAAA,OACT;AAEA,MAAAA,MAAK,mBAAsB,GAAA,SAAS,QAAU,EAAA,QAAA,EAAU,UAAU,OAAS,EAAA;AACzE,QAAO,OAAA,IAAA,CAAK,qBAAqB,IAAK,CAAA,WAAA,CAAY,UAAU,QAAQ,CAAA,EAAG,QAAU,EAAA,KAAA,EAAO,OAAO,CAAA;AAAA,OACjG;AAQA,MAAA,IAAIG,SAAQ,EAAC;AAEb,MAAAH,KAAAA,CAAK,WAAW,WAAW;AACzB,QAAA,IAAI,KAAK,WAAa,EAAA;AAAE,UAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,gCAAgC,CAAA;AAAA;AAC1F,QAAIxB,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,IAAe,KAAK,IAAK,CAAA,IAAA,KAAS5C,SAAQ,GAAK,EAAA;AAC9D,UAAI,IAAA,IAAA,GAAO,KAAK,WAAY4C,CAAAA,KAAAA,CAAK,OAAOA,KAAK,CAAA,GAAA,IAAOA,KAAK,CAAA,GAAA,CAAI,KAAK,CAAA;AAClE,UAAA,IAAA,CAAK,IAAO,GAAA,KAAA;AACZ,UAAAA,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,UAAA,CAAW,MAAM,YAAY,CAAA;AAC9C,UAAA,IAAA,CAAK,IAAK,EAAA;AACV,UAAA,IAAI,cAAc,IAAK,CAAA,WAAA;AACvB,UAAAA,KAAK,CAAA,QAAA,GAAW,IAAK,CAAA,UAAA,CAAW,IAAI,CAAA;AACpC,UAAIA,IAAAA,KAAAA,CAAK,QAAS,CAAA,IAAA,KAAS,QACzB,EAAA;AAAE,YAAA,IAAA,CAAK,gBAAiBA,CAAAA,KAAAA,CAAK,QAAS,CAAA,KAAA,EAAO,sDAAsD,CAAA;AAAA;AACrG,UAAA,IAAI,WACF,EAAA;AAAE,YAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,kDAAkD,CAAA;AAAA;AACxF,UAAI,IAAA,CAAC,KAAK,iBACR,EAAA;AAAE,YAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,mEAAmE,CAAA;AAAA;AACzG,UAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,cAAc,CAAA;AAAA;AAE7C,QAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,QAAAA,KAAK,CAAA,MAAA,GAAS,IAAK,CAAA,eAAA,CAAgB,IAAK,CAAA,aAAA,CAAc,IAAM,EAAA,KAAA,EAAO,IAAI,CAAA,EAAG,QAAU,EAAA,QAAA,EAAU,MAAM,KAAK,CAAA;AACzG,QAAA,IAAI,IAAK,CAAA,GAAA,CAAI5C,QAAQ,CAAA,MAAM,CAAG,EAAA;AAAE,UAAA4C,KAAAA,CAAK,SAAY,GAAA,IAAA,CAAK,aAAc5C,CAAAA,QAAAA,CAAQ,QAAQ,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,EAAG,KAAK,CAAA;AAAA,SACnH,MAAA;AAAE,UAAA4C,MAAK,SAAY2B,GAAAA,MAAAA;AAAA;AACxB,QAAO,OAAA,IAAA,CAAK,UAAW3B,CAAAA,KAAAA,EAAM,eAAe,CAAA;AAAA,OAC9C;AAIA,MAAAwB,KAAAA,CAAK,oBAAuB,GAAA,SAAS7D,IAAK,EAAA;AACxC,QAAA,IAAI,WAAWA,IAAI,CAAA,QAAA;AAEnB,QAAI,IAAA,IAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAI,IAAA,IAAA,CAAK,IAASP,KAAAA,QAAAA,CAAQ,eAAiB,EAAA;AACzC,UAAA,IAAI,CAAC,QAAU,EAAA;AACb,YAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,kDAAkD,CAAA;AAAA;AAEtF,UAAA,IAAA,CAAK,KAAQ,GAAA;AAAA,YACX,GAAK,EAAA,IAAA,CAAK,KAAM,CAAA,OAAA,CAAQ,UAAU,IAAI,CAAA;AAAA,YACtC,MAAQ,EAAA;AAAA,WACV;AAAA,SACK,MAAA;AACL,UAAA,IAAA,CAAK,KAAQ,GAAA;AAAA,YACX,GAAA,EAAK,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,IAAA,CAAK,KAAO,EAAA,IAAA,CAAK,GAAG,CAAA,CAAE,OAAQ,CAAA,QAAA,EAAU,IAAI,CAAA;AAAA,YAClE,QAAQ,IAAK,CAAA;AAAA,WACf;AAAA;AAEF,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAK,IAAA,CAAA,IAAA,GAAO,IAAK,CAAA,IAAA,KAASA,QAAQ,CAAA,SAAA;AAClC,QAAO,OAAA,IAAA,CAAK,UAAW,CAAA,IAAA,EAAM,iBAAiB,CAAA;AAAA,OAChD;AAEA,MAAAoE,KAAAA,CAAK,aAAgB,GAAA,SAAS7D,IAAK,EAAA;AACjC,QAAA,IAAKA,IAAQ,KAAA,KAAA,CAAA,EAASA,IAAAA,GAAM,EAAC;AAC7B,QAAA,IAAI,WAAWA,IAAI,CAAA,QAAA;AAAU,QAAK,IAAA,QAAA,KAAa,QAAoB,QAAA,GAAA,KAAA;AAEnE,QAAIqC,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAAA,KAAAA,CAAK,cAAc,EAAC;AACpB,QAAA,IAAI,MAAS,GAAA,IAAA,CAAK,oBAAqB,CAAA,EAAC,UAAmB,CAAA;AAC3D,QAAAA,KAAAA,CAAK,MAAS,GAAA,CAAC,MAAM,CAAA;AACrB,QAAO,OAAA,CAAC,OAAO,IAAM,EAAA;AACnB,UAAI,IAAA,IAAA,CAAK,IAAS5C,KAAAA,QAAAA,CAAQ,GAAK,EAAA;AAAE,YAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,GAAA,EAAK,+BAA+B,CAAA;AAAA;AACrF,UAAK,IAAA,CAAA,MAAA,CAAOA,SAAQ,YAAY,CAAA;AAChC,UAAA4C,KAAK,CAAA,WAAA,CAAY,IAAK,CAAA,IAAA,CAAK,iBAAiB,CAAA;AAC5C,UAAK,IAAA,CAAA,MAAA,CAAO5C,SAAQ,MAAM,CAAA;AAC1B,UAAA4C,KAAAA,CAAK,OAAO,IAAK,CAAA,MAAA,GAAS,KAAK,oBAAqB,CAAA,EAAC,QAAkB,EAAC,CAAC,CAAA;AAAA;AAE3E,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAAA,OAChD;AAEA,MAAAwB,KAAAA,CAAK,WAAc,GAAA,SAAS,IAAM,EAAA;AAChC,QAAO,OAAA,CAAC,KAAK,QAAY,IAAA,IAAA,CAAK,IAAI,IAAS,KAAA,YAAA,IAAgB,IAAK,CAAA,GAAA,CAAI,IAAS,KAAA,OAAA,KAC1E,KAAK,IAASpE,KAAAA,QAAAA,CAAQ,QAAQ,IAAK,CAAA,IAAA,KAASA,SAAQ,GAAO,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,MAAU,IAAA,IAAA,CAAK,SAASA,QAAQ,CAAA,QAAA,IAAY,KAAK,IAAK,CAAA,OAAA,IAAY,KAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,SAC3M,CAACC,UAAAA,CAAU,KAAK,IAAK,CAAA,KAAA,CAAM,MAAM,IAAK,CAAA,UAAA,EAAY,IAAK,CAAA,KAAK,CAAC,CAAA;AAAA,OACjE;AAIA,MAAAmE,KAAK,CAAA,QAAA,GAAW,SAAS,SAAA,EAAW,sBAAwB,EAAA;AAC1D,QAAA,IAAIxB,QAAO,IAAK,CAAA,SAAA,IAAa,KAAQ,GAAA,IAAA,EAAM,WAAW,EAAC;AACvD,QAAAA,KAAAA,CAAK,aAAa,EAAC;AACnB,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAA,OAAO,CAAC,IAAA,CAAK,GAAI5C,CAAAA,QAAAA,CAAQ,MAAM,CAAG,EAAA;AAChC,UAAA,IAAI,CAAC,KAAO,EAAA;AACV,YAAK,IAAA,CAAA,MAAA,CAAOA,SAAQ,KAAK,CAAA;AACzB,YAAI,IAAA,IAAA,CAAK,QAAQ,WAAe,IAAA,CAAA,IAAK,KAAK,kBAAmBA,CAAAA,QAAAA,CAAQ,MAAM,CAAG,EAAA;AAAE,cAAA;AAAA;AAAM,WACjF,MAAA;AAAE,YAAQ,KAAA,GAAA,KAAA;AAAA;AAEjB,UAAA,IAAI,IAAO,GAAA,IAAA,CAAK,aAAc,CAAA,SAAA,EAAW,sBAAsB,CAAA;AAC/D,UAAA,IAAI,CAAC,SAAW,EAAA;AAAE,YAAK,IAAA,CAAA,cAAA,CAAe,IAAM,EAAA,QAAA,EAAU,sBAAsB,CAAA;AAAA;AAC5E,UAAA4C,KAAAA,CAAK,UAAW,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA;AAE3B,QAAA,OAAO,IAAK,CAAA,UAAA,CAAWA,KAAM,EAAA,SAAA,GAAY,kBAAkB,kBAAkB,CAAA;AAAA,OAC/E;AAEA,MAAAwB,KAAK,CAAA,aAAA,GAAgB,SAAS,SAAA,EAAW,sBAAwB,EAAA;AAC/D,QAAA,IAAI,OAAO,IAAK,CAAA,SAAA,EAAa,EAAA,WAAA,EAAa,SAAS,QAAU,EAAA,QAAA;AAC7D,QAAI,IAAA,IAAA,CAAK,QAAQ,WAAe,IAAA,CAAA,IAAK,KAAK,GAAIpE,CAAAA,QAAAA,CAAQ,QAAQ,CAAG,EAAA;AAC/D,UAAA,IAAI,SAAW,EAAA;AACb,YAAK,IAAA,CAAA,QAAA,GAAW,IAAK,CAAA,UAAA,CAAW,KAAK,CAAA;AACrC,YAAI,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,KAAO,EAAA;AAC/B,cAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,+CAA+C,CAAA;AAAA;AAEnF,YAAO,OAAA,IAAA,CAAK,UAAW,CAAA,IAAA,EAAM,aAAa,CAAA;AAAA;AAG5C,UAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAK,gBAAiB,CAAA,KAAA,EAAO,sBAAsB,CAAA;AAEnE,UAAA,IAAI,KAAK,IAASA,KAAAA,QAAAA,CAAQ,SAAS,sBAA0B,IAAA,sBAAA,CAAuB,gBAAgB,CAAG,EAAA;AACrG,YAAA,sBAAA,CAAuB,gBAAgB,IAAK,CAAA,KAAA;AAAA;AAG9C,UAAO,OAAA,IAAA,CAAK,UAAW,CAAA,IAAA,EAAM,eAAe,CAAA;AAAA;AAE9C,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,UAAA,IAAA,CAAK,MAAS,GAAA,KAAA;AACd,UAAA,IAAA,CAAK,SAAY,GAAA,KAAA;AACjB,UAAA,IAAI,aAAa,sBAAwB,EAAA;AACvC,YAAA,QAAA,GAAW,IAAK,CAAA,KAAA;AAChB,YAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAAA;AAElB,UAAA,IAAI,CAAC,SACH,EAAA;AAAE,YAAc,WAAA,GAAA,IAAA,CAAK,GAAIA,CAAAA,QAAAA,CAAQ,IAAI,CAAA;AAAA;AAAG;AAE5C,QAAA,IAAI,cAAc,IAAK,CAAA,WAAA;AACvB,QAAA,IAAA,CAAK,kBAAkB,IAAI,CAAA;AAC3B,QAAA,IAAI,CAAC,SAAA,IAAa,CAAC,WAAA,IAAe,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,IAAK,CAAC,WAAA,IAAe,IAAK,CAAA,WAAA,CAAY,IAAI,CAAG,EAAA;AACzG,UAAU,OAAA,GAAA,IAAA;AACV,UAAA,WAAA,GAAc,KAAK,OAAQ,CAAA,WAAA,IAAe,KAAK,IAAK,CAAA,GAAA,CAAIA,SAAQ,IAAI,CAAA;AACpE,UAAA,IAAA,CAAK,kBAAkB,IAAI,CAAA;AAAA,SACtB,MAAA;AACL,UAAU,OAAA,GAAA,KAAA;AAAA;AAEZ,QAAK,IAAA,CAAA,kBAAA,CAAmB,MAAM,SAAW,EAAA,WAAA,EAAa,SAAS,QAAU,EAAA,QAAA,EAAU,wBAAwB,WAAW,CAAA;AACtH,QAAO,OAAA,IAAA,CAAK,UAAW,CAAA,IAAA,EAAM,UAAU,CAAA;AAAA,OACzC;AAEA,MAAAoE,KAAAA,CAAK,iBAAoB,GAAA,SAAS,IAAM,EAAA;AACtC,QAAK,IAAA,CAAA,IAAA,GAAO,KAAK,GAAI,CAAA,IAAA;AACrB,QAAA,IAAA,CAAK,kBAAkB,IAAI,CAAA;AAC3B,QAAK,IAAA,CAAA,KAAA,GAAQ,IAAK,CAAA,WAAA,CAAY,KAAK,CAAA;AACnC,QAAA,IAAI,UAAa,GAAA,IAAA,CAAK,IAAS,KAAA,KAAA,GAAQ,CAAI,GAAA,CAAA;AAC3C,QAAA,IAAI,IAAK,CAAA,KAAA,CAAM,MAAO,CAAA,MAAA,KAAW,UAAY,EAAA;AAC3C,UAAInD,IAAAA,MAAAA,GAAQ,KAAK,KAAM,CAAA,KAAA;AACvB,UAAI,IAAA,IAAA,CAAK,SAAS,KAChB,EAAA;AAAE,YAAK,IAAA,CAAA,gBAAA,CAAiBA,QAAO,8BAA8B,CAAA;AAAA,WAE7D,MAAA;AAAE,YAAK,IAAA,CAAA,gBAAA,CAAiBA,QAAO,sCAAsC,CAAA;AAAA;AAAG,SACrE,MAAA;AACL,UAAI,IAAA,IAAA,CAAK,SAAS,KAAS,IAAA,IAAA,CAAK,MAAM,MAAO,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,aACvD,EAAA;AAAE,YAAA,IAAA,CAAK,iBAAiB,IAAK,CAAA,KAAA,CAAM,OAAO,CAAC,CAAA,CAAE,OAAO,+BAA+B,CAAA;AAAA;AAAG;AAC1F,OACF;AAEA,MAAAmD,KAAAA,CAAK,kBAAqB,GAAA,SAAS,IAAM,EAAA,SAAA,EAAW,aAAa,OAAS,EAAA,QAAA,EAAU,QAAU,EAAA,sBAAA,EAAwB,WAAa,EAAA;AACjI,QAAA,IAAA,CAAK,WAAe,IAAA,OAAA,KAAY,IAAK,CAAA,IAAA,KAASpE,SAAQ,KACpD,EAAA;AAAE,UAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAEpB,QAAA,IAAI,IAAK,CAAA,GAAA,CAAIA,QAAQ,CAAA,KAAK,CAAG,EAAA;AAC3B,UAAA,IAAA,CAAK,KAAQ,GAAA,SAAA,GAAY,IAAK,CAAA,iBAAA,CAAkB,IAAK,CAAA,KAAA,EAAO,IAAK,CAAA,QAAQ,CAAI,GAAA,IAAA,CAAK,gBAAiB,CAAA,KAAA,EAAO,sBAAsB,CAAA;AAChI,UAAA,IAAA,CAAK,IAAO,GAAA,MAAA;AAAA,SACd,MAAA,IAAW,KAAK,OAAQ,CAAA,WAAA,IAAe,KAAK,IAAK,CAAA,IAAA,KAASA,SAAQ,MAAQ,EAAA;AACxE,UAAA,IAAI,SAAW,EAAA;AAAE,YAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACjC,UAAA,IAAA,CAAK,IAAO,GAAA,MAAA;AACZ,UAAA,IAAA,CAAK,MAAS,GAAA,IAAA;AACd,UAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,WAAY,CAAA,WAAA,EAAa,OAAO,CAAA;AAAA,SACzC,MAAA,IAAA,CAAC,SAAa,IAAA,CAAC,eACf,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,IAAK,CAAC,IAAK,CAAA,QAAA,IAAY,IAAK,CAAA,GAAA,CAAI,SAAS,YACpE,KAAA,IAAA,CAAK,GAAI,CAAA,IAAA,KAAS,SAAS,IAAK,CAAA,GAAA,CAAI,IAAS,KAAA,KAAA,CAAA,KAC7C,KAAK,IAASA,KAAAA,QAAAA,CAAQ,KAAS,IAAA,IAAA,CAAK,SAASA,QAAQ,CAAA,MAAA,IAAU,IAAK,CAAA,IAAA,KAASA,SAAQ,EAAK,CAAA,EAAA;AACpG,UAAA,IAAI,eAAe,OAAS,EAAA;AAAE,YAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC9C,UAAA,IAAA,CAAK,kBAAkB,IAAI,CAAA;AAAA,SAC7B,MAAA,IAAW,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,IAAK,CAAC,IAAA,CAAK,QAAY,IAAA,IAAA,CAAK,GAAI,CAAA,IAAA,KAAS,YAAc,EAAA;AAC5F,UAAA,IAAI,eAAe,OAAS,EAAA;AAAE,YAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC9C,UAAK,IAAA,CAAA,eAAA,CAAgB,KAAK,GAAG,CAAA;AAC7B,UAAA,IAAI,KAAK,GAAI,CAAA,IAAA,KAAS,OAAW,IAAA,CAAC,KAAK,aACrC,EAAA;AAAE,YAAA,IAAA,CAAK,aAAgB,GAAA,QAAA;AAAA;AACzB,UAAA,IAAA,CAAK,IAAO,GAAA,MAAA;AACZ,UAAA,IAAI,SAAW,EAAA;AACb,YAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,iBAAkB,CAAA,QAAA,EAAU,UAAU,IAAK,CAAA,QAAA,CAAS,IAAK,CAAA,GAAG,CAAC,CAAA;AAAA,WACtE,MAAA,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,MAAM,sBAAwB,EAAA;AAC7D,YAAI,IAAA,sBAAA,CAAuB,kBAAkB,CAC3C,EAAA;AAAE,cAAA,sBAAA,CAAuB,kBAAkB,IAAK,CAAA,KAAA;AAAA;AAClD,YAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,iBAAkB,CAAA,QAAA,EAAU,UAAU,IAAK,CAAA,QAAA,CAAS,IAAK,CAAA,GAAG,CAAC,CAAA;AAAA,WAC1E,MAAA;AACL,YAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,QAAS,CAAA,IAAA,CAAK,GAAG,CAAA;AAAA;AAErC,UAAA,IAAA,CAAK,SAAY,GAAA,IAAA;AAAA,SACZ,MAAA;AAAE,UAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAAG,OAC9B;AAEA,MAAAoE,KAAAA,CAAK,iBAAoB,GAAA,SAAS,IAAM,EAAA;AACtC,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,UAAA,IAAI,IAAK,CAAA,GAAA,CAAIpE,QAAQ,CAAA,QAAQ,CAAG,EAAA;AAC9B,YAAA,IAAA,CAAK,QAAW,GAAA,IAAA;AAChB,YAAK,IAAA,CAAA,GAAA,GAAM,KAAK,gBAAiB,EAAA;AACjC,YAAK,IAAA,CAAA,MAAA,CAAOA,SAAQ,QAAQ,CAAA;AAC5B,YAAA,OAAO,IAAK,CAAA,GAAA;AAAA,WACP,MAAA;AACL,YAAA,IAAA,CAAK,QAAW,GAAA,KAAA;AAAA;AAClB;AAEF,QAAA,OAAO,KAAK,GAAM,GAAA,IAAA,CAAK,SAASA,QAAQ,CAAA,GAAA,IAAO,KAAK,IAASA,KAAAA,QAAAA,CAAQ,MAAS,GAAA,IAAA,CAAK,eAAkB,GAAA,IAAA,CAAK,WAAW,IAAK,CAAA,OAAA,CAAQ,kBAAkB,OAAO,CAAA;AAAA,OAC7J;AAIA,MAAAoE,KAAAA,CAAK,YAAe,GAAA,SAASxB,KAAM,EAAA;AACjC,QAAAA,MAAK,EAAK,GAAA,IAAA;AACV,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AAAE,UAAAA,KAAAA,CAAK,SAAYA,GAAAA,KAAAA,CAAK,UAAa,GAAA,KAAA;AAAA;AACxE,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AAAE,UAAAA,MAAK,KAAQ,GAAA,KAAA;AAAA;AAAO,OAC3D;AAIA,MAAAwB,KAAK,CAAA,WAAA,GAAc,SAAS,WAAA,EAAa,SAAS,gBAAkB,EAAA;AAClE,QAAIxB,IAAAA,KAAAA,GAAO,IAAK,CAAA,SAAA,EAAa,EAAA,WAAA,GAAc,IAAK,CAAA,QAAA,EAAU,WAAc,GAAA,IAAA,CAAK,QAAU,EAAA,gBAAA,GAAmB,IAAK,CAAA,aAAA;AAE/G,QAAA,IAAA,CAAK,aAAaA,KAAI,CAAA;AACtB,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAC9B,EAAA;AAAE,UAAAA,MAAK,SAAY,GAAA,WAAA;AAAA;AACrB,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAC9B,EAAA;AAAE,UAAAA,KAAAA,CAAK,KAAQ,GAAA,CAAC,CAAC,OAAA;AAAA;AAEnB,QAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,QAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,QAAA,IAAA,CAAK,aAAgB,GAAA,CAAA;AACrB,QAAK,IAAA,CAAA,UAAA,CAAWV,eAAc,OAASU,EAAAA,KAAAA,CAAK,SAAS,CAAId,GAAAA,YAAAA,IAAe,gBAAmBC,GAAAA,mBAAAA,GAAqB,CAAE,CAAA,CAAA;AAElH,QAAK,IAAA,CAAA,MAAA,CAAO/B,SAAQ,MAAM,CAAA;AAC1B,QAAA4C,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,gBAAiB5C,CAAAA,QAAAA,CAAQ,QAAQ,KAAO,EAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAC,CAAA;AACxF,QAAA,IAAA,CAAK,8BAA+B,EAAA;AACpC,QAAA,IAAA,CAAK,iBAAkB4C,CAAAA,KAAAA,EAAM,KAAO,EAAA,IAAA,EAAM,KAAK,CAAA;AAE/C,QAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,QAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,QAAA,IAAA,CAAK,aAAgB,GAAA,gBAAA;AACrB,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,oBAAoB,CAAA;AAAA,OACnD;AAIA,MAAAwB,MAAK,oBAAuB,GAAA,SAASxB,KAAM,EAAA,MAAA,EAAQ,SAAS,OAAS,EAAA;AACnE,QAAA,IAAI,cAAc,IAAK,CAAA,QAAA,EAAU,cAAc,IAAK,CAAA,QAAA,EAAU,mBAAmB,IAAK,CAAA,aAAA;AAEtF,QAAA,IAAA,CAAK,UAAWV,CAAAA,cAAAA,CAAc,OAAS,EAAA,KAAK,IAAIN,YAAW,CAAA;AAC3D,QAAA,IAAA,CAAK,aAAagB,KAAI,CAAA;AACtB,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AAAE,UAAAA,KAAAA,CAAK,KAAQ,GAAA,CAAC,CAAC,OAAA;AAAA;AAEpD,QAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,QAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,QAAA,IAAA,CAAK,aAAgB,GAAA,CAAA;AAErB,QAAAA,KAAK,CAAA,MAAA,GAAS,IAAK,CAAA,gBAAA,CAAiB,QAAQ,IAAI,CAAA;AAChD,QAAA,IAAA,CAAK,iBAAkBA,CAAAA,KAAAA,EAAM,IAAM,EAAA,KAAA,EAAO,OAAO,CAAA;AAEjD,QAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,QAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,QAAA,IAAA,CAAK,aAAgB,GAAA,gBAAA;AACrB,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,yBAAyB,CAAA;AAAA,OACxD;AAIA,MAAAwB,MAAK,iBAAoB,GAAA,SAASxB,KAAM,EAAA,eAAA,EAAiB,UAAU,OAAS,EAAA;AAC1E,QAAA,IAAI,YAAe,GAAA,eAAA,IAAmB,IAAK,CAAA,IAAA,KAAS5C,QAAQ,CAAA,MAAA;AAC5D,QAAI,IAAA,SAAA,GAAY,IAAK,CAAA,MAAA,EAAQ,SAAY,GAAA,KAAA;AAEzC,QAAA,IAAI,YAAc,EAAA;AAChB,UAAA4C,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,gBAAA,CAAiB,OAAO,CAAA;AACzC,UAAAA,MAAK,UAAa,GAAA,IAAA;AAClB,UAAK,IAAA,CAAA,WAAA,CAAYA,OAAM,KAAK,CAAA;AAAA,SACvB,MAAA;AACL,UAAI,IAAA,SAAA,GAAY,KAAK,OAAQ,CAAA,WAAA,IAAe,KAAK,CAAC,IAAA,CAAK,iBAAkBA,CAAAA,KAAAA,CAAK,MAAM,CAAA;AACpF,UAAI,IAAA,CAAC,aAAa,SAAW,EAAA;AAC3B,YAAY,SAAA,GAAA,IAAA,CAAK,eAAgB,CAAA,IAAA,CAAK,GAAG,CAAA;AAIzC,YAAA,IAAI,aAAa,SACf,EAAA;AAAE,cAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,2EAA2E,CAAA;AAAA;AAAG;AAItH,UAAA,IAAI,YAAY,IAAK,CAAA,MAAA;AACrB,UAAA,IAAA,CAAK,SAAS,EAAC;AACf,UAAA,IAAI,SAAW,EAAA;AAAE,YAAA,IAAA,CAAK,MAAS,GAAA,IAAA;AAAA;AAI/B,UAAA,IAAA,CAAK,WAAYA,CAAAA,KAAAA,EAAM,CAAC,SAAA,IAAa,CAAC,SAAa,IAAA,CAAC,eAAmB,IAAA,CAAC,QAAY,IAAA,IAAA,CAAK,iBAAkBA,CAAAA,KAAAA,CAAK,MAAM,CAAC,CAAA;AAEvH,UAAI,IAAA,IAAA,CAAK,MAAUA,IAAAA,KAAAA,CAAK,EAAI,EAAA;AAAE,YAAK,IAAA,CAAA,eAAA,CAAgBA,KAAK,CAAA,EAAA,EAAIJ,aAAY,CAAA;AAAA;AACxE,UAAAI,KAAAA,CAAK,OAAO,IAAK,CAAA,UAAA,CAAW,OAAO,KAAW,CAAA,EAAA,SAAA,IAAa,CAAC,SAAS,CAAA;AACrE,UAAAA,MAAK,UAAa,GAAA,KAAA;AAClB,UAAK,IAAA,CAAA,sBAAA,CAAuBA,KAAK,CAAA,IAAA,CAAK,IAAI,CAAA;AAC1C,UAAA,IAAA,CAAK,MAAS,GAAA,SAAA;AAAA;AAEhB,QAAA,IAAA,CAAK,SAAU,EAAA;AAAA,OACjB;AAEA,MAAAwB,KAAAA,CAAK,iBAAoB,GAAA,SAAS,MAAQ,EAAA;AACxC,QAAS7E,KAAAA,IAAAA,EAAAA,GAAI,GAAG4D,KAAO,GAAA,MAAA,EAAQ5D,KAAI4D,KAAK,CAAA,MAAA,EAAQ5D,MAAK,CACnD,EAAA;AACA,UAAI,IAAA,KAAA,GAAQ4D,MAAK5D,EAAC,CAAA;AAElB,UAAI,IAAA,KAAA,CAAM,SAAS,YAAc,EAAA;AAAE,YAAO,OAAA,KAAA;AAAA;AAC5C;AACA,QAAO,OAAA,IAAA;AAAA,OACT;AAKA,MAAA6E,KAAK,CAAA,WAAA,GAAc,SAASxB,KAAAA,EAAM,eAAiB,EAAA;AACjD,QAAI,IAAA,QAAA,mBAAkB,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA;AACjC,QAASrD,KAAAA,IAAAA,EAAAA,GAAI,GAAG4D,KAAOP,GAAAA,KAAAA,CAAK,QAAQrD,EAAI4D,GAAAA,KAAAA,CAAK,MAAQ5D,EAAAA,EAAAA,IAAK,CACxD,EAAA;AACA,UAAI,IAAA,KAAA,GAAQ4D,MAAK5D,EAAC,CAAA;AAElB,UAAA,IAAA,CAAK,qBAAsB,CAAA,KAAA,EAAO6C,SAAU,EAAA,eAAA,GAAkB,OAAO,QAAQ,CAAA;AAAA;AAC/E,OACF;AAQA,MAAAgC,MAAK,aAAgB,GAAA,SAASL,MAAO,EAAA,kBAAA,EAAoB,YAAY,sBAAwB,EAAA;AAC3F,QAAI,IAAA,IAAA,GAAO,EAAC,EAAG,KAAQ,GAAA,IAAA;AACvB,QAAA,OAAO,CAAC,IAAA,CAAK,GAAIA,CAAAA,MAAK,CAAG,EAAA;AACvB,UAAA,IAAI,CAAC,KAAO,EAAA;AACV,YAAK,IAAA,CAAA,MAAA,CAAO/D,SAAQ,KAAK,CAAA;AACzB,YAAA,IAAI,kBAAsB,IAAA,IAAA,CAAK,kBAAmB+D,CAAAA,MAAK,CAAG,EAAA;AAAE,cAAA;AAAA;AAAM,WAC7D,MAAA;AAAE,YAAQ,KAAA,GAAA,KAAA;AAAA;AAEjB,UAAA,IAAI,GAAO,GAAA,KAAA,CAAA;AACX,UAAA,IAAI,UAAc,IAAA,IAAA,CAAK,IAAS/D,KAAAA,QAAAA,CAAQ,KACtC,EAAA;AAAE,YAAM,GAAA,GAAA,IAAA;AAAA,WACD,MAAA,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,QAAU,EAAA;AACvC,YAAM,GAAA,GAAA,IAAA,CAAK,YAAY,sBAAsB,CAAA;AAC7C,YAAA,IAAI,0BAA0B,IAAK,CAAA,IAAA,KAASA,SAAQ,KAAS,IAAA,sBAAA,CAAuB,gBAAgB,CAClG,EAAA;AAAE,cAAA,sBAAA,CAAuB,gBAAgB,IAAK,CAAA,KAAA;AAAA;AAAO,WAClD,MAAA;AACL,YAAM,GAAA,GAAA,IAAA,CAAK,gBAAiB,CAAA,KAAA,EAAO,sBAAsB,CAAA;AAAA;AAE3D,UAAA,IAAA,CAAK,KAAK,GAAG,CAAA;AAAA;AAEf,QAAO,OAAA,IAAA;AAAA,OACT;AAEA,MAAAoE,KAAAA,CAAK,eAAkB,GAAA,SAAS7D,IAAK,EAAA;AACnC,QAAA,IAAIU,SAAQV,IAAI,CAAA,KAAA;AAChB,QAAA,IAAI,MAAMA,IAAI,CAAA,GAAA;AACd,QAAA,IAAI/B,QAAO+B,IAAI,CAAA,IAAA;AAEf,QAAI,IAAA,IAAA,CAAK,WAAe/B,IAAAA,KAAAA,KAAS,OAC/B,EAAA;AAAE,UAAK,IAAA,CAAA,gBAAA,CAAiByC,QAAO,qDAAqD,CAAA;AAAA;AACtF,QAAI,IAAA,IAAA,CAAK,OAAWzC,IAAAA,KAAAA,KAAS,OAC3B,EAAA;AAAE,UAAK,IAAA,CAAA,gBAAA,CAAiByC,QAAO,2DAA2D,CAAA;AAAA;AAC5F,QAAA,IAAI,IAAK,CAAA,gBAAA,EAAmB,CAAA,gBAAA,IAAoBzC,UAAS,WACvD,EAAA;AAAE,UAAK,IAAA,CAAA,gBAAA,CAAiByC,QAAO,mDAAmD,CAAA;AAAA;AACpF,QAAA,IAAI,IAAK,CAAA,kBAAA,KAAuBzC,KAAS,KAAA,WAAA,IAAeA,UAAS,OAC/D,CAAA,EAAA;AAAE,UAAA,IAAA,CAAK,KAAMyC,CAAAA,MAAAA,EAAQ,aAAgBzC,GAAAA,KAAAA,GAAO,uCAAwC,CAAA;AAAA;AACtF,QAAA,IAAI,IAAK,CAAA,QAAA,CAAS,IAAKA,CAAAA,KAAI,CACzB,EAAA;AAAE,UAAA,IAAA,CAAK,KAAMyC,CAAAA,MAAAA,EAAQ,sBAAyBzC,GAAAA,KAAAA,GAAO,GAAI,CAAA;AAAA;AAC3D,QAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,WAAc,GAAA,CAAA,IAC7B,IAAK,CAAA,KAAA,CAAM,KAAMyC,CAAAA,MAAAA,EAAO,GAAG,CAAA,CAAE,OAAQ,CAAA,IAAI,MAAM,CAAI,CAAA,EAAA;AAAE,UAAA;AAAA;AACvD,QAAA,IAAI,EAAK,GAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAK,sBAAsB,IAAK,CAAA,aAAA;AACvD,QAAI,IAAA,EAAA,CAAG,IAAKzC,CAAAA,KAAI,CAAG,EAAA;AACjB,UAAA,IAAI,CAAC,IAAA,CAAK,OAAWA,IAAAA,KAAAA,KAAS,OAC5B,EAAA;AAAE,YAAK,IAAA,CAAA,gBAAA,CAAiByC,QAAO,sDAAsD,CAAA;AAAA;AACvF,UAAA,IAAA,CAAK,gBAAiBA,CAAAA,MAAAA,EAAQ,eAAkBzC,GAAAA,KAAAA,GAAO,eAAgB,CAAA;AAAA;AACzE,OACF;AAMA,MAAA4F,KAAAA,CAAK,UAAa,GAAA,SAAS,OAAS,EAAA;AAClC,QAAIxB,IAAAA,KAAAA,GAAO,KAAK,cAAe,EAAA;AAC/B,QAAK,IAAA,CAAA,IAAA,CAAK,CAAC,CAAC,OAAO,CAAA;AACnB,QAAK,IAAA,CAAA,UAAA,CAAWA,OAAM,YAAY,CAAA;AAClC,QAAA,IAAI,CAAC,OAAS,EAAA;AACZ,UAAA,IAAA,CAAK,gBAAgBA,KAAI,CAAA;AACzB,UAAA,IAAIA,KAAK,CAAA,IAAA,KAAS,OAAW,IAAA,CAAC,KAAK,aACjC,EAAA;AAAE,YAAA,IAAA,CAAK,gBAAgBA,KAAK,CAAA,KAAA;AAAA;AAAO;AAEvC,QAAOA,OAAAA,KAAAA;AAAA,OACT;AAEA,MAAAwB,KAAAA,CAAK,iBAAiB,WAAW;AAC/B,QAAIxB,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAI,IAAA,IAAA,CAAK,IAAS5C,KAAAA,QAAAA,CAAQ,IAAM,EAAA;AAC9B,UAAA4C,KAAAA,CAAK,OAAO,IAAK,CAAA,KAAA;AAAA,SACnB,MAAA,IAAW,IAAK,CAAA,IAAA,CAAK,OAAS,EAAA;AAC5B,UAAAA,KAAAA,CAAK,IAAO,GAAA,IAAA,CAAK,IAAK,CAAA,OAAA;AAMtB,UAAA,IAAA,CAAKA,MAAK,IAAS,KAAA,OAAA,IAAWA,KAAK,CAAA,IAAA,KAAS,gBACzC,IAAK,CAAA,UAAA,KAAe,IAAK,CAAA,YAAA,GAAe,KAAK,IAAK,CAAA,KAAA,CAAM,WAAW,IAAK,CAAA,YAAY,MAAM,EAAK,CAAA,EAAA;AAChG,YAAA,IAAA,CAAK,QAAQ,GAAI,EAAA;AAAA;AAEnB,UAAA,IAAA,CAAK,OAAO5C,QAAQ,CAAA,IAAA;AAAA,SACf,MAAA;AACL,UAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAElB,QAAO4C,OAAAA,KAAAA;AAAA,OACT;AAEA,MAAAwB,KAAAA,CAAK,oBAAoB,WAAW;AAClC,QAAIxB,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAI,IAAA,IAAA,CAAK,IAAS5C,KAAAA,QAAAA,CAAQ,SAAW,EAAA;AACnC,UAAA4C,KAAAA,CAAK,OAAO,IAAK,CAAA,KAAA;AAAA,SACZ,MAAA;AACL,UAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAElB,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAK,IAAA,CAAA,UAAA,CAAWA,OAAM,mBAAmB,CAAA;AAGzC,QAAI,IAAA,IAAA,CAAK,QAAQ,kBAAoB,EAAA;AACnC,UAAI,IAAA,IAAA,CAAK,gBAAiB,CAAA,MAAA,KAAW,CAAG,EAAA;AACtC,YAAA,IAAA,CAAK,MAAMA,KAAK,CAAA,KAAA,EAAQ,kBAAsBA,GAAAA,KAAAA,CAAK,OAAQ,0CAA2C,CAAA;AAAA,WACjG,MAAA;AACL,YAAK,IAAA,CAAA,gBAAA,CAAiB,KAAK,gBAAiB,CAAA,MAAA,GAAS,CAAC,CAAE,CAAA,IAAA,CAAK,KAAKA,KAAI,CAAA;AAAA;AACxE;AAGF,QAAOA,OAAAA,KAAAA;AAAA,OACT;AAIA,MAAAwB,KAAAA,CAAK,UAAa,GAAA,SAAS,OAAS,EAAA;AAClC,QAAI,IAAA,CAAC,KAAK,QAAU,EAAA;AAAE,UAAA,IAAA,CAAK,WAAW,IAAK,CAAA,KAAA;AAAA;AAE3C,QAAIxB,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAA,IAAI,IAAK,CAAA,IAAA,KAAS5C,QAAQ,CAAA,IAAA,IAAQ,KAAK,kBAAmB,EAAA,IAAM,IAAK,CAAA,IAAA,KAASA,QAAQ,CAAA,IAAA,IAAQ,CAAC,IAAA,CAAK,KAAK,UAAa,EAAA;AACpH,UAAA4C,MAAK,QAAW,GAAA,KAAA;AAChB,UAAAA,MAAK,QAAW,GAAA,IAAA;AAAA,SACX,MAAA;AACL,UAAAA,KAAK,CAAA,QAAA,GAAW,IAAK,CAAA,GAAA,CAAI5C,SAAQ,IAAI,CAAA;AACrC,UAAA4C,KAAK,CAAA,QAAA,GAAW,IAAK,CAAA,gBAAA,CAAiB,OAAO,CAAA;AAAA;AAE/C,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAAA,OAChD;AAEA,MAAAwB,KAAAA,CAAK,UAAa,GAAA,SAAS,OAAS,EAAA;AAClC,QAAI,IAAA,CAAC,KAAK,QAAU,EAAA;AAAE,UAAA,IAAA,CAAK,WAAW,IAAK,CAAA,KAAA;AAAA;AAE3C,QAAIxB,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAAA,MAAK,QAAW,GAAA,IAAA,CAAK,gBAAgB,IAAM,EAAA,IAAA,EAAM,OAAO,OAAO,CAAA;AAC/D,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAAA,OAChD;AAEA,MAAA,IAAI4B,QAAO/B,OAAO,CAAA,SAAA;AAQlB,MAAA+B,KAAK,CAAA,KAAA,GAAQ,SAAS,GAAA,EAAK,OAAS,EAAA;AAClC,QAAA,IAAI,GAAMtD,GAAAA,YAAAA,CAAY,IAAK,CAAA,KAAA,EAAO,GAAG,CAAA;AACrC,QAAA,OAAA,IAAW,IAAO,GAAA,GAAA,CAAI,IAAO,GAAA,GAAA,GAAM,IAAI,MAAS,GAAA,GAAA;AAChD,QAAI,IAAA,GAAA,GAAM,IAAI,WAAA,CAAY,OAAO,CAAA;AACjC,QAAA,GAAA,CAAI,GAAM,GAAA,GAAA;AAAK,QAAA,GAAA,CAAI,GAAM,GAAA,GAAA;AAAK,QAAA,GAAA,CAAI,WAAW,IAAK,CAAA,GAAA;AAClD,QAAM,MAAA,GAAA;AAAA,OACR;AAEA,MAAAsD,KAAAA,CAAK,mBAAmBA,KAAK,CAAA,KAAA;AAE7B,MAAAA,KAAAA,CAAK,cAAc,WAAW;AAC5B,QAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAC1B,UAAA,OAAO,IAAI1D,SAAS,CAAA,IAAA,CAAK,SAAS,IAAK,CAAA,GAAA,GAAM,KAAK,SAAS,CAAA;AAAA;AAC7D,OACF;AAEA,MAAA,IAAI2D,QAAOhC,OAAO,CAAA,SAAA;AAElB,MAAIiC,IAAAA,MAAAA,GAAQ,SAASA,MAAAA,CAAM,KAAO,EAAA;AAChC,QAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AAEb,QAAA,IAAA,CAAK,MAAM,EAAC;AAEZ,QAAA,IAAA,CAAK,UAAU,EAAC;AAEhB,QAAA,IAAA,CAAK,YAAY,EAAC;AAElB,QAAA,IAAA,CAAK,gBAAmB,GAAA,KAAA;AAAA,OAC1B;AAIA,MAAAD,KAAAA,CAAK,UAAa,GAAA,SAAS,KAAO,EAAA;AAChC,QAAA,IAAA,CAAK,UAAW,CAAA,IAAA,CAAK,IAAIC,MAAAA,CAAM,KAAK,CAAC,CAAA;AAAA,OACvC;AAEA,MAAAD,KAAAA,CAAK,YAAY,WAAW;AAC1B,QAAA,IAAA,CAAK,WAAW,GAAI,EAAA;AAAA,OACtB;AAKA,MAAAA,KAAAA,CAAK,0BAA6B,GAAA,SAAS,KAAO,EAAA;AAChD,QAAA,OAAQ,MAAM,KAAQhD,GAAAA,eAAAA,IAAmB,CAAC,IAAK,CAAA,QAAA,IAAa,MAAM,KAAQD,GAAAA,UAAAA;AAAA,OAC5E;AAEA,MAAAiD,KAAK,CAAA,WAAA,GAAc,SAASjG,KAAAA,EAAM,aAAa,GAAK,EAAA;AAClD,QAAA,IAAI,UAAa,GAAA,KAAA;AACjB,QAAA,IAAI,gBAAgB6D,aAAc,EAAA;AAChC,UAAI,IAAA,KAAA,GAAQ,KAAK,YAAa,EAAA;AAC9B,UAAA,UAAA,GAAa,MAAM,OAAQ,CAAA,OAAA,CAAQ7D,KAAI,CAAA,GAAI,MAAM,KAAM,CAAA,SAAA,CAAU,OAAQA,CAAAA,KAAI,IAAI,CAAM,CAAA,IAAA,KAAA,CAAM,GAAI,CAAA,OAAA,CAAQA,KAAI,CAAI,GAAA,CAAA,CAAA;AACjH,UAAM,KAAA,CAAA,OAAA,CAAQ,KAAKA,KAAI,CAAA;AACvB,UAAA,IAAI,IAAK,CAAA,QAAA,IAAa,KAAM,CAAA,KAAA,GAAQgD,UAClC,EAAA;AAAE,YAAO,OAAA,IAAA,CAAK,iBAAiBhD,KAAI,CAAA;AAAA;AAAG,SAC1C,MAAA,IAAW,gBAAgB+D,kBAAmB,EAAA;AAC5C,UAAI,IAAA,OAAA,GAAU,KAAK,YAAa,EAAA;AAChC,UAAQ,OAAA,CAAA,OAAA,CAAQ,KAAK/D,KAAI,CAAA;AAAA,SAC3B,MAAA,IAAW,gBAAgB8D,cAAe,EAAA;AACxC,UAAI,IAAA,OAAA,GAAU,KAAK,YAAa,EAAA;AAChC,UAAA,IAAI,KAAK,mBACP,EAAA;AAAE,YAAA,UAAA,GAAa,OAAQ,CAAA,OAAA,CAAQ,OAAQ9D,CAAAA,KAAI,CAAI,GAAA,CAAA,CAAA;AAAA,WAE/C,MAAA;AAAE,YAAa,UAAA,GAAA,OAAA,CAAQ,OAAQ,CAAA,OAAA,CAAQA,KAAI,CAAA,GAAI,MAAM,OAAQ,CAAA,GAAA,CAAI,OAAQA,CAAAA,KAAI,CAAI,GAAA,CAAA,CAAA;AAAA;AACnF,UAAQ,OAAA,CAAA,SAAA,CAAU,KAAKA,KAAI,CAAA;AAAA,SACtB,MAAA;AACL,UAASe,KAAAA,IAAAA,EAAAA,GAAI,KAAK,UAAW,CAAA,MAAA,GAAS,GAAGA,EAAK,IAAA,CAAA,EAAG,EAAEA,EAAG,EAAA;AACpD,YAAI,IAAA,OAAA,GAAU,IAAK,CAAA,UAAA,CAAWA,EAAC,CAAA;AAC/B,YAAI,IAAA,OAAA,CAAQ,OAAQ,CAAA,OAAA,CAAQf,KAAI,CAAA,GAAI,MAAM,EAAG,OAAA,CAAQ,KAAQqD,GAAAA,mBAAAA,IAAuB,OAAQ,CAAA,OAAA,CAAQ,CAAC,CAAMrD,KAAAA,KAAAA,CAAAA,IACvG,CAAC,IAAA,CAAK,0BAA2B,CAAA,OAAO,CAAK,IAAA,OAAA,CAAQ,SAAU,CAAA,OAAA,CAAQA,KAAI,CAAA,GAAI,CAAI,CAAA,EAAA;AACrF,cAAa,UAAA,GAAA,IAAA;AACb,cAAA;AAAA;AAEF,YAAQ,OAAA,CAAA,GAAA,CAAI,KAAKA,KAAI,CAAA;AACrB,YAAA,IAAI,IAAK,CAAA,QAAA,IAAa,OAAQ,CAAA,KAAA,GAAQgD,UACpC,EAAA;AAAE,cAAO,OAAA,IAAA,CAAK,iBAAiBhD,KAAI,CAAA;AAAA;AACrC,YAAI,IAAA,OAAA,CAAQ,QAAQyD,UAAW,EAAA;AAAE,cAAA;AAAA;AAAM;AACzC;AAEF,QAAA,IAAI,UAAY,EAAA;AAAE,UAAA,IAAA,CAAK,gBAAiB,CAAA,GAAA,EAAM,cAAiBzD,GAAAA,KAAAA,GAAO,6BAA8B,CAAA;AAAA;AAAG,OACzG;AAEA,MAAAiG,KAAAA,CAAK,gBAAmB,GAAA,SAAS,EAAI,EAAA;AAEnC,QAAA,IAAI,KAAK,UAAW,CAAA,CAAC,EAAE,OAAQ,CAAA,OAAA,CAAQ,GAAG,IAAI,CAAA,KAAM,MAChD,IAAK,CAAA,UAAA,CAAW,CAAC,CAAE,CAAA,GAAA,CAAI,QAAQ,EAAG,CAAA,IAAI,MAAM,CAAI,CAAA,EAAA;AAClD,UAAK,IAAA,CAAA,gBAAA,CAAiB,EAAG,CAAA,IAAI,CAAI,GAAA,EAAA;AAAA;AACnC,OACF;AAEA,MAAAA,KAAAA,CAAK,eAAe,WAAW;AAC7B,QAAA,OAAO,IAAK,CAAA,UAAA,CAAW,IAAK,CAAA,UAAA,CAAW,SAAS,CAAC,CAAA;AAAA,OACnD;AAEA,MAAAA,KAAAA,CAAK,kBAAkB,WAAW;AAChC,QAAA,KAAA,IAASlF,EAAI,GAAA,IAAA,CAAK,UAAW,CAAA,MAAA,GAAS,KAAIA,EAAK,EAAA,EAAA;AAC7C,UAAI,IAAA,KAAA,GAAQ,IAAK,CAAA,UAAA,CAAWA,EAAC,CAAA;AAC7B,UAAI,IAAA,KAAA,CAAM,QAAQ0C,UAAW,EAAA;AAAE,YAAO,OAAA,KAAA;AAAA;AAAM;AAC9C,OACF;AAGA,MAAAwC,KAAAA,CAAK,mBAAmB,WAAW;AACjC,QAAA,KAAA,IAASlF,EAAI,GAAA,IAAA,CAAK,UAAW,CAAA,MAAA,GAAS,KAAIA,EAAK,EAAA,EAAA;AAC7C,UAAI,IAAA,KAAA,GAAQ,IAAK,CAAA,UAAA,CAAWA,EAAC,CAAA;AAC7B,UAAA,IAAI,MAAM,KAAQ0C,GAAAA,UAAAA,IAAa,EAAE,KAAA,CAAM,QAAQL,YAAc,CAAA,EAAA;AAAE,YAAO,OAAA,KAAA;AAAA;AAAM;AAC9E,OACF;AAEA,MAAA,IAAI+C,KAAO,GAAA,SAASA,KAAK,CAAA,MAAA,EAAQ,KAAK,GAAK,EAAA;AACzC,QAAA,IAAA,CAAK,IAAO,GAAA,EAAA;AACZ,QAAA,IAAA,CAAK,KAAQ,GAAA,GAAA;AACb,QAAA,IAAA,CAAK,GAAM,GAAA,CAAA;AACX,QAAI,IAAA,MAAA,CAAO,QAAQ,SACjB,EAAA;AAAE,UAAA,IAAA,CAAK,GAAM,GAAA,IAAI3D,eAAe,CAAA,MAAA,EAAQ,GAAG,CAAA;AAAA;AAC7C,QAAI,IAAA,MAAA,CAAO,QAAQ,gBACjB,EAAA;AAAE,UAAK,IAAA,CAAA,UAAA,GAAa,OAAO,OAAQ,CAAA,gBAAA;AAAA;AACrC,QAAI,IAAA,MAAA,CAAO,QAAQ,MACjB,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,GAAQ,CAAC,GAAA,EAAK,CAAC,CAAA;AAAA;AAAG,OAC7B;AAIA,MAAA,IAAI4D,QAAOnC,OAAO,CAAA,SAAA;AAElB,MAAAmC,KAAAA,CAAK,YAAY,WAAW;AAC1B,QAAA,OAAO,IAAID,KAAK,CAAA,IAAA,EAAM,IAAK,CAAA,KAAA,EAAO,KAAK,QAAQ,CAAA;AAAA,OACjD;AAEA,MAAAC,KAAK,CAAA,WAAA,GAAc,SAAS,GAAA,EAAK,GAAK,EAAA;AACpC,QAAA,OAAO,IAAID,KAAAA,CAAK,IAAM,EAAA,GAAA,EAAK,GAAG,CAAA;AAAA,OAChC;AAIA,MAAA,SAASE,aAAajC,CAAAA,KAAAA,EAAM,IAAM,EAAA,GAAA,EAAK,GAAK,EAAA;AAC1C,QAAAA,MAAK,IAAO,GAAA,IAAA;AACZ,QAAAA,MAAK,GAAM,GAAA,GAAA;AACX,QAAI,IAAA,IAAA,CAAK,QAAQ,SACf,EAAA;AAAE,UAAAA,KAAAA,CAAK,IAAI,GAAM,GAAA,GAAA;AAAA;AACnB,QAAI,IAAA,IAAA,CAAK,QAAQ,MACf,EAAA;AAAE,UAAAA,KAAAA,CAAK,KAAM,CAAA,CAAC,CAAI,GAAA,GAAA;AAAA;AACpB,QAAOA,OAAAA,KAAAA;AAAA;AAGT,MAAAgC,KAAK,CAAA,UAAA,GAAa,SAAShC,KAAAA,EAAM,IAAM,EAAA;AACrC,QAAOiC,OAAAA,aAAAA,CAAa,KAAK,IAAMjC,EAAAA,KAAAA,EAAM,MAAM,IAAK,CAAA,UAAA,EAAY,KAAK,aAAa,CAAA;AAAA,OAChF;AAIA,MAAAgC,MAAK,YAAe,GAAA,SAAShC,KAAM,EAAA,IAAA,EAAM,KAAK,GAAK,EAAA;AACjD,QAAA,OAAOiC,cAAa,IAAK,CAAA,IAAA,EAAMjC,KAAM,EAAA,IAAA,EAAM,KAAK,GAAG,CAAA;AAAA,OACrD;AAEA,MAAAgC,KAAAA,CAAK,QAAW,GAAA,SAAShC,KAAM,EAAA;AAC7B,QAAA,IAAI,UAAU,IAAI+B,KAAAA,CAAK,MAAM/B,KAAK,CAAA,KAAA,EAAO,KAAK,QAAQ,CAAA;AACtD,QAAA,KAAA,IAAS,QAAQA,KAAM,EAAA;AAAE,UAAQ,OAAA,CAAA,IAAI,CAAIA,GAAAA,KAAAA,CAAK,IAAI,CAAA;AAAA;AAClD,QAAO,OAAA,OAAA;AAAA,OACT;AAGA,MAAA,IAAIkC,2BAA6B,GAAA,mKAAA;AAOjC,MAAA,IAAIC,sBAAwB,GAAA,69BAAA;AAC5B,MAAA,IAAIC,0BAAyBD,sBAAwB,GAAA,wBAAA;AACrD,MAAA,IAAIE,uBAAyBD,GAAAA,uBAAAA;AAC7B,MAAA,IAAIE,0BAAyBD,uBAAyB,GAAA,iCAAA;AACtD,MAAA,IAAIE,uBAAyBD,GAAAA,uBAAAA;AAC7B,MAAA,IAAIE,uBAAyBD,GAAAA,uBAAAA;AAE7B,MAAA,IAAIE,wBAA0B,GAAA;AAAA,QAC5B,CAAGN,EAAAA,sBAAAA;AAAA,QACH,EAAIC,EAAAA,uBAAAA;AAAA,QACJ,EAAIC,EAAAA,uBAAAA;AAAA,QACJ,EAAIC,EAAAA,uBAAAA;AAAA,QACJ,EAAIC,EAAAA,uBAAAA;AAAA,QACJ,EAAIC,EAAAA;AAAA,OACN;AAGA,MAAA,IAAIE,gCAAkC,GAAA,+IAAA;AAEtC,MAAA,IAAIC,iCAAmC,GAAA;AAAA,QACrC,CAAG,EAAA,EAAA;AAAA,QACH,EAAI,EAAA,EAAA;AAAA,QACJ,EAAI,EAAA,EAAA;AAAA,QACJ,EAAI,EAAA,EAAA;AAAA,QACJ,EAAI,EAAA,EAAA;AAAA,QACJ,EAAID,EAAAA;AAAA,OACN;AAGA,MAAA,IAAIE,6BAA+B,GAAA,opBAAA;AAGnC,MAAA,IAAIC,kBAAoB,GAAA,g+DAAA;AACxB,MAAA,IAAIC,sBAAqBD,kBAAoB,GAAA,iHAAA;AAC7C,MAAA,IAAIE,sBAAqBD,mBAAqB,GAAA,wEAAA;AAC9C,MAAA,IAAIE,sBAAqBD,mBAAqB,GAAA,wEAAA;AAC9C,MAAA,IAAIE,sBAAqBD,mBAAqB,GAAA,mEAAA;AAC9C,MAAIE,IAAAA,mBAAAA,GAAqBD,sBAAqB,GAAMf,GAAAA,2BAAAA;AAEpD,MAAA,IAAIiB,oBAAsB,GAAA;AAAA,QACxB,CAAGN,EAAAA,kBAAAA;AAAA,QACH,EAAIC,EAAAA,mBAAAA;AAAA,QACJ,EAAIC,EAAAA,mBAAAA;AAAA,QACJ,EAAIC,EAAAA,mBAAAA;AAAA,QACJ,EAAIC,EAAAA,mBAAAA;AAAA,QACJ,EAAIC,EAAAA;AAAA,OACN;AAEA,MAAA,IAAIE,QAAO,EAAC;AACZ,MAAA,SAASC,kBAAiBtC,YAAa,EAAA;AACrC,QAAI,IAAA,CAAA,GAAIqC,KAAKrC,CAAAA,YAAW,CAAI,GAAA;AAAA,UAC1B,QAAQhD,YAAY0E,CAAAA,wBAAAA,CAAwB1B,YAAW,CAAA,GAAI,MAAM6B,6BAA4B,CAAA;AAAA,UAC7F,eAAiB7E,EAAAA,YAAAA,CAAY4E,iCAAiC5B,CAAAA,YAAW,CAAC,CAAA;AAAA,UAC1E,SAAW,EAAA;AAAA,YACT,gBAAA,EAAkBhD,aAAY6E,6BAA4B,CAAA;AAAA,YAC1D,MAAQ7E,EAAAA,YAAAA,CAAYoF,oBAAoBpC,CAAAA,YAAW,CAAC;AAAA;AACtD,SACF;AACA,QAAE,CAAA,CAAA,SAAA,CAAU,iBAAoB,GAAA,CAAA,CAAE,SAAU,CAAA,MAAA;AAE5C,QAAE,CAAA,CAAA,SAAA,CAAU,EAAK,GAAA,CAAA,CAAE,SAAU,CAAA,gBAAA;AAC7B,QAAE,CAAA,CAAA,SAAA,CAAU,EAAK,GAAA,CAAA,CAAE,SAAU,CAAA,MAAA;AAC7B,QAAE,CAAA,CAAA,SAAA,CAAU,GAAM,GAAA,CAAA,CAAE,SAAU,CAAA,iBAAA;AAAA;AAGhC,MAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAGR,KAAO,GAAA,CAAC,GAAG,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAE,CAAG,EAAA,CAAA,GAAIA,KAAK,CAAA,MAAA,EAAQ,KAAK,CAAG,EAAA;AACvE,QAAI,IAAA,WAAA,GAAcA,MAAK,CAAC,CAAA;AAExB,QAAA8C,kBAAiB,WAAW,CAAA;AAAA;AAG9B,MAAA,IAAIC,QAAOzD,OAAO,CAAA,SAAA;AAIlB,MAAA,IAAI0D,SAAW,GAAA,SAASA,SAAS,CAAA,MAAA,EAAQ,IAAM,EAAA;AAE7C,QAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AAEd,QAAA,IAAA,CAAK,OAAO,IAAQ,IAAA,IAAA;AAAA,OACtB;AAEA,MAAAA,SAAS,CAAA,SAAA,CAAU,aAAgB,GAAA,SAASC,eAAe,GAAK,EAAA;AAG9D,QAAA,KAAA,IAASC,KAAO,GAAA,IAAA,EAAMA,KAAMA,EAAAA,KAAAA,GAAOA,MAAK,MAAQ,EAAA;AAC9C,UAAA,KAAA,IAAS,KAAQ,GAAA,GAAA,EAAK,KAAO,EAAA,KAAA,GAAQ,MAAM,MAAQ,EAAA;AACjD,YAAA,IAAIA,KAAK,CAAA,IAAA,KAAS,KAAM,CAAA,IAAA,IAAQA,UAAS,KAAO,EAAA;AAAE,cAAO,OAAA,IAAA;AAAA;AAAK;AAChE;AAEF,QAAO,OAAA,KAAA;AAAA,OACT;AAEA,MAAAF,SAAS,CAAA,SAAA,CAAU,OAAU,GAAA,SAASG,QAAW,GAAA;AAC/C,QAAA,OAAO,IAAIH,SAAAA,CAAS,IAAK,CAAA,MAAA,EAAQ,KAAK,IAAI,CAAA;AAAA,OAC5C;AAEA,MAAII,IAAAA,sBAAAA,GAAwB,SAASA,sBAAAA,CAAsB,MAAQ,EAAA;AACjE,QAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AACd,QAAK,IAAA,CAAA,UAAA,GAAa,KAAS,IAAA,MAAA,CAAO,OAAQ,CAAA,WAAA,IAAe,IAAI,IAAO,GAAA,EAAA,CAAA,IAAO,MAAO,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,GAAI,MAAM,EAAO,CAAA,IAAA,MAAA,CAAO,OAAQ,CAAA,WAAA,IAAe,EAAK,GAAA,GAAA,GAAM,OAAO,MAAO,CAAA,OAAA,CAAQ,WAAe,IAAA,EAAA,GAAK,GAAM,GAAA,EAAA,CAAA;AACnN,QAAK,IAAA,CAAA,iBAAA,GAAoBP,MAAK,MAAO,CAAA,OAAA,CAAQ,eAAe,EAAK,GAAA,EAAA,GAAK,MAAO,CAAA,OAAA,CAAQ,WAAW,CAAA;AAChG,QAAA,IAAA,CAAK,MAAS,GAAA,EAAA;AACd,QAAA,IAAA,CAAK,KAAQ,GAAA,EAAA;AACb,QAAA,IAAA,CAAK,KAAQ,GAAA,CAAA;AACb,QAAA,IAAA,CAAK,OAAU,GAAA,KAAA;AACf,QAAA,IAAA,CAAK,OAAU,GAAA,KAAA;AACf,QAAA,IAAA,CAAK,OAAU,GAAA,KAAA;AACf,QAAA,IAAA,CAAK,GAAM,GAAA,CAAA;AACX,QAAA,IAAA,CAAK,YAAe,GAAA,CAAA;AACpB,QAAA,IAAA,CAAK,eAAkB,GAAA,EAAA;AACvB,QAAA,IAAA,CAAK,2BAA8B,GAAA,KAAA;AACnC,QAAA,IAAA,CAAK,kBAAqB,GAAA,CAAA;AAC1B,QAAA,IAAA,CAAK,gBAAmB,GAAA,CAAA;AACxB,QAAK,IAAA,CAAA,UAAA,mBAAoB,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA;AACpC,QAAA,IAAA,CAAK,qBAAqB,EAAC;AAC3B,QAAA,IAAA,CAAK,QAAW,GAAA,IAAA;AAAA,OAClB;AAEA,MAAAO,uBAAsB,SAAU,CAAA,KAAA,GAAQ,SAASC,MAAOvF,CAAAA,MAAAA,EAAO,SAAS,KAAO,EAAA;AAC7E,QAAA,IAAI,WAAc,GAAA,KAAA,CAAM,OAAQ,CAAA,GAAG,CAAM,KAAA,CAAA,CAAA;AACzC,QAAA,IAAI,OAAU,GAAA,KAAA,CAAM,OAAQ,CAAA,GAAG,CAAM,KAAA,CAAA,CAAA;AACrC,QAAA,IAAA,CAAK,QAAQA,MAAQ,GAAA,CAAA;AACrB,QAAA,IAAA,CAAK,SAAS,OAAU,GAAA,EAAA;AACxB,QAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AACb,QAAA,IAAI,WAAe,IAAA,IAAA,CAAK,MAAO,CAAA,OAAA,CAAQ,eAAe,EAAI,EAAA;AACxD,UAAA,IAAA,CAAK,OAAU,GAAA,IAAA;AACf,UAAA,IAAA,CAAK,OAAU,GAAA,IAAA;AACf,UAAA,IAAA,CAAK,OAAU,GAAA,IAAA;AAAA,SACV,MAAA;AACL,UAAA,IAAA,CAAK,OAAU,GAAA,OAAA,IAAW,IAAK,CAAA,MAAA,CAAO,QAAQ,WAAe,IAAA,CAAA;AAC7D,UAAA,IAAA,CAAK,OAAU,GAAA,KAAA;AACf,UAAA,IAAA,CAAK,OAAU,GAAA,OAAA,IAAW,IAAK,CAAA,MAAA,CAAO,QAAQ,WAAe,IAAA,CAAA;AAAA;AAC/D,OACF;AAEA,MAAAsF,sBAAsB,CAAA,SAAA,CAAU,KAAQ,GAAA,SAASE,OAAO,OAAS,EAAA;AAC/D,QAAK,IAAA,CAAA,MAAA,CAAO,iBAAiB,IAAK,CAAA,KAAA,EAAQ,kCAAmC,IAAK,CAAA,MAAA,GAAU,QAAQ,OAAQ,CAAA;AAAA,OAC9G;AAIA,MAAAF,uBAAsB,SAAU,CAAA,EAAA,GAAK,SAASG,GAAAA,CAAInH,IAAG,MAAQ,EAAA;AACzD,QAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAEpC,QAAA,IAAI,IAAI,IAAK,CAAA,MAAA;AACb,QAAA,IAAI,IAAI,CAAE,CAAA,MAAA;AACV,QAAA,IAAIA,MAAK,CAAG,EAAA;AACV,UAAO,OAAA,CAAA,CAAA;AAAA;AAET,QAAI,IAAA,CAAA,GAAI,CAAE,CAAA,UAAA,CAAWA,EAAC,CAAA;AACtB,QAAI,IAAA,EAAE,MAAU,IAAA,IAAA,CAAK,OAAY,CAAA,IAAA,CAAA,IAAK,SAAU,CAAK,IAAA,KAAA,IAAUA,EAAI,GAAA,CAAA,IAAK,CAAG,EAAA;AACzE,UAAO,OAAA,CAAA;AAAA;AAET,QAAA,IAAI,IAAO,GAAA,CAAA,CAAE,UAAWA,CAAAA,EAAAA,GAAI,CAAC,CAAA;AAC7B,QAAA,OAAO,QAAQ,KAAU,IAAA,IAAA,IAAQ,SAAU,CAAK,IAAA,EAAA,IAAM,OAAO,QAAY,GAAA,CAAA;AAAA,OAC3E;AAEA,MAAAgH,uBAAsB,SAAU,CAAA,SAAA,GAAY,SAASI,UAAAA,CAAWpH,IAAG,MAAQ,EAAA;AACvE,QAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAEpC,QAAA,IAAI,IAAI,IAAK,CAAA,MAAA;AACb,QAAA,IAAI,IAAI,CAAE,CAAA,MAAA;AACV,QAAA,IAAIA,MAAK,CAAG,EAAA;AACV,UAAO,OAAA,CAAA;AAAA;AAET,QAAA,IAAI,CAAI,GAAA,CAAA,CAAE,UAAWA,CAAAA,EAAC,CAAG,EAAA,IAAA;AACzB,QAAA,IAAI,EAAE,MAAU,IAAA,IAAA,CAAK,YAAY,CAAK,IAAA,KAAA,IAAU,KAAK,KAAUA,IAAAA,EAAAA,GAAI,KAAK,CACnE,IAAA,CAAA,IAAA,GAAO,EAAE,UAAWA,CAAAA,EAAAA,GAAI,CAAC,CAAK,IAAA,KAAA,IAAU,OAAO,KAAQ,EAAA;AAC1D,UAAA,OAAOA,EAAI,GAAA,CAAA;AAAA;AAEb,QAAA,OAAOA,EAAI,GAAA,CAAA;AAAA,OACb;AAEA,MAAAgH,sBAAsB,CAAA,SAAA,CAAU,OAAU,GAAA,SAASK,SAAS,MAAQ,EAAA;AAChE,QAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAEpC,QAAA,OAAO,IAAK,CAAA,EAAA,CAAG,IAAK,CAAA,GAAA,EAAK,MAAM,CAAA;AAAA,OACjC;AAEA,MAAAL,sBAAsB,CAAA,SAAA,CAAU,SAAY,GAAA,SAASM,WAAW,MAAQ,EAAA;AACpE,QAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAEpC,QAAO,OAAA,IAAA,CAAK,GAAG,IAAK,CAAA,SAAA,CAAU,KAAK,GAAK,EAAA,MAAM,GAAG,MAAM,CAAA;AAAA,OACzD;AAEA,MAAAN,sBAAsB,CAAA,SAAA,CAAU,OAAU,GAAA,SAASO,SAAS,MAAQ,EAAA;AAChE,QAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAEpC,QAAA,IAAA,CAAK,GAAM,GAAA,IAAA,CAAK,SAAU,CAAA,IAAA,CAAK,KAAK,MAAM,CAAA;AAAA,OAC5C;AAEA,MAAAP,uBAAsB,SAAU,CAAA,GAAA,GAAM,SAASQ,IAAAA,CAAK,IAAI,MAAQ,EAAA;AAC5D,QAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAEpC,QAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,MAAM,CAAA,KAAM,EAAI,EAAA;AAC/B,UAAA,IAAA,CAAK,QAAQ,MAAM,CAAA;AACnB,UAAO,OAAA,IAAA;AAAA;AAET,QAAO,OAAA,KAAA;AAAA,OACT;AAEA,MAAAR,uBAAsB,SAAU,CAAA,QAAA,GAAW,SAASS,SAAAA,CAAU,KAAK,MAAQ,EAAA;AACvE,QAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAEpC,QAAA,IAAI,MAAM,IAAK,CAAA,GAAA;AACf,QAASzH,KAAAA,IAAAA,EAAAA,GAAI,GAAG4D,KAAO,GAAA,GAAA,EAAK5D,KAAI4D,KAAK,CAAA,MAAA,EAAQ5D,MAAK,CAAG,EAAA;AACnD,UAAI,IAAA,EAAA,GAAK4D,MAAK5D,EAAC,CAAA;AAEb,UAAA,IAAIqH,QAAU,GAAA,IAAA,CAAK,EAAG,CAAA,GAAA,EAAK,MAAM,CAAA;AACnC,UAAIA,IAAAA,QAAAA,KAAY,CAAMA,CAAAA,IAAAA,QAAAA,KAAY,EAAI,EAAA;AACpC,YAAO,OAAA,KAAA;AAAA;AAET,UAAM,GAAA,GAAA,IAAA,CAAK,SAAU,CAAA,GAAA,EAAK,MAAM,CAAA;AAAA;AAElC,QAAA,IAAA,CAAK,GAAM,GAAA,GAAA;AACX,QAAO,OAAA,IAAA;AAAA,OACT;AAQA,MAAAV,KAAAA,CAAK,mBAAsB,GAAA,SAAS,KAAO,EAAA;AACzC,QAAA,IAAI,aAAa,KAAM,CAAA,UAAA;AACvB,QAAA,IAAI,QAAQ,KAAM,CAAA,KAAA;AAElB,QAAA,IAAI,CAAI,GAAA,KAAA;AACR,QAAA,IAAI,CAAI,GAAA,KAAA;AAER,QAAA,KAAA,IAAS3G,EAAI,GAAA,CAAA,EAAGA,EAAI,GAAA,KAAA,CAAM,QAAQA,EAAK,EAAA,EAAA;AACrC,UAAI,IAAA,IAAA,GAAO,KAAM,CAAA,MAAA,CAAOA,EAAC,CAAA;AACzB,UAAA,IAAI,UAAW,CAAA,OAAA,CAAQ,IAAI,CAAA,KAAM,CAAI,CAAA,EAAA;AACnC,YAAK,IAAA,CAAA,KAAA,CAAM,KAAM,CAAA,KAAA,EAAO,iCAAiC,CAAA;AAAA;AAE3D,UAAA,IAAI,MAAM,OAAQ,CAAA,IAAA,EAAMA,EAAI,GAAA,CAAC,IAAI,CAAI,CAAA,EAAA;AACnC,YAAK,IAAA,CAAA,KAAA,CAAM,KAAM,CAAA,KAAA,EAAO,mCAAmC,CAAA;AAAA;AAE7D,UAAA,IAAI,SAAS,GAAK,EAAA;AAAE,YAAI,CAAA,GAAA,IAAA;AAAA;AACxB,UAAA,IAAI,SAAS,GAAK,EAAA;AAAE,YAAI,CAAA,GAAA,IAAA;AAAA;AAAM;AAEhC,QAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,EAAA,IAAM,KAAK,CAAG,EAAA;AAC5C,UAAK,IAAA,CAAA,KAAA,CAAM,KAAM,CAAA,KAAA,EAAO,iCAAiC,CAAA;AAAA;AAC3D,OACF;AAEA,MAAA,SAAS0H,SAAQ,GAAK,EAAA;AACpB,QAAA,KAAA,IAAS,KAAK,GAAK,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AAC5B,QAAO,OAAA,KAAA;AAAA;AAST,MAAAf,KAAAA,CAAK,qBAAwB,GAAA,SAAS,KAAO,EAAA;AAC3C,QAAA,IAAA,CAAK,eAAe,KAAK,CAAA;AAOzB,QAAI,IAAA,CAAC,KAAM,CAAA,OAAA,IAAW,IAAK,CAAA,OAAA,CAAQ,eAAe,CAAKe,IAAAA,QAAAA,CAAQ,KAAM,CAAA,UAAU,CAAG,EAAA;AAChF,UAAA,KAAA,CAAM,OAAU,GAAA,IAAA;AAChB,UAAA,IAAA,CAAK,eAAe,KAAK,CAAA;AAAA;AAC3B,OACF;AAGA,MAAAf,KAAAA,CAAK,cAAiB,GAAA,SAAS,KAAO,EAAA;AACpC,QAAA,KAAA,CAAM,GAAM,GAAA,CAAA;AACZ,QAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,QAAA,KAAA,CAAM,eAAkB,GAAA,EAAA;AACxB,QAAA,KAAA,CAAM,2BAA8B,GAAA,KAAA;AACpC,QAAA,KAAA,CAAM,kBAAqB,GAAA,CAAA;AAC3B,QAAA,KAAA,CAAM,gBAAmB,GAAA,CAAA;AACzB,QAAM,KAAA,CAAA,UAAA,mBAAoB,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA;AACrC,QAAA,KAAA,CAAM,mBAAmB,MAAS,GAAA,CAAA;AAClC,QAAA,KAAA,CAAM,QAAW,GAAA,IAAA;AAEjB,QAAA,IAAA,CAAK,mBAAmB,KAAK,CAAA;AAE7B,QAAA,IAAI,KAAM,CAAA,GAAA,KAAQ,KAAM,CAAA,MAAA,CAAO,MAAQ,EAAA;AAErC,UAAA,IAAI,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAe,EAAA;AAC3B,YAAA,KAAA,CAAM,MAAM,eAAe,CAAA;AAAA;AAE7B,UAAA,IAAI,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,eAAiB,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAe,EAAA;AACtD,YAAA,KAAA,CAAM,MAAM,0BAA0B,CAAA;AAAA;AACxC;AAEF,QAAI,IAAA,KAAA,CAAM,gBAAmB,GAAA,KAAA,CAAM,kBAAoB,EAAA;AACrD,UAAA,KAAA,CAAM,MAAM,gBAAgB,CAAA;AAAA;AAE9B,QAAS3G,KAAAA,IAAAA,EAAAA,GAAI,GAAG4D,KAAO,GAAA,KAAA,CAAM,oBAAoB5D,EAAI4D,GAAAA,KAAAA,CAAK,MAAQ5D,EAAAA,EAAAA,IAAK,CAAG,EAAA;AACxE,UAAIf,IAAAA,KAAAA,GAAO2E,MAAK5D,EAAC,CAAA;AAEjB,UAAA,IAAI,CAAC,KAAA,CAAM,UAAWf,CAAAA,KAAI,CAAG,EAAA;AAC3B,YAAA,KAAA,CAAM,MAAM,kCAAkC,CAAA;AAAA;AAChD;AACF,OACF;AAGA,MAAA0H,KAAAA,CAAK,kBAAqB,GAAA,SAAS,KAAO,EAAA;AACxC,QAAI,IAAA,gBAAA,GAAmB,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,EAAA;AACnD,QAAA,IAAI,gBAAkB,EAAA;AAAE,UAAA,KAAA,CAAM,QAAW,GAAA,IAAIC,SAAS,CAAA,KAAA,CAAM,UAAU,IAAI,CAAA;AAAA;AAC1E,QAAA,IAAA,CAAK,mBAAmB,KAAK,CAAA;AAC7B,QAAA,OAAO,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC9B,UAAA,IAAI,gBAAkB,EAAA;AAAE,YAAM,KAAA,CAAA,QAAA,GAAW,KAAM,CAAA,QAAA,CAAS,OAAQ,EAAA;AAAA;AAChE,UAAA,IAAA,CAAK,mBAAmB,KAAK,CAAA;AAAA;AAE/B,QAAA,IAAI,gBAAkB,EAAA;AAAE,UAAM,KAAA,CAAA,QAAA,GAAW,MAAM,QAAS,CAAA,MAAA;AAAA;AAGxD,QAAA,IAAI,IAAK,CAAA,oBAAA,CAAqB,KAAO,EAAA,IAAI,CAAG,EAAA;AAC1C,UAAA,KAAA,CAAM,MAAM,mBAAmB,CAAA;AAAA;AAEjC,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAA,KAAA,CAAM,MAAM,0BAA0B,CAAA;AAAA;AACxC,OACF;AAGA,MAAAD,KAAAA,CAAK,kBAAqB,GAAA,SAAS,KAAO,EAAA;AACxC,QAAO,OAAA,KAAA,CAAM,MAAM,KAAM,CAAA,MAAA,CAAO,UAAU,IAAK,CAAA,cAAA,CAAe,KAAK,CAAG,EAAA;AAAA;AAAC,OACzE;AAGA,MAAAA,KAAAA,CAAK,cAAiB,GAAA,SAAS,KAAO,EAAA;AACpC,QAAI,IAAA,IAAA,CAAK,mBAAoB,CAAA,KAAK,CAAG,EAAA;AAInC,UAAA,IAAI,KAAM,CAAA,2BAAA,IAA+B,IAAK,CAAA,oBAAA,CAAqB,KAAK,CAAG,EAAA;AAEzE,YAAA,IAAI,MAAM,OAAS,EAAA;AACjB,cAAA,KAAA,CAAM,MAAM,oBAAoB,CAAA;AAAA;AAClC;AAEF,UAAO,OAAA,IAAA;AAAA;AAGT,QAAI,IAAA,KAAA,CAAM,UAAU,IAAK,CAAA,cAAA,CAAe,KAAK,CAAI,GAAA,IAAA,CAAK,sBAAuB,CAAA,KAAK,CAAG,EAAA;AACnF,UAAA,IAAA,CAAK,qBAAqB,KAAK,CAAA;AAC/B,UAAO,OAAA,IAAA;AAAA;AAGT,QAAO,OAAA,KAAA;AAAA,OACT;AAGA,MAAAA,KAAAA,CAAK,mBAAsB,GAAA,SAAS,KAAO,EAAA;AACzC,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAA,KAAA,CAAM,2BAA8B,GAAA,KAAA;AAGpC,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,aAAiB,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AACtD,UAAO,OAAA,IAAA;AAAA;AAIT,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAA,IAAI,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,eAAiB,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAe,EAAA;AACtD,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAId,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,aAAiB,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AACtD,UAAA,IAAI,UAAa,GAAA,KAAA;AACjB,UAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,YAAA,UAAA,GAAa,KAAM,CAAA,GAAA;AAAA,cAAI;AAAA;AAAA,aAAY;AAAA;AAErC,UAAA,IAAI,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,eAAiB,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAe,EAAA;AACtD,YAAA,IAAA,CAAK,mBAAmB,KAAK,CAAA;AAC7B,YAAA,IAAI,CAAC,KAAM,CAAA,GAAA;AAAA,cAAI;AAAA;AAAA,aAAe,EAAA;AAC5B,cAAA,KAAA,CAAM,MAAM,oBAAoB,CAAA;AAAA;AAElC,YAAA,KAAA,CAAM,8BAA8B,CAAC,UAAA;AACrC,YAAO,OAAA,IAAA;AAAA;AACT;AAGF,QAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AACZ,QAAO,OAAA,KAAA;AAAA,OACT;AAGA,MAAAiF,KAAK,CAAA,oBAAA,GAAuB,SAAS,KAAA,EAAO,OAAS,EAAA;AACnD,QAAK,IAAA,OAAA,KAAY,QAAmB,OAAA,GAAA,KAAA;AAEpC,QAAA,IAAI,IAAK,CAAA,0BAAA,CAA2B,KAAO,EAAA,OAAO,CAAG,EAAA;AACnD,UAAM,KAAA,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAY;AACtB,UAAO,OAAA,IAAA;AAAA;AAET,QAAO,OAAA,KAAA;AAAA,OACT;AAGA,MAAAA,KAAK,CAAA,0BAAA,GAA6B,SAAS,KAAA,EAAO,OAAS,EAAA;AACzD,QAAA,OACE,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,aACV,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,aACV,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SACV,IAAA,IAAA,CAAK,0BAA2B,CAAA,KAAA,EAAO,OAAO,CAAA;AAAA,OAElD;AACA,MAAAA,KAAK,CAAA,0BAAA,GAA6B,SAAS,KAAA,EAAO,OAAS,EAAA;AACzD,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAI,IAAA,GAAA,GAAM,GAAG,GAAM,GAAA,CAAA,CAAA;AACnB,UAAI,IAAA,IAAA,CAAK,uBAAwB,CAAA,KAAK,CAAG,EAAA;AACvC,YAAA,GAAA,GAAM,KAAM,CAAA,YAAA;AACZ,YAAA,IAAI,KAAM,CAAA,GAAA;AAAA,cAAI;AAAA;AAAA,aAAiB,IAAA,IAAA,CAAK,uBAAwB,CAAA,KAAK,CAAG,EAAA;AAClE,cAAA,GAAA,GAAM,KAAM,CAAA,YAAA;AAAA;AAEd,YAAA,IAAI,KAAM,CAAA,GAAA;AAAA,cAAI;AAAA;AAAA,aAAe,EAAA;AAE3B,cAAA,IAAI,GAAQ,KAAA,CAAA,CAAA,IAAM,GAAM,GAAA,GAAA,IAAO,CAAC,OAAS,EAAA;AACvC,gBAAA,KAAA,CAAM,MAAM,uCAAuC,CAAA;AAAA;AAErD,cAAO,OAAA,IAAA;AAAA;AACT;AAEF,UAAI,IAAA,KAAA,CAAM,OAAW,IAAA,CAAC,OAAS,EAAA;AAC7B,YAAA,KAAA,CAAM,MAAM,uBAAuB,CAAA;AAAA;AAErC,UAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,QAAO,OAAA,KAAA;AAAA,OACT;AAGA,MAAAiF,KAAAA,CAAK,cAAiB,GAAA,SAAS,KAAO,EAAA;AACpC,QAAA,OACE,IAAK,CAAA,2BAAA,CAA4B,KAAK,CAAA,IACtC,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SACV,IAAA,IAAA,CAAK,kCAAmC,CAAA,KAAK,KAC7C,IAAK,CAAA,wBAAA,CAAyB,KAAK,CAAA,IACnC,KAAK,0BAA2B,CAAA,KAAK,CACrC,IAAA,IAAA,CAAK,yBAAyB,KAAK,CAAA;AAAA,OAEvC;AACA,MAAAA,KAAAA,CAAK,kCAAqC,GAAA,SAAS,KAAO,EAAA;AACxD,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAI,IAAA,IAAA,CAAK,oBAAqB,CAAA,KAAK,CAAG,EAAA;AACpC,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,QAAO,OAAA,KAAA;AAAA,OACT;AACA,MAAAiF,KAAAA,CAAK,0BAA6B,GAAA,SAAS,KAAO,EAAA;AAChD,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAA,IAAI,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAe,EAAA;AAC3B,YAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAAI,EAAA;AAClC,cAAI,IAAA,YAAA,GAAe,IAAK,CAAA,mBAAA,CAAoB,KAAK,CAAA;AACjD,cAAA,IAAI,YAAY,KAAM,CAAA,GAAA;AAAA,gBAAI;AAAA;AAAA,eAAY;AACtC,cAAA,IAAI,gBAAgB,SAAW,EAAA;AAC7B,gBAAA,KAAA,IAAS1B,EAAI,GAAA,CAAA,EAAGA,EAAI,GAAA,YAAA,CAAa,QAAQA,EAAK,EAAA,EAAA;AAC5C,kBAAI,IAAA,QAAA,GAAW,YAAa,CAAA,MAAA,CAAOA,EAAC,CAAA;AACpC,kBAAA,IAAI,aAAa,OAAQ,CAAA,QAAA,EAAUA,EAAI,GAAA,CAAC,IAAI,CAAI,CAAA,EAAA;AAC9C,oBAAA,KAAA,CAAM,MAAM,wCAAwC,CAAA;AAAA;AACtD;AAEF,gBAAA,IAAI,SAAW,EAAA;AACb,kBAAI,IAAA,eAAA,GAAkB,IAAK,CAAA,mBAAA,CAAoB,KAAK,CAAA;AACpD,kBAAA,IAAI,CAAC,YAAgB,IAAA,CAAC,mBAAmB,KAAM,CAAA,OAAA,OAAc,EAAc,EAAA;AACzE,oBAAA,KAAA,CAAM,MAAM,sCAAsC,CAAA;AAAA;AAEpD,kBAAA,KAAA,IAAS,GAAM,GAAA,CAAA,EAAG,GAAM,GAAA,eAAA,CAAgB,QAAQ,GAAO,EAAA,EAAA;AACrD,oBAAI,IAAA,UAAA,GAAa,eAAgB,CAAA,MAAA,CAAO,GAAG,CAAA;AAC3C,oBACE,IAAA,eAAA,CAAgB,OAAQ,CAAA,UAAA,EAAY,GAAM,GAAA,CAAC,CAAI,GAAA,CAAA,CAAA,IAC/C,YAAa,CAAA,OAAA,CAAQ,UAAU,CAAA,GAAI,CACnC,CAAA,EAAA;AACA,sBAAA,KAAA,CAAM,MAAM,wCAAwC,CAAA;AAAA;AACtD;AACF;AACF;AACF;AAEF,YAAA,IAAI,KAAM,CAAA,GAAA;AAAA,cAAI;AAAA;AAAA,aAAe,EAAA;AAC3B,cAAA,IAAA,CAAK,mBAAmB,KAAK,CAAA;AAC7B,cAAA,IAAI,KAAM,CAAA,GAAA;AAAA,gBAAI;AAAA;AAAA,eAAe,EAAA;AAC3B,gBAAO,OAAA,IAAA;AAAA;AAET,cAAA,KAAA,CAAM,MAAM,oBAAoB,CAAA;AAAA;AAClC;AAEF,UAAA,KAAA,CAAM,GAAM0B,GAAAA,MAAAA;AAAA;AAEd,QAAO,OAAA,KAAA;AAAA,OACT;AACA,MAAAiF,KAAAA,CAAK,wBAA2B,GAAA,SAAS,KAAO,EAAA;AAC9C,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,YAAA,IAAA,CAAK,sBAAsB,KAAK,CAAA;AAAA,WACvB,MAAA,IAAA,KAAA,CAAM,OAAQ,EAAA,KAAM,EAAc,EAAA;AAC3C,YAAA,KAAA,CAAM,MAAM,eAAe,CAAA;AAAA;AAE7B,UAAA,IAAA,CAAK,mBAAmB,KAAK,CAAA;AAC7B,UAAA,IAAI,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAe,EAAA;AAC3B,YAAA,KAAA,CAAM,kBAAsB,IAAA,CAAA;AAC5B,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,KAAA,CAAM,MAAM,oBAAoB,CAAA;AAAA;AAElC,QAAO,OAAA,KAAA;AAAA,OACT;AAIA,MAAAA,KAAAA,CAAK,mBAAsB,GAAA,SAAS,KAAO,EAAA;AACzC,QAAA,IAAI,SAAY,GAAA,EAAA;AAChB,QAAA,IAAI,EAAK,GAAA,CAAA;AACT,QAAA,OAAA,CAAQ,KAAK,KAAM,CAAA,OAAA,QAAe,CAAMgB,CAAAA,IAAAA,4BAAAA,CAA4B,EAAE,CAAG,EAAA;AACvE,UAAA,SAAA,IAAatG,mBAAkB,EAAE,CAAA;AACjC,UAAA,KAAA,CAAM,OAAQ,EAAA;AAAA;AAEhB,QAAO,OAAA,SAAA;AAAA,OACT;AAGA,MAAA,SAASsG,6BAA4B,EAAI,EAAA;AACvC,QAAA,OAAO,EAAO,KAAA,GAAA,IAAgB,EAAO,KAAA,GAAA,IAAgB,EAAO,KAAA,GAAA;AAAA;AAI9D,MAAAhB,KAAAA,CAAK,sBAAyB,GAAA,SAAS,KAAO,EAAA;AAC5C,QAAA,OACE,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAY,IACtB,KAAK,kCAAmC,CAAA,KAAK,KAC7C,IAAK,CAAA,wBAAA,CAAyB,KAAK,CAAA,IACnC,IAAK,CAAA,0BAAA,CAA2B,KAAK,CACrC,IAAA,IAAA,CAAK,wBAAyB,CAAA,KAAK,CACnC,IAAA,IAAA,CAAK,kCAAkC,KAAK,CAAA,IAC5C,IAAK,CAAA,kCAAA,CAAmC,KAAK,CAAA;AAAA,OAEjD;AAGA,MAAAA,KAAAA,CAAK,iCAAoC,GAAA,SAAS,KAAO,EAAA;AACvD,QAAA,IAAI,IAAK,CAAA,0BAAA,CAA2B,KAAO,EAAA,IAAI,CAAG,EAAA;AAChD,UAAA,KAAA,CAAM,MAAM,mBAAmB,CAAA;AAAA;AAEjC,QAAO,OAAA,KAAA;AAAA,OACT;AAGA,MAAAA,KAAAA,CAAK,yBAA4B,GAAA,SAAS,KAAO,EAAA;AAC/C,QAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,QAAIiB,IAAAA,kBAAAA,CAAkB,EAAE,CAAG,EAAA;AACzB,UAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAO,OAAA,IAAA;AAAA;AAET,QAAO,OAAA,KAAA;AAAA,OACT;AACA,MAAA,SAASA,mBAAkB,EAAI,EAAA;AAC7B,QAAA,OACE,OAAO,EACP,IAAA,EAAA,IAAM,EAAgB,IAAA,EAAA,IAAM,MAC5B,EAAO,KAAA,EAAA,IACP,EAAO,KAAA,EAAA,IACP,MAAM,EAAgB,IAAA,EAAA,IAAM,EAC5B,IAAA,EAAA,IAAM,OAAgB,EAAM,IAAA,GAAA;AAAA;AAMhC,MAAAjB,KAAAA,CAAK,2BAA8B,GAAA,SAAS,KAAO,EAAA;AACjD,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAA,IAAI,EAAK,GAAA,CAAA;AACT,QAAQ,OAAA,CAAA,EAAA,GAAK,MAAM,OAAQ,EAAA,MAAO,MAAM,CAACkG,kBAAAA,CAAkB,EAAE,CAAG,EAAA;AAC9D,UAAA,KAAA,CAAM,OAAQ,EAAA;AAAA;AAEhB,QAAA,OAAO,MAAM,GAAQlG,KAAAA,MAAAA;AAAA,OACvB;AAGA,MAAAiF,KAAAA,CAAK,kCAAqC,GAAA,SAAS,KAAO,EAAA;AACxD,QAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,QAAA,IACE,OAAO,CACP,CAAA,IAAA,EAAA,KAAO,MACP,EAAE,EAAA,IAAM,MAAgB,EAAM,IAAA,EAAA,CAAA,IAC9B,EAAO,KAAA,EAAA,IACP,OAAO,EACP,IAAA,EAAA,KAAO,MACP,EAAO,KAAA,EAAA,IACP,OAAO,GACP,EAAA;AACA,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAO,OAAA,IAAA;AAAA;AAET,QAAO,OAAA,KAAA;AAAA,OACT;AAKA,MAAAA,KAAAA,CAAK,qBAAwB,GAAA,SAAS,KAAO,EAAA;AAC3C,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAA,IAAI,CAAC,IAAA,CAAK,mBAAoB,CAAA,KAAK,CAAG,EAAA;AAAE,YAAA,KAAA,CAAM,MAAM,eAAe,CAAA;AAAA;AACnE,UAAI,IAAA,gBAAA,GAAmB,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,EAAA;AACnD,UAAA,IAAI,KAAQ,GAAA,KAAA,CAAM,UAAW,CAAA,KAAA,CAAM,eAAe,CAAA;AAClD,UAAA,IAAI,KAAO,EAAA;AACT,YAAA,IAAI,gBAAkB,EAAA;AACpB,cAAS3G,KAAAA,IAAAA,EAAAA,GAAI,GAAG4D,KAAO,GAAA,KAAA,EAAO5D,KAAI4D,KAAK,CAAA,MAAA,EAAQ5D,MAAK,CAAG,EAAA;AACrD,gBAAI,IAAA,KAAA,GAAQ4D,MAAK5D,EAAC,CAAA;AAElB,gBAAA,IAAI,CAAC,KAAA,CAAM,aAAc,CAAA,KAAA,CAAM,QAAQ,CACrC,EAAA;AAAE,kBAAA,KAAA,CAAM,MAAM,8BAA8B,CAAA;AAAA;AAAG;AACnD,aACK,MAAA;AACL,cAAA,KAAA,CAAM,MAAM,8BAA8B,CAAA;AAAA;AAC5C;AAEF,UAAA,IAAI,gBAAkB,EAAA;AACpB,YAAC,CAAA,KAAA,KAAU,KAAM,CAAA,UAAA,CAAW,KAAM,CAAA,eAAe,IAAI,EAAC,CAAA,EAAI,IAAK,CAAA,KAAA,CAAM,QAAQ,CAAA;AAAA,WACxE,MAAA;AACL,YAAM,KAAA,CAAA,UAAA,CAAW,KAAM,CAAA,eAAe,CAAI,GAAA,IAAA;AAAA;AAC5C;AACF,OACF;AAKA,MAAA2G,KAAAA,CAAK,mBAAsB,GAAA,SAAS,KAAO,EAAA;AACzC,QAAA,KAAA,CAAM,eAAkB,GAAA,EAAA;AACxB,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAA,IAAI,IAAK,CAAA,8BAAA,CAA+B,KAAK,CAAA,IAAK,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAe,EAAA;AACzE,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,KAAA,CAAM,MAAM,4BAA4B,CAAA;AAAA;AAE1C,QAAO,OAAA,KAAA;AAAA,OACT;AAMA,MAAAA,KAAAA,CAAK,8BAAiC,GAAA,SAAS,KAAO,EAAA;AACpD,QAAA,KAAA,CAAM,eAAkB,GAAA,EAAA;AACxB,QAAI,IAAA,IAAA,CAAK,+BAAgC,CAAA,KAAK,CAAG,EAAA;AAC/C,UAAM,KAAA,CAAA,eAAA,IAAmBtF,kBAAkB,CAAA,KAAA,CAAM,YAAY,CAAA;AAC7D,UAAO,OAAA,IAAA,CAAK,8BAA+B,CAAA,KAAK,CAAG,EAAA;AACjD,YAAM,KAAA,CAAA,eAAA,IAAmBA,kBAAkB,CAAA,KAAA,CAAM,YAAY,CAAA;AAAA;AAE/D,UAAO,OAAA,IAAA;AAAA;AAET,QAAO,OAAA,KAAA;AAAA,OACT;AAOA,MAAAsF,KAAAA,CAAK,+BAAkC,GAAA,SAAS,KAAO,EAAA;AACrD,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAI,IAAA,MAAA,GAAS,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,EAAA;AACzC,QAAI,IAAA,EAAA,GAAK,KAAM,CAAA,OAAA,CAAQ,MAAM,CAAA;AAC7B,QAAA,KAAA,CAAM,QAAQ,MAAM,CAAA;AAEpB,QAAA,IAAI,OAAO,EAAgB,IAAA,IAAA,CAAK,qCAAsC,CAAA,KAAA,EAAO,MAAM,CAAG,EAAA;AACpF,UAAA,EAAA,GAAK,KAAM,CAAA,YAAA;AAAA;AAEb,QAAImG,IAAAA,wBAAAA,CAAwB,EAAE,CAAG,EAAA;AAC/B,UAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,UAAO,OAAA,IAAA;AAAA;AAGT,QAAA,KAAA,CAAM,GAAMnG,GAAAA,MAAAA;AACZ,QAAO,OAAA,KAAA;AAAA,OACT;AACA,MAAA,SAASmG,yBAAwB,EAAI,EAAA;AACnC,QAAA,OAAO5H,mBAAkB,EAAI,EAAA,IAAI,CAAK,IAAA,EAAA,KAAO,MAAgB,EAAO,KAAA,EAAA;AAAA;AAUtE,MAAA0G,KAAAA,CAAK,8BAAiC,GAAA,SAAS,KAAO,EAAA;AACpD,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAI,IAAA,MAAA,GAAS,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,EAAA;AACzC,QAAI,IAAA,EAAA,GAAK,KAAM,CAAA,OAAA,CAAQ,MAAM,CAAA;AAC7B,QAAA,KAAA,CAAM,QAAQ,MAAM,CAAA;AAEpB,QAAA,IAAI,OAAO,EAAgB,IAAA,IAAA,CAAK,qCAAsC,CAAA,KAAA,EAAO,MAAM,CAAG,EAAA;AACpF,UAAA,EAAA,GAAK,KAAM,CAAA,YAAA;AAAA;AAEb,QAAIoG,IAAAA,uBAAAA,CAAuB,EAAE,CAAG,EAAA;AAC9B,UAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,UAAO,OAAA,IAAA;AAAA;AAGT,QAAA,KAAA,CAAM,GAAMpG,GAAAA,MAAAA;AACZ,QAAO,OAAA,KAAA;AAAA,OACT;AACA,MAAA,SAASoG,wBAAuB,EAAI,EAAA;AAClC,QAAO5H,OAAAA,iBAAAA,CAAiB,EAAI,EAAA,IAAI,CAAK,IAAA,EAAA,KAAO,MAAgB,EAAO,KAAA,EAAA,IAAgB,EAAO,KAAA,IAAA,IAAuB,EAAO,KAAA,IAAA;AAAA;AAI1H,MAAAyG,KAAAA,CAAK,oBAAuB,GAAA,SAAS,KAAO,EAAA;AAC1C,QAAA,IACE,KAAK,uBAAwB,CAAA,KAAK,CAClC,IAAA,IAAA,CAAK,+BAA+B,KAAK,CAAA,IACzC,IAAK,CAAA,yBAAA,CAA0B,KAAK,CACnC,IAAA,KAAA,CAAM,WAAW,IAAK,CAAA,oBAAA,CAAqB,KAAK,CACjD,EAAA;AACA,UAAO,OAAA,IAAA;AAAA;AAET,QAAA,IAAI,MAAM,OAAS,EAAA;AAEjB,UAAI,IAAA,KAAA,CAAM,OAAQ,EAAA,KAAM,EAAc,EAAA;AACpC,YAAA,KAAA,CAAM,MAAM,wBAAwB,CAAA;AAAA;AAEtC,UAAA,KAAA,CAAM,MAAM,gBAAgB,CAAA;AAAA;AAE9B,QAAO,OAAA,KAAA;AAAA,OACT;AACA,MAAAA,KAAAA,CAAK,uBAA0B,GAAA,SAAS,KAAO,EAAA;AAC7C,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAI,IAAA,IAAA,CAAK,uBAAwB,CAAA,KAAK,CAAG,EAAA;AACvC,UAAA,IAAI,IAAI,KAAM,CAAA,YAAA;AACd,UAAA,IAAI,MAAM,OAAS,EAAA;AAEjB,YAAI,IAAA,CAAA,GAAI,MAAM,gBAAkB,EAAA;AAC9B,cAAA,KAAA,CAAM,gBAAmB,GAAA,CAAA;AAAA;AAE3B,YAAO,OAAA,IAAA;AAAA;AAET,UAAI,IAAA,CAAA,IAAK,MAAM,kBAAoB,EAAA;AACjC,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,QAAO,OAAA,KAAA;AAAA,OACT;AACA,MAAAiF,KAAAA,CAAK,oBAAuB,GAAA,SAAS,KAAO,EAAA;AAC1C,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAI,IAAA,IAAA,CAAK,mBAAoB,CAAA,KAAK,CAAG,EAAA;AACnC,YAAM,KAAA,CAAA,kBAAA,CAAmB,IAAK,CAAA,KAAA,CAAM,eAAe,CAAA;AACnD,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,KAAA,CAAM,MAAM,yBAAyB,CAAA;AAAA;AAEvC,QAAO,OAAA,KAAA;AAAA,OACT;AAGA,MAAAA,KAAAA,CAAK,yBAA4B,GAAA,SAAS,KAAO,EAAA;AAC/C,QAAA,OACE,IAAK,CAAA,uBAAA,CAAwB,KAAK,CAAA,IAClC,IAAK,CAAA,wBAAA,CAAyB,KAAK,CAAA,IACnC,IAAK,CAAA,cAAA,CAAe,KAAK,CAAA,IACzB,KAAK,2BAA4B,CAAA,KAAK,CACtC,IAAA,IAAA,CAAK,qCAAsC,CAAA,KAAA,EAAO,KAAK,CAAA,IACtD,CAAC,KAAA,CAAM,OAAW,IAAA,IAAA,CAAK,mCAAoC,CAAA,KAAK,CACjE,IAAA,IAAA,CAAK,yBAAyB,KAAK,CAAA;AAAA,OAEvC;AACA,MAAAA,KAAAA,CAAK,wBAA2B,GAAA,SAAS,KAAO,EAAA;AAC9C,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAI,IAAA,IAAA,CAAK,uBAAwB,CAAA,KAAK,CAAG,EAAA;AACvC,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,QAAO,OAAA,KAAA;AAAA,OACT;AACA,MAAAiF,KAAAA,CAAK,cAAiB,GAAA,SAAS,KAAO,EAAA;AACpC,QAAI,IAAA,KAAA,CAAM,SAAc,KAAA,EAAA,IAAgB,CAACoB,eAAe,CAAA,KAAA,CAAM,SAAU,EAAC,CAAG,EAAA;AAC1E,UAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAO,OAAA,IAAA;AAAA;AAET,QAAO,OAAA,KAAA;AAAA,OACT;AAGA,MAAApB,KAAAA,CAAK,uBAA0B,GAAA,SAAS,KAAO,EAAA;AAC7C,QAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,QAAA,IAAI,OAAO,GAAc,EAAA;AACvB,UAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAO,OAAA,IAAA;AAAA;AAET,QAAA,IAAI,OAAO,GAAc,EAAA;AACvB,UAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAO,OAAA,IAAA;AAAA;AAET,QAAA,IAAI,OAAO,GAAc,EAAA;AACvB,UAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAO,OAAA,IAAA;AAAA;AAET,QAAA,IAAI,OAAO,GAAc,EAAA;AACvB,UAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAO,OAAA,IAAA;AAAA;AAET,QAAA,IAAI,OAAO,GAAc,EAAA;AACvB,UAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAO,OAAA,IAAA;AAAA;AAET,QAAO,OAAA,KAAA;AAAA,OACT;AAGA,MAAAA,KAAAA,CAAK,uBAA0B,GAAA,SAAS,KAAO,EAAA;AAC7C,QAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,QAAIqB,IAAAA,gBAAAA,CAAgB,EAAE,CAAG,EAAA;AACvB,UAAA,KAAA,CAAM,eAAe,EAAK,GAAA,EAAA;AAC1B,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAO,OAAA,IAAA;AAAA;AAET,QAAO,OAAA,KAAA;AAAA,OACT;AACA,MAAA,SAASA,iBAAgB,EAAI,EAAA;AAC3B,QAAA,OACG,MAAM,EAAgB,IAAA,EAAA,IAAM,EAC5B,IAAA,EAAA,IAAM,MAAgB,EAAM,IAAA,GAAA;AAAA;AAKjC,MAAArB,KAAK,CAAA,qCAAA,GAAwC,SAAS,KAAA,EAAO,MAAQ,EAAA;AACnE,QAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAElC,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAI,IAAA,OAAA,GAAU,UAAU,KAAM,CAAA,OAAA;AAE9B,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAA,IAAI,IAAK,CAAA,wBAAA,CAAyB,KAAO,EAAA,CAAC,CAAG,EAAA;AAC3C,YAAA,IAAI,OAAO,KAAM,CAAA,YAAA;AACjB,YAAA,IAAI,OAAW,IAAA,IAAA,IAAQ,KAAU,IAAA,IAAA,IAAQ,KAAQ,EAAA;AAC/C,cAAA,IAAI,mBAAmB,KAAM,CAAA,GAAA;AAC7B,cAAA,IAAI,KAAM,CAAA,GAAA;AAAA,gBAAI;AAAA;AAAA,mBAAiB,KAAM,CAAA,GAAA;AAAA,gBAAI;AAAA;AAAA,eAAiB,IAAA,IAAA,CAAK,wBAAyB,CAAA,KAAA,EAAO,CAAC,CAAG,EAAA;AACjG,gBAAA,IAAI,QAAQ,KAAM,CAAA,YAAA;AAClB,gBAAI,IAAA,KAAA,IAAS,KAAU,IAAA,KAAA,IAAS,KAAQ,EAAA;AACtC,kBAAA,KAAA,CAAM,YAAgB,GAAA,CAAA,IAAA,GAAO,KAAU,IAAA,IAAA,IAAS,QAAQ,KAAU,CAAA,GAAA,KAAA;AAClE,kBAAO,OAAA,IAAA;AAAA;AACT;AAEF,cAAA,KAAA,CAAM,GAAM,GAAA,gBAAA;AACZ,cAAA,KAAA,CAAM,YAAe,GAAA,IAAA;AAAA;AAEvB,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,IACE,WACA,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WACV,IAAA,IAAA,CAAK,mBAAoB,CAAA,KAAK,KAC9B,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WACVuG,IAAAA,eAAAA,CAAe,KAAM,CAAA,YAAY,CACjC,EAAA;AACA,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,IAAI,OAAS,EAAA;AACX,YAAA,KAAA,CAAM,MAAM,wBAAwB,CAAA;AAAA;AAEtC,UAAA,KAAA,CAAM,GAAMvG,GAAAA,MAAAA;AAAA;AAGd,QAAO,OAAA,KAAA;AAAA,OACT;AACA,MAAA,SAASuG,gBAAe,EAAI,EAAA;AAC1B,QAAO,OAAA,EAAA,IAAM,KAAK,EAAM,IAAA,OAAA;AAAA;AAI1B,MAAAtB,KAAAA,CAAK,wBAA2B,GAAA,SAAS,KAAO,EAAA;AAC9C,QAAA,IAAI,MAAM,OAAS,EAAA;AACjB,UAAI,IAAA,IAAA,CAAK,yBAA0B,CAAA,KAAK,CAAG,EAAA;AACzC,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,IAAI,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAe,EAAA;AAC3B,YAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,YAAO,OAAA,IAAA;AAAA;AAET,UAAO,OAAA,KAAA;AAAA;AAGT,QAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,QAAA,IAAI,OAAO,EAAiB,KAAA,CAAC,KAAM,CAAA,OAAA,IAAW,OAAO,GAAe,CAAA,EAAA;AAClE,UAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAO,OAAA,IAAA;AAAA;AAGT,QAAO,OAAA,KAAA;AAAA,OACT;AAGA,MAAAA,KAAAA,CAAK,uBAA0B,GAAA,SAAS,KAAO,EAAA;AAC7C,QAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,QAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,QAAI,IAAA,EAAA,IAAM,EAAgB,IAAA,EAAA,IAAM,EAAc,EAAA;AAC5C,UAAG,GAAA;AACD,YAAA,KAAA,CAAM,YAAe,GAAA,EAAA,GAAK,KAAM,CAAA,YAAA,IAAgB,EAAK,GAAA,EAAA,CAAA;AACrD,YAAA,KAAA,CAAM,OAAQ,EAAA;AAAA,oBACN,EAAK,GAAA,KAAA,CAAM,OAAQ,EAAA,KAAM,MAAgB,EAAM,IAAA,EAAA;AACzD,UAAO,OAAA,IAAA;AAAA;AAET,QAAO,OAAA,KAAA;AAAA,OACT;AAIA,MAAA,IAAIuB,YAAc,GAAA,CAAA;AAClB,MAAA,IAAIC,UAAY,GAAA,CAAA;AAChB,MAAA,IAAIC,cAAgB,GAAA,CAAA;AAGpB,MAAAzB,KAAAA,CAAK,8BAAiC,GAAA,SAAS,KAAO,EAAA;AACpD,QAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AAEvB,QAAI0B,IAAAA,uBAAAA,CAAuB,EAAE,CAAG,EAAA;AAC9B,UAAA,KAAA,CAAM,YAAe,GAAA,CAAA,CAAA;AACrB,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAOF,OAAAA,UAAAA;AAAA;AAGT,QAAA,IAAI,MAAS,GAAA,KAAA;AACb,QACE,IAAA,KAAA,CAAM,OACN,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,OAC1B,MAAS,GAAA,EAAA,KAAO,EAAiB,KAAA,EAAA,KAAO,GAC1C,CAAA,EAAA;AACA,UAAA,KAAA,CAAM,YAAe,GAAA,CAAA,CAAA;AACrB,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAI,IAAA,MAAA;AACJ,UAAA,IACE,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,gBACT,MAAS,GAAA,IAAA,CAAK,wCAAyC,CAAA,KAAK,MAC7D,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WACV,EAAA;AACA,YAAI,IAAA,MAAA,IAAU,WAAWC,cAAe,EAAA;AAAE,cAAA,KAAA,CAAM,MAAM,uBAAuB,CAAA;AAAA;AAC7E,YAAO,OAAA,MAAA;AAAA;AAET,UAAA,KAAA,CAAM,MAAM,uBAAuB,CAAA;AAAA;AAGrC,QAAOF,OAAAA,YAAAA;AAAA,OACT;AAEA,MAAA,SAASG,wBAAuB,EAAI,EAAA;AAClC,QACE,OAAA,EAAA,KAAO,GACP,IAAA,EAAA,KAAO,EACP,IAAA,EAAA,KAAO,OACP,EAAO,KAAA,EAAA,IACP,EAAO,KAAA,GAAA,IACP,EAAO,KAAA,EAAA;AAAA;AAOX,MAAA1B,KAAAA,CAAK,wCAA2C,GAAA,SAAS,KAAO,EAAA;AAC9D,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAGlB,QAAA,IAAI,IAAK,CAAA,6BAAA,CAA8B,KAAK,CAAA,IAAK,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AACxE,UAAA,IAAIzC,QAAO,KAAM,CAAA,eAAA;AACjB,UAAI,IAAA,IAAA,CAAK,8BAA+B,CAAA,KAAK,CAAG,EAAA;AAC9C,YAAA,IAAIqF,SAAQ,KAAM,CAAA,eAAA;AAClB,YAAK,IAAA,CAAA,0CAAA,CAA2C,KAAOrF,EAAAA,KAAAA,EAAMqF,MAAK,CAAA;AAClE,YAAO6D,OAAAA,UAAAA;AAAA;AACT;AAEF,QAAA,KAAA,CAAM,GAAMzG,GAAAA,MAAAA;AAGZ,QAAI,IAAA,IAAA,CAAK,wCAAyC,CAAA,KAAK,CAAG,EAAA;AACxD,UAAA,IAAI,cAAc,KAAM,CAAA,eAAA;AACxB,UAAO,OAAA,IAAA,CAAK,yCAA0C,CAAA,KAAA,EAAO,WAAW,CAAA;AAAA;AAE1E,QAAOwG,OAAAA,YAAAA;AAAA,OACT;AAEA,MAAAvB,KAAK,CAAA,0CAAA,GAA6C,SAAS,KAAA,EAAO1H,OAAMqF,MAAO,EAAA;AAC7E,QAAA,IAAI,CAAC3F,OAAO,CAAA,KAAA,CAAM,iBAAkB,CAAA,SAAA,EAAWM,KAAI,CACjD,EAAA;AAAE,UAAA,KAAA,CAAM,MAAM,uBAAuB,CAAA;AAAA;AACvC,QAAI,IAAA,CAAC,MAAM,iBAAkB,CAAA,SAAA,CAAUA,KAAI,CAAE,CAAA,IAAA,CAAKqF,MAAK,CACrD,EAAA;AAAE,UAAA,KAAA,CAAM,MAAM,wBAAwB,CAAA;AAAA;AAAG,OAC7C;AAEA,MAAAqC,KAAK,CAAA,yCAAA,GAA4C,SAAS,KAAA,EAAO,WAAa,EAAA;AAC5E,QAAA,IAAI,KAAM,CAAA,iBAAA,CAAkB,MAAO,CAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AAAE,UAAOwB,OAAAA,UAAAA;AAAA;AAC/D,QAAA,IAAI,MAAM,OAAW,IAAA,KAAA,CAAM,kBAAkB,eAAgB,CAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AAAE,UAAOC,OAAAA,cAAAA;AAAA;AACzF,QAAA,KAAA,CAAM,MAAM,uBAAuB,CAAA;AAAA,OACrC;AAIA,MAAAzB,KAAAA,CAAK,6BAAgC,GAAA,SAAS,KAAO,EAAA;AACnD,QAAA,IAAI,EAAK,GAAA,CAAA;AACT,QAAA,KAAA,CAAM,eAAkB,GAAA,EAAA;AACxB,QAAA,OAAO2B,+BAA+B,CAAA,EAAA,GAAK,KAAM,CAAA,OAAA,EAAS,CAAG,EAAA;AAC3D,UAAM,KAAA,CAAA,eAAA,IAAmBjH,mBAAkB,EAAE,CAAA;AAC7C,UAAA,KAAA,CAAM,OAAQ,EAAA;AAAA;AAEhB,QAAA,OAAO,MAAM,eAAoB,KAAA,EAAA;AAAA,OACnC;AAEA,MAAA,SAASiH,gCAA+B,EAAI,EAAA;AAC1C,QAAON,OAAAA,gBAAAA,CAAgB,EAAE,CAAA,IAAK,EAAO,KAAA,EAAA;AAAA;AAKvC,MAAArB,KAAAA,CAAK,8BAAiC,GAAA,SAAS,KAAO,EAAA;AACpD,QAAA,IAAI,EAAK,GAAA,CAAA;AACT,QAAA,KAAA,CAAM,eAAkB,GAAA,EAAA;AACxB,QAAA,OAAO4B,gCAAgC,CAAA,EAAA,GAAK,KAAM,CAAA,OAAA,EAAS,CAAG,EAAA;AAC5D,UAAM,KAAA,CAAA,eAAA,IAAmBlH,mBAAkB,EAAE,CAAA;AAC7C,UAAA,KAAA,CAAM,OAAQ,EAAA;AAAA;AAEhB,QAAA,OAAO,MAAM,eAAoB,KAAA,EAAA;AAAA,OACnC;AACA,MAAA,SAASkH,iCAAgC,EAAI,EAAA;AAC3C,QAAA,OAAOD,+BAA+B,CAAA,EAAE,CAAKP,IAAAA,eAAAA,CAAe,EAAE,CAAA;AAAA;AAKhE,MAAApB,KAAAA,CAAK,wCAA2C,GAAA,SAAS,KAAO,EAAA;AAC9D,QAAO,OAAA,IAAA,CAAK,+BAA+B,KAAK,CAAA;AAAA,OAClD;AAGA,MAAAA,KAAAA,CAAK,wBAA2B,GAAA,SAAS,KAAO,EAAA;AAC9C,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAA,IAAI,SAAS,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAY;AACnC,UAAI,IAAA,MAAA,GAAS,IAAK,CAAA,oBAAA,CAAqB,KAAK,CAAA;AAC5C,UAAA,IAAI,CAAC,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WACb,EAAA;AAAE,YAAA,KAAA,CAAM,MAAM,8BAA8B,CAAA;AAAA;AAC9C,UAAI,IAAA,MAAA,IAAU,WAAWyB,cACvB,EAAA;AAAE,YAAA,KAAA,CAAM,MAAM,6CAA6C,CAAA;AAAA;AAC7D,UAAO,OAAA,IAAA;AAAA;AAET,QAAO,OAAA,KAAA;AAAA,OACT;AAIA,MAAAzB,KAAAA,CAAK,oBAAuB,GAAA,SAAS,KAAO,EAAA;AAC1C,QAAI,IAAA,KAAA,CAAM,OAAQ,EAAA,KAAM,EAAc,EAAA;AAAE,UAAOwB,OAAAA,UAAAA;AAAA;AAC/C,QAAA,IAAI,MAAM,OAAS,EAAA;AAAE,UAAO,OAAA,IAAA,CAAK,0BAA0B,KAAK,CAAA;AAAA;AAChE,QAAA,IAAA,CAAK,2BAA2B,KAAK,CAAA;AACrC,QAAOA,OAAAA,UAAAA;AAAA,OACT;AAIA,MAAAxB,KAAAA,CAAK,0BAA6B,GAAA,SAAS,KAAO,EAAA;AAChD,QAAO,OAAA,IAAA,CAAK,mBAAoB,CAAA,KAAK,CAAG,EAAA;AACtC,UAAA,IAAI,OAAO,KAAM,CAAA,YAAA;AACjB,UAAA,IAAI,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAiB,IAAA,IAAA,CAAK,mBAAoB,CAAA,KAAK,CAAG,EAAA;AAC9D,YAAA,IAAI,QAAQ,KAAM,CAAA,YAAA;AAClB,YAAA,IAAI,KAAM,CAAA,OAAA,KAAY,IAAS,KAAA,CAAA,CAAA,IAAM,UAAU,CAAK,CAAA,CAAA,EAAA;AAClD,cAAA,KAAA,CAAM,MAAM,yBAAyB,CAAA;AAAA;AAEvC,YAAA,IAAI,IAAS,KAAA,CAAA,CAAA,IAAM,KAAU,KAAA,CAAA,CAAA,IAAM,OAAO,KAAO,EAAA;AAC/C,cAAA,KAAA,CAAM,MAAM,uCAAuC,CAAA;AAAA;AACrD;AACF;AACF,OACF;AAIA,MAAAA,KAAAA,CAAK,mBAAsB,GAAA,SAAS,KAAO,EAAA;AACzC,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAElB,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAI,IAAA,IAAA,CAAK,qBAAsB,CAAA,KAAK,CAAG,EAAA;AACrC,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,IAAI,MAAM,OAAS,EAAA;AAEjB,YAAI,IAAA,IAAA,GAAO,MAAM,OAAQ,EAAA;AACzB,YAAA,IAAI,IAAS,KAAA,EAAA,IAAgB8G,aAAa,CAAA,IAAI,CAAG,EAAA;AAC/C,cAAA,KAAA,CAAM,MAAM,sBAAsB,CAAA;AAAA;AAEpC,YAAA,KAAA,CAAM,MAAM,gBAAgB,CAAA;AAAA;AAE9B,UAAA,KAAA,CAAM,GAAM9G,GAAAA,MAAAA;AAAA;AAGd,QAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,QAAA,IAAI,OAAO,EAAc,EAAA;AACvB,UAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAO,OAAA,IAAA;AAAA;AAGT,QAAO,OAAA,KAAA;AAAA,OACT;AAGA,MAAAiF,KAAAA,CAAK,qBAAwB,GAAA,SAAS,KAAO,EAAA;AAC3C,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAElB,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,UAAO,OAAA,IAAA;AAAA;AAGT,QAAI,IAAA,KAAA,CAAM,WAAW,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC5C,UAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,UAAO,OAAA,IAAA;AAAA;AAGT,QAAI,IAAA,CAAC,KAAM,CAAA,OAAA,IAAW,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC7C,UAAI,IAAA,IAAA,CAAK,4BAA6B,CAAA,KAAK,CAAG,EAAA;AAC5C,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAGd,QAAA,OACE,KAAK,8BAA+B,CAAA,KAAK,CACzC,IAAA,IAAA,CAAK,0BAA0B,KAAK,CAAA;AAAA,OAExC;AAMA,MAAAiF,KAAAA,CAAK,yBAA4B,GAAA,SAAS,KAAO,EAAA;AAC/C,QAAA,IAAI,SAASwB,UAAW,EAAA,SAAA;AACxB,QAAI,IAAA,IAAA,CAAK,uBAAwB,CAAA,KAAK,CAAG,EAAA;AAAA,aAAA,IAAW,SAAY,GAAA,IAAA,CAAK,yBAA0B,CAAA,KAAK,CAAG,EAAA;AACrG,UAAA,IAAI,cAAcC,cAAe,EAAA;AAAE,YAASA,MAAAA,GAAAA,cAAAA;AAAA;AAE5C,UAAA,IAAI1G,SAAQ,KAAM,CAAA,GAAA;AAClB,UAAA,OAAO,KAAM,CAAA,QAAA;AAAA,YAAS,CAAC,IAAM,EAAI;AAAA;AAAA,WAAa,EAAA;AAC5C,YACE,IAAA,KAAA,CAAM,SAAc,KAAA,EAAA,KACnB,YAAY,IAAK,CAAA,yBAAA,CAA0B,KAAK,CACjD,CAAA,EAAA;AACA,cAAA,IAAI,cAAc0G,cAAe,EAAA;AAAE,gBAASD,MAAAA,GAAAA,UAAAA;AAAA;AAC5C,cAAA;AAAA;AAEF,YAAA,KAAA,CAAM,MAAM,sCAAsC,CAAA;AAAA;AAEpD,UAAIzG,IAAAA,MAAAA,KAAU,MAAM,GAAK,EAAA;AAAE,YAAO,OAAA,MAAA;AAAA;AAElC,UAAA,OAAO,KAAM,CAAA,QAAA;AAAA,YAAS,CAAC,IAAM,EAAI;AAAA;AAAA,WAAa,EAAA;AAC5C,YAAI,IAAA,IAAA,CAAK,yBAA0B,CAAA,KAAK,CAAG,EAAA;AAAE,cAAA;AAAA;AAC7C,YAAA,KAAA,CAAM,MAAM,sCAAsC,CAAA;AAAA;AAEpD,UAAIA,IAAAA,MAAAA,KAAU,MAAM,GAAK,EAAA;AAAE,YAAO,OAAA,MAAA;AAAA;AAAO,SACpC,MAAA;AACL,UAAA,KAAA,CAAM,MAAM,sCAAsC,CAAA;AAAA;AAGpD,QAAS,WAAA;AACP,UAAI,IAAA,IAAA,CAAK,uBAAwB,CAAA,KAAK,CAAG,EAAA;AAAE,YAAA;AAAA;AAC3C,UAAY,SAAA,GAAA,IAAA,CAAK,0BAA0B,KAAK,CAAA;AAChD,UAAA,IAAI,CAAC,SAAW,EAAA;AAAE,YAAO,OAAA,MAAA;AAAA;AACzB,UAAA,IAAI,cAAc0G,cAAe,EAAA;AAAE,YAASA,MAAAA,GAAAA,cAAAA;AAAA;AAAe;AAC7D,OACF;AAGA,MAAAzB,KAAAA,CAAK,uBAA0B,GAAA,SAAS,KAAO,EAAA;AAC7C,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAI,IAAA,IAAA,CAAK,2BAA4B,CAAA,KAAK,CAAG,EAAA;AAC3C,UAAA,IAAI,OAAO,KAAM,CAAA,YAAA;AACjB,UAAA,IAAI,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAiB,IAAA,IAAA,CAAK,2BAA4B,CAAA,KAAK,CAAG,EAAA;AACtE,YAAA,IAAI,QAAQ,KAAM,CAAA,YAAA;AAClB,YAAA,IAAI,IAAS,KAAA,CAAA,CAAA,IAAM,KAAU,KAAA,CAAA,CAAA,IAAM,OAAO,KAAO,EAAA;AAC/C,cAAA,KAAA,CAAM,MAAM,uCAAuC,CAAA;AAAA;AAErD,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,QAAO,OAAA,KAAA;AAAA,OACT;AAGA,MAAAiF,KAAAA,CAAK,yBAA4B,GAAA,SAAS,KAAO,EAAA;AAC/C,QAAI,IAAA,IAAA,CAAK,2BAA4B,CAAA,KAAK,CAAG,EAAA;AAAE,UAAOwB,OAAAA,UAAAA;AAAA;AACtD,QAAA,OAAO,KAAK,gCAAiC,CAAA,KAAK,CAAK,IAAA,IAAA,CAAK,sBAAsB,KAAK,CAAA;AAAA,OACzF;AAGA,MAAAxB,KAAAA,CAAK,qBAAwB,GAAA,SAAS,KAAO,EAAA;AAC3C,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAA,IAAI,SAAS,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAY;AACnC,UAAI,IAAA,MAAA,GAAS,IAAK,CAAA,oBAAA,CAAqB,KAAK,CAAA;AAC5C,UAAA,IAAI,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAe,EAAA;AAC3B,YAAI,IAAA,MAAA,IAAU,WAAW0G,cAAe,EAAA;AACtC,cAAA,KAAA,CAAM,MAAM,6CAA6C,CAAA;AAAA;AAE3D,YAAO,OAAA,MAAA;AAAA;AAET,UAAA,KAAA,CAAM,GAAM1G,GAAAA,MAAAA;AAAA;AAEd,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAI,IAAA,QAAA,GAAW,IAAK,CAAA,8BAAA,CAA+B,KAAK,CAAA;AACxD,UAAA,IAAI,QAAU,EAAA;AACZ,YAAO,OAAA,QAAA;AAAA;AAET,UAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,QAAO,OAAA,IAAA;AAAA,OACT;AAGA,MAAAiF,KAAAA,CAAK,gCAAmC,GAAA,SAAS,KAAO,EAAA;AACtD,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAA,IAAI,KAAM,CAAA,QAAA;AAAA,UAAS,CAAC,IAAM,GAAI;AAAA;AAAA,SAAa,EAAA;AACzC,UAAA,IAAI,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAe,EAAA;AAC3B,YAAI,IAAA,MAAA,GAAS,IAAK,CAAA,qCAAA,CAAsC,KAAK,CAAA;AAC7D,YAAA,IAAI,KAAM,CAAA,GAAA;AAAA,cAAI;AAAA;AAAA,aAAe,EAAA;AAC3B,cAAO,OAAA,MAAA;AAAA;AACT,WACK,MAAA;AAEL,YAAA,KAAA,CAAM,MAAM,gBAAgB,CAAA;AAAA;AAE9B,UAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,QAAO,OAAA,IAAA;AAAA,OACT;AAGA,MAAAiF,KAAAA,CAAK,qCAAwC,GAAA,SAAS,KAAO,EAAA;AAC3D,QAAI,IAAA,MAAA,GAAS,IAAK,CAAA,kBAAA,CAAmB,KAAK,CAAA;AAC1C,QAAA,OAAO,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC9B,UAAA,IAAI,IAAK,CAAA,kBAAA,CAAmB,KAAK,CAAA,KAAMyB,cAAe,EAAA;AAAE,YAASA,MAAAA,GAAAA,cAAAA;AAAA;AAAe;AAElF,QAAO,OAAA,MAAA;AAAA,OACT;AAIA,MAAAzB,KAAAA,CAAK,kBAAqB,GAAA,SAAS,KAAO,EAAA;AACxC,QAAA,IAAI,KAAQ,GAAA,CAAA;AACZ,QAAO,OAAA,IAAA,CAAK,2BAA4B,CAAA,KAAK,CAAG,EAAA;AAAE,UAAA,KAAA,EAAA;AAAA;AAClD,QAAO,OAAA,KAAA,KAAU,IAAIwB,UAAYC,GAAAA,cAAAA;AAAA,OACnC;AAGA,MAAAzB,KAAAA,CAAK,2BAA8B,GAAA,SAAS,KAAO,EAAA;AACjD,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAA,IACE,KAAK,yBAA0B,CAAA,KAAK,KACpC,IAAK,CAAA,oCAAA,CAAqC,KAAK,CAC/C,EAAA;AACA,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,IAAI,KAAM,CAAA,GAAA;AAAA,YAAI;AAAA;AAAA,WAAe,EAAA;AAC3B,YAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AACZ,UAAO,OAAA,KAAA;AAAA;AAET,QAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,QAAI,IAAA,EAAA,GAAK,KAAK,EAAO,KAAA,KAAA,CAAM,WAAe+G,IAAAA,4CAAAA,CAA4C,EAAE,CAAG,EAAA;AAAE,UAAO,OAAA,KAAA;AAAA;AACpG,QAAIC,IAAAA,0BAAAA,CAA0B,EAAE,CAAG,EAAA;AAAE,UAAO,OAAA,KAAA;AAAA;AAC5C,QAAA,KAAA,CAAM,OAAQ,EAAA;AACd,QAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,QAAO,OAAA,IAAA;AAAA,OACT;AAGA,MAAA,SAASD,6CAA4C,EAAI,EAAA;AACvD,QACE,OAAA,EAAA,KAAO,MACP,EAAM,IAAA,EAAA,IAAgB,MAAM,EAC5B,IAAA,EAAA,IAAM,MAAgB,EAAM,IAAA,EAAA,IAC5B,OAAO,EACP,IAAA,EAAA,IAAM,MAAgB,EAAM,IAAA,EAAA,IAC5B,OAAO,EACP,IAAA,EAAA,KAAO,MACP,EAAO,KAAA,GAAA;AAAA;AAKX,MAAA,SAASC,2BAA0B,EAAI,EAAA;AACrC,QAAA,OACE,EAAO,KAAA,EAAA,IACP,EAAO,KAAA,EAAA,IACP,OAAO,EACP,IAAA,EAAA,KAAO,EACP,IAAA,EAAA,IAAM,EAAgB,IAAA,EAAA,IAAM,EAC5B,IAAA,EAAA,IAAM,OAAgB,EAAM,IAAA,GAAA;AAAA;AAKhC,MAAA/B,KAAAA,CAAK,oCAAuC,GAAA,SAAS,KAAO,EAAA;AAC1D,QAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,QAAIgC,IAAAA,6BAAAA,CAA6B,EAAE,CAAG,EAAA;AACpC,UAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAO,OAAA,IAAA;AAAA;AAET,QAAO,OAAA,KAAA;AAAA,OACT;AAGA,MAAA,SAASA,8BAA6B,EAAI,EAAA;AACxC,QACE,OAAA,EAAA,KAAO,MACP,EAAO,KAAA,EAAA,IACP,OAAO,EACP,IAAA,EAAA,KAAO,MACP,EAAO,KAAA,EAAA,IACP,OAAO,EACP,IAAA,EAAA,IAAM,MAAgB,EAAM,IAAA,EAAA,IAC5B,OAAO,EACP,IAAA,EAAA,KAAO,MACP,EAAO,KAAA,GAAA;AAAA;AAKX,MAAAhC,KAAAA,CAAK,4BAA+B,GAAA,SAAS,KAAO,EAAA;AAClD,QAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,QAAA,IAAIoB,eAAe,CAAA,EAAE,CAAK,IAAA,EAAA,KAAO,EAAc,EAAA;AAC7C,UAAA,KAAA,CAAM,eAAe,EAAK,GAAA,EAAA;AAC1B,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAO,OAAA,IAAA;AAAA;AAET,QAAO,OAAA,KAAA;AAAA,OACT;AAGA,MAAApB,KAAAA,CAAK,2BAA8B,GAAA,SAAS,KAAO,EAAA;AACjD,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAA,IAAI,IAAK,CAAA,wBAAA,CAAyB,KAAO,EAAA,CAAC,CAAG,EAAA;AAC3C,YAAO,OAAA,IAAA;AAAA;AAET,UAAA,IAAI,MAAM,OAAS,EAAA;AACjB,YAAA,KAAA,CAAM,MAAM,gBAAgB,CAAA;AAAA;AAE9B,UAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,QAAO,OAAA,KAAA;AAAA,OACT;AAGA,MAAAiF,KAAAA,CAAK,uBAA0B,GAAA,SAAS,KAAO,EAAA;AAC7C,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAA,IAAI,EAAK,GAAA,CAAA;AACT,QAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,QAAA,OAAOqG,eAAe,CAAA,EAAA,GAAK,KAAM,CAAA,OAAA,EAAS,CAAG,EAAA;AAC3C,UAAA,KAAA,CAAM,YAAe,GAAA,EAAA,GAAK,KAAM,CAAA,YAAA,IAAgB,EAAK,GAAA,EAAA,CAAA;AACrD,UAAA,KAAA,CAAM,OAAQ,EAAA;AAAA;AAEhB,QAAA,OAAO,MAAM,GAAQrG,KAAAA,MAAAA;AAAA,OACvB;AACA,MAAA,SAASqG,gBAAe,EAAI,EAAA;AAC1B,QAAO,OAAA,EAAA,IAAM,MAAgB,EAAM,IAAA,EAAA;AAAA;AAIrC,MAAApB,KAAAA,CAAK,mBAAsB,GAAA,SAAS,KAAO,EAAA;AACzC,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAA,IAAI,EAAK,GAAA,CAAA;AACT,QAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,QAAA,OAAOkH,WAAW,CAAA,EAAA,GAAK,KAAM,CAAA,OAAA,EAAS,CAAG,EAAA;AACvC,UAAA,KAAA,CAAM,YAAe,GAAA,EAAA,GAAK,KAAM,CAAA,YAAA,GAAeC,UAAS,EAAE,CAAA;AAC1D,UAAA,KAAA,CAAM,OAAQ,EAAA;AAAA;AAEhB,QAAA,OAAO,MAAM,GAAQnH,KAAAA,MAAAA;AAAA,OACvB;AACA,MAAA,SAASkH,YAAW,EAAI,EAAA;AACtB,QACG,OAAA,EAAA,IAAM,EAAgB,IAAA,EAAA,IAAM,EAC5B,IAAA,EAAA,IAAM,MAAgB,EAAM,IAAA,EAAA,IAC5B,EAAM,IAAA,EAAA,IAAgB,EAAM,IAAA,GAAA;AAAA;AAGjC,MAAA,SAASC,UAAS,EAAI,EAAA;AACpB,QAAI,IAAA,EAAA,IAAM,EAAgB,IAAA,EAAA,IAAM,EAAc,EAAA;AAC5C,UAAA,OAAO,MAAM,EAAK,GAAA,EAAA,CAAA;AAAA;AAEpB,QAAI,IAAA,EAAA,IAAM,EAAgB,IAAA,EAAA,IAAM,GAAc,EAAA;AAC5C,UAAA,OAAO,MAAM,EAAK,GAAA,EAAA,CAAA;AAAA;AAEpB,QAAA,OAAO,EAAK,GAAA,EAAA;AAAA;AAKd,MAAAlC,KAAAA,CAAK,mCAAsC,GAAA,SAAS,KAAO,EAAA;AACzD,QAAI,IAAA,IAAA,CAAK,oBAAqB,CAAA,KAAK,CAAG,EAAA;AACpC,UAAA,IAAI,KAAK,KAAM,CAAA,YAAA;AACf,UAAI,IAAA,IAAA,CAAK,oBAAqB,CAAA,KAAK,CAAG,EAAA;AACpC,YAAA,IAAI,KAAK,KAAM,CAAA,YAAA;AACf,YAAA,IAAI,EAAM,IAAA,CAAA,IAAK,IAAK,CAAA,oBAAA,CAAqB,KAAK,CAAG,EAAA;AAC/C,cAAA,KAAA,CAAM,YAAe,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,GAAK,IAAI,KAAM,CAAA,YAAA;AAAA,aACzC,MAAA;AACL,cAAM,KAAA,CAAA,YAAA,GAAe,KAAK,CAAI,GAAA,EAAA;AAAA;AAChC,WACK,MAAA;AACL,YAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AAAA;AAEvB,UAAO,OAAA,IAAA;AAAA;AAET,QAAO,OAAA,KAAA;AAAA,OACT;AAGA,MAAAA,KAAAA,CAAK,oBAAuB,GAAA,SAAS,KAAO,EAAA;AAC1C,QAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,QAAI6B,IAAAA,aAAAA,CAAa,EAAE,CAAG,EAAA;AACpB,UAAA,KAAA,CAAM,eAAe,EAAK,GAAA,EAAA;AAC1B,UAAA,KAAA,CAAM,OAAQ,EAAA;AACd,UAAO,OAAA,IAAA;AAAA;AAET,QAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,QAAO,OAAA,KAAA;AAAA,OACT;AACA,MAAA,SAASA,cAAa,EAAI,EAAA;AACxB,QAAO,OAAA,EAAA,IAAM,MAAgB,EAAM,IAAA,EAAA;AAAA;AAMrC,MAAA7B,KAAK,CAAA,wBAAA,GAA2B,SAAS,KAAA,EAAO,MAAQ,EAAA;AACtD,QAAA,IAAIjF,SAAQ,KAAM,CAAA,GAAA;AAClB,QAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,QAAA,KAAA,IAAS1B,EAAI,GAAA,CAAA,EAAGA,EAAI,GAAA,MAAA,EAAQ,EAAEA,EAAG,EAAA;AAC/B,UAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,UAAI,IAAA,CAAC4I,WAAW,CAAA,EAAE,CAAG,EAAA;AACnB,YAAA,KAAA,CAAM,GAAMlH,GAAAA,MAAAA;AACZ,YAAO,OAAA,KAAA;AAAA;AAET,UAAA,KAAA,CAAM,YAAe,GAAA,EAAA,GAAK,KAAM,CAAA,YAAA,GAAemH,UAAS,EAAE,CAAA;AAC1D,UAAA,KAAA,CAAM,OAAQ,EAAA;AAAA;AAEhB,QAAO,OAAA,IAAA;AAAA,OACT;AAMA,MAAIC,IAAAA,MAAAA,GAAQ,SAASA,MAAAA,CAAM,CAAG,EAAA;AAC5B,QAAA,IAAA,CAAK,OAAO,CAAE,CAAA,IAAA;AACd,QAAA,IAAA,CAAK,QAAQ,CAAE,CAAA,KAAA;AACf,QAAA,IAAA,CAAK,QAAQ,CAAE,CAAA,KAAA;AACf,QAAA,IAAA,CAAK,MAAM,CAAE,CAAA,GAAA;AACb,QAAI,IAAA,CAAA,CAAE,QAAQ,SACZ,EAAA;AAAE,UAAA,IAAA,CAAK,MAAM,IAAIrH,eAAAA,CAAe,GAAG,CAAE,CAAA,QAAA,EAAU,EAAE,MAAM,CAAA;AAAA;AACzD,QAAI,IAAA,CAAA,CAAE,QAAQ,MACZ,EAAA;AAAE,UAAA,IAAA,CAAK,KAAQ,GAAA,CAAC,CAAE,CAAA,KAAA,EAAO,EAAE,GAAG,CAAA;AAAA;AAAG,OACrC;AAIA,MAAA,IAAIsH,MAAK7F,OAAO,CAAA,SAAA;AAIhB,MAAA6F,GAAAA,CAAG,IAAO,GAAA,SAAS,6BAA+B,EAAA;AAChD,QAAA,IAAI,CAAC,6BAAiC,IAAA,IAAA,CAAK,IAAK,CAAA,OAAA,IAAW,KAAK,WAC9D,EAAA;AAAE,UAAA,IAAA,CAAK,iBAAiB,IAAK,CAAA,KAAA,EAAO,6BAAgC,GAAA,IAAA,CAAK,KAAK,OAAO,CAAA;AAAA;AACvF,QAAI,IAAA,IAAA,CAAK,QAAQ,OACf,EAAA;AAAE,UAAA,IAAA,CAAK,OAAQ,CAAA,OAAA,CAAQ,IAAID,MAAAA,CAAM,IAAI,CAAC,CAAA;AAAA;AAExC,QAAA,IAAA,CAAK,aAAa,IAAK,CAAA,GAAA;AACvB,QAAA,IAAA,CAAK,eAAe,IAAK,CAAA,KAAA;AACzB,QAAA,IAAA,CAAK,gBAAgB,IAAK,CAAA,MAAA;AAC1B,QAAA,IAAA,CAAK,kBAAkB,IAAK,CAAA,QAAA;AAC5B,QAAA,IAAA,CAAK,SAAU,EAAA;AAAA,OACjB;AAEA,MAAAC,GAAAA,CAAG,WAAW,WAAW;AACvB,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAO,OAAA,IAAID,OAAM,IAAI,CAAA;AAAA,OACvB;AAGA,MAAI,IAAA,OAAO,WAAW,WACpB,EAAA;AAAE,QAAAC,GAAG,CAAA,MAAA,CAAO,QAAQ,CAAA,GAAI,WAAW;AACjC,UAAA,IAAI,QAAW,GAAA,IAAA;AAEf,UAAO,OAAA;AAAA,YACL,MAAM,WAAY;AAChB,cAAI,IAAA,KAAA,GAAQ,SAAS,QAAS,EAAA;AAC9B,cAAO,OAAA;AAAA,gBACL,IAAA,EAAM,KAAM,CAAA,IAAA,KAAStI,QAAQ,CAAA,GAAA;AAAA,gBAC7B,KAAO,EAAA;AAAA,eACT;AAAA;AACF,WACF;AAAA,SACF;AAAA;AAQF,MAAAsI,GAAAA,CAAG,YAAY,WAAW;AACxB,QAAI,IAAA,UAAA,GAAa,KAAK,UAAW,EAAA;AACjC,QAAA,IAAI,CAAC,UAAA,IAAc,CAAC,UAAA,CAAW,aAAe,EAAA;AAAE,UAAA,IAAA,CAAK,SAAU,EAAA;AAAA;AAE/D,QAAA,IAAA,CAAK,QAAQ,IAAK,CAAA,GAAA;AAClB,QAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAAE,UAAK,IAAA,CAAA,QAAA,GAAW,KAAK,WAAY,EAAA;AAAA;AAC/D,QAAA,IAAI,IAAK,CAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,MAAQ,EAAA;AAAE,UAAO,OAAA,IAAA,CAAK,WAAYtI,CAAAA,QAAAA,CAAQ,GAAG,CAAA;AAAA;AAExE,QAAA,IAAI,WAAW,QAAU,EAAA;AAAE,UAAO,OAAA,UAAA,CAAW,SAAS,IAAI,CAAA;AAAA,SACrD,MAAA;AAAE,UAAK,IAAA,CAAA,SAAA,CAAU,IAAK,CAAA,iBAAA,EAAmB,CAAA;AAAA;AAAG,OACnD;AAEA,MAAAsI,GAAAA,CAAG,SAAY,GAAA,SAAShJ,KAAM,EAAA;AAG5B,QAAIE,IAAAA,kBAAAA,CAAkBF,OAAM,IAAK,CAAA,OAAA,CAAQ,eAAe,CAAC,CAAA,IAAKA,UAAS,EACrE,EAAA;AAAE,UAAA,OAAO,KAAK,QAAS,EAAA;AAAA;AAEzB,QAAO,OAAA,IAAA,CAAK,iBAAiBA,KAAI,CAAA;AAAA,OACnC;AAEA,MAAAgJ,GAAAA,CAAG,oBAAoB,WAAW;AAChC,QAAA,IAAIhJ,KAAO,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AACzC,QAAIA,IAAAA,KAAAA,IAAQ,KAAUA,IAAAA,KAAAA,IAAQ,KAAQ,EAAA;AAAE,UAAOA,OAAAA,KAAAA;AAAA;AAC/C,QAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,QAAA,OAAO,QAAQ,KAAU,IAAA,IAAA,IAAQ,QAASA,KAAQA,GAAAA,CAAAA,KAAAA,IAAQ,MAAM,IAAO,GAAA,QAAA;AAAA,OACzE;AAEA,MAAAgJ,GAAAA,CAAG,mBAAmB,WAAW;AAC/B,QAAA,IAAI,QAAW,GAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,IAAa,KAAK,WAAY,EAAA;AAC1D,QAAIrH,IAAAA,MAAAA,GAAQ,IAAK,CAAA,GAAA,EAAK,GAAM,GAAA,IAAA,CAAK,MAAM,OAAQ,CAAA,IAAA,EAAM,IAAK,CAAA,GAAA,IAAO,CAAC,CAAA;AAClE,QAAA,IAAI,QAAQ,CAAI,CAAA,EAAA;AAAE,UAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,GAAM,GAAA,CAAA,EAAG,sBAAsB,CAAA;AAAA;AACjE,QAAA,IAAA,CAAK,MAAM,GAAM,GAAA,CAAA;AACjB,QAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAC1B,UAAA,KAAA,IAAS,SAAa,GAAA,KAAA,CAAA,EAAS,GAAMA,GAAAA,MAAAA,EAAAA,CAAQ,SAAYb,GAAAA,cAAAA,CAAc,IAAK,CAAA,KAAA,EAAO,GAAK,EAAA,IAAA,CAAK,GAAG,CAAA,IAAK,CAAK,CAAA,IAAA;AACxG,YAAA,EAAE,IAAK,CAAA,OAAA;AACP,YAAA,GAAA,GAAM,KAAK,SAAY,GAAA,SAAA;AAAA;AACzB;AAEF,QAAI,IAAA,IAAA,CAAK,QAAQ,SACf,EAAA;AAAE,UAAA,IAAA,CAAK,OAAQ,CAAA,SAAA;AAAA,YAAU,IAAA;AAAA,YAAM,IAAK,CAAA,KAAA,CAAM,KAAMa,CAAAA,MAAAA,GAAQ,GAAG,GAAG,CAAA;AAAA,YAAGA,MAAAA;AAAA,YAAO,IAAK,CAAA,GAAA;AAAA,YACtD,QAAA;AAAA,YAAU,KAAK,WAAY;AAAA,WAAC;AAAA;AAAG,OAC1D;AAEA,MAAAqH,GAAAA,CAAG,eAAkB,GAAA,SAAS,SAAW,EAAA;AACvC,QAAA,IAAIrH,SAAQ,IAAK,CAAA,GAAA;AACjB,QAAA,IAAI,QAAW,GAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,IAAa,KAAK,WAAY,EAAA;AAC1D,QAAA,IAAI,KAAK,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,OAAO,SAAS,CAAA;AACpD,QAAO,OAAA,IAAA,CAAK,MAAM,IAAK,CAAA,KAAA,CAAM,UAAU,CAACd,UAAAA,CAAU,EAAE,CAAG,EAAA;AACrD,UAAA,EAAA,GAAK,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,EAAE,KAAK,GAAG,CAAA;AAAA;AAEvC,QAAI,IAAA,IAAA,CAAK,QAAQ,SACf,EAAA;AAAE,UAAA,IAAA,CAAK,OAAQ,CAAA,SAAA;AAAA,YAAU,KAAA;AAAA,YAAO,KAAK,KAAM,CAAA,KAAA,CAAMc,MAAQ,GAAA,SAAA,EAAW,KAAK,GAAG,CAAA;AAAA,YAAGA,MAAAA;AAAA,YAAO,IAAK,CAAA,GAAA;AAAA,YACpE,QAAA;AAAA,YAAU,KAAK,WAAY;AAAA,WAAC;AAAA;AAAG,OAC1D;AAKA,MAAAqH,GAAAA,CAAG,YAAY,WAAW;AACxB,QAAA,IAAA,EAAa,OAAA,IAAA,CAAK,GAAM,GAAA,IAAA,CAAK,MAAM,MAAQ,EAAA;AACzC,UAAA,IAAI,EAAK,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AACvC,UAAA,QAAQ,EAAI;AAAA,YACZ,KAAK,EAAA;AAAA,YAAI,KAAK,GAAA;AACZ,cAAA,EAAE,IAAK,CAAA,GAAA;AACP,cAAA;AAAA,YACF,KAAK,EAAA;AACH,cAAA,IAAI,KAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAM,GAAA,CAAC,MAAM,EAAI,EAAA;AAC9C,gBAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AACT,YACF,KAAK,EAAA;AAAA,YAAI,KAAK,IAAA;AAAA,YAAM,KAAK,IAAA;AACvB,cAAA,EAAE,IAAK,CAAA,GAAA;AACP,cAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAC1B,gBAAA,EAAE,IAAK,CAAA,OAAA;AACP,gBAAA,IAAA,CAAK,YAAY,IAAK,CAAA,GAAA;AAAA;AAExB,cAAA;AAAA,YACF,KAAK,EAAA;AACH,cAAA,QAAQ,KAAK,KAAM,CAAA,UAAA,CAAW,IAAK,CAAA,GAAA,GAAM,CAAC,CAAG;AAAA,gBAC7C,KAAK,EAAA;AACH,kBAAA,IAAA,CAAK,gBAAiB,EAAA;AACtB,kBAAA;AAAA,gBACF,KAAK,EAAA;AACH,kBAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA;AACtB,kBAAA;AAAA,gBACF;AACE,kBAAM,MAAA,IAAA;AAAA;AAER,cAAA;AAAA,YACF;AACE,cAAA,IAAI,EAAK,GAAA,CAAA,IAAK,EAAK,GAAA,EAAA,IAAM,EAAM,IAAA,IAAA,IAAQjI,mBAAmB,CAAA,IAAA,CAAK,MAAO,CAAA,YAAA,CAAa,EAAE,CAAC,CAAG,EAAA;AACvF,gBAAA,EAAE,IAAK,CAAA,GAAA;AAAA,eACF,MAAA;AACL,gBAAM,MAAA,IAAA;AAAA;AACR;AACF;AACF,OACF;AAOA,MAAAiI,GAAG,CAAA,WAAA,GAAc,SAAS,IAAA,EAAM,GAAK,EAAA;AACnC,QAAA,IAAA,CAAK,MAAM,IAAK,CAAA,GAAA;AAChB,QAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAAE,UAAK,IAAA,CAAA,MAAA,GAAS,KAAK,WAAY,EAAA;AAAA;AAC7D,QAAA,IAAI,WAAW,IAAK,CAAA,IAAA;AACpB,QAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AACZ,QAAA,IAAA,CAAK,KAAQ,GAAA,GAAA;AAEb,QAAA,IAAA,CAAK,cAAc,QAAQ,CAAA;AAAA,OAC7B;AAWA,MAAAA,GAAAA,CAAG,gBAAgB,WAAW;AAC5B,QAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,QAAI,IAAA,IAAA,IAAQ,EAAM,IAAA,IAAA,IAAQ,EAAI,EAAA;AAAE,UAAO,OAAA,IAAA,CAAK,WAAW,IAAI,CAAA;AAAA;AAC3D,QAAA,IAAI,QAAQ,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC9C,QAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,IAAe,KAAK,IAAS,KAAA,EAAA,IAAM,UAAU,EAAI,EAAA;AAChE,UAAA,IAAA,CAAK,GAAO,IAAA,CAAA;AACZ,UAAO,OAAA,IAAA,CAAK,WAAYtI,CAAAA,QAAAA,CAAQ,QAAQ,CAAA;AAAA,SACnC,MAAA;AACL,UAAA,EAAE,IAAK,CAAA,GAAA;AACP,UAAO,OAAA,IAAA,CAAK,WAAYA,CAAAA,QAAAA,CAAQ,GAAG,CAAA;AAAA;AACrC,OACF;AAEA,MAAAsI,GAAAA,CAAG,kBAAkB,WAAW;AAC9B,QAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,QAAA,IAAI,KAAK,WAAa,EAAA;AAAE,UAAA,EAAE,IAAK,CAAA,GAAA;AAAK,UAAA,OAAO,KAAK,UAAW,EAAA;AAAA;AAC3D,QAAA,IAAI,SAAS,EAAI,EAAA;AAAE,UAAA,OAAO,IAAK,CAAA,QAAA,CAAStI,QAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA;AACzD,QAAA,OAAO,IAAK,CAAA,QAAA,CAASA,QAAQ,CAAA,KAAA,EAAO,CAAC,CAAA;AAAA,OACvC;AAEA,MAAAsI,GAAAA,CAAG,yBAA4B,GAAA,SAAShJ,KAAM,EAAA;AAC5C,QAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,QAAA,IAAI,IAAO,GAAA,CAAA;AACX,QAAA,IAAI,SAAYA,GAAAA,KAAAA,KAAS,EAAKU,GAAAA,QAAAA,CAAQ,OAAOA,QAAQ,CAAA,MAAA;AAGrD,QAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,IAAe,KAAKV,KAAS,KAAA,EAAA,IAAM,SAAS,EAAI,EAAA;AAC/D,UAAE,EAAA,IAAA;AACF,UAAA,SAAA,GAAYU,QAAQ,CAAA,QAAA;AACpB,UAAA,IAAA,GAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAAA;AAG3C,QAAA,IAAI,SAAS,EAAI,EAAA;AAAE,UAAA,OAAO,IAAK,CAAA,QAAA,CAASA,QAAQ,CAAA,MAAA,EAAQ,OAAO,CAAC,CAAA;AAAA;AAChE,QAAO,OAAA,IAAA,CAAK,QAAS,CAAA,SAAA,EAAW,IAAI,CAAA;AAAA,OACtC;AAEA,MAAAsI,GAAAA,CAAG,kBAAqB,GAAA,SAAShJ,KAAM,EAAA;AACrC,QAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,QAAA,IAAI,SAASA,KAAM,EAAA;AACjB,UAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAAI,EAAA;AAClC,YAAA,IAAI,QAAQ,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC9C,YAAA,IAAI,UAAU,EAAI,EAAA;AAAE,cAAA,OAAO,IAAK,CAAA,QAAA,CAASU,QAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA;AAAE;AAE9D,UAAO,OAAA,IAAA,CAAK,SAASV,KAAS,KAAA,GAAA,GAAMU,SAAQ,SAAYA,GAAAA,QAAAA,CAAQ,YAAY,CAAC,CAAA;AAAA;AAE/E,QAAA,IAAI,SAAS,EAAI,EAAA;AAAE,UAAA,OAAO,IAAK,CAAA,QAAA,CAASA,QAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA;AACzD,QAAO,OAAA,IAAA,CAAK,SAASV,KAAS,KAAA,GAAA,GAAMU,SAAQ,SAAYA,GAAAA,QAAAA,CAAQ,YAAY,CAAC,CAAA;AAAA,OAC/E;AAEA,MAAAsI,GAAAA,CAAG,kBAAkB,WAAW;AAC9B,QAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,QAAA,IAAI,SAAS,EAAI,EAAA;AAAE,UAAA,OAAO,IAAK,CAAA,QAAA,CAAStI,QAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA;AACzD,QAAA,OAAO,IAAK,CAAA,QAAA,CAASA,QAAQ,CAAA,UAAA,EAAY,CAAC,CAAA;AAAA,OAC5C;AAEA,MAAAsI,GAAAA,CAAG,kBAAqB,GAAA,SAAShJ,KAAM,EAAA;AACrC,QAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,QAAA,IAAI,SAASA,KAAM,EAAA;AACjB,UAAI,IAAA,IAAA,KAAS,EAAM,IAAA,CAAC,IAAK,CAAA,QAAA,IAAY,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,GAAM,GAAA,CAAC,CAAM,KAAA,EAAA,KACxE,KAAK,UAAe,KAAA,CAAA,IAAKW,UAAU,CAAA,IAAA,CAAK,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,IAAA,CAAK,UAAY,EAAA,IAAA,CAAK,GAAG,CAAC,CAAI,CAAA,EAAA;AAE1F,YAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA;AACtB,YAAA,IAAA,CAAK,SAAU,EAAA;AACf,YAAA,OAAO,KAAK,SAAU,EAAA;AAAA;AAExB,UAAA,OAAO,IAAK,CAAA,QAAA,CAASD,QAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA;AAExC,QAAA,IAAI,SAAS,EAAI,EAAA;AAAE,UAAA,OAAO,IAAK,CAAA,QAAA,CAASA,QAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA;AACzD,QAAA,OAAO,IAAK,CAAA,QAAA,CAASA,QAAQ,CAAA,OAAA,EAAS,CAAC,CAAA;AAAA,OACzC;AAEA,MAAAsI,GAAAA,CAAG,eAAkB,GAAA,SAAShJ,KAAM,EAAA;AAClC,QAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,QAAA,IAAI,IAAO,GAAA,CAAA;AACX,QAAA,IAAI,SAASA,KAAM,EAAA;AACjB,UAAOA,IAAAA,GAAAA,KAAAA,KAAS,EAAM,IAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAM,GAAA,CAAC,CAAM,KAAA,EAAA,GAAK,CAAI,GAAA,CAAA;AACvE,UAAA,IAAI,KAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAM,GAAA,IAAI,MAAM,EAAI,EAAA;AAAE,YAAA,OAAO,IAAK,CAAA,QAAA,CAASU,QAAQ,CAAA,MAAA,EAAQ,OAAO,CAAC,CAAA;AAAA;AAClG,UAAA,OAAO,IAAK,CAAA,QAAA,CAASA,QAAQ,CAAA,QAAA,EAAU,IAAI,CAAA;AAAA;AAE7C,QAAI,IAAA,IAAA,KAAS,MAAMV,KAAS,KAAA,EAAA,IAAM,CAAC,IAAK,CAAA,QAAA,IAAY,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA,KAAM,MACxF,IAAK,CAAA,KAAA,CAAM,WAAW,IAAK,CAAA,GAAA,GAAM,CAAC,CAAA,KAAM,EAAI,EAAA;AAE9C,UAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA;AACtB,UAAA,IAAA,CAAK,SAAU,EAAA;AACf,UAAA,OAAO,KAAK,SAAU,EAAA;AAAA;AAExB,QAAA,IAAI,SAAS,EAAI,EAAA;AAAE,UAAO,IAAA,GAAA,CAAA;AAAA;AAC1B,QAAA,OAAO,IAAK,CAAA,QAAA,CAASU,QAAQ,CAAA,UAAA,EAAY,IAAI,CAAA;AAAA,OAC/C;AAEA,MAAAsI,GAAAA,CAAG,iBAAoB,GAAA,SAAShJ,KAAM,EAAA;AACpC,QAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,QAAA,IAAI,SAAS,EAAI,EAAA;AAAE,UAAA,OAAO,IAAK,CAAA,QAAA,CAASU,QAAQ,CAAA,QAAA,EAAU,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,GAAM,GAAA,CAAC,CAAM,KAAA,EAAA,GAAK,IAAI,CAAC,CAAA;AAAA;AAC5G,QAAA,IAAIV,UAAS,EAAM,IAAA,IAAA,KAAS,MAAM,IAAK,CAAA,OAAA,CAAQ,eAAe,CAAG,EAAA;AAC/D,UAAA,IAAA,CAAK,GAAO,IAAA,CAAA;AACZ,UAAO,OAAA,IAAA,CAAK,WAAYU,CAAAA,QAAAA,CAAQ,KAAK,CAAA;AAAA;AAEvC,QAAO,OAAA,IAAA,CAAK,SAASV,KAAS,KAAA,EAAA,GAAKU,SAAQ,EAAKA,GAAAA,QAAAA,CAAQ,QAAQ,CAAC,CAAA;AAAA,OACnE;AAEA,MAAAsI,GAAAA,CAAG,qBAAqB,WAAW;AACjC,QAAI3E,IAAAA,YAAAA,GAAc,KAAK,OAAQ,CAAA,WAAA;AAC/B,QAAA,IAAIA,gBAAe,EAAI,EAAA;AACrB,UAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,UAAA,IAAI,SAAS,EAAI,EAAA;AACf,YAAA,IAAI,QAAQ,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC9C,YAAI,IAAA,KAAA,GAAQ,EAAM,IAAA,KAAA,GAAQ,EAAI,EAAA;AAAE,cAAA,OAAO,IAAK,CAAA,QAAA,CAAS3D,QAAQ,CAAA,WAAA,EAAa,CAAC,CAAA;AAAA;AAAE;AAE/E,UAAA,IAAI,SAAS,EAAI,EAAA;AACf,YAAA,IAAI2D,gBAAe,EAAI,EAAA;AACrB,cAAA,IAAI,UAAU,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAChD,cAAA,IAAI,YAAY,EAAI,EAAA;AAAE,gBAAA,OAAO,IAAK,CAAA,QAAA,CAAS3D,QAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA;AAAE;AAEhE,YAAA,OAAO,IAAK,CAAA,QAAA,CAASA,QAAQ,CAAA,QAAA,EAAU,CAAC,CAAA;AAAA;AAC1C;AAEF,QAAA,OAAO,IAAK,CAAA,QAAA,CAASA,QAAQ,CAAA,QAAA,EAAU,CAAC,CAAA;AAAA,OAC1C;AAEA,MAAAsI,GAAAA,CAAG,uBAAuB,WAAW;AACnC,QAAI3E,IAAAA,YAAAA,GAAc,KAAK,OAAQ,CAAA,WAAA;AAC/B,QAAA,IAAIrE,KAAO,GAAA,EAAA;AACX,QAAA,IAAIqE,gBAAe,EAAI,EAAA;AACrB,UAAA,EAAE,IAAK,CAAA,GAAA;AACP,UAAArE,KAAAA,GAAO,KAAK,iBAAkB,EAAA;AAC9B,UAAA,IAAIE,kBAAkBF,CAAAA,KAAAA,EAAM,IAAI,CAAA,IAAKA,UAAS,EAAc,EAAA;AAC1D,YAAA,OAAO,KAAK,WAAYU,CAAAA,QAAAA,CAAQ,SAAW,EAAA,IAAA,CAAK,WAAW,CAAA;AAAA;AAC7D;AAGF,QAAA,IAAA,CAAK,MAAM,IAAK,CAAA,GAAA,EAAK,2BAA2BY,kBAAkBtB,CAAAA,KAAI,IAAI,GAAG,CAAA;AAAA,OAC/E;AAEA,MAAAgJ,GAAAA,CAAG,gBAAmB,GAAA,SAAShJ,KAAM,EAAA;AACnC,QAAA,QAAQA,KAAM;AAAA;AAAA;AAAA,UAGd,KAAK,EAAA;AACH,YAAA,OAAO,KAAK,aAAc,EAAA;AAAA;AAAA,UAG5B,KAAK,EAAA;AAAI,YAAA,EAAE,IAAK,CAAA,GAAA;AAAK,YAAO,OAAA,IAAA,CAAK,WAAYU,CAAAA,QAAAA,CAAQ,MAAM,CAAA;AAAA,UAC3D,KAAK,EAAA;AAAI,YAAA,EAAE,IAAK,CAAA,GAAA;AAAK,YAAO,OAAA,IAAA,CAAK,WAAYA,CAAAA,QAAAA,CAAQ,MAAM,CAAA;AAAA,UAC3D,KAAK,EAAA;AAAI,YAAA,EAAE,IAAK,CAAA,GAAA;AAAK,YAAO,OAAA,IAAA,CAAK,WAAYA,CAAAA,QAAAA,CAAQ,IAAI,CAAA;AAAA,UACzD,KAAK,EAAA;AAAI,YAAA,EAAE,IAAK,CAAA,GAAA;AAAK,YAAO,OAAA,IAAA,CAAK,WAAYA,CAAAA,QAAAA,CAAQ,KAAK,CAAA;AAAA,UAC1D,KAAK,EAAA;AAAI,YAAA,EAAE,IAAK,CAAA,GAAA;AAAK,YAAO,OAAA,IAAA,CAAK,WAAYA,CAAAA,QAAAA,CAAQ,QAAQ,CAAA;AAAA,UAC7D,KAAK,EAAA;AAAI,YAAA,EAAE,IAAK,CAAA,GAAA;AAAK,YAAO,OAAA,IAAA,CAAK,WAAYA,CAAAA,QAAAA,CAAQ,QAAQ,CAAA;AAAA,UAC7D,KAAK,GAAA;AAAK,YAAA,EAAE,IAAK,CAAA,GAAA;AAAK,YAAO,OAAA,IAAA,CAAK,WAAYA,CAAAA,QAAAA,CAAQ,MAAM,CAAA;AAAA,UAC5D,KAAK,GAAA;AAAK,YAAA,EAAE,IAAK,CAAA,GAAA;AAAK,YAAO,OAAA,IAAA,CAAK,WAAYA,CAAAA,QAAAA,CAAQ,MAAM,CAAA;AAAA,UAC5D,KAAK,EAAA;AAAI,YAAA,EAAE,IAAK,CAAA,GAAA;AAAK,YAAO,OAAA,IAAA,CAAK,WAAYA,CAAAA,QAAAA,CAAQ,KAAK,CAAA;AAAA,UAE1D,KAAK,EAAA;AACH,YAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,GAAc,CAAG,EAAA;AAAE,cAAA;AAAA;AACpC,YAAA,EAAE,IAAK,CAAA,GAAA;AACP,YAAO,OAAA,IAAA,CAAK,WAAYA,CAAAA,QAAAA,CAAQ,SAAS,CAAA;AAAA,UAE3C,KAAK,EAAA;AACH,YAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,YAAI,IAAA,IAAA,KAAS,GAAO,IAAA,IAAA,KAAS,EAAI,EAAA;AAAE,cAAO,OAAA,IAAA,CAAK,gBAAgB,EAAE,CAAA;AAAA;AACjE,YAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,cAAI,IAAA,IAAA,KAAS,GAAO,IAAA,IAAA,KAAS,EAAI,EAAA;AAAE,gBAAO,OAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA;AAAA;AAChE,cAAI,IAAA,IAAA,KAAS,EAAM,IAAA,IAAA,KAAS,EAAI,EAAA;AAAE,gBAAO,OAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA;AAAA;AAAE;AACnE;AAAA;AAAA,UAIF,KAAK,EAAA;AAAA,UAAI,KAAK,EAAA;AAAA,UAAI,KAAK,EAAA;AAAA,UAAI,KAAK,EAAA;AAAA,UAAI,KAAK,EAAA;AAAA,UAAI,KAAK,EAAA;AAAA,UAAI,KAAK,EAAA;AAAA,UAAI,KAAK,EAAA;AAAA,UAAI,KAAK,EAAA;AAC3E,YAAO,OAAA,IAAA,CAAK,WAAW,KAAK,CAAA;AAAA;AAAA,UAG9B,KAAK,EAAA;AAAA,UAAI,KAAK,EAAA;AACZ,YAAO,OAAA,IAAA,CAAK,WAAWV,KAAI,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAM7B,KAAK,EAAA;AACH,YAAA,OAAO,KAAK,eAAgB,EAAA;AAAA,UAE9B,KAAK,EAAA;AAAA,UAAI,KAAK,EAAA;AACZ,YAAO,OAAA,IAAA,CAAK,0BAA0BA,KAAI,CAAA;AAAA,UAE5C,KAAK,GAAA;AAAA,UAAK,KAAK,EAAA;AACb,YAAO,OAAA,IAAA,CAAK,mBAAmBA,KAAI,CAAA;AAAA,UAErC,KAAK,EAAA;AACH,YAAA,OAAO,KAAK,eAAgB,EAAA;AAAA,UAE9B,KAAK,EAAA;AAAA,UAAI,KAAK,EAAA;AACZ,YAAO,OAAA,IAAA,CAAK,mBAAmBA,KAAI,CAAA;AAAA,UAErC,KAAK,EAAA;AAAA,UAAI,KAAK,EAAA;AACZ,YAAO,OAAA,IAAA,CAAK,gBAAgBA,KAAI,CAAA;AAAA,UAElC,KAAK,EAAA;AAAA,UAAI,KAAK,EAAA;AACZ,YAAO,OAAA,IAAA,CAAK,kBAAkBA,KAAI,CAAA;AAAA,UAEpC,KAAK,EAAA;AACH,YAAA,OAAO,KAAK,kBAAmB,EAAA;AAAA,UAEjC,KAAK,GAAA;AACH,YAAA,OAAO,IAAK,CAAA,QAAA,CAASU,QAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA,UAExC,KAAK,EAAA;AACH,YAAA,OAAO,KAAK,oBAAqB,EAAA;AAAA;AAGnC,QAAA,IAAA,CAAK,MAAM,IAAK,CAAA,GAAA,EAAK,2BAA2BY,kBAAkBtB,CAAAA,KAAI,IAAI,GAAG,CAAA;AAAA,OAC/E;AAEA,MAAAgJ,GAAG,CAAA,QAAA,GAAW,SAAS,IAAA,EAAM,IAAM,EAAA;AACjC,QAAI,IAAA,GAAA,GAAM,KAAK,KAAM,CAAA,KAAA,CAAM,KAAK,GAAK,EAAA,IAAA,CAAK,MAAM,IAAI,CAAA;AACpD,QAAA,IAAA,CAAK,GAAO,IAAA,IAAA;AACZ,QAAO,OAAA,IAAA,CAAK,WAAY,CAAA,IAAA,EAAM,GAAG,CAAA;AAAA,OACnC;AAEA,MAAAA,GAAAA,CAAG,aAAa,WAAW;AACzB,QAAI,IAAA,OAAA,EAAS,OAASrH,EAAAA,MAAAA,GAAQ,IAAK,CAAA,GAAA;AACnC,QAAS,WAAA;AACP,UAAA,IAAI,IAAK,CAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,MAAQ,EAAA;AAAE,YAAK,IAAA,CAAA,KAAA,CAAMA,QAAO,iCAAiC,CAAA;AAAA;AACxF,UAAA,IAAI,EAAK,GAAA,IAAA,CAAK,KAAM,CAAA,MAAA,CAAO,KAAK,GAAG,CAAA;AACnC,UAAIhB,IAAAA,UAAAA,CAAU,IAAK,CAAA,EAAE,CAAG,EAAA;AAAE,YAAK,IAAA,CAAA,KAAA,CAAMgB,QAAO,iCAAiC,CAAA;AAAA;AAC7E,UAAA,IAAI,CAAC,OAAS,EAAA;AACZ,YAAA,IAAI,OAAO,GAAK,EAAA;AAAE,cAAU,OAAA,GAAA,IAAA;AAAA,aAAM,MAAA,IACzB,EAAO,KAAA,GAAA,IAAO,OAAS,EAAA;AAAE,cAAU,OAAA,GAAA,KAAA;AAAA,aACnC,MAAA,IAAA,EAAA,KAAO,GAAO,IAAA,CAAC,OAAS,EAAA;AAAE,cAAA;AAAA;AACnC,YAAA,OAAA,GAAU,EAAO,KAAA,IAAA;AAAA,WACZ,MAAA;AAAE,YAAU,OAAA,GAAA,KAAA;AAAA;AACnB,UAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AAET,QAAA,IAAI,UAAU,IAAK,CAAA,KAAA,CAAM,KAAMA,CAAAA,MAAAA,EAAO,KAAK,GAAG,CAAA;AAC9C,QAAA,EAAE,IAAK,CAAA,GAAA;AACP,QAAA,IAAI,aAAa,IAAK,CAAA,GAAA;AACtB,QAAI,IAAA,KAAA,GAAQ,KAAK,SAAU,EAAA;AAC3B,QAAA,IAAI,KAAK,WAAa,EAAA;AAAE,UAAA,IAAA,CAAK,WAAW,UAAU,CAAA;AAAA;AAGlD,QAAA,IAAI,QAAQ,IAAK,CAAA,WAAA,KAAgB,KAAK,WAAc,GAAA,IAAIsF,uBAAsB,IAAI,CAAA,CAAA;AAClF,QAAM,KAAA,CAAA,KAAA,CAAMtF,MAAO,EAAA,OAAA,EAAS,KAAK,CAAA;AACjC,QAAA,IAAA,CAAK,oBAAoB,KAAK,CAAA;AAC9B,QAAA,IAAA,CAAK,sBAAsB,KAAK,CAAA;AAGhC,QAAA,IAAI4C,MAAQ,GAAA,IAAA;AACZ,QAAI,IAAA;AACF,UAAAA,MAAQ,GAAA,IAAI,MAAO,CAAA,OAAA,EAAS,KAAK,CAAA;AAAA,iBAC1B,CAAG,EAAA;AAAA;AAKZ,QAAO,OAAA,IAAA,CAAK,YAAY7D,QAAQ,CAAA,MAAA,EAAQ,EAAC,OAAkB,EAAA,KAAA,EAAc,KAAO6D,EAAAA,MAAAA,EAAM,CAAA;AAAA,OACxF;AAMA,MAAAyE,GAAG,CAAA,OAAA,GAAU,SAAS,KAAA,EAAO,KAAK,8BAAgC,EAAA;AAEhE,QAAA,IAAI,eAAkB,GAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,MAAM,GAAQ,KAAA,KAAA,CAAA;AAKhE,QAAA,IAAI,8BAA8B,8BAAkC,IAAA,IAAA,CAAK,MAAM,UAAW,CAAA,IAAA,CAAK,GAAG,CAAM,KAAA,EAAA;AAExG,QAAA,IAAIrH,MAAQ,GAAA,IAAA,CAAK,GAAK,EAAA,KAAA,GAAQ,GAAG,QAAW,GAAA,CAAA;AAC5C,QAAA,KAAA,IAAS1B,EAAI,GAAA,CAAA,EAAG,CAAI,GAAA,GAAA,IAAO,IAAO,GAAA,QAAA,GAAW,GAAKA,EAAAA,EAAAA,GAAI,CAAG,EAAA,EAAEA,EAAG,EAAA,EAAE,KAAK,GAAK,EAAA;AACxE,UAAA,IAAID,QAAO,IAAK,CAAA,KAAA,CAAM,WAAW,IAAK,CAAA,GAAG,GAAG,GAAO,GAAA,KAAA,CAAA;AAEnD,UAAI,IAAA,eAAA,IAAmBA,UAAS,EAAI,EAAA;AAClC,YAAA,IAAI,2BAA6B,EAAA;AAAE,cAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,GAAA,EAAK,mEAAmE,CAAA;AAAA;AACtI,YAAA,IAAI,aAAa,EAAI,EAAA;AAAE,cAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,GAAA,EAAK,kDAAkD,CAAA;AAAA;AACzG,YAAA,IAAIC,OAAM,CAAG,EAAA;AAAE,cAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,GAAA,EAAK,yDAAyD,CAAA;AAAA;AACxG,YAAWD,QAAAA,GAAAA,KAAAA;AACX,YAAA;AAAA;AAGF,UAAA,IAAIA,SAAQ,EAAI,EAAA;AAAE,YAAA,GAAA,GAAMA,QAAO,EAAK,GAAA,EAAA;AAAA,WAAI,MAAA,IAC/BA,SAAQ,EAAI,EAAA;AAAE,YAAA,GAAA,GAAMA,QAAO,EAAK,GAAA,EAAA;AAAA,WAChCA,MAAAA,IAAAA,KAAAA,IAAQ,EAAMA,IAAAA,KAAAA,IAAQ,EAAI,EAAA;AAAE,YAAA,GAAA,GAAMA,KAAO,GAAA,EAAA;AAAA,WAC7C,MAAA;AAAE,YAAM,GAAA,GAAA,QAAA;AAAA;AACb,UAAA,IAAI,OAAO,KAAO,EAAA;AAAE,YAAA;AAAA;AACpB,UAAWA,QAAAA,GAAAA,KAAAA;AACX,UAAA,KAAA,GAAQ,QAAQ,KAAQ,GAAA,GAAA;AAAA;AAG1B,QAAI,IAAA,eAAA,IAAmB,aAAa,EAAI,EAAA;AAAE,UAAA,IAAA,CAAK,gBAAiB,CAAA,IAAA,CAAK,GAAM,GAAA,CAAA,EAAG,wDAAwD,CAAA;AAAA;AACtI,QAAI,IAAA,IAAA,CAAK,QAAQ2B,MAAS,IAAA,GAAA,IAAO,QAAQ,IAAK,CAAA,GAAA,GAAMA,WAAU,GAAK,EAAA;AAAE,UAAO,OAAA,IAAA;AAAA;AAE5E,QAAO,OAAA,KAAA;AAAA,OACT;AAEA,MAASsH,SAAAA,eAAAA,CAAe,KAAK,2BAA6B,EAAA;AACxD,QAAA,IAAI,2BAA6B,EAAA;AAC/B,UAAO,OAAA,QAAA,CAAS,KAAK,CAAC,CAAA;AAAA;AAIxB,QAAA,OAAO,UAAW,CAAA,GAAA,CAAI,OAAQ,CAAA,IAAA,EAAM,EAAE,CAAC,CAAA;AAAA;AAGzC,MAAA,SAASC,gBAAe,GAAK,EAAA;AAC3B,QAAI,IAAA,OAAO,WAAW,UAAY,EAAA;AAChC,UAAO,OAAA,IAAA;AAAA;AAIT,QAAA,OAAO,MAAO,CAAA,GAAA,CAAI,OAAQ,CAAA,IAAA,EAAM,EAAE,CAAC,CAAA;AAAA;AAGrC,MAAAF,GAAAA,CAAG,eAAkB,GAAA,SAAS,KAAO,EAAA;AACnC,QAAA,IAAIrH,SAAQ,IAAK,CAAA,GAAA;AACjB,QAAA,IAAA,CAAK,GAAO,IAAA,CAAA;AACZ,QAAI,IAAA,GAAA,GAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,CAAA;AAC5B,QAAA,IAAI,OAAO,IAAM,EAAA;AAAE,UAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,KAAQ,GAAA,CAAA,EAAG,8BAA8B,KAAK,CAAA;AAAA;AACjF,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAAM,IAAA,IAAA,CAAK,MAAM,UAAW,CAAA,IAAA,CAAK,GAAG,CAAA,KAAM,GAAK,EAAA;AAC7E,UAAA,GAAA,GAAMuH,gBAAe,IAAK,CAAA,KAAA,CAAM,MAAMvH,MAAO,EAAA,IAAA,CAAK,GAAG,CAAC,CAAA;AACtD,UAAA,EAAE,IAAK,CAAA,GAAA;AAAA,SACEzB,MAAAA,IAAAA,kBAAAA,CAAkB,IAAK,CAAA,iBAAA,EAAmB,CAAG,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,GAAA,EAAK,kCAAkC,CAAA;AAAA;AACjH,QAAA,OAAO,IAAK,CAAA,WAAA,CAAYQ,QAAQ,CAAA,GAAA,EAAK,GAAG,CAAA;AAAA,OAC1C;AAIA,MAAAsI,GAAAA,CAAG,UAAa,GAAA,SAAS,aAAe,EAAA;AACtC,QAAA,IAAIrH,SAAQ,IAAK,CAAA,GAAA;AACjB,QAAI,IAAA,CAAC,iBAAiB,IAAK,CAAA,OAAA,CAAQ,IAAI,KAAW,CAAA,EAAA,IAAI,MAAM,IAAM,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAMA,QAAO,gBAAgB,CAAA;AAAA;AACtG,QAAI,IAAA,KAAA,GAAQ,KAAK,GAAMA,GAAAA,MAAAA,IAAS,KAAK,IAAK,CAAA,KAAA,CAAM,UAAWA,CAAAA,MAAK,CAAM,KAAA,EAAA;AACtE,QAAI,IAAA,KAAA,IAAS,KAAK,MAAQ,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAMA,QAAO,gBAAgB,CAAA;AAAA;AAC9D,QAAA,IAAI,IAAO,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AACzC,QAAI,IAAA,CAAC,SAAS,CAAC,aAAA,IAAiB,KAAK,OAAQ,CAAA,WAAA,IAAe,EAAM,IAAA,IAAA,KAAS,GAAK,EAAA;AAC9E,UAAI,IAAA,KAAA,GAAQuH,gBAAe,IAAK,CAAA,KAAA,CAAM,MAAMvH,MAAO,EAAA,IAAA,CAAK,GAAG,CAAC,CAAA;AAC5D,UAAA,EAAE,IAAK,CAAA,GAAA;AACP,UAAA,IAAIzB,kBAAkB,CAAA,IAAA,CAAK,iBAAkB,EAAC,CAAG,EAAA;AAAE,YAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,GAAA,EAAK,kCAAkC,CAAA;AAAA;AAC1G,UAAA,OAAO,IAAK,CAAA,WAAA,CAAYQ,QAAQ,CAAA,GAAA,EAAK,KAAK,CAAA;AAAA;AAE5C,QAAI,IAAA,KAAA,IAAS,MAAO,CAAA,IAAA,CAAK,IAAK,CAAA,KAAA,CAAM,MAAMiB,MAAO,EAAA,IAAA,CAAK,GAAG,CAAC,CAAG,EAAA;AAAE,UAAQ,KAAA,GAAA,KAAA;AAAA;AACvE,QAAI,IAAA,IAAA,KAAS,EAAM,IAAA,CAAC,KAAO,EAAA;AACzB,UAAA,EAAE,IAAK,CAAA,GAAA;AACP,UAAA,IAAA,CAAK,QAAQ,EAAE,CAAA;AACf,UAAA,IAAA,GAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,GAAG,CAAA;AAAA;AAEvC,QAAA,IAAA,CAAK,IAAS,KAAA,EAAA,IAAM,IAAS,KAAA,GAAA,KAAQ,CAAC,KAAO,EAAA;AAC3C,UAAA,IAAA,GAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,EAAE,KAAK,GAAG,CAAA;AACvC,UAAI,IAAA,IAAA,KAAS,EAAM,IAAA,IAAA,KAAS,EAAI,EAAA;AAAE,YAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AACzC,UAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,EAAE,CAAA,KAAM,IAAM,EAAA;AAAE,YAAK,IAAA,CAAA,KAAA,CAAMA,QAAO,gBAAgB,CAAA;AAAA;AAAG;AAExE,QAAA,IAAIzB,kBAAkB,CAAA,IAAA,CAAK,iBAAkB,EAAC,CAAG,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,GAAA,EAAK,kCAAkC,CAAA;AAAA;AAE1G,QAAI,IAAA,GAAA,GAAM+I,gBAAe,IAAK,CAAA,KAAA,CAAM,MAAMtH,MAAO,EAAA,IAAA,CAAK,GAAG,CAAA,EAAG,KAAK,CAAA;AACjE,QAAA,OAAO,IAAK,CAAA,WAAA,CAAYjB,QAAQ,CAAA,GAAA,EAAK,GAAG,CAAA;AAAA,OAC1C;AAIA,MAAAsI,GAAAA,CAAG,gBAAgB,WAAW;AAC5B,QAAA,IAAI,KAAK,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,GAAG,CAAGhJ,EAAAA,KAAAA;AAE1C,QAAA,IAAI,OAAO,GAAK,EAAA;AACd,UAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,GAAc,CAAG,EAAA;AAAE,YAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACpD,UAAI,IAAA,OAAA,GAAU,EAAE,IAAK,CAAA,GAAA;AACrB,UAAAA,KAAAA,GAAO,IAAK,CAAA,WAAA,CAAY,IAAK,CAAA,KAAA,CAAM,OAAQ,CAAA,GAAA,EAAK,IAAK,CAAA,GAAG,CAAI,GAAA,IAAA,CAAK,GAAG,CAAA;AACpE,UAAA,EAAE,IAAK,CAAA,GAAA;AACP,UAAA,IAAIA,QAAO,OAAU,EAAA;AAAE,YAAK,IAAA,CAAA,kBAAA,CAAmB,SAAS,0BAA0B,CAAA;AAAA;AAAG,SAChF,MAAA;AACL,UAAAA,KAAAA,GAAO,IAAK,CAAA,WAAA,CAAY,CAAC,CAAA;AAAA;AAE3B,QAAOA,OAAAA,KAAAA;AAAA,OACT;AAEA,MAAAgJ,GAAAA,CAAG,UAAa,GAAA,SAAS,KAAO,EAAA;AAC9B,QAAA,IAAI,GAAM,GAAA,EAAA,EAAI,UAAa,GAAA,EAAE,IAAK,CAAA,GAAA;AAClC,QAAS,WAAA;AACP,UAAA,IAAI,IAAK,CAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,MAAQ,EAAA;AAAE,YAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,8BAA8B,CAAA;AAAA;AAC1F,UAAA,IAAI,EAAK,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AACvC,UAAA,IAAI,OAAO,KAAO,EAAA;AAAE,YAAA;AAAA;AACpB,UAAA,IAAI,OAAO,EAAI,EAAA;AACb,YAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAC5C,YAAO,GAAA,IAAA,IAAA,CAAK,gBAAgB,KAAK,CAAA;AACjC,YAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAAA,WACT,MAAA,IAAA,EAAA,KAAO,IAAU,IAAA,EAAA,KAAO,IAAQ,EAAA;AACzC,YAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,GAAc,EAAI,EAAA;AAAE,cAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,8BAA8B,CAAA;AAAA;AAC1F,YAAA,EAAE,IAAK,CAAA,GAAA;AACP,YAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAC1B,cAAK,IAAA,CAAA,OAAA,EAAA;AACL,cAAA,IAAA,CAAK,YAAY,IAAK,CAAA,GAAA;AAAA;AACxB,WACK,MAAA;AACL,YAAInI,IAAAA,UAAAA,CAAU,EAAE,CAAG,EAAA;AAAE,cAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,8BAA8B,CAAA;AAAA;AAC1E,YAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AACT;AAEF,QAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAK,EAAA,CAAA;AAC9C,QAAA,OAAO,IAAK,CAAA,WAAA,CAAYH,QAAQ,CAAA,MAAA,EAAQ,GAAG,CAAA;AAAA,OAC7C;AAIA,MAAA,IAAIyI,iCAAgC,EAAC;AAErC,MAAAH,GAAAA,CAAG,uBAAuB,WAAW;AACnC,QAAA,IAAA,CAAK,iBAAoB,GAAA,IAAA;AACzB,QAAI,IAAA;AACF,UAAA,IAAA,CAAK,aAAc,EAAA;AAAA,iBACZ,GAAK,EAAA;AACZ,UAAA,IAAI,QAAQG,8BAA+B,EAAA;AACzC,YAAA,IAAA,CAAK,wBAAyB,EAAA;AAAA,WACzB,MAAA;AACL,YAAM,MAAA,GAAA;AAAA;AACR;AAGF,QAAA,IAAA,CAAK,iBAAoB,GAAA,KAAA;AAAA,OAC3B;AAEA,MAAAH,GAAG,CAAA,kBAAA,GAAqB,SAASI,SAAAA,EAAU,OAAS,EAAA;AAClD,QAAA,IAAI,IAAK,CAAA,iBAAA,IAAqB,IAAK,CAAA,OAAA,CAAQ,eAAe,CAAG,EAAA;AAC3D,UAAMD,MAAAA,8BAAAA;AAAA,SACD,MAAA;AACL,UAAK,IAAA,CAAA,KAAA,CAAMC,WAAU,OAAO,CAAA;AAAA;AAC9B,OACF;AAEA,MAAAJ,GAAAA,CAAG,gBAAgB,WAAW;AAC5B,QAAI,IAAA,GAAA,GAAM,EAAI,EAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAChC,QAAS,WAAA;AACP,UAAA,IAAI,IAAK,CAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,MAAQ,EAAA;AAAE,YAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,uBAAuB,CAAA;AAAA;AACnF,UAAA,IAAI,EAAK,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AACvC,UAAI,IAAA,EAAA,KAAO,EAAM,IAAA,EAAA,KAAO,EAAM,IAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,IAAK,CAAA,GAAA,GAAM,CAAC,CAAA,KAAM,GAAK,EAAA;AACzE,YAAI,IAAA,IAAA,CAAK,GAAQ,KAAA,IAAA,CAAK,KAAU,KAAA,IAAA,CAAK,IAAStI,KAAAA,QAAAA,CAAQ,QAAY,IAAA,IAAA,CAAK,IAASA,KAAAA,QAAAA,CAAQ,eAAkB,CAAA,EAAA;AACxG,cAAA,IAAI,OAAO,EAAI,EAAA;AACb,gBAAA,IAAA,CAAK,GAAO,IAAA,CAAA;AACZ,gBAAO,OAAA,IAAA,CAAK,WAAYA,CAAAA,QAAAA,CAAQ,YAAY,CAAA;AAAA,eACvC,MAAA;AACL,gBAAA,EAAE,IAAK,CAAA,GAAA;AACP,gBAAO,OAAA,IAAA,CAAK,WAAYA,CAAAA,QAAAA,CAAQ,SAAS,CAAA;AAAA;AAC3C;AAEF,YAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAC5C,YAAA,OAAO,IAAK,CAAA,WAAA,CAAYA,QAAQ,CAAA,QAAA,EAAU,GAAG,CAAA;AAAA;AAE/C,UAAA,IAAI,OAAO,EAAI,EAAA;AACb,YAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAC5C,YAAO,GAAA,IAAA,IAAA,CAAK,gBAAgB,IAAI,CAAA;AAChC,YAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAAA,WACpB,MAAA,IAAWG,UAAU,CAAA,EAAE,CAAG,EAAA;AACxB,YAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAC5C,YAAA,EAAE,IAAK,CAAA,GAAA;AACP,YAAA,QAAQ,EAAI;AAAA,cACZ,KAAK,EAAA;AACH,gBAAA,IAAI,KAAK,KAAM,CAAA,UAAA,CAAW,IAAK,CAAA,GAAG,MAAM,EAAI,EAAA;AAAE,kBAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AAAK,cAC5D,KAAK,EAAA;AACH,gBAAO,GAAA,IAAA,IAAA;AACP,gBAAA;AAAA,cACF;AACE,gBAAO,GAAA,IAAA,MAAA,CAAO,aAAa,EAAE,CAAA;AAC7B,gBAAA;AAAA;AAEF,YAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAC1B,cAAA,EAAE,IAAK,CAAA,OAAA;AACP,cAAA,IAAA,CAAK,YAAY,IAAK,CAAA,GAAA;AAAA;AAExB,YAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAAA,WACb,MAAA;AACL,YAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AACT;AACF,OACF;AAGA,MAAAmI,GAAAA,CAAG,2BAA2B,WAAW;AACvC,QAAA,OAAO,KAAK,GAAM,GAAA,IAAA,CAAK,KAAM,CAAA,MAAA,EAAQ,KAAK,GAAO,EAAA,EAAA;AAC/C,UAAA,QAAQ,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,GAAG,CAAG;AAAA,YAC9B,KAAK,IAAA;AACH,cAAA,EAAE,IAAK,CAAA,GAAA;AACP,cAAA;AAAA,YAEF,KAAK,GAAA;AACH,cAAA,IAAI,KAAK,KAAM,CAAA,IAAA,CAAK,GAAM,GAAA,CAAC,MAAM,GAAK,EAAA;AAAE,gBAAA;AAAA;AAAM;AAAA,YAEhD,KAAK,GAAA;AACH,cAAO,OAAA,IAAA,CAAK,WAAYtI,CAAAA,QAAAA,CAAQ,eAAiB,EAAA,IAAA,CAAK,KAAM,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,IAAK,CAAA,GAAG,CAAC,CAAA;AAAA,YAEzF,KAAK,IAAA;AACH,cAAA,IAAI,KAAK,KAAM,CAAA,IAAA,CAAK,GAAM,GAAA,CAAC,MAAM,IAAM,EAAA;AAAE,gBAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AAAK;AAAA,YAEvD,KAAK,IAAA;AAAA,YAAM,KAAK,QAAA;AAAA,YAAU,KAAK,QAAA;AAC7B,cAAA,EAAE,IAAK,CAAA,OAAA;AACP,cAAK,IAAA,CAAA,SAAA,GAAY,KAAK,GAAM,GAAA,CAAA;AAC5B,cAAA;AAAA;AACF;AAEF,QAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,uBAAuB,CAAA;AAAA,OAChD;AAIA,MAAAsI,GAAAA,CAAG,eAAkB,GAAA,SAAS,UAAY,EAAA;AACxC,QAAA,IAAI,KAAK,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,EAAE,KAAK,GAAG,CAAA;AACzC,QAAA,EAAE,IAAK,CAAA,GAAA;AACP,QAAA,QAAQ,EAAI;AAAA,UACZ,KAAK,GAAA;AAAK,YAAO,OAAA,IAAA;AAAA;AAAA,UACjB,KAAK,GAAA;AAAK,YAAO,OAAA,IAAA;AAAA;AAAA,UACjB,KAAK,GAAA;AAAK,YAAA,OAAO,MAAO,CAAA,YAAA,CAAa,IAAK,CAAA,WAAA,CAAY,CAAC,CAAC,CAAA;AAAA;AAAA,UACxD,KAAK,GAAA;AAAK,YAAO1H,OAAAA,kBAAAA,CAAkB,IAAK,CAAA,aAAA,EAAe,CAAA;AAAA;AAAA,UACvD,KAAK,GAAA;AAAK,YAAO,OAAA,GAAA;AAAA;AAAA,UACjB,KAAK,EAAA;AAAI,YAAO,OAAA,IAAA;AAAA;AAAA,UAChB,KAAK,GAAA;AAAK,YAAO,OAAA,IAAA;AAAA;AAAA,UACjB,KAAK,GAAA;AAAK,YAAO,OAAA,IAAA;AAAA;AAAA,UACjB,KAAK,EAAA;AAAI,YAAA,IAAI,KAAK,KAAM,CAAA,UAAA,CAAW,IAAK,CAAA,GAAG,MAAM,EAAI,EAAA;AAAE,cAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AAAK;AAAA,UACnE,KAAK,EAAA;AACH,YAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAAE,cAAA,IAAA,CAAK,YAAY,IAAK,CAAA,GAAA;AAAK,cAAA,EAAE,IAAK,CAAA,OAAA;AAAA;AAChE,YAAO,OAAA,EAAA;AAAA,UACT,KAAK,EAAA;AAAA,UACL,KAAK,EAAA;AACH,YAAA,IAAI,KAAK,MAAQ,EAAA;AACf,cAAK,IAAA,CAAA,kBAAA;AAAA,gBACH,KAAK,GAAM,GAAA,CAAA;AAAA,gBACX;AAAA,eACF;AAAA;AAEF,YAAA,IAAI,UAAY,EAAA;AACd,cAAI,IAAA,OAAA,GAAU,KAAK,GAAM,GAAA,CAAA;AAEzB,cAAK,IAAA,CAAA,kBAAA;AAAA,gBACH,OAAA;AAAA,gBACA;AAAA,eACF;AAAA;AACF,UACF;AACE,YAAI,IAAA,EAAA,IAAM,EAAM,IAAA,EAAA,IAAM,EAAI,EAAA;AACxB,cAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAM,CAAA,MAAA,CAAO,IAAK,CAAA,GAAA,GAAM,CAAG,EAAA,CAAC,CAAE,CAAA,KAAA,CAAM,SAAS,CAAA,CAAE,CAAC,CAAA;AACpE,cAAI,IAAA,KAAA,GAAQ,QAAS,CAAA,QAAA,EAAU,CAAC,CAAA;AAChC,cAAA,IAAI,QAAQ,GAAK,EAAA;AACf,gBAAW,QAAA,GAAA,QAAA,CAAS,KAAM,CAAA,CAAA,EAAG,CAAE,CAAA,CAAA;AAC/B,gBAAQ,KAAA,GAAA,QAAA,CAAS,UAAU,CAAC,CAAA;AAAA;AAE9B,cAAK,IAAA,CAAA,GAAA,IAAO,SAAS,MAAS,GAAA,CAAA;AAC9B,cAAA,EAAA,GAAK,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,GAAG,CAAA;AACnC,cAAK,IAAA,CAAA,QAAA,KAAa,OAAO,EAAO,KAAA,EAAA,IAAM,OAAO,EAAQ,MAAA,IAAA,CAAK,UAAU,UAAa,CAAA,EAAA;AAC/E,gBAAK,IAAA,CAAA,kBAAA;AAAA,kBACH,IAAA,CAAK,GAAM,GAAA,CAAA,GAAI,QAAS,CAAA,MAAA;AAAA,kBACxB,aACI,kCACA,GAAA;AAAA,iBACN;AAAA;AAEF,cAAO,OAAA,MAAA,CAAO,aAAa,KAAK,CAAA;AAAA;AAElC,YAAIT,IAAAA,UAAAA,CAAU,EAAE,CAAG,EAAA;AAGjB,cAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAAE,gBAAA,IAAA,CAAK,YAAY,IAAK,CAAA,GAAA;AAAK,gBAAA,EAAE,IAAK,CAAA,OAAA;AAAA;AAChE,cAAO,OAAA,EAAA;AAAA;AAET,YAAO,OAAA,MAAA,CAAO,aAAa,EAAE,CAAA;AAAA;AAC/B,OACF;AAIA,MAAAmI,GAAAA,CAAG,WAAc,GAAA,SAAS,GAAK,EAAA;AAC7B,QAAA,IAAI,UAAU,IAAK,CAAA,GAAA;AACnB,QAAA,IAAI,CAAI,GAAA,IAAA,CAAK,OAAQ,CAAA,EAAA,EAAI,GAAG,CAAA;AAC5B,QAAA,IAAI,MAAM,IAAM,EAAA;AAAE,UAAK,IAAA,CAAA,kBAAA,CAAmB,SAAS,+BAA+B,CAAA;AAAA;AAClF,QAAO,OAAA,CAAA;AAAA,OACT;AAQA,MAAAA,GAAAA,CAAG,YAAY,WAAW;AACxB,QAAA,IAAA,CAAK,WAAc,GAAA,KAAA;AACnB,QAAA,IAAI,IAAO,GAAA,EAAA,EAAI,KAAQ,GAAA,IAAA,EAAM,aAAa,IAAK,CAAA,GAAA;AAC/C,QAAI,IAAA,MAAA,GAAS,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA;AACzC,QAAA,OAAO,IAAK,CAAA,GAAA,GAAM,IAAK,CAAA,KAAA,CAAM,MAAQ,EAAA;AACnC,UAAI,IAAA,EAAA,GAAK,KAAK,iBAAkB,EAAA;AAChC,UAAI7I,IAAAA,iBAAAA,CAAiB,EAAI,EAAA,MAAM,CAAG,EAAA;AAChC,YAAK,IAAA,CAAA,GAAA,IAAO,EAAM,IAAA,KAAA,GAAS,CAAI,GAAA,CAAA;AAAA,WACjC,MAAA,IAAW,OAAO,EAAI,EAAA;AACpB,YAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AACnB,YAAA,IAAA,IAAQ,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAC7C,YAAA,IAAI,WAAW,IAAK,CAAA,GAAA;AACpB,YAAA,IAAI,KAAK,KAAM,CAAA,UAAA,CAAW,EAAE,IAAK,CAAA,GAAG,MAAM,GACxC,EAAA;AAAE,cAAK,IAAA,CAAA,kBAAA,CAAmB,IAAK,CAAA,GAAA,EAAK,2CAA2C,CAAA;AAAA;AACjF,YAAA,EAAE,IAAK,CAAA,GAAA;AACP,YAAI,IAAA,GAAA,GAAM,KAAK,aAAc,EAAA;AAC7B,YAAA,IAAI,EAAE,KAAQD,GAAAA,kBAAAA,GAAoBC,iBAAkB,EAAA,GAAA,EAAK,MAAM,CAC7D,EAAA;AAAE,cAAK,IAAA,CAAA,kBAAA,CAAmB,UAAU,wBAAwB,CAAA;AAAA;AAC9D,YAAA,IAAA,IAAQmB,mBAAkB,GAAG,CAAA;AAC7B,YAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAAA,WACb,MAAA;AACL,YAAA;AAAA;AAEF,UAAQ,KAAA,GAAA,KAAA;AAAA;AAEV,QAAA,OAAO,OAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAAA,OACrD;AAKA,MAAA0H,GAAAA,CAAG,WAAW,WAAW;AACvB,QAAI,IAAA,IAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAA,IAAI,OAAOtI,QAAQ,CAAA,IAAA;AACnB,QAAA,IAAI,IAAK,CAAA,QAAA,CAAS,IAAK,CAAA,IAAI,CAAG,EAAA;AAC5B,UAAA,IAAA,GAAOF,UAAS,IAAI,CAAA;AAAA;AAEtB,QAAO,OAAA,IAAA,CAAK,WAAY,CAAA,IAAA,EAAM,IAAI,CAAA;AAAA,OACpC;AAmBA,MAAA,IAAI6I,QAAU,GAAA,QAAA;AAEd,MAAAlG,QAAO,KAAQ,GAAA;AAAA,QACb,MAAQA,EAAAA,OAAAA;AAAA,QACR,OAASkG,EAAAA,QAAAA;AAAA,QACT,cAAgBxH,EAAAA,eAAAA;AAAA,QAChB,QAAUL,EAAAA,SAAAA;AAAA,QACV,cAAgBE,EAAAA,eAAAA;AAAA,QAChB,WAAaE,EAAAA,YAAAA;AAAA,QACb,IAAMyD,EAAAA,KAAAA;AAAA,QACN,SAAWjF,EAAAA,UAAAA;AAAA,QACX,QAAUM,EAAAA,QAAAA;AAAA,QACV,YAAcF,EAAAA,SAAAA;AAAA,QACd,UAAYkE,EAAAA,WAAAA;AAAA,QACZ,WAAaC,EAAAA,MAAAA;AAAA,QACb,gBAAkBxE,EAAAA,iBAAAA;AAAA,QAClB,iBAAmBD,EAAAA,kBAAAA;AAAA,QACnB,KAAO6I,EAAAA,MAAAA;AAAA,QACP,SAAWlI,EAAAA,UAAAA;AAAA,QACX,SAAWF,EAAAA,UAAAA;AAAA,QACX,UAAYC,EAAAA,WAAAA;AAAA,QACZ,kBAAoBG,EAAAA;AAAA,OACtB;AAQA,MAASsC,SAAAA,MAAAA,CAAM,OAAOrE,QAAS,EAAA;AAC7B,QAAOmE,OAAAA,OAAAA,CAAO,KAAM,CAAA,KAAA,EAAOnE,QAAO,CAAA;AAAA;AAOpC,MAASuE,SAAAA,kBAAAA,CAAkB,KAAO,EAAA,GAAA,EAAKvE,QAAS,EAAA;AAC9C,QAAA,OAAOmE,OAAO,CAAA,iBAAA,CAAkB,KAAO,EAAA,GAAA,EAAKnE,QAAO,CAAA;AAAA;AAMrD,MAASwE,SAAAA,UAAAA,CAAU,OAAOxE,QAAS,EAAA;AACjC,QAAOmE,OAAAA,OAAAA,CAAO,SAAU,CAAA,KAAA,EAAOnE,QAAO,CAAA;AAAA;AAGxC,MAAAI,SAAQ,IAAOiG,GAAAA,KAAAA;AACf,MAAAjG,SAAQ,MAAS+D,GAAAA,OAAAA;AACjB,MAAA/D,SAAQ,QAAWoC,GAAAA,SAAAA;AACnB,MAAApC,SAAQ,cAAiBsC,GAAAA,eAAAA;AACzB,MAAAtC,SAAQ,UAAasF,GAAAA,WAAAA;AACrB,MAAAtF,SAAQ,KAAQ2J,GAAAA,MAAAA;AAChB,MAAA3J,SAAQ,SAAYgB,GAAAA,UAAAA;AACpB,MAAAhB,SAAQ,cAAiByC,GAAAA,eAAAA;AACzB,MAAAzC,SAAQ,WAAcwC,GAAAA,YAAAA;AACtB,MAAAxC,SAAQ,gBAAmBe,GAAAA,iBAAAA;AAC3B,MAAAf,SAAQ,iBAAoBc,GAAAA,kBAAAA;AAC5B,MAAAd,SAAQ,SAAYyB,GAAAA,UAAAA;AACpB,MAAAzB,SAAQ,YAAeoB,GAAAA,SAAAA;AACvB,MAAApB,SAAQ,SAAYuB,GAAAA,UAAAA;AACpB,MAAAvB,SAAQ,UAAawB,GAAAA,WAAAA;AACrB,MAAAxB,SAAQ,kBAAqB2B,GAAAA,mBAAAA;AAC7B,MAAA3B,SAAQ,KAAQiE,GAAAA,MAAAA;AAChB,MAAAjE,SAAQ,iBAAoBmE,GAAAA,kBAAAA;AAC5B,MAAAnE,SAAQ,WAAcuF,GAAAA,MAAAA;AACtB,MAAAvF,SAAQ,QAAWsB,GAAAA,QAAAA;AACnB,MAAAtB,SAAQ,SAAYoE,GAAAA,UAAAA;AACpB,MAAApE,SAAQ,OAAUiK,GAAAA,QAAAA;AAAA,KAElB,CAAA;AAAA;AAAA,CAAA,CAAA;;;AC7hMF,IAAA,iBAAA,GAAA,UAAA,CAAA;AAAA,EAAA,uCAAA,CAAA,OAAA,EAAA,MAAA,EAAA;AAEA,IAAA,IAAM,aAAgB,GAAA,aAAA,EAAA;AAEtB,IAAA,IAAM,SAAY,GAAA,eAAA;AAClB,IAAA,IAAM,aAAgB,GAAA,OAAA;AAGtB,IAAM,IAAA,WAAA,uBAAkB,OAAQ,EAAA;AAGhC,IAAA,SAAS,aAAa,KAAO,EAAA;AAC3B,MAAQ,KAAA,GAAA,KAAA,CAAM,OAAO,KAAS,IAAA,KAAA;AAC9B,MAAIC,IAAAA,SAAAA,GAAW,WAAY,CAAA,GAAA,CAAI,KAAK,CAAA;AACpC,MAAA,IAAI,CAACA,SAAU,EAAA;AACb,QAAA,MAAM,KAAK,KAAM,CAAA,QAAA;AACjB,QAAA,MAAM5E,cAAa,KAAM,CAAA,UAAA;AACzB,QAAA,MAAMtE,aAAY,KAAM,CAAA,SAAA;AACxB,QAAA,MAAM,OAAU,GAAA,IAAIsE,WAAW,CAAA,MAAA,EAAQ,KAAK,CAAA;AAC5C,QAAA,MAAM,OAAU,GAAA,IAAIA,WAAW,CAAA,OAAA,EAAS,KAAK,CAAA;AAC7C,QAAA,MAAM,OAAU,GAAA,IAAIA,WAAW,CAAA,gBAAA,EAAkB,MAAM,IAAI,CAAA;AAC3D,QAAA,MAAM,WAAc,GAAA;AAAA,UAClB,OAAA;AAAA,UACA,OAAA;AAAA,UACA;AAAA,SACF;AACA,QAAA,MAAM,QAAW,GAAA;AAAA,UACf,OAAA,EAAS,IAAItE,UAAAA,CAAU,SAAS,CAAA;AAAA,UAChC,SAAS,IAAIA,UAAAA,CAAU,WAAW,EAAC,UAAA,EAAY,MAAK,CAAA;AAAA,UACpD,aAAa,IAAIA,UAAAA,CAAU,eAAe,EAAC,UAAA,EAAY,MAAK,CAAA;AAAA,UAC5D,SAAA,EAAW,IAAIA,UAAAA,CAAU,WAAW;AAAA,SACtC;AAEA,QAAS,QAAA,CAAA,WAAA,CAAY,gBAAgB,WAAW;AAC9C,UAAK,IAAA,CAAA,OAAA,CAAQ,KAAK,OAAO,CAAA;AACzB,UAAK,IAAA,CAAA,OAAA,CAAQ,KAAK,OAAO,CAAA;AACzB,UAAA,IAAA,CAAK,WAAc,GAAA,KAAA;AAAA,SACrB;AACA,QAAS,QAAA,CAAA,SAAA,CAAU,aAAgB,GAAA,SAAS,QAAU,EAAA;AACpD,UAAI,IAAA,GAAA,GAAM,IAAK,CAAA,OAAA,CAAQ,GAAI,EAAA;AAC3B,UAAA,IAAI,QAAQ,OAAW,IAAA,QAAA,KAAa,EAAG,CAAA,KAAA,IAAS,QAAQ,OAAS,EAAA;AAC/D,YAAA,IAAA,CAAK,QAAQ,GAAI,EAAA;AACjB,YAAK,IAAA,CAAA,WAAA,GAAc,IAAK,CAAA,UAAA,EAAiB,KAAA,OAAA;AAAA,WACpC,MAAA;AACL,YAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AAAA;AACrB,SACF;AAEA,QAAAkJ,SAAAA,GAAW,EAAE,WAAA,EAA0B,QAAmB,EAAA;AAC1D,QAAY,WAAA,CAAA,GAAA,CAAI,OAAOA,SAAQ,CAAA;AAAA;AAGjC,MAAOA,OAAAA,SAAAA;AAAA;AAKT,IAAA,SAAS,oBAAoB,MAAQ,EAAA;AACnC,MAAA,IAAI,CAAC,MAAA;AACH,QAAO,OAAA,MAAA;AAET,MAAA,IAAI,OAAO,IAAS,KAAA,eAAA;AAClB,QAAA,OAAO,MAAO,CAAA,IAAA;AAEhB,MAAA,IAAI,OAAO,IAAS,KAAA,mBAAA;AAClB,QAAA,OAAO,MAAO,CAAA,SAAA,CAAU,IAAO,GAAA,GAAA,GAAM,OAAO,IAAK,CAAA,IAAA;AAEnD,MAAA,IAAI,OAAO,IAAS,KAAA,qBAAA;AAClB,QAAA,OAAO,oBAAoB,MAAO,CAAA,MAAM,IAAI,GAC5C,GAAA,mBAAA,CAAoB,OAAO,QAAQ,CAAA;AAAA;AAGvC,IAAO,MAAA,CAAA,OAAA,GAAU,SAAStK,QAAS,EAAA;AACjC,MAAAA,QAAAA,GAAUA,YAAW,EAAC;AACtB,MAAA,OAAO,SAASmE,OAAQ,EAAA;AACtB,QAAA,OAAO,MAAO,CAAA;AAAA,UACZ,eAAA,EAAiBnE,SAAQ,eAAoB,KAAA,KAAA;AAAA,UAC7C,sBAAA,EAAwB,CAAC,CAACA,QAAQ,CAAA;AAAA,WACjCmE,OAAM,CAAA;AAAA,OACX;AAAA,KACF;AAIA,IAAO,MAAA,CAAA,cAAA,CAAe,MAAO,CAAA,OAAA,EAAS,UAAY,EAAA;AAAA,MAChD,GAAA,EAAK,SAAS,YAAe,GAAA;AAC3B,QAAO,OAAA,YAAA,CAAa,eAAgB,CAAE,CAAA,QAAA;AAAA,OACxC;AAAA,MACA,YAAc,EAAA,IAAA;AAAA,MACd,UAAY,EAAA;AAAA,KACb,CAAA;AAED,IAAS,SAAA,MAAA,CAAOnE,UAASmE,OAAQ,EAAA;AAC/B,MAAM,MAAA,KAAA,GAAQA,QAAO,KAAS,IAAA,aAAA,EAAA;AAC9B,MAAMmG,MAAAA,SAAAA,GAAW,aAAa,KAAK,CAAA;AACnC,MAAA,MAAM,KAAK,KAAM,CAAA,QAAA;AACjB,MAAA,MAAM,MAAMA,SAAS,CAAA,QAAA;AACrB,MAAA,MAAM,cAAc,KAAM,CAAA,WAAA;AAC1B,MAAM,MAAA,OAAA,GAAUA,UAAS,WAAY,CAAA,OAAA;AACrC,MAAM,MAAA,OAAA,GAAUA,UAAS,WAAY,CAAA,OAAA;AACrC,MAAM,MAAA,OAAA,GAAUA,UAAS,WAAY,CAAA,OAAA;AACrC,MAAA,MAAMzI,aAAY,KAAM,CAAA,SAAA;AACxB,MAAA,MAAMX,qBAAoB,KAAM,CAAA,iBAAA;AAChC,MAAA,MAAMC,oBAAmB,KAAM,CAAA,gBAAA;AAE/B,MAAA,OAAO,cAAcgD,OAAO,CAAA;AAAA;AAAA,QAE1B,WAAW,QAAW,GAAA;AACpB,UAAOmG,OAAAA,SAAAA;AAAA;AACT;AAAA,QAGA,aAAgB,GAAA;AACd,UAAI,IAAA,GAAA,GAAM,EAAI,EAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAChC,UAAS,WAAA;AACP,YAAI,IAAA,IAAA,CAAK,GAAO,IAAA,IAAA,CAAK,KAAM,CAAA,MAAA;AACzB,cAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,2BAA2B,CAAA;AACpD,YAAA,IAAI,EAAK,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AAEvC,YAAA,QAAQ,EAAI;AAAA,cACZ,KAAK,EAAA;AAAA;AAAA,cACL,KAAK,GAAA;AACH,gBAAI,IAAA,IAAA,CAAK,GAAQ,KAAA,IAAA,CAAK,KAAO,EAAA;AAC3B,kBAAI,IAAA,EAAA,KAAO,EAAM,IAAA,IAAA,CAAK,WAAa,EAAA;AACjC,oBAAA,EAAE,IAAK,CAAA,GAAA;AACP,oBAAO,OAAA,IAAA,CAAK,WAAY,CAAA,GAAA,CAAI,WAAW,CAAA;AAAA;AAEzC,kBAAO,OAAA,IAAA,CAAK,iBAAiB,EAAE,CAAA;AAAA;AAEjC,gBAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAC5C,gBAAA,OAAO,IAAK,CAAA,WAAA,CAAY,GAAI,CAAA,OAAA,EAAS,GAAG,CAAA;AAAA,cAE1C,KAAK,EAAA;AACH,gBAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAC5C,gBAAA,GAAA,IAAO,KAAK,cAAe,EAAA;AAC3B,gBAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAClB,gBAAA;AAAA,cAEF,KAAK,EAAA;AAAA;AAAA,cACL,KAAK,GAAA;AACH,gBAAK,IAAA,CAAA,KAAA;AAAA,kBACH,IAAK,CAAA,GAAA;AAAA,kBACL,uBAAuB,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,GAAG,IAAI,mBAC3C,IAAA,EAAA,KAAO,EAAK,GAAA,MAAA,GAAS,cAAc,UAAmB,GAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,GAAG,CAAI,GAAA;AAAA,iBAClF;AAAA,cAEF;AACE,gBAAIzI,IAAAA,UAAAA,CAAU,EAAE,CAAG,EAAA;AACjB,kBAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAC5C,kBAAO,GAAA,IAAA,IAAA,CAAK,gBAAgB,IAAI,CAAA;AAChC,kBAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAAA,iBACb,MAAA;AACL,kBAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AACT;AACF;AACF;AACF,QAEA,gBAAgB,aAAe,EAAA;AAC7B,UAAA,IAAI,EAAK,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AACvC,UAAI,IAAA,GAAA;AACJ,UAAA,EAAE,IAAK,CAAA,GAAA;AACP,UAAI,IAAA,EAAA,KAAO,MAAM,IAAK,CAAA,KAAA,CAAM,WAAW,IAAK,CAAA,GAAG,MAAM,EAAI,EAAA;AACvD,YAAA,EAAE,IAAK,CAAA,GAAA;AACP,YAAA,GAAA,GAAM,gBAAgB,IAAO,GAAA,MAAA;AAAA,WACxB,MAAA;AACL,YAAM,GAAA,GAAA,MAAA,CAAO,aAAa,EAAE,CAAA;AAAA;AAE9B,UAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAC1B,YAAA,EAAE,IAAK,CAAA,OAAA;AACP,YAAA,IAAA,CAAK,YAAY,IAAK,CAAA,GAAA;AAAA;AAGxB,UAAO,OAAA,GAAA;AAAA;AACT,QAEA,eAAe,KAAO,EAAA;AACpB,UAAA,IAAI,GAAM,GAAA,EAAA,EAAI,UAAa,GAAA,EAAE,IAAK,CAAA,GAAA;AAClC,UAAS,WAAA;AACP,YAAI,IAAA,IAAA,CAAK,GAAO,IAAA,IAAA,CAAK,KAAM,CAAA,MAAA;AACzB,cAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,8BAA8B,CAAA;AACvD,YAAA,IAAI,EAAK,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AACvC,YAAA,IAAI,OAAO,KAAO,EAAA;AAClB,YAAA,IAAI,OAAO,EAAI,EAAA;AACb,cAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAC5C,cAAA,GAAA,IAAO,KAAK,cAAe,EAAA;AAC3B,cAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAAA,aACpB,MAAA,IAAWA,UAAU,CAAA,EAAE,CAAG,EAAA;AACxB,cAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAC5C,cAAO,GAAA,IAAA,IAAA,CAAK,gBAAgB,KAAK,CAAA;AACjC,cAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAAA,aACb,MAAA;AACL,cAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AACT;AAEF,UAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAK,EAAA,CAAA;AAC9C,UAAA,OAAO,IAAK,CAAA,WAAA,CAAY,EAAG,CAAA,MAAA,EAAQ,GAAG,CAAA;AAAA;AACxC,QAEA,cAAiB,GAAA;AACf,UAAI,IAAA,GAAA,GAAM,EAAI,EAAA,KAAA,GAAQ,CAAG,EAAA,MAAA;AACzB,UAAA,IAAI,EAAK,GAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,GAAG,CAAA;AAC5B,UAAA,IAAI,EAAO,KAAA,GAAA;AACT,YAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,GAAA,EAAK,qCAAqC,CAAA;AAC5D,UAAI,IAAA,QAAA,GAAW,EAAE,IAAK,CAAA,GAAA;AACtB,UAAA,OAAO,KAAK,GAAM,GAAA,IAAA,CAAK,KAAM,CAAA,MAAA,IAAU,UAAU,EAAI,EAAA;AACnD,YAAK,EAAA,GAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,GAAK,EAAA,CAAA;AAC1B,YAAA,IAAI,OAAO,GAAK,EAAA;AACd,cAAI,IAAA,GAAA,CAAI,CAAC,CAAA,KAAM,GAAK,EAAA;AAClB,gBAAI,IAAA,GAAA,CAAI,CAAC,CAAA,KAAM,GAAK,EAAA;AAClB,kBAAM,GAAA,GAAA,GAAA,CAAI,OAAO,CAAC,CAAA;AAClB,kBAAI,IAAA,SAAA,CAAU,KAAK,GAAG,CAAA;AACpB,oBAAA,MAAA,GAAS,MAAO,CAAA,YAAA,CAAa,QAAS,CAAA,GAAA,EAAK,EAAE,CAAC,CAAA;AAAA,iBAC3C,MAAA;AACL,kBAAM,GAAA,GAAA,GAAA,CAAI,OAAO,CAAC,CAAA;AAClB,kBAAI,IAAA,aAAA,CAAc,KAAK,GAAG,CAAA;AACxB,oBAAA,MAAA,GAAS,MAAO,CAAA,YAAA,CAAa,QAAS,CAAA,GAAA,EAAK,EAAE,CAAC,CAAA;AAAA;AAClD,eACK,MAAA;AACL,gBAAA,MAAA,GAAS,cAAc,GAAG,CAAA;AAAA;AAE5B,cAAA;AAAA;AAEF,YAAO,GAAA,IAAA,EAAA;AAAA;AAET,UAAA,IAAI,CAAC,MAAQ,EAAA;AACX,YAAA,IAAA,CAAK,GAAM,GAAA,QAAA;AACX,YAAO,OAAA,GAAA;AAAA;AAET,UAAO,OAAA,MAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASA,YAAe,GAAA;AACb,UAAI,IAAA,EAAA,EAAIc,SAAQ,IAAK,CAAA,GAAA;AACrB,UAAG,GAAA;AACD,YAAA,EAAA,GAAK,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,EAAE,KAAK,GAAG,CAAA;AAAA,WAC9BxB,QAAAA,iBAAAA,CAAiB,EAAE,CAAA,IAAK,EAAO,KAAA,EAAA;AACxC,UAAO,OAAA,IAAA,CAAK,WAAY,CAAA,GAAA,CAAI,OAAS,EAAA,IAAA,CAAK,MAAM,KAAMwB,CAAAA,MAAAA,EAAO,IAAK,CAAA,GAAG,CAAC,CAAA;AAAA;AACxE;AAAA,QAIA,mBAAsB,GAAA;AACpB,UAAI2B,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,UAAI,IAAA,IAAA,CAAK,SAAS,GAAI,CAAA,OAAA;AACpB,YAAAA,KAAAA,CAAK,OAAO,IAAK,CAAA,KAAA;AAAA,eAAA,IACV,KAAK,IAAK,CAAA,OAAA;AACjB,YAAAA,KAAAA,CAAK,IAAO,GAAA,IAAA,CAAK,IAAK,CAAA,OAAA;AAAA;AAEtB,YAAA,IAAA,CAAK,UAAW,EAAA;AAClB,UAAA,IAAA,CAAK,IAAK,EAAA;AACV,UAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,eAAe,CAAA;AAAA;AAC9C;AAAA,QAIA,uBAA0B,GAAA;AACxB,UAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,UAAIpE,IAAAA,KAAAA,GAAO,KAAK,mBAAoB,EAAA;AACpC,UAAI,IAAA,CAACF,SAAQ,eAAmB,IAAA,CAAC,KAAK,GAAI,CAAA,EAAA,CAAG,KAAK,CAAA,EAAUE,OAAAA,KAAAA;AAC5D,UAAA,IAAIoE,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,UAAAA,MAAK,SAAYpE,GAAAA,KAAAA;AACjB,UAAAoE,KAAAA,CAAK,IAAO,GAAA,IAAA,CAAK,mBAAoB,EAAA;AACrC,UAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,mBAAmB,CAAA;AAAA;AAClD;AAAA;AAAA,QAKA,oBAAuB,GAAA;AACrB,UAAA,IAAI,IAAK,CAAA,IAAA,KAAS,GAAI,CAAA,SAAA,EAAkB,OAAA,EAAA;AACxC,UAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,UAAIA,IAAAA,KAAAA,GAAO,KAAK,uBAAwB,EAAA;AACxC,UAAI,IAAA,IAAA,CAAK,SAAS,EAAG,CAAA,GAAA,IAAOA,MAAK,IAAS,KAAA,mBAAA,IAAuB,CAACtE,QAAAA,CAAQ,sBAAwB,EAAA;AAChG,YAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAElB,UAAA,OAAO,IAAK,CAAA,GAAA,CAAI,EAAG,CAAA,GAAG,CAAG,EAAA;AACvB,YAAA,IAAI,OAAU,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AACjD,YAAA,OAAA,CAAQ,MAASsE,GAAAA,KAAAA;AACjB,YAAQ,OAAA,CAAA,QAAA,GAAW,KAAK,mBAAoB,EAAA;AAC5C,YAAAA,KAAO,GAAA,IAAA,CAAK,UAAW,CAAA,OAAA,EAAS,qBAAqB,CAAA;AAAA;AAEvD,UAAOA,OAAAA,KAAAA;AAAA;AACT;AAAA,QAIA,uBAA0B,GAAA;AACxB,UAAA,QAAQ,KAAK,IAAM;AAAA,YACnB,KAAK,EAAG,CAAA,MAAA;AACN,cAAIA,IAAAA,KAAAA,GAAO,KAAK,4BAA6B,EAAA;AAC7C,cAAIA,IAAAA,KAAAA,CAAK,WAAW,IAAS,KAAA,oBAAA;AAC3B,gBAAK,IAAA,CAAA,KAAA,CAAMA,KAAK,CAAA,KAAA,EAAO,6DAA6D,CAAA;AACtF,cAAOA,OAAAA,KAAAA;AAAA,YAET,KAAK,GAAI,CAAA,WAAA;AAAA,YACT,KAAK,EAAG,CAAA,MAAA;AACN,cAAA,OAAO,KAAK,aAAc,EAAA;AAAA,YAE5B;AACE,cAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,+DAA+D,CAAA;AAAA;AACxF;AACF;AAAA;AAAA;AAAA,QAMA,wBAA2B,GAAA;AACzB,UAAA,IAAIA,QAAO,IAAK,CAAA,WAAA,CAAY,IAAK,CAAA,UAAA,EAAY,KAAK,aAAa,CAAA;AAC/D,UAAA,OAAO,KAAK,YAAaA,CAAAA,KAAAA,EAAM,sBAAsB,IAAK,CAAA,KAAA,EAAO,KAAK,QAAQ,CAAA;AAAA;AAChF;AAAA,QAIA,4BAA+B,GAAA;AAC7B,UAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,UAAA,IAAA,CAAK,IAAK,EAAA;AACV,UAAAA,KAAAA,CAAK,UAAa,GAAA,IAAA,CAAK,IAAS,KAAA,EAAA,CAAG,SAC/B,IAAK,CAAA,wBAAA,EACL,GAAA,IAAA,CAAK,eAAgB,EAAA;AACzB,UAAK,IAAA,CAAA,MAAA,CAAO,GAAG,MAAM,CAAA;AACrB,UAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,wBAAwB,CAAA;AAAA;AACvD;AAAA,QAIA,kBAAqB,GAAA;AACnB,UAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,UAAA,IAAI,IAAK,CAAA,GAAA,CAAI,EAAG,CAAA,MAAM,CAAG,EAAA;AACvB,YAAK,IAAA,CAAA,MAAA,CAAO,GAAG,QAAQ,CAAA;AACvB,YAAAA,KAAAA,CAAK,QAAW,GAAA,IAAA,CAAK,gBAAiB,EAAA;AACtC,YAAK,IAAA,CAAA,MAAA,CAAO,GAAG,MAAM,CAAA;AACrB,YAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,oBAAoB,CAAA;AAAA;AAEnD,UAAAA,KAAAA,CAAK,IAAO,GAAA,IAAA,CAAK,uBAAwB,EAAA;AACzC,UAAAA,KAAAA,CAAK,QAAQ,IAAK,CAAA,GAAA,CAAI,GAAG,EAAE,CAAA,GAAI,IAAK,CAAA,uBAAA,EAA4B,GAAA,IAAA;AAChE,UAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,cAAc,CAAA;AAAA;AAC7C;AAAA,QAIA,yBAAA,CAA0B,UAAU,QAAU,EAAA;AAC5C,UAAA,IAAIA,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,UAAAA,KAAAA,CAAK,aAAa,EAAC;AACnB,UAAI,IAAA,QAAA,GAAW,KAAK,oBAAqB,EAAA;AACzC,UAAI,IAAA,QAAA,EAAUA,KAAAA,CAAK,IAAO,GAAA,QAAA;AAC1B,UAAA,OAAO,KAAK,IAAS,KAAA,EAAA,CAAG,KAAS,IAAA,IAAA,CAAK,SAAS,GAAI,CAAA,SAAA;AACjD,YAAAA,KAAK,CAAA,UAAA,CAAW,IAAK,CAAA,IAAA,CAAK,oBAAoB,CAAA;AAChD,UAAAA,KAAK,CAAA,WAAA,GAAc,IAAK,CAAA,GAAA,CAAI,GAAG,KAAK,CAAA;AACpC,UAAK,IAAA,CAAA,MAAA,CAAO,IAAI,SAAS,CAAA;AACzB,UAAA,OAAO,IAAK,CAAA,UAAA,CAAWA,KAAM,EAAA,QAAA,GAAW,sBAAsB,oBAAoB,CAAA;AAAA;AACpF;AAAA,QAIA,yBAAA,CAA0B,UAAU,QAAU,EAAA;AAC5C,UAAA,IAAIA,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,UAAI,IAAA,QAAA,GAAW,KAAK,oBAAqB,EAAA;AACzC,UAAI,IAAA,QAAA,EAAUA,KAAAA,CAAK,IAAO,GAAA,QAAA;AAC1B,UAAK,IAAA,CAAA,MAAA,CAAO,IAAI,SAAS,CAAA;AACzB,UAAA,OAAO,IAAK,CAAA,UAAA,CAAWA,KAAM,EAAA,QAAA,GAAW,sBAAsB,oBAAoB,CAAA;AAAA;AACpF;AAAA;AAAA,QAKA,kBAAA,CAAmB,UAAU,QAAU,EAAA;AACrC,UAAA,IAAIA,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,UAAA,IAAI,WAAW,EAAC;AAChB,UAAA,IAAI,cAAiB,GAAA,IAAA,CAAK,yBAA0B,CAAA,QAAA,EAAU,QAAQ,CAAA;AACtE,UAAA,IAAI,cAAiB,GAAA,IAAA;AAErB,UAAI,IAAA,CAAC,eAAe,WAAa,EAAA;AAC/B,YAAA,QAAA,EAAmB,WAAA;AACjB,cAAA,QAAQ,KAAK,IAAM;AAAA,gBACnB,KAAK,GAAI,CAAA,WAAA;AACP,kBAAA,QAAA,GAAW,IAAK,CAAA,KAAA;AAAO,kBAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AACvC,kBAAA,IAAA,CAAK,IAAK,EAAA;AACV,kBAAA,IAAI,IAAK,CAAA,GAAA,CAAI,EAAG,CAAA,KAAK,CAAG,EAAA;AACtB,oBAAiB,cAAA,GAAA,IAAA,CAAK,yBAA0B,CAAA,QAAA,EAAU,QAAQ,CAAA;AAClE,oBAAM,MAAA,QAAA;AAAA;AAER,kBAAA,QAAA,CAAS,IAAK,CAAA,IAAA,CAAK,kBAAmB,CAAA,QAAA,EAAU,QAAQ,CAAC,CAAA;AACzD,kBAAA;AAAA,gBAEF,KAAK,GAAI,CAAA,OAAA;AACP,kBAAS,QAAA,CAAA,IAAA,CAAK,IAAK,CAAA,aAAA,EAAe,CAAA;AAClC,kBAAA;AAAA,gBAEF,KAAK,EAAG,CAAA,MAAA;AACN,kBAAS,QAAA,CAAA,IAAA,CAAK,IAAK,CAAA,4BAAA,EAA8B,CAAA;AACjD,kBAAA;AAAA,gBAEF;AACE,kBAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAClB;AAEF,YAAA,IAAI,oBAAoB,cAAe,CAAA,IAAI,MAAM,mBAAoB,CAAA,cAAA,CAAe,IAAI,CAAG,EAAA;AACzF,cAAK,IAAA,CAAA,KAAA;AAAA,gBACH,cAAe,CAAA,KAAA;AAAA,gBACf,8CAAiD,GAAA,mBAAA,CAAoB,cAAe,CAAA,IAAI,CAAI,GAAA;AAAA,eAAG;AAAA;AACnG;AAEF,UAAI,IAAA,iBAAA,GAAoB,cAAe,CAAA,IAAA,GAAO,SAAY,GAAA,UAAA;AAE1D,UAAAA,KAAAA,CAAK,SAAY,GAAA,iBAAiB,CAAI,GAAA,cAAA;AACtC,UAAAA,KAAAA,CAAK,SAAY,GAAA,iBAAiB,CAAI,GAAA,cAAA;AACtC,UAAAA,MAAK,QAAW,GAAA,QAAA;AAChB,UAAA,IAAI,KAAK,IAAS,KAAA,EAAA,CAAG,UAAc,IAAA,IAAA,CAAK,UAAU,GAAK,EAAA;AACrD,YAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,2DAA2D,CAAA;AAAA;AAEpF,UAAA,OAAO,IAAK,CAAA,UAAA,CAAWA,KAAM,EAAA,KAAA,GAAQ,iBAAiB,CAAA;AAAA;AACxD;AAAA,QAIA,aAAgB,GAAA;AACd,UAAA,IAAIA,KAAO,GAAA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,KAAK,CAAA;AACvC,UAAAA,MAAK,IAAO,GAAA,SAAA;AACZ,UAAOA,OAAAA,KAAAA;AAAA;AACT;AAAA,QAIA,gBAAmB,GAAA;AACjB,UAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,UAAA,IAAA,CAAK,IAAK,EAAA;AACV,UAAO,OAAA,IAAA,CAAK,kBAAmB,CAAA,QAAA,EAAU,QAAQ,CAAA;AAAA;AACnD,QAEA,cAAc,sBAAwB,EAAA;AACpC,UAAI,IAAA,IAAA,CAAK,SAAS,GAAI,CAAA,OAAA;AACpB,YAAA,OAAO,KAAK,aAAc,EAAA;AAAA,eACnB,IAAA,IAAA,CAAK,SAAS,GAAI,CAAA,WAAA;AACzB,YAAA,OAAO,KAAK,gBAAiB,EAAA;AAAA;AAE7B,YAAO,OAAA,KAAA,CAAM,cAAc,sBAAsB,CAAA;AAAA;AACrD,QAEA,UAAUtD,KAAM,EAAA;AACd,UAAI,IAAA,OAAA,GAAU,KAAK,UAAW,EAAA;AAE9B,UAAA,IAAI,OAAY,KAAA,OAAA,EAAgB,OAAA,IAAA,CAAK,aAAc,EAAA;AAEnD,UAAI,IAAA,OAAA,KAAY,OAAW,IAAA,OAAA,KAAY,OAAS,EAAA;AAC9C,YAAA,IAAIE,kBAAkBF,CAAAA,KAAI,CAAG,EAAA,OAAO,KAAK,YAAa,EAAA;AAEtD,YAAA,IAAIA,SAAQ,EAAI,EAAA;AACd,cAAA,EAAE,IAAK,CAAA,GAAA;AACP,cAAO,OAAA,IAAA,CAAK,WAAY,CAAA,GAAA,CAAI,SAAS,CAAA;AAAA;AAGvC,YAAA,IAAA,CAAKA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,KAAO,OAAW,IAAA,OAAA;AAC7C,cAAO,OAAA,IAAA,CAAK,eAAeA,KAAI,CAAA;AAAA;AAGnC,UAAIA,IAAAA,KAAAA,KAAS,EAAM,IAAA,IAAA,CAAK,WAAe,IAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,IAAK,CAAA,GAAA,GAAM,CAAC,CAAA,KAAM,EAAI,EAAA;AACjF,YAAA,EAAE,IAAK,CAAA,GAAA;AACP,YAAO,OAAA,IAAA,CAAK,WAAY,CAAA,GAAA,CAAI,WAAW,CAAA;AAAA;AAEzC,UAAO,OAAA,KAAA,CAAM,UAAUA,KAAI,CAAA;AAAA;AAC7B,QAEA,cAAc,QAAU,EAAA;AACtB,UAAI,IAAA,IAAA,CAAK,IAAQ,IAAA,EAAA,CAAG,MAAQ,EAAA;AAC1B,YAAI,IAAA,UAAA,GAAa,KAAK,UAAW,EAAA;AACjC,YAAA,IAAI,cAAc,OAAS,EAAA,IAAA,CAAK,OAAQ,CAAA,IAAA,CAAK,YAAY,MAAM,CAAA;AAAA,iBAAA,IACtD,cAAc,OAAS,EAAA,IAAA,CAAK,OAAQ,CAAA,IAAA,CAAK,YAAY,MAAM,CAAA;AAAA,iBAC/D,KAAA,CAAM,cAAc,QAAQ,CAAA;AACjC,YAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AAAA,qBACV,IAAK,CAAA,IAAA,KAAS,GAAG,KAAS,IAAA,QAAA,KAAa,IAAI,WAAa,EAAA;AACjE,YAAA,IAAA,CAAK,QAAQ,MAAU,IAAA,CAAA;AACvB,YAAK,IAAA,CAAA,OAAA,CAAQ,KAAK,OAAO,CAAA;AACzB,YAAA,IAAA,CAAK,WAAc,GAAA,KAAA;AAAA,WACd,MAAA;AACL,YAAO,OAAA,KAAA,CAAM,cAAc,QAAQ,CAAA;AAAA;AACrC;AACF,OACF;AAAA;AACF;AAAA,CAAA,CAAA;;;ACveA,IAAA,cAAA,GAAA,UAAA,CAAA;AAAA,EAAA,qCAAA,CAAA,OAAA,EAAA,MAAA,EAAA;AAWC,IAAA,CAAC,WAAW;AAGX,MAAI,IAAA,SAAA;AAGJ,MAAI,IAAA,OAAO,WAAW,WAAa,EAAA;AACjC,QAAA,SAAA,GAAY,OAAO,OAAU,GAAA,MAAA;AAAA,OAI1B,MAAA;AAEH,QAAA,SAAA,GAAa,WAAU;AAAE,UAAO,OAAA,IAAA,IAAA,IAAW,IAAA,EAAM,MAAM,CAAA;AAAA,SAAI,EAAA;AAAA;AAG7D,MAAA,SAAA,CAAU,MAAS,GAAA,MAAA;AACnB,MAAA,SAAA,CAAU,QAAW,GAAA,QAAA;AAErB,MAAA,IAAI,OAAO,OAAY,KAAA,WAAA,IAAe,OAAO,OAAA,CAAQ,QAAQ,UAAY,EAAA;AACvE,QAAA,SAAA,CAAU,MAAS,GAAA,MAAA;AAAA;AAGrB,MAAA,SAAS,MAAkB,GAAA;AACzB,QAAA,OAAA,CAAQ,GAAI,CAAA,MAAA,CAAO,KAAM,CAAA,IAAA,EAAM,SAAS,CAAC,CAAA;AAAA;AAG3C,MAAS,SAAA,QAAA,CAAS,KAAK,YAAc,EAAA;AACnC,QAAO,OAAA,MAAA,CAAO,MAAM,IAAM,EAAA,CAAC,GAAG,CAAE,CAAA,MAAA,CAAO,YAAY,CAAC,CAAA;AAAA;AAGtD,MAAA,SAAS,OAAO,GAAK,EAAA;AACnB,QAAI,IAAA,QAAA,GAAW,CACX,EAAA,IAAA,GAAO,EAAC,CAAE,MAAM,IAAK,CAAA,SAAS,CAC9B,EAAA,CAAA,GAAI,CACJ,EAAA,CAAA,GAAI,IAAI,MACR,EAAA,MAAA,GAAS,EACT,EAAA,CAAA,EACA,OAAU,GAAA,KAAA,EACV,GACA,EAAA,GAAA,EACA,WAAc,GAAA,KAAA,EACd,SACA,EAAA,OAAA,GAAU,WAAW;AAAE,UAAA,OAAO,KAAK,QAAU,EAAA,CAAA;AAAA,SAAG,EAChD,cAAc,WAAW;AACvB,UAAA,IAAI,MAAS,GAAA,EAAA;AACb,UAAA,OAAO,IAAK,CAAA,IAAA,CAAK,GAAI,CAAA,CAAC,CAAC,CAAG,EAAA;AACxB,YAAA,MAAA,IAAU,IAAI,CAAG,EAAA,CAAA;AACjB,YAAA,CAAA,GAAI,IAAI,CAAC,CAAA;AAAA;AAEX,UAAA,OAAO,MAAO,CAAA,MAAA,GAAS,CAAI,GAAA,QAAA,CAAS,MAAM,CAAI,GAAA,IAAA;AAAA,SAChD;AAEJ,QAAO,OAAA,CAAA,GAAI,CAAG,EAAA,EAAE,CAAG,EAAA;AACjB,UAAA,CAAA,GAAI,IAAI,CAAC,CAAA;AACT,UAAA,IAAI,OAAS,EAAA;AACX,YAAU,OAAA,GAAA,KAAA;AACV,YAAA,IAAI,KAAK,GAAK,EAAA;AACZ,cAAc,WAAA,GAAA,KAAA;AACd,cAAI,CAAA,GAAA,GAAA,CAAI,EAAE,CAAC,CAAA;AAAA,uBAEJ,CAAK,IAAA,GAAA,IAAO,IAAI,CAAI,GAAA,CAAC,KAAK,GAAK,EAAA;AACtC,cAAc,WAAA,GAAA,IAAA;AACd,cAAK,CAAA,IAAA,CAAA;AACL,cAAA,CAAA,GAAI,IAAI,CAAC,CAAA;AAAA,aAEN,MAAA;AACH,cAAc,WAAA,GAAA,IAAA;AAAA;AAEhB,YAAA,SAAA,GAAY,WAAY,EAAA;AACxB,YAAA,QAAQ,CAAG;AAAA,cACX,KAAK,GAAA;AACH,gBAAA,MAAA,IAAU,SAAS,OAAQ,EAAA,EAAG,EAAE,CAAA,CAAE,SAAS,CAAC,CAAA;AAC5C,gBAAA;AAAA,cACF,KAAK,GAAA;AACH,gBAAA,GAAA,GAAM,OAAQ,EAAA;AACd,gBAAI,IAAA,OAAO,GAAQ,KAAA,QAAA,IAAY,GAAe,YAAA,MAAA;AAC5C,kBAAU,MAAA,IAAA,GAAA;AAAA;AAEV,kBAAA,MAAA,IAAU,MAAO,CAAA,YAAA,CAAa,QAAS,CAAA,GAAA,EAAK,EAAE,CAAC,CAAA;AACjD,gBAAA;AAAA,cACF,KAAK,GAAA;AACH,gBAAU,MAAA,IAAA,QAAA,CAAS,OAAQ,EAAA,EAAG,EAAE,CAAA;AAChC,gBAAA;AAAA,cACF,KAAK,GAAA;AACH,gBAAM,GAAA,GAAA,MAAA,CAAO,WAAW,OAAQ,EAAC,EAAE,OAAQ,CAAA,SAAA,IAAa,CAAC,CAAC,CAAA;AAC1D,gBAAA,MAAA,IAAU,WAAc,GAAA,GAAA,GAAM,GAAI,CAAA,OAAA,CAAQ,MAAM,EAAE,CAAA;AAClD,gBAAA;AAAA,cACF,KAAK,GAAA;AACH,gBAAU,MAAA,IAAA,IAAA,CAAK,SAAU,CAAA,OAAA,EAAS,CAAA;AAClC,gBAAA;AAAA,cACF,KAAK,GAAA;AACH,gBAAA,MAAA,IAAU,MAAM,QAAS,CAAA,OAAA,IAAW,EAAE,CAAA,CAAE,SAAS,CAAC,CAAA;AAClD,gBAAA;AAAA,cACF,KAAK,GAAA;AACH,gBAAA,MAAA,IAAU,OAAQ,EAAA;AAClB,gBAAA;AAAA,cACF,KAAK,GAAA;AACH,gBAAA,MAAA,IAAU,OAAO,QAAS,CAAA,OAAA,IAAW,EAAE,CAAA,CAAE,SAAS,EAAE,CAAA;AACpD,gBAAA;AAAA,cACF,KAAK,GAAA;AACH,gBAAU,MAAA,IAAA,IAAA,GAAO,SAAS,OAAQ,EAAA,EAAG,EAAE,CAAE,CAAA,QAAA,CAAS,EAAE,CAAA,CAAE,WAAY,EAAA;AAClE,gBAAA;AAAA,cACF;AACE,gBAAU,MAAA,IAAA,CAAA;AACV,gBAAA;AAAA;AACF,WACF,MAAA,IAAW,MAAM,GAAK,EAAA;AACpB,YAAU,OAAA,GAAA,IAAA;AAAA,WACL,MAAA;AACL,YAAU,MAAA,IAAA,CAAA;AAAA;AACZ;AAEF,QAAO,OAAA,MAAA;AAAA;AACT,KAEA,GAAA;AAAA;AAAA,CAAA,CAAA;;;AC5HF,IAAM,QAAN,MAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBX,GAAA,CAAId,KAAM,EAAA,QAAA,EAAU,KAAO,EAAA;AAC1B,IAAA,IAAI,OAAO,SAAA,CAAU,CAAC,CAAA,IAAK,QAAU,EAAA;AAEpC,MAASA,KAAAA,IAAAA,KAAAA,IAAQ,SAAU,CAAA,CAAC,CAAG,EAAA;AAC9B,QAAK,IAAA,CAAA,GAAA,CAAIA,OAAM,SAAU,CAAA,CAAC,EAAEA,KAAI,CAAA,EAAG,SAAU,CAAA,CAAC,CAAC,CAAA;AAAA;AAChD,KAEI,MAAA;AACJ,MAAC,CAAA,KAAA,CAAM,OAAQA,CAAAA,KAAI,CAAIA,GAAAA,KAAAA,GAAO,CAACA,KAAI,CAAA,EAAG,OAAQ,CAAA,SAAUA,KAAM,EAAA;AAC7D,QAAA,IAAA,CAAKA,KAAI,CAAA,GAAI,IAAKA,CAAAA,KAAI,KAAK,EAAC;AAE5B,QAAA,IAAI,QAAU,EAAA;AACb,UAAA,IAAA,CAAKA,KAAI,CAAE,CAAA,KAAA,GAAQ,SAAY,GAAA,MAAM,EAAE,QAAQ,CAAA;AAAA;AAChD,SACE,IAAI,CAAA;AAAA;AACR;AACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,GAAA,CAAIA,OAAM,GAAK,EAAA;AACd,IAAA,IAAA,CAAKA,KAAI,CAAA,GAAI,IAAKA,CAAAA,KAAI,KAAK,EAAC;AAC5B,IAAA,IAAA,CAAKA,KAAI,CAAA,CAAE,OAAQ,CAAA,SAAU,QAAU,EAAA;AACtC,MAAA,QAAA,CAAS,KAAK,GAAO,IAAA,GAAA,CAAI,UAAU,GAAI,CAAA,OAAA,GAAU,KAAK,GAAG,CAAA;AAAA,KACzD,CAAA;AAAA;AAEH,CAAA;AAKA,IAAM,UAAN,MAAc;AAAA,EACb,YAAYqK,KAAM,EAAA;AACjB,IAAA,IAAA,CAAK,IAAOA,GAAAA,KAAAA;AACZ,IAAA,IAAA,CAAK,aAAa,EAAC;AAAA;AACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,YAAY,OAAS,EAAA;AACpB,IAAQ,OAAA,CAAA,OAAA,CAAQ,CAAC,MAAW,KAAA;AAC3B,MAAI,IAAA,OAAO,WAAW,QAAY,IAAA,CAAC,OAAO,IAAQ,IAAA,CAAC,OAAO,IAAM,EAAA;AAC/D,QAAM,MAAA,IAAI,MAAM,4BAA4B,CAAA;AAAA;AAE7C,MAAA,IAAI,IAAK,CAAA,UAAA,CAAW,MAAO,CAAA,IAAI,CAAG,EAAA;AAEjC,QAAA;AAAA;AAED,MAAO,MAAA,CAAA,IAAA,CAAK,KAAK,IAAI,CAAA;AACrB,MAAK,IAAA,CAAA,UAAA,CAAW,MAAO,CAAA,IAAI,CAAI,GAAA,MAAA;AAAA,KAC/B,CAAA;AAAA;AAEH,CAAA;AAIA,IAAM,IAAA,GAAN,MAAM,KAAK,CAAA;AAAA;AAAA;AAAA;AAAA,EAIV,WAAW,OAAU,GAAA;AAEpB,IAAO,OAAA,OAAA;AAAA;AACR;AAAA;AAAA;AAAA,EAKA,OAAO,QAAW,GAAA;AACjB,IAAA,OAAO,0CAA0C,KAAK,CAAA,OAAA;AAAA;AACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,WAAW,OAAS,EAAA;AAC1B,IAAA,KAAA,CAAK,eAAe,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,MAAA,EAAQ,MAAK,YAAY,CAAA;AAC9D,IAAK,KAAA,CAAA,SAAA,CAAU,OAAO,CAAI,GAAA,CAAA;AAC1B,IAAO,OAAA,KAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,WAAA,CAAY,OAAS,EAAA,UAAA,EAAY,kBAAoB,EAAA;AAC3D,IAAA,KAAA,CAAK,gBAAgB,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,MAAA,EAAQ,MAAK,aAAa,CAAA;AAChE,IAAK,KAAA,CAAA,UAAA,CAAW,OAAO,CAAI,GAAA,UAAA;AAC3B,IAAA,IAAI,kBAAoB,EAAA;AACvB,MAAK,KAAA,CAAA,iBAAA,CAAkB,IAAI,OAAO,CAAA;AAAA,KAE9B,MAAA;AACJ,MAAK,KAAA,CAAA,iBAAA,CAAkB,OAAO,OAAO,CAAA;AAAA;AAEtC,IAAO,OAAA,KAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,kBAAkB,IAAM,EAAA;AAC9B,IAAK,KAAA,CAAA,2BAAA,CAA4B,IAAI,IAAI,CAAA;AACzC,IAAO,OAAA,KAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,UAAW,CAAA,YAAA,EAAc,aAAe,EAAA;AAC9C,IAAK,KAAA,CAAA,QAAA,CAAS,YAAY,CAAI,GAAA,aAAA;AAC9B,IAAO,OAAA,KAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,cAAc,OAAS,EAAA;AAC7B,IAAO,OAAA,KAAA,CAAK,UAAU,OAAO,CAAA;AAC7B,IAAI,IAAA,OAAA,CAAQ,MAAW,KAAA,KAAA,CAAK,YAAc,EAAA;AACzC,MAAA,KAAA,CAAK,YAAe,GAAA,KAAA,CAAK,YAAa,CAAA,KAAA,CAAK,SAAS,CAAA;AAAA;AAErD,IAAO,OAAA,KAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,iBAAoB,GAAA;AAC1B,IAAA,KAAA,CAAK,YAAY,EAAC;AAClB,IAAA,KAAA,CAAK,YAAe,GAAA,CAAA;AAEpB,IAAO,OAAA,KAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,qBAAqB,IAAM,EAAA;AACjC,IAAK,KAAA,CAAA,2BAAA,CAA4B,OAAO,IAAI,CAAA;AAC5C,IAAO,OAAA,KAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,eAAe,OAAS,EAAA;AAC9B,IAAO,OAAA,KAAA,CAAK,WAAW,OAAO,CAAA;AAE9B,IAAI,IAAA,OAAA,CAAQ,MAAW,KAAA,KAAA,CAAK,aAAe,EAAA;AAC1C,MAAA,KAAA,CAAK,aAAgB,GAAA,KAAA,CAAK,YAAa,CAAA,KAAA,CAAK,UAAU,CAAA;AAAA;AAEvD,IAAK,KAAA,CAAA,iBAAA,CAAkB,OAAO,OAAO,CAAA;AAErC,IAAO,OAAA,KAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,kBAAqB,GAAA;AAC3B,IAAA,KAAA,CAAK,aAAa,EAAC;AACnB,IAAA,KAAA,CAAK,aAAgB,GAAA,CAAA;AAErB,IAAO,OAAA,KAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,cAAc,YAAc,EAAA;AAClC,IAAO,OAAA,KAAA,CAAK,SAAS,YAAY,CAAA;AACjC,IAAO,OAAA,KAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,iBAAoB,GAAA;AAC1B,IAAA,KAAA,CAAK,WAAW,EAAC;AAEjB,IAAO,OAAA,KAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,IAAO,GAAA;AACV,IAAA,OAAO,IAAK,CAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,KAAK,CAAA;AAAA;AACnC;AAAA;AAAA;AAAA,EAKA,IAAI,IAAO,GAAA;AACV,IAAA,OAAO,IAAK,CAAA,IAAA,CAAK,UAAW,CAAA,IAAA,CAAK,KAAK,CAAA;AAAA;AACvC;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,IAAM,EAAA;AAGjB,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AACZ,IAAA,IAAA,CAAK,KAAQ,GAAA,CAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,MAAM,IAAM,EAAA;AAClB,IAAA,OAAQ,IAAI,KAAA,CAAK,IAAI,CAAA,CAAG,KAAM,EAAA;AAAA;AAC/B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,aAAa,GAAK,EAAA;AACxB,IAAA,OAAO,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,GAAG,MAAO,CAAA,IAAA,CAAK,GAAG,CAAA,CAAE,GAAI,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,MAAM,CAAC,CAAA;AAAA;AAC1D;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,eAAe,EAAI,EAAA;AACzB,IAAQ,OAAA,EAAA,IAAM,MAAM,EAAM,IAAA,EAAA;AAAA;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,iBAAiB,MAAQ,EAAA;AAC/B,IAAO,OAAA,KAAA,CAAK,UAAW,CAAA,MAAM,CAAK,IAAA,CAAA;AAAA;AACnC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,kBAAkB,EAAI,EAAA;AAC5B,IAAS,OAAA,EAAA,IAAM,MAAM,EAAM,IAAA,EAAA;AAAA,IACzB,EAAA,IAAM,MAAM,EAAM,IAAA,GAAA;AAAA,IAClB,EAAA,IAAM,OAAO,CAAC,KAAA,CAAK,WAAW,MAAO,CAAA,YAAA,CAAa,EAAE,CAAC,CAAA;AAAA,IACrD,MAAK,2BAA4B,CAAA,GAAA,CAAI,MAAO,CAAA,YAAA,CAAa,EAAE,CAAC,CAAA;AAAA;AAC/D;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,iBAAiB,EAAI,EAAA;AAC3B,IAAA,OAAO,MAAK,iBAAkB,CAAA,EAAE,CAAK,IAAA,KAAA,CAAK,eAAe,EAAE,CAAA;AAAA;AAC5D;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,OAAS,EAAA;AACnB,IAAA,MAAM,QAAQ,IAAI,KAAA,CAAM,OAAU,GAAA,gBAAA,GAAmB,KAAK,KAAK,CAAA;AAC/D,IAAA,KAAA,CAAM,QAAQ,IAAK,CAAA,KAAA;AACnB,IAAA,KAAA,CAAM,WAAc,GAAA,OAAA;AACpB,IAAM,MAAA,KAAA;AAAA;AACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAA,CAAQrK,OAAMoE,KAAM,EAAA;AACnB,IAAI,IAAA,KAAA,CAAK,KAAMpE,CAAAA,KAAI,CAAG,EAAA;AACrB,MAAA,MAAM,GAAM,GAAA,EAAE,OAAS,EAAA,IAAA,EAAM,MAAAoE,KAAK,EAAA;AAClC,MAAK,KAAA,CAAA,KAAA,CAAM,GAAIpE,CAAAA,KAAAA,EAAM,GAAG,CAAA;AACxB,MAAA,OAAO,GAAI,CAAA,IAAA;AAAA;AAEZ,IAAOoE,OAAAA,KAAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAWpE,KAAM,EAAA;AAChB,IAAI,IAAA,KAAA,CAAK,KAAMA,CAAAA,KAAI,CAAG,EAAA;AACrB,MAAM,MAAA,GAAA,GAAM,EAAE,OAAA,EAAS,IAAK,EAAA;AAC5B,MAAA,KAAA,CAAK,KAAMA,CAAAA,KAAI,CAAE,CAAA,IAAA,CAAK,SAAU,QAAU,EAAA;AACzC,QAAS,QAAA,CAAA,IAAA,CAAK,GAAI,CAAA,OAAA,EAAS,GAAG,CAAA;AAC9B,QAAA,OAAO,GAAI,CAAA,IAAA;AAAA,OACX,CAAA;AACD,MAAA,OAAO,GAAI,CAAA,IAAA;AAAA;AACZ;AACD;AAAA;AAAA;AAAA,EAKA,YAAe,GAAA;AACd,IAAA,IAAI,KAAK,IAAK,CAAA,IAAA;AAEd,IAAO,OAAA,EAAA,KAAO,KAAK,CAAA,UAAA,IAChB,EAAO,KAAA,KAAA,CAAK,QACZ,IAAA,EAAA,KAAO,KAAK,CAAA,OAAA,IACZ,EAAO,KAAA,KAAA,CAAK,OAAS,EAAA;AACvB,MAAA,EAAA,GAAK,IAAK,CAAA,IAAA,CAAK,UAAW,CAAA,EAAE,KAAK,KAAK,CAAA;AAAA;AAEvC,IAAA,IAAA,CAAK,QAAQ,eAAe,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA,EAMA,KAAQ,GAAA;AACP,IAAA,IAAA,CAAK,QAAQ,YAAY,CAAA;AACzB,IAAM,MAAA,KAAA,GAAQ,KAAK,iBAAkB,EAAA;AAGrC,IAAA,MAAMoE,QAAO,KAAM,CAAA,MAAA,KAAW,CAC1B,GAAA,KAAA,CAAM,CAAC,CACR,GAAA;AAAA,MACD,MAAM,KAAK,CAAA,QAAA;AAAA,MACX,IAAM,EAAA;AAAA,KACP;AACD,IAAO,OAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,EAAaA,KAAI,CAAA;AAAA;AACtC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,kBAAkB,UAAY,EAAA;AAC7B,IAAI,IAAA,KAAA,GAAQ,EAAC,EAAG,IAAMA,EAAAA,KAAAA;AAEtB,IAAA,OAAO,IAAK,CAAA,KAAA,GAAQ,IAAK,CAAA,IAAA,CAAK,MAAQ,EAAA;AACrC,MAAA,IAAA,GAAO,IAAK,CAAA,IAAA;AAIZ,MAAA,IAAI,IAAS,KAAA,KAAA,CAAK,WAAe,IAAA,IAAA,KAAS,MAAK,UAAY,EAAA;AAC1D,QAAK,IAAA,CAAA,KAAA,EAAA;AAAA,OAED,MAAA;AAEJ,QAAIA,IAAAA,KAAAA,GAAO,IAAK,CAAA,gBAAA,EAAoB,EAAA;AACnC,UAAA,KAAA,CAAM,KAAKA,KAAI,CAAA;AAAA,SAIP,MAAA,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,KAAK,MAAQ,EAAA;AACvC,UAAA,IAAI,SAAS,UAAY,EAAA;AACxB,YAAA;AAAA;AAED,UAAA,IAAA,CAAK,UAAW,CAAA,cAAA,GAAiB,IAAK,CAAA,IAAA,GAAO,GAAG,CAAA;AAAA;AACjD;AACD;AAGD,IAAO,OAAA,KAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAmB,GAAA;AAClB,IAAA,MAAMA,QAAO,IAAK,CAAA,UAAA,CAAW,mBAAmB,CAAA,IAAK,KAAK,sBAAuB,EAAA;AACjF,IAAA,IAAA,CAAK,YAAa,EAAA;AAElB,IAAO,OAAA,IAAA,CAAK,OAAQ,CAAA,kBAAA,EAAoBA,KAAI,CAAA;AAAA;AAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,cAAiB,GAAA;AAChB,IAAA,IAAA,CAAK,YAAa,EAAA;AAClB,IAAA,IAAI,WAAW,IAAK,CAAA,IAAA,CAAK,OAAO,IAAK,CAAA,KAAA,EAAO,MAAK,aAAa,CAAA;AAC9D,IAAA,IAAI,SAAS,QAAS,CAAA,MAAA;AAEtB,IAAA,OAAO,SAAS,CAAG,EAAA;AAIlB,MAAA,IAAI,KAAK,CAAA,UAAA,CAAW,cAAe,CAAA,QAAQ,CAC1C,KAAA,CAAC,KAAK,CAAA,iBAAA,CAAkB,IAAK,CAAA,IAAI,CAChC,IAAA,IAAA,CAAK,KAAQ,GAAA,QAAA,CAAS,MAAS,GAAA,IAAA,CAAK,IAAK,CAAA,MAAA,IAAU,CAAC,KAAA,CAAK,gBAAiB,CAAA,IAAA,CAAK,IAAK,CAAA,UAAA,CAAW,IAAK,CAAA,KAAA,GAAQ,QAAS,CAAA,MAAM,CAAC,CAC3H,CAAA,EAAA;AACF,QAAA,IAAA,CAAK,KAAS,IAAA,MAAA;AACd,QAAO,OAAA,QAAA;AAAA;AAER,MAAA,QAAA,GAAW,QAAS,CAAA,MAAA,CAAO,CAAG,EAAA,EAAE,MAAM,CAAA;AAAA;AAEvC,IAAO,OAAA,KAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,sBAAyB,GAAA;AACxB,IAAA,IAAIA,OAAM,IAAM,EAAA,IAAA,EAAM,OAAO,SAAW,EAAA,IAAA,EAAM,OAAO,CAAG,EAAA,QAAA;AAKxD,IAAA,IAAA,GAAO,KAAK,WAAY,EAAA;AACxB,IAAA,IAAI,CAAC,IAAM,EAAA;AACV,MAAO,OAAA,IAAA;AAAA;AAER,IAAA,IAAA,GAAO,KAAK,cAAe,EAAA;AAG3B,IAAA,IAAI,CAAC,IAAM,EAAA;AACV,MAAO,OAAA,IAAA;AAAA;AAKR,IAAA,SAAA,GAAY,EAAE,KAAA,EAAO,IAAM,EAAA,IAAA,EAAM,KAAK,CAAA,gBAAA,CAAiB,IAAI,CAAA,EAAG,OAAS,EAAA,KAAA,CAAK,iBAAkB,CAAA,GAAA,CAAI,IAAI,CAAE,EAAA;AAExG,IAAA,KAAA,GAAQ,KAAK,WAAY,EAAA;AAEzB,IAAA,IAAI,CAAC,KAAO,EAAA;AACX,MAAK,IAAA,CAAA,UAAA,CAAW,+BAA+B,IAAI,CAAA;AAAA;AAGpD,IAAQ,KAAA,GAAA,CAAC,IAAM,EAAA,SAAA,EAAW,KAAK,CAAA;AAG/B,IAAQ,OAAA,IAAA,GAAO,IAAK,CAAA,cAAA,EAAmB,EAAA;AACtC,MAAO,IAAA,GAAA,KAAA,CAAK,iBAAiB,IAAI,CAAA;AAEjC,MAAA,IAAI,SAAS,CAAG,EAAA;AACf,QAAA,IAAA,CAAK,SAAS,IAAK,CAAA,MAAA;AACnB,QAAA;AAAA;AAGD,MAAY,SAAA,GAAA,EAAE,OAAO,IAAM,EAAA,IAAA,EAAM,SAAS,KAAK,CAAA,iBAAA,CAAkB,GAAI,CAAA,IAAI,CAAE,EAAA;AAE3E,MAAW,QAAA,GAAA,IAAA;AAGX,MAAM,MAAA,WAAA,GAAc,CAAQ,IAAA,KAAA,SAAA,CAAU,OAAW,IAAA,IAAA,CAAK,UACnD,IAAO,GAAA,IAAA,CAAK,IACZ,GAAA,IAAA,IAAQ,IAAK,CAAA,IAAA;AAChB,MAAQ,OAAA,KAAA,CAAM,SAAS,CAAM,IAAA,WAAA,CAAY,MAAM,KAAM,CAAA,MAAA,GAAS,CAAC,CAAC,CAAG,EAAA;AAClE,QAAA,KAAA,GAAQ,MAAM,GAAI,EAAA;AAClB,QAAO,IAAA,GAAA,KAAA,CAAM,KAAM,CAAA,KAAA;AACnB,QAAA,IAAA,GAAO,MAAM,GAAI,EAAA;AACjB,QAAAA,KAAO,GAAA;AAAA,UACN,MAAM,KAAK,CAAA,UAAA;AAAA,UACX,QAAU,EAAA,IAAA;AAAA,UACV,IAAA;AAAA,UACA;AAAA,SACD;AACA,QAAA,KAAA,CAAM,KAAKA,KAAI,CAAA;AAAA;AAGhB,MAAAA,KAAAA,GAAO,KAAK,WAAY,EAAA;AAExB,MAAA,IAAI,CAACA,KAAM,EAAA;AACV,QAAK,IAAA,CAAA,UAAA,CAAW,+BAA+B,QAAQ,CAAA;AAAA;AAGxD,MAAM,KAAA,CAAA,IAAA,CAAK,WAAWA,KAAI,CAAA;AAAA;AAG3B,IAAA,CAAA,GAAI,MAAM,MAAS,GAAA,CAAA;AACnB,IAAAA,KAAAA,GAAO,MAAM,CAAC,CAAA;AAEd,IAAA,OAAO,IAAI,CAAG,EAAA;AACb,MAAAA,KAAO,GAAA;AAAA,QACN,MAAM,KAAK,CAAA,UAAA;AAAA,QACX,QAAU,EAAA,KAAA,CAAM,CAAI,GAAA,CAAC,CAAE,CAAA,KAAA;AAAA,QACvB,IAAA,EAAM,KAAM,CAAA,CAAA,GAAI,CAAC,CAAA;AAAA,QACjB,KAAOA,EAAAA;AAAA,OACR;AACA,MAAK,CAAA,IAAA,CAAA;AAAA;AAGN,IAAOA,OAAAA,KAAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAc,GAAA;AACb,IAAI,IAAA,EAAA,EAAI,UAAU,MAAQA,EAAAA,KAAAA;AAE1B,IAAA,IAAA,CAAK,YAAa,EAAA;AAClB,IAAAA,KAAAA,GAAO,IAAK,CAAA,UAAA,CAAW,cAAc,CAAA;AACrC,IAAA,IAAIA,KAAM,EAAA;AACT,MAAO,OAAA,IAAA,CAAK,OAAQ,CAAA,aAAA,EAAeA,KAAI,CAAA;AAAA;AAGxC,IAAA,EAAA,GAAK,IAAK,CAAA,IAAA;AAEV,IAAA,IAAI,MAAK,cAAe,CAAA,EAAE,CAAK,IAAA,EAAA,KAAO,MAAK,WAAa,EAAA;AAEvD,MAAA,OAAO,KAAK,oBAAqB,EAAA;AAAA;AAGlC,IAAA,IAAI,EAAO,KAAA,KAAA,CAAK,WAAe,IAAA,EAAA,KAAO,MAAK,WAAa,EAAA;AAEvD,MAAAA,KAAAA,GAAO,KAAK,mBAAoB,EAAA;AAAA,KACjC,MAAA,IACS,EAAO,KAAA,KAAA,CAAK,WAAa,EAAA;AACjC,MAAAA,KAAAA,GAAO,KAAK,WAAY,EAAA;AAAA,KAEpB,MAAA;AACJ,MAAA,QAAA,GAAW,KAAK,IAAK,CAAA,MAAA,CAAO,IAAK,CAAA,KAAA,EAAO,MAAK,YAAY,CAAA;AACzD,MAAA,MAAA,GAAS,QAAS,CAAA,MAAA;AAElB,MAAA,OAAO,SAAS,CAAG,EAAA;AAIlB,QAAA,IAAI,KAAK,CAAA,SAAA,CAAU,cAAe,CAAA,QAAQ,CACzC,KAAA,CAAC,KAAK,CAAA,iBAAA,CAAkB,IAAK,CAAA,IAAI,CAChC,IAAA,IAAA,CAAK,KAAQ,GAAA,QAAA,CAAS,MAAS,GAAA,IAAA,CAAK,IAAK,CAAA,MAAA,IAAU,CAAC,KAAA,CAAK,gBAAiB,CAAA,IAAA,CAAK,IAAK,CAAA,UAAA,CAAW,IAAK,CAAA,KAAA,GAAQ,QAAS,CAAA,MAAM,CAAC,CAC3H,CAAA,EAAA;AACF,UAAA,IAAA,CAAK,KAAS,IAAA,MAAA;AACd,UAAM,MAAA,QAAA,GAAW,KAAK,WAAY,EAAA;AAClC,UAAA,IAAI,CAAC,QAAU,EAAA;AACd,YAAA,IAAA,CAAK,WAAW,0BAA0B,CAAA;AAAA;AAE3C,UAAO,OAAA,IAAA,CAAK,QAAQ,aAAe,EAAA;AAAA,YAClC,MAAM,KAAK,CAAA,SAAA;AAAA,YACX,QAAU,EAAA,QAAA;AAAA,YACV,QAAA;AAAA,YACA,MAAQ,EAAA;AAAA,WACR,CAAA;AAAA;AAGF,QAAA,QAAA,GAAW,QAAS,CAAA,MAAA,CAAO,CAAG,EAAA,EAAE,MAAM,CAAA;AAAA;AAGvC,MAAI,IAAA,KAAA,CAAK,iBAAkB,CAAA,EAAE,CAAG,EAAA;AAC/B,QAAAA,KAAAA,GAAO,KAAK,gBAAiB,EAAA;AAC7B,QAAA,IAAI,KAAK,CAAA,QAAA,CAAS,cAAeA,CAAAA,KAAAA,CAAK,IAAI,CAAG,EAAA;AAC5C,UAAAA,KAAO,GAAA;AAAA,YACN,MAAM,KAAK,CAAA,OAAA;AAAA,YACX,KAAO,EAAA,KAAA,CAAK,QAASA,CAAAA,KAAAA,CAAK,IAAI,CAAA;AAAA,YAC9B,KAAKA,KAAK,CAAA;AAAA,WACX;AAAA,SAEQA,MAAAA,IAAAA,KAAAA,CAAK,IAAS,KAAA,KAAA,CAAK,QAAU,EAAA;AACrC,UAAAA,KAAO,GAAA,EAAE,IAAM,EAAA,KAAA,CAAK,QAAS,EAAA;AAAA;AAC9B,OACD,MAAA,IACS,EAAO,KAAA,KAAA,CAAK,WAAa,EAAA;AACjC,QAAAA,KAAAA,GAAO,KAAK,WAAY,EAAA;AAAA;AACzB;AAGD,IAAA,IAAI,CAACA,KAAM,EAAA;AACV,MAAO,OAAA,IAAA,CAAK,OAAQ,CAAA,aAAA,EAAe,KAAK,CAAA;AAAA;AAGzC,IAAAA,KAAAA,GAAO,IAAK,CAAA,mBAAA,CAAoBA,KAAI,CAAA;AACpC,IAAO,OAAA,IAAA,CAAK,OAAQ,CAAA,aAAA,EAAeA,KAAI,CAAA;AAAA;AACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,oBAAoBA,KAAM,EAAA;AACzB,IAAA,IAAA,CAAK,YAAa,EAAA;AAElB,IAAA,IAAI,KAAK,IAAK,CAAA,IAAA;AACd,IAAO,OAAA,EAAA,KAAO,KAAK,CAAA,WAAA,IAAe,EAAO,KAAA,KAAA,CAAK,WAAe,IAAA,EAAA,KAAO,KAAK,CAAA,WAAA,IAAe,EAAO,KAAA,KAAA,CAAK,WAAa,EAAA;AAChH,MAAI,IAAA,QAAA;AACJ,MAAI,IAAA,EAAA,KAAO,MAAK,WAAa,EAAA;AAC5B,QAAI,IAAA,IAAA,CAAK,KAAK,UAAW,CAAA,IAAA,CAAK,QAAQ,CAAC,CAAA,KAAM,MAAK,WAAa,EAAA;AAC9D,UAAA;AAAA;AAED,QAAW,QAAA,GAAA,IAAA;AACX,QAAA,IAAA,CAAK,KAAS,IAAA,CAAA;AACd,QAAA,IAAA,CAAK,YAAa,EAAA;AAClB,QAAA,EAAA,GAAK,IAAK,CAAA,IAAA;AAAA;AAEX,MAAK,IAAA,CAAA,KAAA,EAAA;AAEL,MAAI,IAAA,EAAA,KAAO,MAAK,WAAa,EAAA;AAC5B,QAAAA,KAAO,GAAA;AAAA,UACN,MAAM,KAAK,CAAA,UAAA;AAAA,UACX,QAAU,EAAA,IAAA;AAAA,UACV,MAAQA,EAAAA,KAAAA;AAAA,UACR,QAAA,EAAU,KAAK,gBAAiB;AAAA,SACjC;AACA,QAAI,IAAA,CAACA,MAAK,QAAU,EAAA;AACnB,UAAA,IAAA,CAAK,UAAW,CAAA,cAAA,GAAiB,IAAK,CAAA,IAAA,GAAO,GAAG,CAAA;AAAA;AAEjD,QAAA,IAAA,CAAK,YAAa,EAAA;AAClB,QAAA,EAAA,GAAK,IAAK,CAAA,IAAA;AACV,QAAI,IAAA,EAAA,KAAO,MAAK,WAAa,EAAA;AAC5B,UAAA,IAAA,CAAK,WAAW,YAAY,CAAA;AAAA;AAE7B,QAAK,IAAA,CAAA,KAAA,EAAA;AAAA,OACN,MAAA,IACS,EAAO,KAAA,KAAA,CAAK,WAAa,EAAA;AAEjC,QAAAA,KAAO,GAAA;AAAA,UACN,MAAM,KAAK,CAAA,QAAA;AAAA,UACX,WAAa,EAAA,IAAA,CAAK,eAAgB,CAAA,KAAA,CAAK,WAAW,CAAA;AAAA,UAClD,MAAQA,EAAAA;AAAA,SACT;AAAA,OAEQ,MAAA,IAAA,EAAA,KAAO,KAAK,CAAA,WAAA,IAAe,QAAU,EAAA;AAC7C,QAAA,IAAI,QAAU,EAAA;AACb,UAAK,IAAA,CAAA,KAAA,EAAA;AAAA;AAEN,QAAA,IAAA,CAAK,YAAa,EAAA;AAClB,QAAAA,KAAO,GAAA;AAAA,UACN,MAAM,KAAK,CAAA,UAAA;AAAA,UACX,QAAU,EAAA,KAAA;AAAA,UACV,MAAQA,EAAAA,KAAAA;AAAA,UACR,QAAA,EAAU,KAAK,gBAAiB;AAAA,SACjC;AAAA;AAGD,MAAA,IAAI,QAAU,EAAA;AACb,QAAAA,MAAK,QAAW,GAAA,IAAA;AAAA;AAGjB,MAAA,IAAA,CAAK,YAAa,EAAA;AAClB,MAAA,EAAA,GAAK,IAAK,CAAA,IAAA;AAAA;AAGX,IAAOA,OAAAA,KAAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,oBAAuB,GAAA;AACtB,IAAI,IAAA,MAAA,GAAS,IAAI,EAAI,EAAA,MAAA;AAErB,IAAA,OAAO,KAAK,CAAA,cAAA,CAAe,IAAK,CAAA,IAAI,CAAG,EAAA;AACtC,MAAA,MAAA,IAAU,IAAK,CAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,KAAO,EAAA,CAAA;AAAA;AAGxC,IAAI,IAAA,IAAA,CAAK,IAAS,KAAA,KAAA,CAAK,WAAa,EAAA;AACnC,MAAA,MAAA,IAAU,IAAK,CAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,KAAO,EAAA,CAAA;AAEvC,MAAA,OAAO,KAAK,CAAA,cAAA,CAAe,IAAK,CAAA,IAAI,CAAG,EAAA;AACtC,QAAA,MAAA,IAAU,IAAK,CAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,KAAO,EAAA,CAAA;AAAA;AACxC;AAGD,IAAA,EAAA,GAAK,IAAK,CAAA,IAAA;AAEV,IAAI,IAAA,EAAA,KAAO,GAAO,IAAA,EAAA,KAAO,GAAK,EAAA;AAC7B,MAAA,MAAA,IAAU,IAAK,CAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,KAAO,EAAA,CAAA;AACvC,MAAA,EAAA,GAAK,IAAK,CAAA,IAAA;AAEV,MAAI,IAAA,EAAA,KAAO,GAAO,IAAA,EAAA,KAAO,GAAK,EAAA;AAC7B,QAAA,MAAA,IAAU,IAAK,CAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,KAAO,EAAA,CAAA;AAAA;AAGxC,MAAA,OAAO,KAAK,CAAA,cAAA,CAAe,IAAK,CAAA,IAAI,CAAG,EAAA;AACtC,QAAA,MAAA,IAAU,IAAK,CAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,KAAO,EAAA,CAAA;AAAA;AAGxC,MAAI,IAAA,CAAC,KAAK,CAAA,cAAA,CAAe,IAAK,CAAA,IAAA,CAAK,WAAW,IAAK,CAAA,KAAA,GAAQ,CAAC,CAAC,CAAI,EAAA;AAChE,QAAA,IAAA,CAAK,UAAW,CAAA,qBAAA,GAAwB,MAAS,GAAA,IAAA,CAAK,OAAO,GAAG,CAAA;AAAA;AACjE;AAGD,IAAA,MAAA,GAAS,IAAK,CAAA,IAAA;AAGd,IAAI,IAAA,KAAA,CAAK,iBAAkB,CAAA,MAAM,CAAG,EAAA;AACnC,MAAA,IAAA,CAAK,UAAW,CAAA,6CAAA,GACf,MAAS,GAAA,IAAA,CAAK,OAAO,GAAG,CAAA;AAAA,KAEjB,MAAA,IAAA,MAAA,KAAW,KAAK,CAAA,WAAA,IAAgB,MAAO,CAAA,MAAA,KAAW,CAAK,IAAA,MAAA,CAAO,UAAW,CAAA,CAAC,CAAM,KAAA,KAAA,CAAK,WAAc,EAAA;AAC3G,MAAA,IAAA,CAAK,WAAW,mBAAmB,CAAA;AAAA;AAGpC,IAAO,OAAA;AAAA,MACN,MAAM,KAAK,CAAA,OAAA;AAAA,MACX,KAAA,EAAO,WAAW,MAAM,CAAA;AAAA,MACxB,GAAK,EAAA;AAAA,KACN;AAAA;AACD;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,mBAAsB,GAAA;AACrB,IAAA,IAAI,GAAM,GAAA,EAAA;AACV,IAAA,MAAM,aAAa,IAAK,CAAA,KAAA;AACxB,IAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,IAAK,CAAA,MAAA,CAAO,KAAK,KAAO,EAAA,CAAA;AAC3C,IAAA,IAAI,MAAS,GAAA,KAAA;AAEb,IAAA,OAAO,IAAK,CAAA,KAAA,GAAQ,IAAK,CAAA,IAAA,CAAK,MAAQ,EAAA;AACrC,MAAA,IAAI,EAAK,GAAA,IAAA,CAAK,IAAK,CAAA,MAAA,CAAO,KAAK,KAAO,EAAA,CAAA;AAEtC,MAAA,IAAI,OAAO,KAAO,EAAA;AACjB,QAAS,MAAA,GAAA,IAAA;AACT,QAAA;AAAA,OACD,MAAA,IACS,OAAO,IAAM,EAAA;AAErB,QAAA,EAAA,GAAK,IAAK,CAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,KAAO,EAAA,CAAA;AAElC,QAAA,QAAQ,EAAI;AAAA,UACX,KAAK,GAAA;AAAK,YAAO,GAAA,IAAA,IAAA;AAAM,YAAA;AAAA,UACvB,KAAK,GAAA;AAAK,YAAO,GAAA,IAAA,IAAA;AAAM,YAAA;AAAA,UACvB,KAAK,GAAA;AAAK,YAAO,GAAA,IAAA,GAAA;AAAM,YAAA;AAAA,UACvB,KAAK,GAAA;AAAK,YAAO,GAAA,IAAA,IAAA;AAAM,YAAA;AAAA,UACvB,KAAK,GAAA;AAAK,YAAO,GAAA,IAAA,IAAA;AAAM,YAAA;AAAA,UACvB,KAAK,GAAA;AAAK,YAAO,GAAA,IAAA,IAAA;AAAQ,YAAA;AAAA,UACzB;AAAU,YAAO,GAAA,IAAA,EAAA;AAAA;AAClB,OAEI,MAAA;AACJ,QAAO,GAAA,IAAA,EAAA;AAAA;AACR;AAGD,IAAA,IAAI,CAAC,MAAQ,EAAA;AACZ,MAAK,IAAA,CAAA,UAAA,CAAW,wBAA2B,GAAA,GAAA,GAAM,GAAG,CAAA;AAAA;AAGrD,IAAO,OAAA;AAAA,MACN,MAAM,KAAK,CAAA,OAAA;AAAA,MACX,KAAO,EAAA,GAAA;AAAA,MACP,KAAK,IAAK,CAAA,IAAA,CAAK,SAAU,CAAA,UAAA,EAAY,KAAK,KAAK;AAAA,KAChD;AAAA;AACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,gBAAmB,GAAA;AAClB,IAAA,IAAI,EAAK,GAAA,IAAA,CAAK,IAAM3B,EAAAA,MAAAA,GAAQ,IAAK,CAAA,KAAA;AAEjC,IAAI,IAAA,KAAA,CAAK,iBAAkB,CAAA,EAAE,CAAG,EAAA;AAC/B,MAAK,IAAA,CAAA,KAAA,EAAA;AAAA,KAED,MAAA;AACJ,MAAK,IAAA,CAAA,UAAA,CAAW,aAAgB,GAAA,IAAA,CAAK,IAAI,CAAA;AAAA;AAG1C,IAAA,OAAO,IAAK,CAAA,KAAA,GAAQ,IAAK,CAAA,IAAA,CAAK,MAAQ,EAAA;AACrC,MAAA,EAAA,GAAK,IAAK,CAAA,IAAA;AAEV,MAAI,IAAA,KAAA,CAAK,gBAAiB,CAAA,EAAE,CAAG,EAAA;AAC9B,QAAK,IAAA,CAAA,KAAA,EAAA;AAAA,OAED,MAAA;AACJ,QAAA;AAAA;AACD;AAED,IAAO,OAAA;AAAA,MACN,MAAM,KAAK,CAAA,UAAA;AAAA,MACX,MAAM,IAAK,CAAA,IAAA,CAAK,KAAMA,CAAAA,MAAAA,EAAO,KAAK,KAAK;AAAA,KACxC;AAAA;AACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,gBAAgB,WAAa,EAAA;AAC5B,IAAA,MAAM,OAAO,EAAC;AACd,IAAA,IAAI,MAAS,GAAA,KAAA;AACb,IAAA,IAAI,eAAkB,GAAA,CAAA;AAEtB,IAAA,OAAO,IAAK,CAAA,KAAA,GAAQ,IAAK,CAAA,IAAA,CAAK,MAAQ,EAAA;AACrC,MAAA,IAAA,CAAK,YAAa,EAAA;AAClB,MAAA,IAAI,OAAO,IAAK,CAAA,IAAA;AAEhB,MAAA,IAAI,SAAS,WAAa,EAAA;AACzB,QAAS,MAAA,GAAA,IAAA;AACT,QAAK,IAAA,CAAA,KAAA,EAAA;AAEL,QAAA,IAAI,gBAAgB,KAAK,CAAA,WAAA,IAAe,eAAmB,IAAA,eAAA,IAAmB,KAAK,MAAO,EAAA;AACzF,UAAA,IAAA,CAAK,UAAW,CAAA,mBAAA,GAAsB,MAAO,CAAA,YAAA,CAAa,WAAW,CAAC,CAAA;AAAA;AAGvE,QAAA;AAAA,OACD,MAAA,IACS,IAAS,KAAA,KAAA,CAAK,UAAY,EAAA;AAClC,QAAK,IAAA,CAAA,KAAA,EAAA;AACL,QAAA,eAAA,EAAA;AAEA,QAAI,IAAA,eAAA,KAAoB,KAAK,MAAQ,EAAA;AACpC,UAAI,IAAA,WAAA,KAAgB,MAAK,WAAa,EAAA;AACrC,YAAA,IAAA,CAAK,WAAW,oBAAoB,CAAA;AAAA,WACrC,MAAA,IACS,WAAgB,KAAA,KAAA,CAAK,WAAa,EAAA;AAC1C,YAAA,KAAA,IAAS,GAAM,GAAA,IAAA,CAAK,MAAQ,EAAA,GAAA,GAAM,iBAAiB,GAAO,EAAA,EAAA;AACzD,cAAA,IAAA,CAAK,KAAK,IAAI,CAAA;AAAA;AACf;AACD;AACD,OAEQ,MAAA,IAAA,IAAA,CAAK,MAAW,KAAA,eAAA,IAAmB,oBAAoB,CAAG,EAAA;AAElE,QAAA,IAAA,CAAK,WAAW,gBAAgB,CAAA;AAAA,OAE5B,MAAA;AACJ,QAAM2B,MAAAA,KAAAA,GAAO,KAAK,gBAAiB,EAAA;AAEnC,QAAA,IAAI,CAACA,KAAAA,IAAQA,KAAK,CAAA,IAAA,KAAS,MAAK,QAAU,EAAA;AACzC,UAAA,IAAA,CAAK,WAAW,gBAAgB,CAAA;AAAA;AAGjC,QAAA,IAAA,CAAK,KAAKA,KAAI,CAAA;AAAA;AACf;AAGD,IAAA,IAAI,CAAC,MAAQ,EAAA;AACZ,MAAA,IAAA,CAAK,UAAW,CAAA,WAAA,GAAc,MAAO,CAAA,YAAA,CAAa,WAAW,CAAC,CAAA;AAAA;AAG/D,IAAO,OAAA,IAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,WAAc,GAAA;AACb,IAAK,IAAA,CAAA,KAAA,EAAA;AACL,IAAA,IAAI,KAAQ,GAAA,IAAA,CAAK,iBAAkB,CAAA,KAAA,CAAK,WAAW,CAAA;AACnD,IAAI,IAAA,IAAA,CAAK,IAAS,KAAA,KAAA,CAAK,WAAa,EAAA;AACnC,MAAK,IAAA,CAAA,KAAA,EAAA;AACL,MAAI,IAAA,KAAA,CAAM,WAAW,CAAG,EAAA;AACvB,QAAA,OAAO,MAAM,CAAC,CAAA;AAAA,OACf,MAAA,IACS,CAAC,KAAA,CAAM,MAAQ,EAAA;AACvB,QAAO,OAAA,KAAA;AAAA,OAEH,MAAA;AACJ,QAAO,OAAA;AAAA,UACN,MAAM,KAAK,CAAA,YAAA;AAAA,UACX,WAAa,EAAA;AAAA,SACd;AAAA;AACD,KAEI,MAAA;AACJ,MAAA,IAAA,CAAK,WAAW,YAAY,CAAA;AAAA;AAC7B;AACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAc,GAAA;AACb,IAAK,IAAA,CAAA,KAAA,EAAA;AAEL,IAAO,OAAA;AAAA,MACN,MAAM,KAAK,CAAA,SAAA;AAAA,MACX,QAAU,EAAA,IAAA,CAAK,eAAgB,CAAA,KAAA,CAAK,WAAW;AAAA,KAChD;AAAA;AAEF,CAAA;AAGA,IAAM,KAAA,GAAQ,IAAI,KAAM,EAAA;AACxB,MAAA,CAAO,OAAO,IAAM,EAAA;AAAA,EACnB,KAAA;AAAA,EACA,OAAA,EAAS,IAAI,OAAA,CAAQ,IAAI,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzB,QAAiB,EAAA,UAAA;AAAA,EACjB,YAAiB,EAAA,oBAAA;AAAA,EACjB,UAAiB,EAAA,YAAA;AAAA,EACjB,UAAiB,EAAA,kBAAA;AAAA,EACjB,OAAiB,EAAA,SAAA;AAAA,EACjB,QAAiB,EAAA,gBAAA;AAAA,EACjB,QAAiB,EAAA,gBAAA;AAAA,EACjB,SAAiB,EAAA,iBAAA;AAAA,EACjB,UAAiB,EAAA,kBAAA;AAAA,EACjB,SAAiB,EAAA,iBAAA;AAAA,EAEjB,QAAa,EAAA,CAAA;AAAA,EACb,OAAa,EAAA,EAAA;AAAA,EACb,OAAa,EAAA,EAAA;AAAA,EACb,UAAa,EAAA,EAAA;AAAA,EACb,WAAa,EAAA,EAAA;AAAA;AAAA,EACb,UAAa,EAAA,EAAA;AAAA;AAAA,EACb,WAAa,EAAA,EAAA;AAAA;AAAA,EACb,WAAa,EAAA,EAAA;AAAA;AAAA,EACb,WAAa,EAAA,EAAA;AAAA;AAAA,EACb,WAAa,EAAA,EAAA;AAAA;AAAA,EACb,WAAa,EAAA,EAAA;AAAA;AAAA,EACb,WAAa,EAAA,EAAA;AAAA;AAAA,EACb,WAAa,EAAA,EAAA;AAAA;AAAA,EACb,WAAa,EAAA,EAAA;AAAA;AAAA,EACb,UAAa,EAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOb,SAAW,EAAA;AAAA,IACV,GAAK,EAAA,CAAA;AAAA,IACL,GAAK,EAAA,CAAA;AAAA,IACL,GAAK,EAAA,CAAA;AAAA,IACL,GAAK,EAAA;AAAA,GACN;AAAA;AAAA;AAAA;AAAA,EAKA,UAAY,EAAA;AAAA,IACX,IAAM,EAAA,CAAA;AAAA,IAAG,IAAM,EAAA,CAAA;AAAA,IACf,IAAM,EAAA,CAAA;AAAA,IAAG,GAAK,EAAA,CAAA;AAAA,IAAG,GAAK,EAAA,CAAA;AAAA,IAAG,GAAK,EAAA,CAAA;AAAA,IAC9B,IAAM,EAAA,CAAA;AAAA,IAAG,IAAM,EAAA,CAAA;AAAA,IAAG,KAAO,EAAA,CAAA;AAAA,IAAG,KAAO,EAAA,CAAA;AAAA,IACnC,GAAK,EAAA,CAAA;AAAA,IAAG,GAAK,EAAA,CAAA;AAAA,IAAG,IAAM,EAAA,CAAA;AAAA,IAAG,IAAM,EAAA,CAAA;AAAA,IAC/B,IAAM,EAAA,CAAA;AAAA,IAAG,IAAM,EAAA,CAAA;AAAA,IAAG,KAAO,EAAA,CAAA;AAAA,IACzB,GAAK,EAAA,CAAA;AAAA,IAAG,GAAK,EAAA,CAAA;AAAA,IACb,GAAK,EAAA,EAAA;AAAA,IAAI,GAAK,EAAA,EAAA;AAAA,IAAI,GAAK,EAAA,EAAA;AAAA,IACvB,IAAM,EAAA;AAAA,GACP;AAAA;AAAA,EAGA,iBAAmB,kBAAA,IAAI,GAAI,CAAA,CAAC,IAAI,CAAC,CAAA;AAAA;AAAA,EAGjC,6CAAiC,IAAA,GAAA,CAAI,CAAC,GAAA,EAAK,GAAG,CAAC,CAAA;AAAA;AAAA;AAAA;AAAA,EAK/C,QAAU,EAAA;AAAA,IACT,MAAQ,EAAA,IAAA;AAAA,IACR,OAAS,EAAA,KAAA;AAAA,IACT,MAAQ,EAAA;AAAA,GACT;AAAA;AAAA,EAGA,QAAU,EAAA;AACX,CAAC,CAAA;AACD,IAAA,CAAK,YAAe,GAAA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,SAAS,CAAA;AACpD,IAAA,CAAK,aAAgB,GAAA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,UAAU,CAAA;AAGtD,IAAM,OAAO,CAAS,IAAA,KAAA,IAAI,IAAK,CAAA,IAAI,EAAG,KAAM,EAAA;AAC5C,IAAM,aAAgB,GAAA,MAAA,CAAO,mBAAoB,CAAA,MAAM,IAAI,CAAA;AAAC,CAAC,CAAA;AAC7D,MAAA,CAAO,oBAAoB,IAAI,CAAA,CAC7B,MAAO,CAAA,CAAA,IAAA,KAAQ,CAAC,aAAc,CAAA,QAAA,CAAS,IAAI,CAAA,IAAK,KAAK,IAAI,CAAA,KAAM,MAAS,CACxE,CAAA,OAAA,CAAQ,CAAC,CAAM,KAAA;AACf,EAAK,IAAA,CAAA,CAAC,CAAI,GAAA,IAAA,CAAK,CAAC,CAAA;AACjB,CAAC,CAAA;AACF,IAAA,CAAK,IAAO,GAAA,IAAA;AAEZ,IAAM,eAAkB,GAAA,uBAAA;AAExB,IAAI,OAAU,GAAA;AAAA,EACb,IAAM,EAAA,SAAA;AAAA,EAEN,KAAKiG,KAAM,EAAA;AAEV,IAAAA,MAAK,KAAM,CAAA,GAAA,CAAI,kBAAoB,EAAA,SAAS,cAAc,GAAK,EAAA;AAC9D,MAAA,IAAI,GAAI,CAAA,IAAA,IAAQ,IAAK,CAAA,IAAA,KAASA,MAAK,WAAa,EAAA;AAC/C,QAAK,IAAA,CAAA,KAAA,EAAA;AACL,QAAA,MAAM,OAAO,GAAI,CAAA,IAAA;AACjB,QAAM,MAAA,UAAA,GAAa,KAAK,gBAAiB,EAAA;AAEzC,QAAA,IAAI,CAAC,UAAY,EAAA;AAChB,UAAA,IAAA,CAAK,WAAW,qBAAqB,CAAA;AAAA;AAGtC,QAAA,IAAA,CAAK,YAAa,EAAA;AAElB,QAAI,IAAA,IAAA,CAAK,IAASA,KAAAA,KAAAA,CAAK,UAAY,EAAA;AAClC,UAAK,IAAA,CAAA,KAAA,EAAA;AACL,UAAM,MAAA,SAAA,GAAY,KAAK,gBAAiB,EAAA;AAExC,UAAA,IAAI,CAAC,SAAW,EAAA;AACf,YAAA,IAAA,CAAK,WAAW,qBAAqB,CAAA;AAAA;AAEtC,UAAA,GAAA,CAAI,IAAO,GAAA;AAAA,YACV,IAAM,EAAA,eAAA;AAAA,YACN,IAAA;AAAA,YACA,UAAA;AAAA,YACA;AAAA,WACD;AAIA,UAAA,IAAI,KAAK,QAAYA,IAAAA,KAAAA,CAAK,WAAW,IAAK,CAAA,QAAQ,KAAK,GAAK,EAAA;AAC3D,YAAA,IAAI,OAAU,GAAA,IAAA;AACd,YAAO,OAAA,OAAA,CAAQ,MAAM,QAAYA,IAAAA,KAAAA,CAAK,WAAW,OAAQ,CAAA,KAAA,CAAM,QAAQ,CAAA,IAAK,GAAK,EAAA;AAChF,cAAA,OAAA,GAAU,OAAQ,CAAA,KAAA;AAAA;AAEnB,YAAI,GAAA,CAAA,IAAA,CAAK,OAAO,OAAQ,CAAA,KAAA;AACxB,YAAA,OAAA,CAAQ,QAAQ,GAAI,CAAA,IAAA;AACpB,YAAA,GAAA,CAAI,IAAO,GAAA,IAAA;AAAA;AACZ,SAEI,MAAA;AACJ,UAAA,IAAA,CAAK,WAAW,YAAY,CAAA;AAAA;AAC7B;AACD,KACA,CAAA;AAAA;AAEH,CAAA;AAIA,IAAK,CAAA,OAAA,CAAQ,SAAS,OAAO,CAAA;;;ACnmC7B,IAAM,WAAc,GAAA,GAAA;AACpB,IAAM,WAAc,GAAA,GAAA;AACpB,IAAM,UAAc,GAAA,kBAAA;AACpB,IAAM,QAAc,GAAA,UAAA;AAEpB,IAAI,KAAQ,GAAA;AAAA,EACX,IAAM,EAAA,QAAA;AAAA,EAEN,KAAKA,KAAM,EAAA;AAEV,IAAA,SAAS,uBAAuB,GAAK,EAAA;AACpC,MAAI,IAAA,IAAA,CAAK,SAAS,WAAa,EAAA;AAC9B,QAAK,IAAA,CAAA,KAAA,EAAA;AACL,QAAA,MAAM,aAAa,EAAC;AAEpB,QAAA,OAAO,CAAC,KAAA,CAAM,IAAK,CAAA,IAAI,CAAG,EAAA;AACzB,UAAA,IAAA,CAAK,YAAa,EAAA;AAClB,UAAI,IAAA,IAAA,CAAK,SAAS,WAAa,EAAA;AAC9B,YAAK,IAAA,CAAA,KAAA,EAAA;AACL,YAAI,GAAA,CAAA,IAAA,GAAO,KAAK,mBAAoB,CAAA;AAAA,cACnC,IAAM,EAAA,UAAA;AAAA,cACN;AAAA,aACA,CAAA;AACD,YAAA;AAAA;AAID,UAAM,MAAA,GAAA,GAAM,KAAK,gBAAiB,EAAA;AAClC,UAAA,IAAI,CAAC,GAAK,EAAA;AACT,YAAA;AAAA;AAGD,UAAA,IAAA,CAAK,YAAa,EAAA;AAClB,UAAI,IAAA,GAAA,CAAI,IAASA,KAAAA,KAAAA,CAAK,UAAe,KAAA,IAAA,CAAK,SAASA,KAAK,CAAA,UAAA,IAAc,IAAK,CAAA,IAAA,KAAS,WAAc,CAAA,EAAA;AAEjG,YAAA,UAAA,CAAW,IAAK,CAAA;AAAA,cACf,IAAM,EAAA,QAAA;AAAA,cACN,QAAU,EAAA,KAAA;AAAA,cACV,GAAA;AAAA,cACA,KAAO,EAAA,GAAA;AAAA,cACP,SAAW,EAAA;AAAA,aACX,CAAA;AAAA,WAEO,MAAA,IAAA,IAAA,CAAK,IAASA,KAAAA,KAAAA,CAAK,UAAY,EAAA;AACvC,YAAK,IAAA,CAAA,KAAA,EAAA;AACL,YAAMhF,MAAAA,MAAAA,GAAQ,KAAK,gBAAiB,EAAA;AAEpC,YAAA,IAAI,CAACA,MAAO,EAAA;AACX,cAAA,IAAA,CAAK,WAAW,4BAA4B,CAAA;AAAA;AAE7C,YAAM,MAAA,QAAA,GAAW,GAAI,CAAA,IAAA,KAASgF,KAAK,CAAA,SAAA;AACnC,YAAA,UAAA,CAAW,IAAK,CAAA;AAAA,cACf,IAAM,EAAA,QAAA;AAAA,cACN,QAAA;AAAA,cACA,GAAK,EAAA,QAAA,GACF,GAAI,CAAA,QAAA,CAAS,CAAC,CACd,GAAA,GAAA;AAAA,cACH,KAAOhF,EAAAA,MAAAA;AAAA,cACP,SAAW,EAAA;AAAA,aACX,CAAA;AACD,YAAA,IAAA,CAAK,YAAa,EAAA;AAAA,qBAEV,GAAK,EAAA;AAEb,YAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AAAA;AAGpB,UAAI,IAAA,IAAA,CAAK,IAASgF,KAAAA,KAAAA,CAAK,UAAY,EAAA;AAClC,YAAK,IAAA,CAAA,KAAA,EAAA;AAAA;AACN;AAED,QAAA,IAAA,CAAK,WAAW,WAAW,CAAA;AAAA;AAC5B;AAGD,IAAAA,KAAK,CAAA,KAAA,CAAM,GAAI,CAAA,cAAA,EAAgB,sBAAsB,CAAA;AAAA;AAEvD,CAAA;;;ACtEO,SAAS,KAAK,KAAO,EAAA;AAC1B,EAAA,IAAI,KAAO,EAAA;AACT,IAAM,MAAA,KAAA;AAAA;AAEV;;;ACkVA,IAAmB,aAAA,GAAA,OAAA,CAAA,cAAA,EAAA,CAAA;;;ACvVZ,SAAS,EAAK,GAAA;AAAC;;;ACNP,SAAR,cAA+BhF,MAAO,EAAA;AAC5C,EAAA,IAAI,OAAOA,MAAAA,KAAU,QAAYA,IAAAA,MAAAA,KAAU,IAAM,EAAA;AAChD,IAAO,OAAA,KAAA;AAAA;AAGR,EAAM,MAAA,SAAA,GAAY,MAAO,CAAA,cAAA,CAAeA,MAAK,CAAA;AAC7C,EAAA,OAAA,CAAQ,cAAc,IAAQ,IAAA,SAAA,KAAc,MAAO,CAAA,SAAA,IAAa,OAAO,cAAe,CAAA,SAAS,CAAM,KAAA,IAAA,KAAS,EAAE,MAAO,CAAA,WAAA,IAAeA,MAAU,CAAA,IAAA,EAAE,OAAO,QAAYA,IAAAA,MAAAA,CAAAA;AACtK;;;AC+BO,SAAS,MAAS,GAAA;AAEvB,EAAA,MAAM,MAAM,EAAC;AAEb,EAAM,MAAA,QAAA,GAAW,EAAC,GAAA,EAAK,GAAG,EAAA;AAE1B,EAAO,OAAA,QAAA;AAGP,EAAA,SAAS,OAAO,MAAQ,EAAA;AACtB,IAAA,IAAI,eAAkB,GAAA,CAAA,CAAA;AAEtB,IAAM,MAAA,QAAA,GAAW,OAAO,GAAI,EAAA;AAE5B,IAAI,IAAA,OAAO,aAAa,UAAY,EAAA;AAClC,MAAM,MAAA,IAAI,SAAU,CAAA,0CAAA,GAA6C,QAAQ,CAAA;AAAA;AAG3E,IAAK,IAAA,CAAA,IAAA,EAAM,GAAG,MAAM,CAAA;AAQpB,IAAS,SAAA,IAAA,CAAK,UAAU,MAAQ,EAAA;AAC9B,MAAM,MAAA,EAAA,GAAK,GAAI,CAAA,EAAE,eAAe,CAAA;AAChC,MAAA,IAAIM,MAAQ,GAAA,CAAA,CAAA;AAEZ,MAAA,IAAI,KAAO,EAAA;AACT,QAAA,QAAA,CAAS,KAAK,CAAA;AACd,QAAA;AAAA;AAIF,MAAO,OAAA,EAAEA,MAAQ,GAAA,MAAA,CAAO,MAAQ,EAAA;AAC9B,QAAA,IAAI,OAAOA,MAAK,CAAA,KAAM,QAAQ,MAAOA,CAAAA,MAAK,MAAM,KAAW,CAAA,EAAA;AACzD,UAAOA,MAAAA,CAAAA,MAAK,CAAI,GAAA,MAAA,CAAOA,MAAK,CAAA;AAAA;AAC9B;AAIF,MAAS,MAAA,GAAA,MAAA;AAGT,MAAA,IAAI,EAAI,EAAA;AACN,QAAA,IAAA,CAAK,EAAI,EAAA,IAAI,CAAE,CAAA,GAAG,MAAM,CAAA;AAAA,OACnB,MAAA;AACL,QAAS,QAAA,CAAA,IAAA,EAAM,GAAG,MAAM,CAAA;AAAA;AAC1B;AACF;AAIF,EAAA,SAAS,IAAI,UAAY,EAAA;AACvB,IAAI,IAAA,OAAO,eAAe,UAAY,EAAA;AACpC,MAAA,MAAM,IAAI,SAAA;AAAA,QACR,8CAAiD,GAAA;AAAA,OACnD;AAAA;AAGF,IAAA,GAAA,CAAI,KAAK,UAAU,CAAA;AACnB,IAAO,OAAA,QAAA;AAAA;AAEX;AAkCO,SAAS,IAAA,CAAK,YAAY,QAAU,EAAA;AAEzC,EAAI,IAAA,MAAA;AAEJ,EAAO,OAAA,OAAA;AAQP,EAAA,SAAS,WAAW,UAAY,EAAA;AAC9B,IAAM,MAAA,iBAAA,GAAoB,UAAW,CAAA,MAAA,GAAS,UAAW,CAAA,MAAA;AAEzD,IAAI,IAAA,MAAA;AAEJ,IAAA,IAAI,iBAAmB,EAAA;AACrB,MAAA,UAAA,CAAW,KAAK,IAAI,CAAA;AAAA;AAGtB,IAAI,IAAA;AACF,MAAS,MAAA,GAAA,UAAA,CAAW,KAAM,CAAA,IAAA,EAAM,UAAU,CAAA;AAAA,aACnC,KAAO,EAAA;AACd,MAAM,MAAA,SAAA;AAAA;AAAA,QAAkC;AAAA,OAAA;AAMxC,MAAA,IAAI,qBAAqB,MAAQ,EAAA;AAC/B,QAAM,MAAA,SAAA;AAAA;AAGR,MAAA,OAAO,KAAK,SAAS,CAAA;AAAA;AAGvB,IAAA,IAAI,CAAC,iBAAmB,EAAA;AACtB,MAAA,IAAI,UAAU,MAAO,CAAA,IAAA,IAAQ,OAAO,MAAA,CAAO,SAAS,UAAY,EAAA;AAC9D,QAAO,MAAA,CAAA,IAAA,CAAK,MAAM,IAAI,CAAA;AAAA,OACxB,MAAA,IAAW,kBAAkB,KAAO,EAAA;AAClC,QAAA,IAAA,CAAK,MAAM,CAAA;AAAA,OACN,MAAA;AACL,QAAA,IAAA,CAAK,MAAM,CAAA;AAAA;AACb;AACF;AAQF,EAAS,SAAA,IAAA,CAAK,UAAU,MAAQ,EAAA;AAC9B,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAS,MAAA,GAAA,IAAA;AACT,MAAS,QAAA,CAAA,KAAA,EAAO,GAAG,MAAM,CAAA;AAAA;AAC3B;AAQF,EAAA,SAAS,KAAKN,MAAO,EAAA;AACnB,IAAA,IAAA,CAAK,MAAMA,MAAK,CAAA;AAAA;AAEpB;;;ACzKO,SAAS,kBAAkBA,MAAO,EAAA;AAEvC,EAAA,IAAI,CAACA,MAAAA,IAAS,OAAOA,MAAAA,KAAU,QAAU,EAAA;AACvC,IAAO,OAAA,EAAA;AAAA;AAIT,EAAI,IAAA,UAAA,IAAcA,MAAS,IAAA,MAAA,IAAUA,MAAO,EAAA;AAC1C,IAAO,OAAA,QAAA,CAASA,OAAM,QAAQ,CAAA;AAAA;AAIhC,EAAI,IAAA,OAAA,IAAWA,MAAS,IAAA,KAAA,IAASA,MAAO,EAAA;AACtC,IAAA,OAAO,SAASA,MAAK,CAAA;AAAA;AAIvB,EAAI,IAAA,MAAA,IAAUA,MAAS,IAAA,QAAA,IAAYA,MAAO,EAAA;AACxC,IAAA,OAAO,MAAMA,MAAK,CAAA;AAAA;AAIpB,EAAO,OAAA,EAAA;AACT;AAMA,SAAS,MAAMiF,MAAO,EAAA;AACpB,EAAO3E,OAAAA,MAAAA,CAAM2E,UAASA,MAAM,CAAA,IAAI,IAAI,GAAM3E,GAAAA,MAAAA,CAAM2E,MAASA,IAAAA,MAAAA,CAAM,MAAM,CAAA;AACvE;AAMA,SAAS,SAAS,GAAK,EAAA;AACrB,EAAO,OAAA,KAAA,CAAM,OAAO,GAAI,CAAA,KAAK,IAAI,GAAM,GAAA,KAAA,CAAM,GAAO,IAAA,GAAA,CAAI,GAAG,CAAA;AAC7D;AAMA,SAAS3E,OAAMN,MAAO,EAAA;AACpB,EAAA,OAAOA,MAAS,IAAA,OAAOA,MAAU,KAAA,QAAA,GAAWA,MAAQ,GAAA,CAAA;AACtD;;;ACvDO,IAAM,YAAA,GAAN,cAA2B,KAAM,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwDtC,WAAA,CAAY,aAAe,EAAA,sBAAA,EAAwB,MAAQ,EAAA;AACzD,IAAM,KAAA,EAAA;AAEN,IAAI,IAAA,OAAO,2BAA2B,QAAU,EAAA;AAC9C,MAAS,MAAA,GAAA,sBAAA;AACT,MAAyB,sBAAA,GAAA,KAAA,CAAA;AAAA;AAI3B,IAAA,IAAI,MAAS,GAAA,EAAA;AAEb,IAAA,IAAIvF,WAAU,EAAC;AACf,IAAA,IAAI,WAAc,GAAA,KAAA;AAElB,IAAA,IAAI,sBAAwB,EAAA;AAE1B,MACE,IAAA,MAAA,IAAU,sBACV,IAAA,QAAA,IAAY,sBACZ,EAAA;AACA,QAAAA,QAAAA,GAAU,EAAC,KAAA,EAAO,sBAAsB,EAAA;AAAA,OAIxC,MAAA,IAAA,OAAA,IAAW,sBACX,IAAA,KAAA,IAAS,sBACT,EAAA;AACA,QAAAA,QAAAA,GAAU,EAAC,KAAA,EAAO,sBAAsB,EAAA;AAAA,OAC1C,MAAA,IAES,UAAU,sBAAwB,EAAA;AACzC,QAAAA,QAAU,GAAA;AAAA,UACR,SAAA,EAAW,CAAC,sBAAsB,CAAA;AAAA,UAClC,OAAO,sBAAuB,CAAA;AAAA,SAChC;AAAA,OAGG,MAAA;AACH,QAAAA,QAAAA,GAAU,EAAC,GAAG,sBAAsB,EAAA;AAAA;AACtC;AAGF,IAAI,IAAA,OAAO,kBAAkB,QAAU,EAAA;AACrC,MAAS,MAAA,GAAA,aAAA;AAAA,KAGF,MAAA,IAAA,CAACA,QAAQ,CAAA,KAAA,IAAS,aAAe,EAAA;AACxC,MAAc,WAAA,GAAA,IAAA;AACd,MAAA,MAAA,GAAS,aAAc,CAAA,OAAA;AACvB,MAAAA,SAAQ,KAAQ,GAAA,aAAA;AAAA;AAGlB,IAAI,IAAA,CAACA,SAAQ,MAAU,IAAA,CAACA,SAAQ,MAAU,IAAA,OAAO,WAAW,QAAU,EAAA;AACpE,MAAM6F,MAAAA,MAAAA,GAAQ,MAAO,CAAA,OAAA,CAAQ,GAAG,CAAA;AAEhC,MAAA,IAAIA,WAAU,CAAI,CAAA,EAAA;AAChB,QAAA7F,SAAQ,MAAS,GAAA,MAAA;AAAA,OACZ,MAAA;AACL,QAAAA,QAAQ,CAAA,MAAA,GAAS,MAAO,CAAA,KAAA,CAAM,GAAG6F,MAAK,CAAA;AACtC,QAAA7F,QAAQ,CAAA,MAAA,GAAS,MAAO,CAAA,KAAA,CAAM6F,SAAQ,CAAC,CAAA;AAAA;AACzC;AAGF,IAAA,IAAI,CAAC7F,QAAQ,CAAA,KAAA,IAASA,QAAQ,CAAA,SAAA,IAAaA,SAAQ,SAAW,EAAA;AAC5D,MAAA,MAAM,SAASA,QAAQ,CAAA,SAAA,CAAUA,QAAQ,CAAA,SAAA,CAAU,SAAS,CAAC,CAAA;AAE7D,MAAA,IAAI,MAAQ,EAAA;AACV,QAAAA,QAAAA,CAAQ,QAAQ,MAAO,CAAA,QAAA;AAAA;AACzB;AAGF,IAAM2C,MAAAA,MAAAA,GACJ3C,SAAQ,KAAS,IAAA,OAAA,IAAWA,SAAQ,KAChCA,GAAAA,QAAAA,CAAQ,KAAM,CAAA,KAAA,GACdA,QAAQ,CAAA,KAAA;AAQd,IAAK,IAAA,CAAA,SAAA,GAAYA,SAAQ,SAAa,IAAA,KAAA,CAAA;AAOtC,IAAK,IAAA,CAAA,KAAA,GAAQA,SAAQ,KAAS,IAAA,KAAA,CAAA;AAO9B,IAAK,IAAA,CAAA,MAAA,GAAS2C,MAAQA,GAAAA,MAAAA,CAAM,MAAS,GAAA,KAAA,CAAA;AAWrC,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AAOb,IAAK,IAAA,CAAA,IAAA;AAQL,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA;AAOf,IAAK,IAAA,CAAA,IAAA,GAAOA,MAAQA,GAAAA,MAAAA,CAAM,IAAO,GAAA,KAAA,CAAA;AASjC,IAAA,IAAA,CAAK,IAAO,GAAA,iBAAA,CAAkB3C,QAAQ,CAAA,KAAK,CAAK,IAAA,KAAA;AAOhD,IAAK,IAAA,CAAA,KAAA,GAAQA,SAAQ,KAAS,IAAA,KAAA,CAAA;AAO9B,IAAA,IAAA,CAAK,SAAS,IAAK,CAAA,OAAA;AAOnB,IAAK,IAAA,CAAA,MAAA,GAASA,SAAQ,MAAU,IAAA,KAAA,CAAA;AAOhC,IAAK,IAAA,CAAA,MAAA,GAASA,SAAQ,MAAU,IAAA,KAAA,CAAA;AAWhC,IAAK,IAAA,CAAA,KAAA,GACH,WAAeA,IAAAA,QAAAA,CAAQ,KAAS,IAAA,OAAOA,QAAQ,CAAA,KAAA,CAAM,KAAU,KAAA,QAAA,GAC3DA,QAAQ,CAAA,KAAA,CAAM,KACd,GAAA,EAAA;AAYN,IAAK,IAAA,CAAA,MAAA;AAOL,IAAK,IAAA,CAAA,QAAA;AAOL,IAAK,IAAA,CAAA,IAAA;AAUL,IAAK,IAAA,CAAA,GAAA;AAAA;AAGT,CAAA;AAEA,YAAA,CAAa,UAAU,IAAO,GAAA,EAAA;AAC9B,YAAA,CAAa,UAAU,IAAO,GAAA,EAAA;AAC9B,YAAA,CAAa,UAAU,MAAS,GAAA,EAAA;AAChC,YAAA,CAAa,UAAU,OAAU,GAAA,EAAA;AACjC,YAAA,CAAa,UAAU,KAAQ,GAAA,EAAA;AAC/B,YAAA,CAAa,UAAU,MAAS,GAAA,KAAA,CAAA;AAChC,YAAA,CAAa,UAAU,IAAO,GAAA,KAAA,CAAA;AAC9B,YAAA,CAAa,UAAU,SAAY,GAAA,KAAA,CAAA;AACnC,YAAA,CAAa,UAAU,KAAQ,GAAA,KAAA,CAAA;AAC/B,YAAA,CAAa,UAAU,KAAQ,GAAA,KAAA,CAAA;AAC/B,YAAA,CAAa,UAAU,KAAQ,GAAA,KAAA,CAAA;AAC/B,YAAA,CAAa,UAAU,MAAS,GAAA,KAAA,CAAA;AAChC,YAAA,CAAa,UAAU,MAAS,GAAA,KAAA,CAAA;;;AC1SzB,SAAS,MAAM,aAAe,EAAA;AACnC,EAAO,OAAA,OAAA;AAAA,IACL,aAAA,KAAkB,IAChB,IAAA,OAAO,aAAkB,KAAA,QAAA,IACzB,MAAU,IAAA,aAAA,IACV,aAAc,CAAA,IAAA,IACd,UAAc,IAAA,aAAA,IACd,aAAc,CAAA,QAAA;AAAA,IAEd,cAAc,IAAS,KAAA,KAAA;AAAA,GAC3B;AACF;;;ACVA,IAAM,KAAA;AAAA;AAAA,EAA8B;AAAA,IAClC,SAAA;AAAA,IACA,MAAA;AAAA,IACA,UAAA;AAAA,IACA,MAAA;AAAA,IACA,SAAA;AAAA,IACA;AAAA;AACF,CAAA;AAEO,IAAM,QAAN,MAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBjB,YAAYuF,MAAO,EAAA;AAEjB,IAAIvF,IAAAA,QAAAA;AAEJ,IAAA,IAAI,CAACuF,MAAO,EAAA;AACV,MAAAvF,WAAU,EAAC;AAAA,KACb,MAAA,IAAW,KAAMuF,CAAAA,MAAK,CAAG,EAAA;AACvB,MAAAvF,QAAAA,GAAU,EAAC,IAAA,EAAMuF,MAAK,EAAA;AAAA,eACb,OAAOA,MAAAA,KAAU,QAAY,IAAA,YAAA,CAAaA,MAAK,CAAG,EAAA;AAC3D,MAAAvF,QAAAA,GAAU,EAAC,KAAA,EAAAuF,MAAK,EAAA;AAAA,KACX,MAAA;AACL,MAAAvF,QAAUuF,GAAAA,MAAAA;AAAA;AAYZ,IAAA,IAAA,CAAK,GAAM,GAAA,KAAA,IAASvF,QAAU,GAAA,EAAA,GAAKyK,0BAAQ,GAAI,EAAA;AAU/C,IAAA,IAAA,CAAK,OAAO,EAAC;AASb,IAAA,IAAA,CAAK,UAAU,EAAC;AAOhB,IAAA,IAAA,CAAK,WAAW,EAAC;AAOjB,IAAK,IAAA,CAAA,KAAA;AAYL,IAAK,IAAA,CAAA,GAAA;AAUL,IAAK,IAAA,CAAA,MAAA;AASL,IAAK,IAAA,CAAA,MAAA;AAIL,IAAA,IAAI5E,MAAQ,GAAA,CAAA,CAAA;AAEZ,IAAO,OAAA,EAAEA,MAAQ,GAAA,KAAA,CAAM,MAAQ,EAAA;AAC7B,MAAM6E,MAAAA,MAAAA,GAAQ,MAAM7E,MAAK,CAAA;AAIzB,MACE6E,IAAAA,MAAAA,IAAS1K,YACTA,QAAQ0K,CAAAA,MAAK,MAAM,KACnB1K,CAAAA,IAAAA,QAAAA,CAAQ0K,MAAK,CAAA,KAAM,IACnB,EAAA;AAEA,QAAKA,IAAAA,CAAAA,MAAK,CAAIA,GAAAA,MAAAA,KAAU,SAAY,GAAA,CAAC,GAAG1K,QAAAA,CAAQ0K,MAAK,CAAC,CAAI1K,GAAAA,QAAAA,CAAQ0K,MAAK,CAAA;AAAA;AACzE;AAIF,IAAI,IAAA,KAAA;AAGJ,IAAA,KAAK,SAAS1K,QAAS,EAAA;AAErB,MAAA,IAAI,CAAC,KAAA,CAAM,QAAS,CAAA,KAAK,CAAG,EAAA;AAE1B,QAAK,IAAA,CAAA,KAAK,CAAIA,GAAAA,QAAAA,CAAQ,KAAK,CAAA;AAAA;AAC7B;AACF;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,QAAW,GAAA;AACb,IAAO,OAAA,OAAO,KAAK,IAAS,KAAA,QAAA,GACxByK,0BAAQ,QAAS,CAAA,IAAA,CAAK,IAAI,CAC1B,GAAA,KAAA,CAAA;AAAA;AACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,IAAI,SAAS,QAAU,EAAA;AACrB,IAAA,cAAA,CAAe,UAAU,UAAU,CAAA;AACnC,IAAA,UAAA,CAAW,UAAU,UAAU,CAAA;AAC/B,IAAA,IAAA,CAAK,OAAOA,yBAAQ,CAAA,IAAA,CAAK,IAAK,CAAA,OAAA,IAAW,IAAI,QAAQ,CAAA;AAAA;AACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,OAAU,GAAA;AACZ,IAAO,OAAA,OAAO,KAAK,IAAS,KAAA,QAAA,GACxBA,0BAAQ,OAAQ,CAAA,IAAA,CAAK,IAAI,CACzB,GAAA,KAAA,CAAA;AAAA;AACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,IAAI,QAAQ,OAAS,EAAA;AACnB,IAAW,UAAA,CAAA,IAAA,CAAK,UAAU,SAAS,CAAA;AACnC,IAAA,IAAA,CAAK,OAAOA,yBAAQ,CAAA,IAAA,CAAK,OAAW,IAAA,EAAA,EAAI,KAAK,QAAQ,CAAA;AAAA;AACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,OAAU,GAAA;AACZ,IAAO,OAAA,OAAO,KAAK,IAAS,KAAA,QAAA,GACxBA,0BAAQ,OAAQ,CAAA,IAAA,CAAK,IAAI,CACzB,GAAA,KAAA,CAAA;AAAA;AACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,IAAI,QAAQ,OAAS,EAAA;AACnB,IAAA,UAAA,CAAW,SAAS,SAAS,CAAA;AAC7B,IAAW,UAAA,CAAA,IAAA,CAAK,SAAS,SAAS,CAAA;AAElC,IAAA,IAAI,OAAS,EAAA;AACX,MAAA,IAAI,OAAQ,CAAA,WAAA,CAAY,CAAC,CAAA,KAAM,EAAc,EAAA;AAC3C,QAAM,MAAA,IAAI,MAAM,+BAA+B,CAAA;AAAA;AAGjD,MAAA,IAAI,OAAQ,CAAA,QAAA,CAAS,GAAK,EAAA,CAAC,CAAG,EAAA;AAC5B,QAAM,MAAA,IAAI,MAAM,wCAAwC,CAAA;AAAA;AAC1D;AAGF,IAAK,IAAA,CAAA,IAAA,GAAOA,0BAAQ,IAAK,CAAA,IAAA,CAAK,SAAS,IAAK,CAAA,IAAA,IAAQ,WAAW,EAAG,CAAA,CAAA;AAAA;AACpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,IAAO,GAAA;AACT,IAAA,OAAO,IAAK,CAAA,OAAA,CAAQ,IAAK,CAAA,OAAA,CAAQ,SAAS,CAAC,CAAA;AAAA;AAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,IAAI,KAAKE,KAAM,EAAA;AACb,IAAI,IAAA,KAAA,CAAMA,KAAI,CAAG,EAAA;AACf,MAAAA,KAAAA,GAAOC,kBAAUD,KAAI,CAAA;AAAA;AAGvB,IAAA,cAAA,CAAeA,OAAM,MAAM,CAAA;AAE3B,IAAI,IAAA,IAAA,CAAK,SAASA,KAAM,EAAA;AACtB,MAAK,IAAA,CAAA,OAAA,CAAQ,KAAKA,KAAI,CAAA;AAAA;AACxB;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,IAAO,GAAA;AACT,IAAO,OAAA,OAAO,IAAK,CAAA,IAAA,KAAS,QACxBF,GAAAA,yBAAAA,CAAQ,SAAS,IAAK,CAAA,IAAA,EAAM,IAAK,CAAA,OAAO,CACxC,GAAA,KAAA,CAAA;AAAA;AACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,IAAI,KAAK,IAAM,EAAA;AACb,IAAA,cAAA,CAAe,MAAM,MAAM,CAAA;AAC3B,IAAA,UAAA,CAAW,MAAM,MAAM,CAAA;AACvB,IAAK,IAAA,CAAA,IAAA,GAAOA,0BAAQ,IAAK,CAAA,IAAA,CAAK,WAAW,EAAI,EAAA,IAAA,IAAQ,IAAK,CAAA,OAAA,IAAW,EAAG,CAAA,CAAA;AAAA;AAC1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+DA,IAAA,CAAK,aAAe,EAAA,sBAAA,EAAwB,MAAQ,EAAA;AAElD,IAAA,MAAM,OAAU,GAAA,IAAA,CAAK,OAAQ,CAAA,aAAA,EAAe,wBAAwB,MAAM,CAAA;AAE1E,IAAA,OAAA,CAAQ,KAAQ,GAAA,IAAA;AAEhB,IAAM,MAAA,OAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4DA,IAAA,CAAK,aAAe,EAAA,sBAAA,EAAwB,MAAQ,EAAA;AAElD,IAAA,MAAM,OAAU,GAAA,IAAA,CAAK,OAAQ,CAAA,aAAA,EAAe,wBAAwB,MAAM,CAAA;AAE1E,IAAA,OAAA,CAAQ,KAAQ,GAAA,KAAA,CAAA;AAEhB,IAAO,OAAA,OAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4DA,OAAA,CAAQ,aAAe,EAAA,sBAAA,EAAwB,MAAQ,EAAA;AACrD,IAAA,MAAM,UAAU,IAAI,YAAA;AAAA;AAAA,MAElB,aAAA;AAAA,MACA,sBAAA;AAAA,MACA;AAAA,KACF;AAEA,IAAA,IAAI,KAAK,IAAM,EAAA;AACb,MAAA,OAAA,CAAQ,IAAO,GAAA,IAAA,CAAK,IAAO,GAAA,GAAA,GAAM,OAAQ,CAAA,IAAA;AACzC,MAAA,OAAA,CAAQ,OAAO,IAAK,CAAA,IAAA;AAAA;AAGtB,IAAA,OAAA,CAAQ,KAAQ,GAAA,KAAA;AAEhB,IAAK,IAAA,CAAA,QAAA,CAAS,KAAK,OAAO,CAAA;AAE1B,IAAO,OAAA,OAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,SAAS,QAAU,EAAA;AACjB,IAAI,IAAA,IAAA,CAAK,UAAU,KAAW,CAAA,EAAA;AAC5B,MAAO,OAAA,EAAA;AAAA;AAGT,IAAI,IAAA,OAAO,IAAK,CAAA,KAAA,KAAU,QAAU,EAAA;AAClC,MAAA,OAAO,IAAK,CAAA,KAAA;AAAA;AAGd,IAAA,MAAM,OAAU,GAAA,IAAI,WAAY,CAAA,QAAA,IAAY,KAAS,CAAA,CAAA;AACrD,IAAO,OAAA,OAAA,CAAQ,MAAO,CAAA,IAAA,CAAK,KAAK,CAAA;AAAA;AAEpC,CAAA;AAYA,SAAS,UAAA,CAAW,MAAMvK,KAAM,EAAA;AAC9B,EAAA,IAAI,IAAQ,IAAA,IAAA,CAAK,QAASuK,CAAAA,yBAAAA,CAAQ,GAAG,CAAG,EAAA;AACtC,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,GAAMvK,GAAAA,KAAAA,GAAO,sCAAyCuK,GAAAA,yBAAAA,CAAQ,GAAM,GAAA;AAAA,KACtE;AAAA;AAEJ;AAYA,SAAS,cAAA,CAAe,MAAMvK,KAAM,EAAA;AAClC,EAAA,IAAI,CAAC,IAAM,EAAA;AACT,IAAA,MAAM,IAAI,KAAA,CAAM,GAAMA,GAAAA,KAAAA,GAAO,mBAAmB,CAAA;AAAA;AAEpD;AAYA,SAAS,UAAA,CAAWyK,OAAMzK,KAAM,EAAA;AAC9B,EAAA,IAAI,CAACyK,KAAM,EAAA;AACT,IAAA,MAAM,IAAI,KAAA,CAAM,WAAczK,GAAAA,KAAAA,GAAO,iCAAiC,CAAA;AAAA;AAE1E;AAUA,SAAS,aAAaqF,MAAO,EAAA;AAC3B,EAAO,OAAA,OAAA;AAAA,IACLA,UACE,OAAOA,MAAAA,KAAU,QACjB,IAAA,YAAA,IAAgBA,UAChB,YAAgBA,IAAAA;AAAA,GACpB;AACF;;;ACloBO,IAAM,gBAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYP,SAAU,QAAU,EAAA;AAClB,IAAA,MAAMwC,KAAO,GAAA,IAAA;AACb,IAAA,MAAM,SAASA,KAAK,CAAA,WAAA;AACpB,IAAM,MAAA,KAAA;AAAA;AAAA;AAAA;AAAA,MAGJ,MAAO,CAAA;AAAA,KAAA;AAET,IAAMxC,MAAAA,MAAAA,GAAQ,MAAM,QAAQ,CAAA;AAE5B,IAAA,MAAM,QAAQ,WAAY;AACxB,MAAOA,OAAAA,MAAAA,CAAM,KAAM,CAAA,KAAA,EAAO,SAAS,CAAA;AAAA,KACrC;AAEA,IAAO,MAAA,CAAA,cAAA,CAAe,OAAO,KAAK,CAAA;AAclC,IAAO,OAAA,KAAA;AAAA;AACT,CAAA;;;ARiUN,IAAM,GAAA,GAAM,EAAG,CAAA,cAAA;AAeR,IAAM,SAAA,GAAN,MAAM,UAAA,SAAkB,gBAAiB,CAAA;AAAA;AAAA;AAAA;AAAA,EAI9C,WAAc,GAAA;AAEZ,IAAA,KAAA,CAAM,MAAM,CAAA;AAeZ,IAAA,IAAA,CAAK,QAAW,GAAA,KAAA,CAAA;AAYhB,IAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA;AAad,IAAA,IAAA,CAAK,YAAY,EAAC;AAalB,IAAA,IAAA,CAAK,QAAW,GAAA,KAAA,CAAA;AAShB,IAAA,IAAA,CAAK,WAAc,GAAA,CAAA,CAAA;AASnB,IAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA;AASd,IAAA,IAAA,CAAK,YAAY,EAAC;AAUlB,IAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA;AASd,IAAA,IAAA,CAAK,eAAe,MAAO,EAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,IAAO,GAAA;AAEL,IAAM,MAAA,WAAA;AAAA;AAAA,MAEF,IAAI,UAAU;AAAA,KAAA;AAElB,IAAA,IAAIM,MAAQ,GAAA,CAAA,CAAA;AAEZ,IAAA,OAAO,EAAEA,MAAAA,GAAQ,IAAK,CAAA,SAAA,CAAU,MAAQ,EAAA;AACtC,MAAM,MAAA,QAAA,GAAW,IAAK,CAAA,SAAA,CAAUA,MAAK,CAAA;AACrC,MAAY,WAAA,CAAA,GAAA,CAAI,GAAG,QAAQ,CAAA;AAAA;AAG7B,IAAY,WAAA,CAAA,IAAA,CAAA,IAAK,cAAA1F,OAAO,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,CAAK,SAAS,CAAC,CAAA;AAEjD,IAAO,OAAA,WAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6DA,IAAA,CAAK,KAAKoF,MAAO,EAAA;AACf,IAAI,IAAA,OAAO,QAAQ,QAAU,EAAA;AAE3B,MAAI,IAAA,SAAA,CAAU,WAAW,CAAG,EAAA;AAC1B,QAAe,cAAA,CAAA,MAAA,EAAQ,KAAK,MAAM,CAAA;AAClC,QAAK,IAAA,CAAA,SAAA,CAAU,GAAG,CAAIA,GAAAA,MAAAA;AACtB,QAAO,OAAA,IAAA;AAAA;AAIT,MAAQ,OAAA,GAAA,CAAI,KAAK,IAAK,CAAA,SAAA,EAAW,GAAG,CAAK,IAAA,IAAA,CAAK,SAAU,CAAA,GAAG,CAAM,IAAA,KAAA,CAAA;AAAA;AAInE,IAAA,IAAI,GAAK,EAAA;AACP,MAAe,cAAA,CAAA,MAAA,EAAQ,KAAK,MAAM,CAAA;AAClC,MAAA,IAAA,CAAK,SAAY,GAAA,GAAA;AACjB,MAAO,OAAA,IAAA;AAAA;AAIT,IAAA,OAAO,IAAK,CAAA,SAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,MAAS,GAAA;AACP,IAAA,IAAI,KAAK,MAAQ,EAAA;AACf,MAAO,OAAA,IAAA;AAAA;AAMT,IAAMwC,MAAAA,KAAAA;AAAA;AAAA;AAAA,MAAyD;AAAA,KAAA;AAE/D,IAAA,OAAO,EAAE,IAAA,CAAK,WAAc,GAAA,IAAA,CAAK,UAAU,MAAQ,EAAA;AACjD,MAAM,MAAA,CAAC,UAAU,GAAG/H,QAAO,IAAI,IAAK,CAAA,SAAA,CAAU,KAAK,WAAW,CAAA;AAE9D,MAAIA,IAAAA,QAAAA,CAAQ,CAAC,CAAA,KAAM,KAAO,EAAA;AACxB,QAAA;AAAA;AAGF,MAAIA,IAAAA,QAAAA,CAAQ,CAAC,CAAA,KAAM,IAAM,EAAA;AACvB,QAAAA,QAAAA,CAAQ,CAAC,CAAI,GAAA,KAAA,CAAA;AAAA;AAGf,MAAA,MAAM,WAAc,GAAA,QAAA,CAAS,IAAK+H,CAAAA,KAAAA,EAAM,GAAG/H,QAAO,CAAA;AAElD,MAAI,IAAA,OAAO,gBAAgB,UAAY,EAAA;AACrC,QAAK,IAAA,CAAA,YAAA,CAAa,IAAI,WAAW,CAAA;AAAA;AACnC;AAGF,IAAA,IAAA,CAAK,MAAS,GAAA,IAAA;AACd,IAAA,IAAA,CAAK,cAAc,MAAO,CAAA,iBAAA;AAE1B,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,MAAM,IAAM,EAAA;AACV,IAAA,IAAA,CAAK,MAAO,EAAA;AACZ,IAAM,MAAA,QAAA,GAAW,MAAM,IAAI,CAAA;AAC3B,IAAM,MAAA,MAAA,GAAS,IAAK,CAAA,MAAA,IAAU,IAAK,CAAA,MAAA;AACnC,IAAA,YAAA,CAAa,SAAS,MAAM,CAAA;AAC5B,IAAA,OAAO,MAAO,CAAA,MAAA,CAAO,QAAQ,CAAA,EAAG,QAAQ,CAAA;AAAA;AAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4CA,OAAA,CAAQ,MAAM,IAAM,EAAA;AAClB,IAAA,MAAM+H,KAAO,GAAA,IAAA;AAEb,IAAA,IAAA,CAAK,MAAO,EAAA;AACZ,IAAA,YAAA,CAAa,SAAW,EAAA,IAAA,CAAK,MAAU,IAAA,IAAA,CAAK,MAAM,CAAA;AAClD,IAAA,cAAA,CAAe,SAAW,EAAA,IAAA,CAAK,QAAY,IAAA,IAAA,CAAK,QAAQ,CAAA;AAExD,IAAA,OAAO,OAAO,QAAS,CAAA,KAAA,CAAA,EAAW,IAAI,CAAI,GAAA,IAAI,QAAQ,QAAQ,CAAA;AAQ9D,IAAS,SAAA,QAAA,CAAS,SAAS,MAAQ,EAAA;AACjC,MAAM,MAAA,QAAA,GAAW,MAAM,IAAI,CAAA;AAG3B,MAAM,MAAA,SAAA;AAAA;AAAA;AAAA,QAEsBA,KAAAA,CAAK,MAAM,QAAQ;AAAA,OAAA;AAG/C,MAAAA,MAAK,GAAI,CAAA,SAAA,EAAW,UAAU,SAAU,KAAA,EAAO,MAAM8C,KAAM,EAAA;AACzD,QAAA,IAAI,KAAS,IAAA,CAAC,IAAQ,IAAA,CAACA,KAAM,EAAA;AAC3B,UAAA,OAAO,SAAS,KAAK,CAAA;AAAA;AAKvB,QAAM,MAAA,WAAA;AAAA;AAAA;AAAA,UAEsB;AAAA,SAAA;AAG5B,QAAA,MAAM,aAAgB9C,GAAAA,KAAAA,CAAK,SAAU,CAAA,WAAA,EAAa8C,KAAI,CAAA;AAEtD,QAAI,IAAA,eAAA,CAAgB,aAAa,CAAG,EAAA;AAClC,UAAAA,MAAK,KAAQ,GAAA,aAAA;AAAA,SACR,MAAA;AACL,UAAAA,MAAK,MAAS,GAAA,aAAA;AAAA;AAGhB,QAAA,QAAA;AAAA,UAAS,KAAA;AAAA;AAAA,UAAsDA;AAAA,SAAK;AAAA,OACrE,CAAA;AAOD,MAAS,SAAA,QAAA,CAAS,OAAOA,KAAM,EAAA;AAC7B,QAAI,IAAA,KAAA,IAAS,CAACA,KAAM,EAAA;AAClB,UAAA,MAAA,CAAO,KAAK,CAAA;AAAA,mBACH,OAAS,EAAA;AAClB,UAAA,OAAA,CAAQA,KAAI,CAAA;AAAA,SACP,MAAA;AAEL,UAAA,IAAA,CAAK,QAAWA,KAAI,CAAA;AAAA;AACtB;AACF;AACF;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCA,YAAY,IAAM,EAAA;AAEhB,IAAA,IAAI,QAAW,GAAA,KAAA;AAEf,IAAI,IAAA,MAAA;AAEJ,IAAA,IAAA,CAAK,MAAO,EAAA;AACZ,IAAA,YAAA,CAAa,aAAe,EAAA,IAAA,CAAK,MAAU,IAAA,IAAA,CAAK,MAAM,CAAA;AACtD,IAAA,cAAA,CAAe,aAAe,EAAA,IAAA,CAAK,QAAY,IAAA,IAAA,CAAK,QAAQ,CAAA;AAE5D,IAAK,IAAA,CAAA,OAAA,CAAQ,MAAM,QAAQ,CAAA;AAC3B,IAAW,UAAA,CAAA,aAAA,EAAe,WAAW,QAAQ,CAAA;AAG7C,IAAO,OAAA,MAAA;AAKP,IAAS,SAAA,QAAA,CAAS,OAAOA,KAAM,EAAA;AAC7B,MAAW,QAAA,GAAA,IAAA;AACX,MAAA,IAAA,CAAK,KAAK,CAAA;AACV,MAASA,MAAAA,GAAAA,KAAAA;AAAA;AACX;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwCA,GAAA,CAAI,IAAM,EAAA,IAAA,EAAM,IAAM,EAAA;AACpB,IAAA,UAAA,CAAW,IAAI,CAAA;AACf,IAAA,IAAA,CAAK,MAAO,EAAA;AAEZ,IAAA,MAAM,eAAe,IAAK,CAAA,YAAA;AAE1B,IAAA,IAAI,CAAC,IAAA,IAAQ,OAAO,IAAA,KAAS,UAAY,EAAA;AACvC,MAAO,IAAA,GAAA,IAAA;AACP,MAAO,IAAA,GAAA,KAAA,CAAA;AAAA;AAGT,IAAA,OAAO,OAAO,QAAS,CAAA,KAAA,CAAA,EAAW,IAAI,CAAI,GAAA,IAAI,QAAQ,QAAQ,CAAA;AAW9D,IAAS,SAAA,QAAA,CAAS,SAAS,MAAQ,EAAA;AAKjC,MAAM,MAAA,QAAA,GAAW,MAAM,IAAI,CAAA;AAC3B,MAAa,YAAA,CAAA,GAAA,CAAI,IAAM,EAAA,QAAA,EAAU,QAAQ,CAAA;AAQzC,MAAS,SAAA,QAAA,CAAS,KAAO,EAAA,UAAA,EAAYA,KAAM,EAAA;AACzC,QAAM,MAAA,aAAA;AAAA;AAAA,UAEF,UAAc,IAAA;AAAA,SAAA;AAGlB,QAAA,IAAI,KAAO,EAAA;AACT,UAAA,MAAA,CAAO,KAAK,CAAA;AAAA,mBACH,OAAS,EAAA;AAClB,UAAA,OAAA,CAAQ,aAAa,CAAA;AAAA,SAChB,MAAA;AAEL,UAAK,IAAA,CAAA,KAAA,CAAA,EAAW,eAAeA,KAAI,CAAA;AAAA;AACrC;AACF;AACF;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,OAAA,CAAQ,MAAM,IAAM,EAAA;AAElB,IAAA,IAAI,QAAW,GAAA,KAAA;AAEf,IAAI,IAAA,MAAA;AAEJ,IAAK,IAAA,CAAA,GAAA,CAAI,IAAM,EAAA,IAAA,EAAM,QAAQ,CAAA;AAE7B,IAAW,UAAA,CAAA,SAAA,EAAW,OAAO,QAAQ,CAAA;AAErC,IAAO,OAAA,MAAA;AAKP,IAAS,SAAA,QAAA,CAAS,OAAOC,KAAM,EAAA;AAC7B,MAAA,IAAA,CAAK,KAAK,CAAA;AACV,MAASA,MAAAA,GAAAA,KAAAA;AACT,MAAW,QAAA,GAAA,IAAA;AAAA;AACb;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BA,SAAA,CAAU,MAAM,IAAM,EAAA;AACpB,IAAA,IAAA,CAAK,MAAO,EAAA;AACZ,IAAM,MAAA,QAAA,GAAW,MAAM,IAAI,CAAA;AAC3B,IAAMC,MAAAA,SAAAA,GAAW,IAAK,CAAA,QAAA,IAAY,IAAK,CAAA,QAAA;AACvC,IAAA,cAAA,CAAe,aAAaA,SAAQ,CAAA;AACpC,IAAA,UAAA,CAAW,IAAI,CAAA;AAEf,IAAOA,OAAAA,SAAAA,CAAS,MAAM,QAAQ,CAAA;AAAA;AAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2DA,GAAA,CAAIxF,WAAU,UAAY,EAAA;AACxB,IAAA,MAAM,YAAY,IAAK,CAAA,SAAA;AACvB,IAAA,MAAM,YAAY,IAAK,CAAA,SAAA;AAEvB,IAAe,cAAA,CAAA,KAAA,EAAO,KAAK,MAAM,CAAA;AAEjC,IAAIA,IAAAA,MAAAA,KAAU,IAAQA,IAAAA,MAAAA,KAAU,KAAW,CAAA,EAAA,CAE3C,MAAA,IAAW,OAAOA,MAAAA,KAAU,UAAY,EAAA;AACtC,MAAA,SAAA,CAAUA,QAAO,UAAU,CAAA;AAAA,KAC7B,MAAA,IAAW,OAAOA,MAAAA,KAAU,QAAU,EAAA;AACpC,MAAI,IAAA,KAAA,CAAM,OAAQA,CAAAA,MAAK,CAAG,EAAA;AACxB,QAAA,OAAA,CAAQA,MAAK,CAAA;AAAA,OACR,MAAA;AACL,QAAA,SAAA,CAAUA,MAAK,CAAA;AAAA;AACjB,KACK,MAAA;AACL,MAAA,MAAM,IAAI,SAAA,CAAU,8BAAiCA,GAAAA,MAAAA,GAAQ,GAAG,CAAA;AAAA;AAGlE,IAAO,OAAA,IAAA;AAMP,IAAA,SAAS,IAAIA,MAAO,EAAA;AAClB,MAAI,IAAA,OAAOA,WAAU,UAAY,EAAA;AAC/B,QAAUA,SAAAA,CAAAA,MAAAA,EAAO,EAAE,CAAA;AAAA,OACrB,MAAA,IAAW,OAAOA,MAAAA,KAAU,QAAU,EAAA;AACpC,QAAI,IAAA,KAAA,CAAM,OAAQA,CAAAA,MAAK,CAAG,EAAA;AACxB,UAAM,MAAA,CAAC,MAAQ,EAAA,GAAGyF,WAAU,CAAA;AAAA;AAAA,YACkBzF;AAAA,WAAA;AAC9C,UAAA,SAAA,CAAU,QAAQyF,WAAU,CAAA;AAAA,SACvB,MAAA;AACL,UAAA,SAAA,CAAUzF,MAAK,CAAA;AAAA;AACjB,OACK,MAAA;AACL,QAAA,MAAM,IAAI,SAAA,CAAU,8BAAiCA,GAAAA,MAAAA,GAAQ,GAAG,CAAA;AAAA;AAClE;AAOF,IAAA,SAAS,UAAU,MAAQ,EAAA;AACzB,MAAA,IAAI,EAAE,SAAA,IAAa,MAAW,CAAA,IAAA,EAAE,cAAc,MAAS,CAAA,EAAA;AACrD,QAAA,MAAM,IAAI,KAAA;AAAA,UACR;AAAA,SACF;AAAA;AAGF,MAAA,OAAA,CAAQ,OAAO,OAAO,CAAA;AAEtB,MAAA,IAAI,OAAO,QAAU,EAAA;AACnB,QAAA,SAAA,CAAU,eAAW,aAAApF,CAAAA,OAAAA,EAAO,MAAM,SAAU,CAAA,QAAA,EAAU,OAAO,QAAQ,CAAA;AAAA;AACvE;AAOF,IAAA,SAAS,QAAQ,OAAS,EAAA;AACxB,MAAA,IAAI0F,MAAQ,GAAA,CAAA,CAAA;AAEZ,MAAI,IAAA,OAAA,KAAY,IAAQ,IAAA,OAAA,KAAY,KAAW,CAAA,EAAA,CAEpC,MAAA,IAAA,KAAA,CAAM,OAAQ,CAAA,OAAO,CAAG,EAAA;AACjC,QAAO,OAAA,EAAEA,MAAQ,GAAA,OAAA,CAAQ,MAAQ,EAAA;AAC/B,UAAM,MAAA,KAAA,GAAQ,QAAQA,MAAK,CAAA;AAC3B,UAAA,GAAA,CAAI,KAAK,CAAA;AAAA;AACX,OACK,MAAA;AACL,QAAA,MAAM,IAAI,SAAA,CAAU,mCAAsC,GAAA,OAAA,GAAU,GAAG,CAAA;AAAA;AACzE;AAQF,IAAS,SAAA,SAAA,CAAU,QAAQmF,WAAY,EAAA;AACrC,MAAA,IAAInF,MAAQ,GAAA,CAAA,CAAA;AACZ,MAAA,IAAI,UAAa,GAAA,CAAA,CAAA;AAEjB,MAAO,OAAA,EAAEA,MAAQ,GAAA,SAAA,CAAU,MAAQ,EAAA;AACjC,QAAA,IAAI,SAAUA,CAAAA,MAAK,CAAE,CAAA,CAAC,MAAM,MAAQ,EAAA;AAClC,UAAaA,UAAAA,GAAAA,MAAAA;AACb,UAAA;AAAA;AACF;AAGF,MAAA,IAAI,eAAe,CAAI,CAAA,EAAA;AACrB,QAAA,SAAA,CAAU,IAAK,CAAA,CAAC,MAAQ,EAAA,GAAGmF,WAAU,CAAC,CAAA;AAAA,OACxC,MAAA,IAGSA,WAAW,CAAA,MAAA,GAAS,CAAG,EAAA;AAC9B,QAAA,IAAI,CAAC,OAAA,EAAS,GAAG,IAAI,CAAIA,GAAAA,WAAAA;AACzB,QAAA,MAAM,cAAiB,GAAA,SAAA,CAAU,UAAU,CAAA,CAAE,CAAC,CAAA;AAC9C,QAAA,IAAI,aAAW,CAAA,cAAc,CAAK,IAAA,aAAA,CAAW,OAAO,CAAG,EAAA;AACrD,UAAA,OAAA,GAAA,IAAU,aAAA7K,CAAAA,OAAAA,EAAO,IAAM,EAAA,cAAA,EAAgB,OAAO,CAAA;AAAA;AAGhD,QAAA,SAAA,CAAU,UAAU,CAAI,GAAA,CAAC,MAAQ,EAAA,OAAA,EAAS,GAAG,IAAI,CAAA;AAAA;AACnD;AACF;AAEJ,CAAA;AA8BO,IAAM,OAAU,GAAA,IAAI,SAAU,EAAA,CAAE,MAAO,EAAA;AAS9C,SAAS,YAAA,CAAaD,OAAMqF,MAAO,EAAA;AACjC,EAAI,IAAA,OAAOA,WAAU,UAAY,EAAA;AAC/B,IAAA,MAAM,IAAI,SAAA,CAAU,UAAarF,GAAAA,KAAAA,GAAO,oBAAoB,CAAA;AAAA;AAEhE;AASA,SAAS,cAAA,CAAeA,OAAMqF,MAAO,EAAA;AACnC,EAAI,IAAA,OAAOA,WAAU,UAAY,EAAA;AAC/B,IAAA,MAAM,IAAI,SAAA,CAAU,UAAarF,GAAAA,KAAAA,GAAO,sBAAsB,CAAA;AAAA;AAElE;AASA,SAAS,cAAA,CAAeA,OAAM,MAAQ,EAAA;AACpC,EAAA,IAAI,MAAQ,EAAA;AACV,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,kBACEA,KACA,GAAA;AAAA,KACJ;AAAA;AAEJ;AAQA,SAAS,WAAWoE,KAAM,EAAA;AAGxB,EAAA,IAAI,CAAC,aAAWA,CAAAA,KAAI,KAAK,OAAOA,KAAAA,CAAK,SAAS,QAAU,EAAA;AACtD,IAAA,MAAM,IAAI,SAAA,CAAU,sBAAyBA,GAAAA,KAAAA,GAAO,GAAG,CAAA;AAAA;AAG3D;AAUA,SAAS,UAAA,CAAWpE,KAAM,EAAA,SAAA,EAAW,QAAU,EAAA;AAC7C,EAAA,IAAI,CAAC,QAAU,EAAA;AACb,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,GAAA,GAAMA,KAAO,GAAA,yBAAA,GAA4B,SAAY,GAAA;AAAA,KACvD;AAAA;AAEJ;AAMA,SAAS,MAAMqF,MAAO,EAAA;AACpB,EAAA,OAAO,gBAAgBA,MAAK,CAAA,GAAIA,MAAQ,GAAA,IAAI,MAAMA,MAAK,CAAA;AACzD;AAMA,SAAS,gBAAgBA,MAAO,EAAA;AAC9B,EAAO,OAAA,OAAA;AAAA,IACLA,UACE,OAAOA,MAAAA,KAAU,QACjB,IAAA,SAAA,IAAaA,UACb,UAAcA,IAAAA;AAAA,GAClB;AACF;AAMA,SAAS,gBAAgBA,MAAO,EAAA;AAC9B,EAAA,OAAO,OAAOA,MAAAA,KAAU,QAAY0F,IAAAA,aAAAA,CAAa1F,MAAK,CAAA;AACxD;AAUA,SAAS0F,cAAa1F,MAAO,EAAA;AAC3B,EAAO,OAAA,OAAA;AAAA,IACLA,UACE,OAAOA,MAAAA,KAAU,QACjB,IAAA,YAAA,IAAgBA,UAChB,YAAgBA,IAAAA;AAAA,GACpB;AACF;;;AS9xCA,IAAM,eAAe,EAAC;AAef,SAAS,QAAA,CAASA,QAAOvF,QAAS,EAAA;AACvC,EAAA,MAAM,WAAsB,YAAA;AAC5B,EAAA,MAAM,kBACJ,OAAO,QAAA,CAAS,eAAoB,KAAA,SAAA,GAChC,SAAS,eACT,GAAA,IAAA;AACN,EAAA,MAAM,cACJ,OAAO,QAAA,CAAS,WAAgB,KAAA,SAAA,GAAY,SAAS,WAAc,GAAA,IAAA;AAErE,EAAO,OAAA,GAAA,CAAIuF,MAAO,EAAA,eAAA,EAAiB,WAAW,CAAA;AAChD;AAcA,SAAS,GAAA,CAAIA,MAAO,EAAA,eAAA,EAAiB,WAAa,EAAA;AAChD,EAAI,IAAA,IAAA,CAAKA,MAAK,CAAG,EAAA;AACf,IAAA,IAAI,WAAWA,MAAO,EAAA;AACpB,MAAA,OAAOA,OAAM,IAAS,KAAA,MAAA,IAAU,CAAC,WAAA,GAAc,KAAKA,MAAM,CAAA,KAAA;AAAA;AAG5D,IAAA,IAAI,eAAmB,IAAA,KAAA,IAASA,MAASA,IAAAA,MAAAA,CAAM,GAAK,EAAA;AAClD,MAAA,OAAOA,MAAM,CAAA,GAAA;AAAA;AAGf,IAAA,IAAI,cAAcA,MAAO,EAAA;AACvB,MAAA,OAAO,GAAIA,CAAAA,MAAAA,CAAM,QAAU,EAAA,eAAA,EAAiB,WAAW,CAAA;AAAA;AACzD;AAGF,EAAI,IAAA,KAAA,CAAM,OAAQA,CAAAA,MAAK,CAAG,EAAA;AACxB,IAAO,OAAA,GAAA,CAAIA,MAAO,EAAA,eAAA,EAAiB,WAAW,CAAA;AAAA;AAGhD,EAAO,OAAA,EAAA;AACT;AAcA,SAAS,GAAA,CAAI,MAAQ,EAAA,eAAA,EAAiB,WAAa,EAAA;AAEjD,EAAA,MAAM,SAAS,EAAC;AAChB,EAAA,IAAIM,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAO,OAAA,EAAEA,MAAQ,GAAA,MAAA,CAAO,MAAQ,EAAA;AAC9B,IAAA,MAAA,CAAOA,MAAK,CAAI,GAAA,GAAA,CAAI,OAAOA,MAAK,CAAA,EAAG,iBAAiB,WAAW,CAAA;AAAA;AAGjE,EAAO,OAAA,MAAA,CAAO,KAAK,EAAE,CAAA;AACvB;AAUA,SAAS,KAAKN,MAAO,EAAA;AACnB,EAAA,OAAO,OAAQA,CAAAA,MAAAA,IAAS,OAAOA,MAAAA,KAAU,QAAQ,CAAA;AACnD;;;ACtGO,IAAM,iBAAoB,GAAA;AAAA,EAC/B,KAAO,EAAA,MAAA;AAAA,EACP,GAAK,EAAA,GAAA;AAAA,EACL,MAAQ,EAAA,MAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,MAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,WAAA;AAAA,EACL,MAAQ,EAAA,MAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,aAAe,EAAA,QAAA;AAAA,EACf,KAAO,EAAA,MAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,MAAA;AAAA,EACR,IAAM,EAAA,MAAA;AAAA,EACN,SAAW,EAAA,QAAA;AAAA,EACX,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,OAAS,EAAA,QAAA;AAAA,EACT,UAAY,EAAA,QAAA;AAAA,EACZ,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,WAAA;AAAA,EACL,IAAM,EAAA,WAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,MAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,oBAAsB,EAAA,QAAA;AAAA,EACtB,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,MAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,QAAA;AAAA,EACN,OAAS,EAAA,MAAA;AAAA,EACT,SAAW,EAAA,MAAA;AAAA,EACX,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,SAAW,EAAA,QAAA;AAAA,EACX,WAAa,EAAA,QAAA;AAAA,EACb,UAAY,EAAA,QAAA;AAAA,EACZ,WAAa,EAAA,QAAA;AAAA,EACb,wBAA0B,EAAA,QAAA;AAAA,EAC1B,qBAAuB,EAAA,QAAA;AAAA,EACvB,eAAiB,EAAA,QAAA;AAAA,EACjB,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,SAAW,EAAA,QAAA;AAAA,EACX,MAAQ,EAAA,QAAA;AAAA,EACR,eAAiB,EAAA,QAAA;AAAA,EACjB,IAAM,EAAA,QAAA;AAAA,EACN,SAAW,EAAA,QAAA;AAAA,EACX,+BAAiC,EAAA,QAAA;AAAA,EACjC,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,EAAI,EAAA,QAAA;AAAA,EACJ,QAAU,EAAA,QAAA;AAAA,EACV,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,WAAA;AAAA,EACL,gBAAkB,EAAA,MAAA;AAAA,EAClB,cAAgB,EAAA,QAAA;AAAA,EAChB,sBAAwB,EAAA,QAAA;AAAA,EACxB,gBAAkB,EAAA,GAAA;AAAA,EAClB,gBAAkB,EAAA,QAAA;AAAA,EAClB,OAAS,EAAA,QAAA;AAAA,EACT,aAAe,EAAA,QAAA;AAAA,EACf,IAAM,EAAA,WAAA;AAAA,EACN,GAAK,EAAA,MAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,qBAAuB,EAAA,QAAA;AAAA,EACvB,SAAW,EAAA,MAAA;AAAA,EACX,eAAiB,EAAA,QAAA;AAAA,EACjB,eAAiB,EAAA,QAAA;AAAA,EACjB,oBAAsB,EAAA,QAAA;AAAA,EACtB,aAAe,EAAA,QAAA;AAAA,EACf,mBAAqB,EAAA,QAAA;AAAA,EACrB,wBAA0B,EAAA,QAAA;AAAA,EAC1B,oBAAsB,EAAA,QAAA;AAAA,EACtB,gBAAkB,EAAA,QAAA;AAAA,EAClB,cAAgB,EAAA,QAAA;AAAA,EAChB,aAAe,EAAA,QAAA;AAAA,EACf,iBAAmB,EAAA,QAAA;AAAA,EACnB,iBAAmB,EAAA,QAAA;AAAA,EACnB,SAAW,EAAA,QAAA;AAAA,EACX,YAAc,EAAA,QAAA;AAAA,EACd,gBAAkB,EAAA,QAAA;AAAA,EAClB,SAAW,EAAA,QAAA;AAAA,EACX,mBAAqB,EAAA,QAAA;AAAA,EACrB,iBAAmB,EAAA,QAAA;AAAA,EACnB,cAAgB,EAAA,QAAA;AAAA,EAChB,iBAAmB,EAAA,QAAA;AAAA,EACnB,kBAAoB,EAAA,QAAA;AAAA,EACpB,eAAiB,EAAA,QAAA;AAAA,EACjB,kBAAoB,EAAA,QAAA;AAAA,EACpB,OAAS,EAAA,QAAA;AAAA,EACT,YAAc,EAAA,QAAA;AAAA,EACd,SAAW,EAAA,QAAA;AAAA,EACX,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,MAAA;AAAA,EACL,MAAQ,EAAA,MAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,MAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,WAAA;AAAA,EACL,MAAQ,EAAA,MAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,gBAAkB,EAAA,QAAA;AAAA,EAClB,oBAAsB,EAAA,QAAA;AAAA,EACtB,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,UAAY,EAAA,QAAA;AAAA,EACZ,WAAa,EAAA,QAAA;AAAA,EACb,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,MAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,YAAc,EAAA,QAAA;AAAA,EACd,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,WAAA;AAAA,EACL,iBAAmB,EAAA,QAAA;AAAA,EACnB,qBAAuB,EAAA,QAAA;AAAA,EACvB,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,UAAY,EAAA,QAAA;AAAA,EACZ,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,EAAI,EAAA,GAAA;AAAA,EACJ,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,WAAA;AAAA,EACL,EAAI,EAAA,QAAA;AAAA,EACJ,IAAM,EAAA,WAAA;AAAA,EACN,YAAc,EAAA,QAAA;AAAA,EACd,gBAAkB,EAAA,QAAA;AAAA,EAClB,gBAAkB,EAAA,QAAA;AAAA,EAClB,cAAgB,EAAA,QAAA;AAAA,EAChB,WAAa,EAAA,QAAA;AAAA,EACb,iBAAmB,EAAA,QAAA;AAAA,EACnB,YAAc,EAAA,QAAA;AAAA,EACd,IAAM,EAAA,WAAA;AAAA,EACN,EAAI,EAAA,QAAA;AAAA,EACJ,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,GAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,YAAc,EAAA,QAAA;AAAA,EACd,IAAM,EAAA,QAAA;AAAA,EACN,cAAgB,EAAA,QAAA;AAAA,EAChB,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,YAAc,EAAA,QAAA;AAAA,EACd,SAAW,EAAA,QAAA;AAAA,EACX,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,MAAA;AAAA,EACR,KAAO,EAAA,MAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,MAAA;AAAA,EACR,EAAI,EAAA,QAAA;AAAA,EACJ,KAAO,EAAA,QAAA;AAAA,EACP,UAAY,EAAA,QAAA;AAAA,EACZ,OAAS,EAAA,QAAA;AAAA,EACT,GAAK,EAAA,QAAA;AAAA,EACL,QAAU,EAAA,QAAA;AAAA,EACV,YAAc,EAAA,QAAA;AAAA,EACd,cAAgB,EAAA,QAAA;AAAA,EAChB,cAAgB,EAAA,QAAA;AAAA,EAChB,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,MAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,WAAA;AAAA,EACL,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,WAAA;AAAA,EACL,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,EAAI,EAAA,GAAA;AAAA,EACJ,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,UAAY,EAAA,QAAA;AAAA,EACZ,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,gBAAkB,EAAA,QAAA;AAAA,EAClB,SAAW,EAAA,QAAA;AAAA,EACX,YAAc,EAAA,QAAA;AAAA,EACd,mBAAqB,EAAA,QAAA;AAAA,EACrB,WAAa,EAAA,QAAA;AAAA,EACb,iBAAmB,EAAA,QAAA;AAAA,EACnB,iBAAmB,EAAA,QAAA;AAAA,EACnB,cAAgB,EAAA,QAAA;AAAA,EAChB,iBAAmB,EAAA,QAAA;AAAA,EACnB,SAAW,EAAA,QAAA;AAAA,EACX,cAAgB,EAAA,QAAA;AAAA,EAChB,eAAiB,EAAA,QAAA;AAAA,EACjB,OAAS,EAAA,QAAA;AAAA,EACT,YAAc,EAAA,QAAA;AAAA,EACd,aAAe,EAAA,QAAA;AAAA,EACf,YAAc,EAAA,QAAA;AAAA,EACd,eAAiB,EAAA,QAAA;AAAA,EACjB,iBAAmB,EAAA,QAAA;AAAA,EACnB,gBAAkB,EAAA,QAAA;AAAA,EAClB,eAAiB,EAAA,QAAA;AAAA,EACjB,YAAc,EAAA,QAAA;AAAA,EACd,eAAiB,EAAA,QAAA;AAAA,EACjB,UAAY,EAAA,QAAA;AAAA,EACZ,aAAe,EAAA,QAAA;AAAA,EACf,SAAW,EAAA,QAAA;AAAA,EACX,cAAgB,EAAA,QAAA;AAAA,EAChB,gBAAkB,EAAA,QAAA;AAAA,EAClB,aAAe,EAAA,QAAA;AAAA,EACf,WAAa,EAAA,QAAA;AAAA,EACb,QAAU,EAAA,QAAA;AAAA,EACV,cAAgB,EAAA,QAAA;AAAA,EAChB,SAAW,EAAA,QAAA;AAAA,EACX,GAAK,EAAA,WAAA;AAAA,EACL,EAAI,EAAA,QAAA;AAAA,EACJ,UAAY,EAAA,QAAA;AAAA,EACZ,MAAQ,EAAA,QAAA;AAAA,EACR,aAAe,EAAA,QAAA;AAAA,EACf,kBAAoB,EAAA,QAAA;AAAA,EACpB,cAAgB,EAAA,QAAA;AAAA,EAChB,aAAe,EAAA,QAAA;AAAA,EACf,kBAAoB,EAAA,QAAA;AAAA,EACpB,cAAgB,EAAA,QAAA;AAAA,EAChB,IAAM,EAAA,WAAA;AAAA,EACN,cAAgB,EAAA,QAAA;AAAA,EAChB,eAAiB,EAAA,QAAA;AAAA,EACjB,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,EAAI,EAAA,QAAA;AAAA,EACJ,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,WAAa,EAAA,QAAA;AAAA,EACb,SAAW,EAAA,QAAA;AAAA,EACX,GAAK,EAAA,WAAA;AAAA,EACL,SAAW,EAAA,QAAA;AAAA,EACX,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,EAAI,EAAA,QAAA;AAAA,EACJ,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,mBAAqB,EAAA,QAAA;AAAA,EACrB,kBAAoB,EAAA,QAAA;AAAA,EACpB,iBAAmB,EAAA,QAAA;AAAA,EACnB,qBAAuB,EAAA,QAAA;AAAA,EACvB,oBAAsB,EAAA,QAAA;AAAA,EACtB,cAAgB,EAAA,QAAA;AAAA,EAChB,OAAS,EAAA,IAAA;AAAA,EACT,GAAK,EAAA,WAAA;AAAA,EACL,OAAS,EAAA,QAAA;AAAA,EACT,gBAAkB,EAAA,MAAA;AAAA,EAClB,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,YAAc,EAAA,QAAA;AAAA,EACd,SAAW,EAAA,QAAA;AAAA,EACX,oBAAsB,EAAA,QAAA;AAAA,EACtB,UAAY,EAAA,QAAA;AAAA,EACZ,QAAU,EAAA,QAAA;AAAA,EACV,aAAe,EAAA,cAAA;AAAA,EACf,SAAW,EAAA,QAAA;AAAA,EACX,UAAY,EAAA,QAAA;AAAA,EACZ,eAAiB,EAAA,QAAA;AAAA,EACjB,mBAAqB,EAAA,cAAA;AAAA,EACrB,iBAAmB,EAAA,cAAA;AAAA,EACnB,cAAgB,EAAA,QAAA;AAAA,EAChB,oBAAsB,EAAA,cAAA;AAAA,EACtB,eAAiB,EAAA,QAAA;AAAA,EACjB,eAAiB,EAAA,cAAA;AAAA,EACjB,YAAc,EAAA,cAAA;AAAA,EACd,eAAiB,EAAA,QAAA;AAAA,EACjB,kBAAoB,EAAA,cAAA;AAAA,EACpB,oBAAsB,EAAA,QAAA;AAAA,EACtB,OAAS,EAAA,QAAA;AAAA,EACT,YAAc,EAAA,QAAA;AAAA,EACd,cAAgB,EAAA,QAAA;AAAA,EAChB,WAAa,EAAA,cAAA;AAAA,EACb,iBAAmB,EAAA,cAAA;AAAA,EACnB,YAAc,EAAA,QAAA;AAAA,EACd,uBAAyB,EAAA,cAAA;AAAA,EACzB,iBAAmB,EAAA,cAAA;AAAA,EACnB,WAAa,EAAA,QAAA;AAAA,EACb,gBAAkB,EAAA,cAAA;AAAA,EAClB,qBAAuB,EAAA,QAAA;AAAA,EACvB,iBAAmB,EAAA,QAAA;AAAA,EACnB,gBAAkB,EAAA,QAAA;AAAA,EAClB,mBAAqB,EAAA,cAAA;AAAA,EACrB,qBAAuB,EAAA,QAAA;AAAA,EACvB,eAAiB,EAAA,cAAA;AAAA,EACjB,oBAAsB,EAAA,QAAA;AAAA,EACtB,iBAAmB,EAAA,cAAA;AAAA,EACnB,sBAAwB,EAAA,QAAA;AAAA,EACxB,SAAW,EAAA,cAAA;AAAA,EACX,cAAgB,EAAA,QAAA;AAAA,EAChB,WAAa,EAAA,QAAA;AAAA,EACb,gBAAkB,EAAA,cAAA;AAAA,EAClB,qBAAuB,EAAA,QAAA;AAAA,EACvB,gBAAkB,EAAA,cAAA;AAAA,EAClB,WAAa,EAAA,cAAA;AAAA,EACb,gBAAkB,EAAA,QAAA;AAAA,EAClB,QAAU,EAAA,QAAA;AAAA,EACV,aAAe,EAAA,QAAA;AAAA,EACf,iBAAmB,EAAA,QAAA;AAAA,EACnB,aAAe,EAAA,QAAA;AAAA,EACf,cAAgB,EAAA,QAAA;AAAA,EAChB,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,MAAA;AAAA,EACR,EAAI,EAAA,QAAA;AAAA,EACJ,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,MAAA;AAAA,EACR,KAAO,EAAA,MAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,WAAA;AAAA,EACL,MAAQ,EAAA,MAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,WAAA;AAAA,EACN,oBAAsB,EAAA,QAAA;AAAA,EACtB,cAAgB,EAAA,QAAA;AAAA,EAChB,EAAI,EAAA,QAAA;AAAA,EACJ,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,MAAA;AAAA,EACR,MAAQ,EAAA,MAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,MAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,SAAW,EAAA,QAAA;AAAA,EACX,WAAa,EAAA,QAAA;AAAA,EACb,eAAiB,EAAA,QAAA;AAAA,EACjB,QAAU,EAAA,QAAA;AAAA,EACV,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,WAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,EAAI,EAAA,QAAA;AAAA,EACJ,SAAW,EAAA,MAAA;AAAA,EACX,aAAe,EAAA,QAAA;AAAA,EACf,IAAM,EAAA,QAAA;AAAA,EACN,EAAI,EAAA,QAAA;AAAA,EACJ,QAAU,EAAA,QAAA;AAAA,EACV,aAAe,EAAA,QAAA;AAAA,EACf,kBAAoB,EAAA,QAAA;AAAA,EACpB,aAAe,EAAA,QAAA;AAAA,EACf,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,UAAY,EAAA,QAAA;AAAA,EACZ,YAAc,EAAA,QAAA;AAAA,EACd,IAAM,EAAA,WAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,GAAA;AAAA,EACN,GAAK,EAAA,WAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,MAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,EAAI,EAAA,QAAA;AAAA,EACJ,cAAgB,EAAA,QAAA;AAAA,EAChB,kBAAoB,EAAA,QAAA;AAAA,EACpB,oBAAsB,EAAA,QAAA;AAAA,EACtB,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,iBAAmB,EAAA,QAAA;AAAA,EACnB,UAAY,EAAA,QAAA;AAAA,EACZ,aAAe,EAAA,QAAA;AAAA,EACf,mBAAqB,EAAA,QAAA;AAAA,EACrB,YAAc,EAAA,QAAA;AAAA,EACd,kBAAoB,EAAA,QAAA;AAAA,EACpB,kBAAoB,EAAA,QAAA;AAAA,EACpB,eAAiB,EAAA,QAAA;AAAA,EACjB,kBAAoB,EAAA,QAAA;AAAA,EACpB,UAAY,EAAA,QAAA;AAAA,EACZ,QAAU,EAAA,QAAA;AAAA,EACV,aAAe,EAAA,QAAA;AAAA,EACf,cAAgB,EAAA,QAAA;AAAA,EAChB,aAAe,EAAA,QAAA;AAAA,EACf,gBAAkB,EAAA,QAAA;AAAA,EAClB,kBAAoB,EAAA,QAAA;AAAA,EACpB,iBAAmB,EAAA,QAAA;AAAA,EACnB,gBAAkB,EAAA,QAAA;AAAA,EAClB,aAAe,EAAA,QAAA;AAAA,EACf,gBAAkB,EAAA,QAAA;AAAA,EAClB,WAAa,EAAA,QAAA;AAAA,EACb,cAAgB,EAAA,QAAA;AAAA,EAChB,UAAY,EAAA,QAAA;AAAA,EACZ,IAAM,EAAA,QAAA;AAAA,EACN,YAAc,EAAA,QAAA;AAAA,EACd,WAAa,EAAA,QAAA;AAAA,EACb,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,WAAa,EAAA,QAAA;AAAA,EACb,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,EAAI,EAAA,QAAA;AAAA,EACJ,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,WAAA;AAAA,EACL,cAAgB,EAAA,QAAA;AAAA,EAChB,cAAgB,EAAA,QAAA;AAAA,EAChB,eAAiB,EAAA,QAAA;AAAA,EACjB,YAAc,EAAA,QAAA;AAAA,EACd,KAAO,EAAA,QAAA;AAAA,EACP,WAAa,EAAA,QAAA;AAAA,EACb,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,kBAAoB,EAAA,QAAA;AAAA,EACpB,YAAc,EAAA,QAAA;AAAA,EACd,iBAAmB,EAAA,QAAA;AAAA,EACnB,cAAgB,EAAA,QAAA;AAAA,EAChB,mBAAqB,EAAA,QAAA;AAAA,EACrB,WAAa,EAAA,QAAA;AAAA,EACb,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,WAAa,EAAA,QAAA;AAAA,EACb,QAAU,EAAA,QAAA;AAAA,EACV,aAAe,EAAA,QAAA;AAAA,EACf,kBAAoB,EAAA,QAAA;AAAA,EACpB,aAAe,EAAA,QAAA;AAAA,EACf,QAAU,EAAA,QAAA;AAAA,EACV,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,QAAU,EAAA,QAAA;AAAA,EACV,aAAe,EAAA,QAAA;AAAA,EACf,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,MAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,GAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,WAAA;AAAA,EACL,SAAW,EAAA,QAAA;AAAA,EACX,KAAO,EAAA,QAAA;AAAA,EACP,UAAY,EAAA,cAAA;AAAA,EACZ,SAAW,EAAA,QAAA;AAAA,EACX,KAAO,EAAA,QAAA;AAAA,EACP,UAAY,EAAA,QAAA;AAAA,EACZ,cAAgB,EAAA,QAAA;AAAA,EAChB,UAAY,EAAA,QAAA;AAAA,EACZ,IAAM,EAAA,WAAA;AAAA,EACN,SAAW,EAAA,QAAA;AAAA,EACX,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,MAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,MAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,WAAA;AAAA,EACL,MAAQ,EAAA,MAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,GAAA;AAAA,EACV,UAAY,EAAA,QAAA;AAAA,EACZ,YAAc,EAAA,QAAA;AAAA,EACd,gBAAkB,EAAA,QAAA;AAAA,EAClB,KAAO,EAAA,QAAA;AAAA,EACP,SAAW,EAAA,QAAA;AAAA,EACX,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,UAAY,EAAA,QAAA;AAAA,EACZ,gBAAkB,EAAA,QAAA;AAAA,EAClB,WAAa,EAAA,QAAA;AAAA,EACb,aAAe,EAAA,QAAA;AAAA,EACf,KAAO,EAAA,QAAA;AAAA,EACP,UAAY,EAAA,QAAA;AAAA,EACZ,OAAS,EAAA,QAAA;AAAA,EACT,WAAa,EAAA,QAAA;AAAA,EACb,cAAgB,EAAA,QAAA;AAAA,EAChB,eAAiB,EAAA,QAAA;AAAA,EACjB,IAAM,EAAA,QAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,MAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,WAAa,EAAA,QAAA;AAAA,EACb,YAAc,EAAA,GAAA;AAAA,EACd,iBAAmB,EAAA,QAAA;AAAA,EACnB,aAAe,EAAA,QAAA;AAAA,EACf,aAAe,EAAA,QAAA;AAAA,EACf,GAAK,EAAA,WAAA;AAAA,EACL,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,WAAA;AAAA,EACL,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,GAAK,EAAA,WAAA;AAAA,EACL,EAAI,EAAA,QAAA;AAAA,EACJ,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,MAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,WAAA;AAAA,EACL,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,cAAgB,EAAA,QAAA;AAAA,EAChB,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,MAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,EAAI,EAAA,QAAA;AAAA,EACJ,GAAK,EAAA,cAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,MAAA;AAAA,EACP,KAAO,EAAA,MAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,MAAA;AAAA,EACP,EAAI,EAAA,QAAA;AAAA,EACJ,GAAK,EAAA,WAAA;AAAA,EACL,MAAQ,EAAA,MAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,GAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,MAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,EAAI,EAAA,QAAA;AAAA,EACJ,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,GAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,MAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,GAAK,EAAA,GAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,MAAA;AAAA,EACR,IAAM,EAAA,MAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,WAAa,EAAA,QAAA;AAAA,EACb,SAAW,EAAA,QAAA;AAAA,EACX,OAAS,EAAA,QAAA;AAAA,EACT,SAAW,EAAA,QAAA;AAAA,EACX,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,IAAM,EAAA,QAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,GAAK,EAAA,WAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,QAAU,EAAA,QAAA;AAAA,EACV,SAAW,EAAA,QAAA;AAAA,EACX,QAAU,EAAA,QAAA;AAAA,EACV,OAAS,EAAA,QAAA;AAAA,EACT,eAAiB,EAAA,QAAA;AAAA,EACjB,aAAe,EAAA,QAAA;AAAA,EACf,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,YAAc,EAAA,QAAA;AAAA,EACd,WAAa,EAAA,QAAA;AAAA,EACb,aAAe,EAAA,QAAA;AAAA,EACf,iBAAmB,EAAA,QAAA;AAAA,EACnB,iBAAmB,EAAA,QAAA;AAAA,EACnB,kBAAoB,EAAA,QAAA;AAAA,EACpB,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,SAAA;AAAA,EACL,OAAS,EAAA,cAAA;AAAA,EACT,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,OAAS,EAAA,QAAA;AAAA,EACT,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,MAAA;AAAA,EACR,IAAM,EAAA,WAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,IAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,cAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,MAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,MAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,MAAA;AAAA,EACN,SAAW,EAAA,MAAA;AAAA,EACX,GAAK,EAAA,WAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,SAAW,EAAA,QAAA;AAAA,EACX,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,eAAiB,EAAA,QAAA;AAAA,EACjB,gBAAkB,EAAA,QAAA;AAAA,EAClB,QAAU,EAAA,MAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,UAAY,EAAA,QAAA;AAAA,EACZ,WAAa,EAAA,QAAA;AAAA,EACb,WAAa,EAAA,QAAA;AAAA,EACb,IAAM,EAAA,QAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,GAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,GAAA;AAAA,EACP,MAAQ,EAAA,GAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,UAAY,EAAA,QAAA;AAAA,EACZ,SAAW,EAAA,QAAA;AAAA,EACX,IAAM,EAAA,QAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,MAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,GAAK,EAAA,QAAA;AAAA,EACL,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,cAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,WAAa,EAAA,QAAA;AAAA,EACb,WAAa,EAAA,QAAA;AAAA,EACb,QAAU,EAAA,QAAA;AAAA,EACV,UAAY,EAAA,QAAA;AAAA,EACZ,MAAQ,EAAA,MAAA;AAAA,EACR,cAAgB,EAAA,QAAA;AAAA,EAChB,eAAiB,EAAA,QAAA;AAAA,EACjB,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,EAAI,EAAA,QAAA;AAAA,EACJ,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,GAAK,EAAA,MAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,WAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,WAAa,EAAA,QAAA;AAAA,EACb,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,MAAA;AAAA,EACL,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,MAAA;AAAA,EACL,MAAQ,EAAA,MAAA;AAAA,EACR,aAAe,EAAA,QAAA;AAAA,EACf,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,GAAA;AAAA,EACR,IAAM,EAAA,WAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,OAAS,EAAA,QAAA;AAAA,EACT,SAAW,EAAA,QAAA;AAAA,EACX,cAAgB,EAAA,QAAA;AAAA,EAChB,SAAW,EAAA,QAAA;AAAA,EACX,cAAgB,EAAA,QAAA;AAAA,EAChB,eAAiB,EAAA,QAAA;AAAA,EACjB,gBAAkB,EAAA,QAAA;AAAA,EAClB,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,QAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,MAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,MAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,EAAI,EAAA,QAAA;AAAA,EACJ,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,WAAA;AAAA,EACL,EAAI,EAAA,QAAA;AAAA,EACJ,MAAQ,EAAA,MAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,EAAI,EAAA,QAAA;AAAA,EACJ,QAAU,EAAA,QAAA;AAAA,EACV,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,UAAY,EAAA,QAAA;AAAA,EACZ,WAAa,EAAA,QAAA;AAAA,EACb,MAAQ,EAAA,GAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,MAAA;AAAA,EACL,IAAM,EAAA,MAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,GAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,WAAa,EAAA,QAAA;AAAA,EACb,YAAc,EAAA,QAAA;AAAA,EACd,aAAe,EAAA,QAAA;AAAA,EACf,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,WAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,IAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,MAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,MAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,MAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,EAAI,EAAA,QAAA;AAAA,EACJ,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,EAAI,EAAA,QAAA;AAAA,EACJ,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,QAAU,EAAA,QAAA;AAAA,EACV,IAAM,EAAA,cAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,WAAA;AAAA,EACL,EAAI,EAAA,QAAA;AAAA,EACJ,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,EAAI,EAAA,QAAA;AAAA,EACJ,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,KAAO,EAAA,GAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,EAAI,EAAA,GAAA;AAAA,EACJ,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,SAAW,EAAA,QAAA;AAAA,EACX,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,SAAW,EAAA,QAAA;AAAA,EACX,UAAY,EAAA,QAAA;AAAA,EACZ,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,SAAW,EAAA,cAAA;AAAA,EACX,IAAM,EAAA,cAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,MAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,SAAW,EAAA,QAAA;AAAA,EACX,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,WAAA;AAAA,EACL,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,aAAe,EAAA,QAAA;AAAA,EACf,cAAgB,EAAA,QAAA;AAAA,EAChB,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,MAAA;AAAA,EACR,EAAI,EAAA,QAAA;AAAA,EACJ,KAAO,EAAA,MAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,MAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,WAAA;AAAA,EACL,MAAQ,EAAA,MAAA;AAAA,EACR,EAAI,EAAA,QAAA;AAAA,EACJ,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,EAAI,EAAA,QAAA;AAAA,EACJ,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,MAAA;AAAA,EACR,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,EAAI,EAAA,QAAA;AAAA,EACJ,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,MAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,WAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,WAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,EAAI,EAAA,QAAA;AAAA,EACJ,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,MAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,cAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,GAAA;AAAA,EACR,MAAQ,EAAA,GAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,GAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,QAAU,EAAA,QAAA;AAAA,EACV,IAAM,EAAA,QAAA;AAAA,EACN,EAAI,EAAA,QAAA;AAAA,EACJ,SAAW,EAAA,QAAA;AAAA,EACX,aAAe,EAAA,QAAA;AAAA,EACf,eAAiB,EAAA,QAAA;AAAA,EACjB,aAAe,EAAA,QAAA;AAAA,EACf,cAAgB,EAAA,QAAA;AAAA,EAChB,cAAgB,EAAA,QAAA;AAAA,EAChB,eAAiB,EAAA,QAAA;AAAA,EACjB,iBAAmB,EAAA,QAAA;AAAA,EACnB,mBAAqB,EAAA,QAAA;AAAA,EACrB,cAAgB,EAAA,QAAA;AAAA,EAChB,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,QAAU,EAAA,QAAA;AAAA,EACV,IAAM,EAAA,cAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,UAAY,EAAA,QAAA;AAAA,EACZ,OAAS,EAAA,QAAA;AAAA,EACT,SAAW,EAAA,QAAA;AAAA,EACX,UAAY,EAAA,QAAA;AAAA,EACZ,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,WAAA;AAAA,EACL,EAAI,EAAA,QAAA;AAAA,EACJ,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,EAAI,EAAA,QAAA;AAAA,EACJ,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,UAAY,EAAA,QAAA;AAAA,EACZ,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,aAAe,EAAA,QAAA;AAAA,EACf,kBAAoB,EAAA,QAAA;AAAA,EACpB,UAAY,EAAA,QAAA;AAAA,EACZ,cAAgB,EAAA,QAAA;AAAA,EAChB,aAAe,EAAA,QAAA;AAAA,EACf,cAAgB,EAAA,QAAA;AAAA,EAChB,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,GAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,GAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,WAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,GAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,EAAI,EAAA,GAAA;AAAA,EACJ,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,OAAS,EAAA,QAAA;AAAA,EACT,SAAW,EAAA,cAAA;AAAA,EACX,IAAM,EAAA,cAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,MAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,UAAY,EAAA,QAAA;AAAA,EACZ,UAAY,EAAA,QAAA;AAAA,EACZ,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,aAAe,EAAA,QAAA;AAAA,EACf,GAAK,EAAA,WAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,MAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,GAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,MAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,WAAA;AAAA,EACN,EAAI,EAAA,QAAA;AAAA,EACJ,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,EAAI,EAAA,QAAA;AAAA,EACJ,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,cAAA;AAAA,EACL,GAAK,EAAA,cAAA;AAAA,EACL,IAAM,EAAA,cAAA;AAAA,EACN,UAAY,EAAA,QAAA;AAAA,EACZ,eAAiB,EAAA,QAAA;AAAA,EACjB,GAAK,EAAA,cAAA;AAAA,EACL,GAAK,EAAA,cAAA;AAAA,EACL,IAAM,EAAA,cAAA;AAAA,EACN,WAAa,EAAA,QAAA;AAAA,EACb,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,cAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,cAAA;AAAA,EACN,KAAO,EAAA,cAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,QAAU,EAAA,QAAA;AAAA,EACV,IAAM,EAAA,MAAA;AAAA,EACN,KAAO,EAAA,cAAA;AAAA,EACP,MAAQ,EAAA,cAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,cAAA;AAAA,EACV,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,EAAI,EAAA,QAAA;AAAA,EACJ,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,cAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,cAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,GAAK,EAAA,WAAA;AAAA,EACL,GAAK,EAAA,cAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,cAAA;AAAA,EACP,SAAW,EAAA,cAAA;AAAA,EACX,IAAM,EAAA,cAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,EAAI,EAAA,QAAA;AAAA,EACJ,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,cAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,UAAY,EAAA,QAAA;AAAA,EACZ,eAAiB,EAAA,QAAA;AAAA,EACjB,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,cAAA;AAAA,EACP,SAAW,EAAA,cAAA;AAAA,EACX,IAAM,EAAA,cAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,GAAK,EAAA,MAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,cAAA;AAAA,EACR,QAAU,EAAA,cAAA;AAAA,EACV,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,QAAA;AAAA,EACN,SAAW,EAAA,QAAA;AAAA,EACX,MAAQ,EAAA,cAAA;AAAA,EACR,KAAO,EAAA,cAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,cAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,cAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,cAAA;AAAA,EACR,MAAQ,EAAA,cAAA;AAAA,EACR,WAAa,EAAA,QAAA;AAAA,EACb,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,cAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,SAAW,EAAA,QAAA;AAAA,EACX,cAAgB,EAAA,QAAA;AAAA,EAChB,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,cAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,cAAA;AAAA,EACT,SAAW,EAAA,QAAA;AAAA,EACX,UAAY,EAAA,cAAA;AAAA,EACZ,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,cAAA;AAAA,EACT,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,cAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,cAAA;AAAA,EACT,SAAW,EAAA,QAAA;AAAA,EACX,UAAY,EAAA,cAAA;AAAA,EACZ,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,MAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,aAAe,EAAA,QAAA;AAAA,EACf,eAAiB,EAAA,QAAA;AAAA,EACjB,cAAgB,EAAA,QAAA;AAAA,EAChB,gBAAkB,EAAA,QAAA;AAAA,EAClB,EAAI,EAAA,QAAA;AAAA,EACJ,GAAK,EAAA,GAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,cAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,cAAA;AAAA,EACN,IAAM,EAAA,SAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,cAAA;AAAA,EACN,IAAM,EAAA,SAAA;AAAA,EACN,OAAS,EAAA,cAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,cAAA;AAAA,EACT,KAAO,EAAA,cAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,EAAI,EAAA,QAAA;AAAA,EACJ,MAAQ,EAAA,MAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,MAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,WAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,MAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,EAAI,EAAA,QAAA;AAAA,EACJ,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,MAAA;AAAA,EACN,IAAM,EAAA,MAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,MAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,MAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,IAAM,EAAA,MAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,MAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,GAAA;AAAA,EACR,MAAQ,EAAA,GAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,GAAK,EAAA,WAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,EAAI,EAAA,QAAA;AAAA,EACJ,SAAW,EAAA,QAAA;AAAA,EACX,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,GAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,MAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,EAAI,EAAA,MAAA;AAAA,EACJ,QAAU,EAAA,QAAA;AAAA,EACV,IAAM,EAAA,WAAA;AAAA,EACN,KAAO,EAAA,MAAA;AAAA,EACP,EAAI,EAAA,QAAA;AAAA,EACJ,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,UAAY,EAAA,QAAA;AAAA,EACZ,WAAa,EAAA,QAAA;AAAA,EACb,MAAQ,EAAA,QAAA;AAAA,EACR,WAAa,EAAA,QAAA;AAAA,EACb,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,WAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,WAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,WAAA;AAAA,EACN,WAAa,EAAA,QAAA;AAAA,EACb,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,GAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,GAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,cAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,MAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,SAAW,EAAA,QAAA;AAAA,EACX,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,GAAA;AAAA,EACR,MAAQ,EAAA,GAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,GAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,MAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,WAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,UAAY,EAAA,QAAA;AAAA,EACZ,cAAgB,EAAA,QAAA;AAAA,EAChB,gBAAkB,EAAA,QAAA;AAAA,EAClB,cAAgB,EAAA,QAAA;AAAA,EAChB,eAAiB,EAAA,QAAA;AAAA,EACjB,iBAAmB,EAAA,QAAA;AAAA,EACnB,gBAAkB,EAAA,QAAA;AAAA,EAClB,eAAiB,EAAA,QAAA;AAAA,EACjB,eAAiB,EAAA,QAAA;AAAA,EACjB,IAAM,EAAA,QAAA;AAAA,EACN,YAAc,EAAA,QAAA;AAAA,EACd,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,UAAY,EAAA,QAAA;AAAA,EACZ,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,GAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,WAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,GAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,OAAS,EAAA,QAAA;AAAA,EACT,EAAI,EAAA,QAAA;AAAA,EACJ,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,EAAI,EAAA,QAAA;AAAA,EACJ,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,MAAA;AAAA,EACN,IAAM,EAAA,GAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,WAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,aAAe,EAAA,QAAA;AAAA,EACf,GAAK,EAAA,MAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,aAAe,EAAA,QAAA;AAAA,EACf,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,cAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,GAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,SAAW,EAAA,QAAA;AAAA,EACX,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,cAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,cAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,UAAY,EAAA,QAAA;AAAA,EACZ,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,UAAY,EAAA,QAAA;AAAA,EACZ,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,eAAiB,EAAA,QAAA;AAAA,EACjB,WAAa,EAAA,QAAA;AAAA,EACb,KAAO,EAAA,MAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,SAAW,EAAA,QAAA;AAAA,EACX,SAAW,EAAA,QAAA;AAAA,EACX,UAAY,EAAA,QAAA;AAAA,EACZ,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,UAAY,EAAA,QAAA;AAAA,EACZ,WAAa,EAAA,QAAA;AAAA,EACb,MAAQ,EAAA,QAAA;AAAA,EACR,WAAa,EAAA,QAAA;AAAA,EACb,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,QAAA;AAAA,EACV,OAAS,EAAA,QAAA;AAAA,EACT,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,MAAA;AAAA,EACN,IAAM,EAAA,MAAA;AAAA,EACN,IAAM,EAAA,MAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,QAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,SAAW,EAAA,QAAA;AAAA,EACX,SAAW,EAAA,QAAA;AAAA,EACX,UAAY,EAAA,QAAA;AAAA,EACZ,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,MAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,WAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,SAAW,EAAA,QAAA;AAAA,EACX,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,WAAa,EAAA,QAAA;AAAA,EACb,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,MAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,MAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,WAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,QAAU,EAAA,QAAA;AAAA,EACV,YAAc,EAAA,QAAA;AAAA,EACd,YAAc,EAAA,QAAA;AAAA,EACd,cAAgB,EAAA,QAAA;AAAA,EAChB,SAAW,EAAA,QAAA;AAAA,EACX,aAAe,EAAA,QAAA;AAAA,EACf,eAAiB,EAAA,QAAA;AAAA,EACjB,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,QAAU,EAAA,QAAA;AAAA,EACV,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,QAAU,EAAA,QAAA;AAAA,EACV,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,gBAAkB,EAAA,QAAA;AAAA,EAClB,iBAAmB,EAAA,QAAA;AAAA,EACnB,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,MAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,MAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,WAAA;AAAA,EACL,MAAQ,EAAA,MAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,MAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,WAAa,EAAA,QAAA;AAAA,EACb,aAAe,EAAA,QAAA;AAAA,EACf,cAAgB,EAAA,QAAA;AAAA,EAChB,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,OAAS,EAAA,QAAA;AAAA,EACT,UAAY,EAAA,QAAA;AAAA,EACZ,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,MAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,UAAY,EAAA,QAAA;AAAA,EACZ,QAAU,EAAA,QAAA;AAAA,EACV,UAAY,EAAA,QAAA;AAAA,EACZ,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,SAAW,EAAA,QAAA;AAAA,EACX,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,QAAU,EAAA,QAAA;AAAA,EACV,YAAc,EAAA,cAAA;AAAA,EACd,aAAe,EAAA,cAAA;AAAA,EACf,YAAc,EAAA,cAAA;AAAA,EACd,aAAe,EAAA,cAAA;AAAA,EACf,QAAU,EAAA,QAAA;AAAA,EACV,eAAiB,EAAA,QAAA;AAAA,EACjB,gBAAkB,EAAA,QAAA;AAAA,EAClB,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,GAAA;AAAA,EACR,IAAM,EAAA,GAAA;AAAA,EACN,GAAK,EAAA,WAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,cAAA;AAAA,EACP,KAAO,EAAA,cAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,cAAA;AAAA,EACR,MAAQ,EAAA,cAAA;AAAA,EACR,MAAQ,EAAA,cAAA;AAAA,EACR,MAAQ,EAAA,cAAA;AAAA,EACR,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,WAAA;AAAA,EACL,IAAM,EAAA,WAAA;AAAA,EACN,EAAI,EAAA,QAAA;AAAA,EACJ,EAAI,EAAA,QAAA;AAAA,EACJ,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,WAAA;AAAA,EACL,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,EAAI,EAAA,QAAA;AAAA,EACJ,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,QAAA;AAAA,EACP,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,MAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,QAAA;AAAA,EACP,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,MAAA;AAAA,EACL,GAAK,EAAA,WAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,IAAM,EAAA,MAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,MAAQ,EAAA,QAAA;AAAA,EACR,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAA,QAAA;AAAA,EACR,IAAM,EAAA,QAAA;AAAA,EACN,GAAK,EAAA,WAAA;AAAA,EACL,IAAM,EAAA,QAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA;AACR,CAAA;;;ACjlEA,IAAM2F,IAAAA,GAAM,EAAG,CAAA,cAAA;AAaR,SAAS,8BAA8B3F,MAAO,EAAA;AACnD,EAAA,OAAO2F,KAAI,IAAK,CAAA,iBAAA,EAAmB3F,MAAK,CAAI,GAAA,iBAAA,CAAkBA,MAAK,CAAI,GAAA,KAAA;AACzE;;;ACKO,SAAS,MAAOV,CAAAA,KAAAA,EAAMlC,MAAO,EAAA,MAAA,EAAQ,KAAO,EAAA;AACjD,EAAA,MAAM,MAAMkC,KAAK,CAAA,MAAA;AACjB,EAAA,IAAI,UAAa,GAAA,CAAA;AAEjB,EAAI,IAAA,UAAA;AAGJ,EAAA,IAAIlC,SAAQ,CAAG,EAAA;AACb,IAAAA,MAAQ,GAAA,CAACA,MAAQ,GAAA,GAAA,GAAM,IAAI,GAAMA,GAAAA,MAAAA;AAAA,GAC5B,MAAA;AACL,IAAAA,MAAAA,GAAQA,MAAQ,GAAA,GAAA,GAAM,GAAMA,GAAAA,MAAAA;AAAA;AAE9B,EAAS,MAAA,GAAA,MAAA,GAAS,IAAI,MAAS,GAAA,CAAA;AAG/B,EAAI,IAAA,KAAA,CAAM,SAAS,GAAO,EAAA;AACxB,IAAa,UAAA,GAAA,KAAA,CAAM,KAAK,KAAK,CAAA;AAC7B,IAAW,UAAA,CAAA,OAAA,CAAQA,QAAO,MAAM,CAAA;AAEhC,IAAAkC,KAAAA,CAAK,MAAO,CAAA,GAAG,UAAU,CAAA;AAAA,GACpB,MAAA;AAEL,IAAA,IAAI,MAAQ,EAAAA,KAAK,CAAA,MAAA,CAAOlC,QAAO,MAAM,CAAA;AAGrC,IAAO,OAAA,UAAA,GAAa,MAAM,MAAQ,EAAA;AAChC,MAAA,UAAA,GAAa,KAAM,CAAA,KAAA,CAAM,UAAY,EAAA,UAAA,GAAa,GAAK,CAAA;AACvD,MAAW,UAAA,CAAA,OAAA,CAAQA,QAAO,CAAC,CAAA;AAE3B,MAAAkC,KAAAA,CAAK,MAAO,CAAA,GAAG,UAAU,CAAA;AACzB,MAAc,UAAA,IAAA,GAAA;AACd,MAAAlC,MAAS,IAAA,GAAA;AAAA;AACX;AAEJ;AAkBO,SAAS,IAAA,CAAKkC,OAAM,KAAO,EAAA;AAChC,EAAIA,IAAAA,KAAAA,CAAK,SAAS,CAAG,EAAA;AACnB,IAAA,MAAA,CAAOA,KAAMA,EAAAA,KAAAA,CAAK,MAAQ,EAAA,CAAA,EAAG,KAAK,CAAA;AAClC,IAAOA,OAAAA,KAAAA;AAAA;AAET,EAAO,OAAA,KAAA;AACT;;;ACrEA,IAAM,cAAA,GAAiB,EAAG,CAAA,cAAA;AAUnB,SAAS,kBAAkB,UAAY,EAAA;AAE5C,EAAA,MAAMsG,OAAM,EAAC;AACb,EAAA,IAAItF,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAO,OAAA,EAAEA,MAAQ,GAAA,UAAA,CAAW,MAAQ,EAAA;AAClC,IAAgBsF,eAAAA,CAAAA,IAAAA,EAAK,UAAWtF,CAAAA,MAAK,CAAC,CAAA;AAAA;AAGxC,EAAOsF,OAAAA,IAAAA;AACT;AAYA,SAAS,eAAA,CAAgBA,MAAKC,UAAW,EAAA;AAEvC,EAAI,IAAA,IAAA;AAEJ,EAAA,KAAK,QAAQA,UAAW,EAAA;AACtB,IAAM,MAAA,KAAA,GAAQ,eAAe,IAAKD,CAAAA,IAAAA,EAAK,IAAI,CAAIA,GAAAA,IAAAA,CAAI,IAAI,CAAI,GAAA,KAAA,CAAA;AAE3D,IAAA,MAAM,IAAO,GAAA,KAAA,KAAUA,IAAI,CAAA,IAAI,IAAI,EAAC,CAAA;AAEpC,IAAM,MAAA,KAAA,GAAQC,WAAU,IAAI,CAAA;AAE5B,IAAIpK,IAAAA,KAAAA;AAEJ,IAAA,IAAI,KAAO,EAAA;AACT,MAAA,KAAKA,SAAQ,KAAO,EAAA;AAClB,QAAI,IAAA,CAAC,eAAe,IAAK,CAAA,IAAA,EAAMA,KAAI,CAAG,EAAA,IAAA,CAAKA,KAAI,CAAA,GAAI,EAAC;AACpD,QAAMuE,MAAAA,MAAAA,GAAQ,MAAMvE,KAAI,CAAA;AACxB,QAAA,UAAA;AAAA;AAAA,UAEE,KAAKA,KAAI,CAAA;AAAA,UACT,KAAA,CAAM,QAAQuE,MAAK,CAAA,GAAIA,SAAQA,MAAQ,GAAA,CAACA,MAAK,CAAA,GAAI;AAAC,SACpD;AAAA;AACF;AACF;AAEJ;AAaA,SAAS,UAAA,CAAW,UAAUV,KAAM,EAAA;AAClC,EAAA,IAAIgB,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAA,MAAM,SAAS,EAAC;AAEhB,EAAO,OAAA,EAAEA,MAAQhB,GAAAA,KAAAA,CAAK,MAAQ,EAAA;AAE3B,IAACA,CAAAA,KAAAA,CAAKgB,MAAK,CAAA,CAAE,GAAQ,KAAA,OAAA,GAAU,WAAW,MAAQ,EAAA,IAAA,CAAKhB,KAAKgB,CAAAA,MAAK,CAAC,CAAA;AAAA;AAGrE,EAAO,MAAA,CAAA,QAAA,EAAU,CAAG,EAAA,CAAA,EAAG,MAAM,CAAA;AAC/B;;;AC9EO,SAAS,+BAAA,CAAgCN,QAAO,IAAM,EAAA;AAC3D,EAAA,MAAMvE,KAAO,GAAA,MAAA,CAAO,QAASuE,CAAAA,MAAAA,EAAO,IAAI,CAAA;AACxC,EAAA;AAAA;AAAA,IAEAvE,QAAO,CAAKA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,GAAO,MAAMA,KAAO,GAAA,EAAA;AAAA,IAE/CA,KAAAA,GAAO,OAAOA,KAAO,GAAA,GAAA;AAAA,IAErBA,KAAAA,GAAO,SAAUA,KAAO,GAAA,KAAA;AAAA,IAExBA,KAAAA,GAAO,SAAUA,KAAO,GAAA,KAAA;AAAA,IAAA,CACvBA,KAAO,GAAA,KAAA,MAAY,KAAWA,IAAAA,CAAAA,KAAAA,GAAO,KAAY,MAAA,KAAA;AAAA;AAAA,IAElDA,KAAO,GAAA;AAAA,IAAW;AAChB,IAAO,OAAA,QAAA;AAAA;AAET,EAAO,OAAA,MAAA,CAAO,cAAcA,KAAI,CAAA;AAClC;;;ACZO,SAAS,oBAAoBuE,MAAO,EAAA;AACzC,EAAOA,OAAAA,MAAAA,CAEN,OAAQ,CAAA,aAAA,EAAe,GAAG,CAAA,CAE1B,OAAQ,CAAA,QAAA,EAAU,EAAE,CAAA,CAOpB,WAAY,EAAA,CAAE,WAAY,EAAA;AAC7B;;;ACXO,IAAM,UAAA,GAAa,WAAW,UAAU,CAAA;AAcxC,IAAM,iBAAA,GAAoB,WAAW,YAAY,CAAA;AAuBjD,IAAM,UAAA,GAAa,WAAW,qBAAqB,CAAA;AAanD,SAAS,aAAavE,KAAM,EAAA;AACjC,EAAA;AAAA;AAAA;AAAA,IAGEA,KAAS,KAAA,IAAA,KAASA,KAAO,GAAA,EAAA,IAAMA,KAAS,KAAA,GAAA;AAAA;AAE5C;AAaO,IAAM,UAAA,GAAa,WAAW,IAAI,CAAA;AAoBlC,IAAM,aAAA,GAAgB,WAAW,YAAY,CAAA;AAe7C,IAAM,gBAAA,GAAmB,WAAW,gBAAgB,CAAA;AAiBpD,SAAS,mBAAmBA,KAAM,EAAA;AACvC,EAAOA,OAAAA,KAAAA,KAAS,QAAQA,KAAO,GAAA,CAAA,CAAA;AACjC;AAWO,SAAS,0BAA0BA,KAAM,EAAA;AAC9C,EAAA,OAAOA,KAAS,KAAA,IAAA,KAASA,KAAO,GAAA,CAAA,IAAKA,KAAS,KAAA,EAAA,CAAA;AAChD;AAiBO,SAAS,cAAcA,KAAM,EAAA;AAClC,EAAA,OAAOA,KAAS,KAAA,CAAA,CAAA,IAAMA,KAAS,KAAA,CAAA,CAAA,IAAMA,KAAS,KAAA,EAAA;AAChD;AAuBO,IAAM,kBAAA,GAAqB,WAAW,cAAc,CAAA;AAsBpD,IAAM,iBAAA,GAAoB,WAAW,IAAI,CAAA;AAUhD,SAAS,WAAW,KAAO,EAAA;AACzB,EAAO,OAAA,KAAA;AAUP,EAAA,SAAS,MAAMA,KAAM,EAAA;AACnB,IAAOA,OAAAA,KAAAA,KAAS,QAAQA,KAAO,GAAA,CAAA,CAAA,IAAM,MAAM,IAAK,CAAA,MAAA,CAAO,YAAaA,CAAAA,KAAI,CAAC,CAAA;AAAA;AAE7E;;;AC7MO,SAAS,YAAa,CAAA,OAAA,EAASqK,GAAI,EAAA,IAAA,EAAM,GAAK,EAAA;AACnD,EAAA,MAAM,KAAQ,GAAA,GAAA,GAAM,GAAM,GAAA,CAAA,GAAI,MAAO,CAAA,iBAAA;AACrC,EAAA,IAAI,IAAO,GAAA,CAAA;AACX,EAAO1I,OAAAA,MAAAA;AAGP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,MAAA,OAAA,CAAQ,MAAM,IAAI,CAAA;AAClB,MAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAEpB,IAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAIhB,EAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,IAAA,IAAI,aAAcA,CAAAA,KAAI,CAAK,IAAA,IAAA,EAAA,GAAS,KAAO,EAAA;AACzC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,MAAA;AAAA;AAET,IAAA,OAAA,CAAQ,KAAK,IAAI,CAAA;AACjB,IAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAElB;;;AClDO,IAAM,OAAU,GAAA;AAAA,EACrB,QAAU,EAAA;AACZ,CAAA;AAQA,SAAS,kBAAkB,OAAS,EAAA;AAClC,EAAM,MAAA,YAAA,GAAe,QAAQ,OAAQ,CAAA,IAAA,CAAK,OAAO,UAAW,CAAA,cAAA,EAAgB,4BAA4B,gBAAgB,CAAA;AAExH,EAAIsK,IAAAA,SAAAA;AACJ,EAAO,OAAA,YAAA;AAGP,EAAA,SAAS,2BAA2BtK,KAAM,EAAA;AACxC,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA;AAAA;AAEF,IAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,IAAO,OAAA,YAAA,CAAa,OAAS,EAAA,YAAA,EAAc,YAAY,CAAA;AAAA;AAIzD,EAAA,SAAS,iBAAiBA,KAAM,EAAA;AAC9B,IAAA,OAAA,CAAQ,MAAM,WAAW,CAAA;AACzB,IAAA,OAAO,UAAUA,KAAI,CAAA;AAAA;AAIvB,EAAA,SAAS,UAAUA,KAAM,EAAA;AACvB,IAAM,MAAA,KAAA,GAAQ,OAAQ,CAAA,KAAA,CAAM,WAAa,EAAA;AAAA,MACvC,WAAa,EAAA,MAAA;AAAA,MACb,QAAAsK,EAAAA;AAAA,KACD,CAAA;AACD,IAAA,IAAIA,SAAU,EAAA;AACZ,MAAAA,UAAS,IAAO,GAAA,KAAA;AAAA;AAElB,IAAAA,SAAW,GAAA,KAAA;AACX,IAAA,OAAO5D,MAAK1G,KAAI,CAAA;AAAA;AAIlB,EAAA,SAAS0G,MAAK1G,KAAM,EAAA;AAClB,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,OAAA,CAAQ,KAAK,WAAW,CAAA;AACxB,MAAA,OAAA,CAAQ,KAAK,WAAW,CAAA;AACxB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA;AAAA;AAEF,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,WAAW,CAAA;AACxB,MAAO,OAAA,SAAA;AAAA;AAIT,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO0G,OAAAA,KAAAA;AAAA;AAEX;;;ACvDO,IAAM,QAAW,GAAA;AAAA,EACtB,QAAU,EAAA;AACZ,CAAA;AAGA,IAAM,kBAAqB,GAAA;AAAA,EACzB,QAAU,EAAA;AACZ,CAAA;AAQA,SAAS,mBAAmB,OAAS,EAAA;AACnC,EAAA,MAAMK,KAAO,GAAA,IAAA;AAEb,EAAA,MAAM,QAAQ,EAAC;AACf,EAAA,IAAI,SAAY,GAAA,CAAA;AAEhB,EAAI,IAAA,SAAA;AAEJ,EAAI,IAAA,UAAA;AAEJ,EAAI,IAAA,eAAA;AACJ,EAAOpF,OAAAA,MAAAA;AAGP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AAWnB,IAAI,IAAA,SAAA,GAAY,MAAM,MAAQ,EAAA;AAC5B,MAAM,MAAA,IAAA,GAAO,MAAM,SAAS,CAAA;AAC5B,MAAA+G,KAAAA,CAAK,cAAiB,GAAA,IAAA,CAAK,CAAC,CAAA;AAC5B,MAAO,OAAA,OAAA,CAAQ,QAAQ,IAAK,CAAA,CAAC,EAAE,YAAc,EAAA,gBAAA,EAAkB,kBAAkB,CAAA,CAAE/G,KAAI,CAAA;AAAA;AAIzF,IAAA,OAAO,mBAAmBA,KAAI,CAAA;AAAA;AAIhC,EAAA,SAAS,iBAAiBA,KAAM,EAAA;AAC9B,IAAA,SAAA,EAAA;AAKA,IAAI+G,IAAAA,KAAAA,CAAK,eAAe,UAAY,EAAA;AAClC,MAAAA,KAAAA,CAAK,eAAe,UAAa,GAAA,KAAA,CAAA;AACjC,MAAA,IAAI,SAAW,EAAA;AACb,QAAU,SAAA,EAAA;AAAA;AAKZ,MAAM,MAAA,gBAAA,GAAmBA,MAAK,MAAO,CAAA,MAAA;AACrC,MAAA,IAAI,eAAkB,GAAA,gBAAA;AAEtB,MAAIyC,IAAAA,MAAAA;AAGJ,MAAA,OAAO,eAAmB,EAAA,EAAA;AACxB,QAAA,IAAIzC,KAAK,CAAA,MAAA,CAAO,eAAe,CAAA,CAAE,CAAC,CAAM,KAAA,MAAA,IAAUA,KAAK,CAAA,MAAA,CAAO,eAAe,CAAA,CAAE,CAAC,CAAA,CAAE,SAAS,WAAa,EAAA;AACtG,UAAAyC,SAAQzC,KAAK,CAAA,MAAA,CAAO,eAAe,CAAA,CAAE,CAAC,CAAE,CAAA,GAAA;AACxC,UAAA;AAAA;AACF;AAEF,MAAA,cAAA,CAAe,SAAS,CAAA;AAGxB,MAAA,IAAIlC,MAAQ,GAAA,gBAAA;AACZ,MAAOA,OAAAA,MAAAA,GAAQkC,KAAK,CAAA,MAAA,CAAO,MAAQ,EAAA;AACjC,QAAAA,MAAK,MAAOlC,CAAAA,MAAK,CAAE,CAAA,CAAC,EAAE,GAAM,GAAA;AAAA,UAC1B,GAAG2E;AAAA,SACL;AACA,QAAA3E,MAAAA,EAAAA;AAAA;AAIF,MAAOkC,MAAAA,CAAAA,KAAAA,CAAK,QAAQ,eAAkB,GAAA,CAAA,EAAG,GAAGA,KAAK,CAAA,MAAA,CAAO,KAAM,CAAA,gBAAgB,CAAC,CAAA;AAG/E,MAAAA,KAAAA,CAAK,OAAO,MAASlC,GAAAA,MAAAA;AACrB,MAAA,OAAO,mBAAmB7E,KAAI,CAAA;AAAA;AAEhC,IAAA,OAAO2B,OAAM3B,KAAI,CAAA;AAAA;AAInB,EAAA,SAAS,mBAAmBA,KAAM,EAAA;AAMhC,IAAI,IAAA,SAAA,KAAc,MAAM,MAAQ,EAAA;AAI9B,MAAA,IAAI,CAAC,SAAW,EAAA;AACd,QAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAM/B,MAAA,IAAI,SAAU,CAAA,gBAAA,IAAoB,SAAU,CAAA,gBAAA,CAAiB,QAAU,EAAA;AACrE,QAAA,OAAO,UAAUA,KAAI,CAAA;AAAA;AAQvB,MAAA+G,MAAK,SAAY,GAAA,OAAA,CAAQ,UAAU,gBAAoB,IAAA,CAAC,UAAU,6BAA6B,CAAA;AAAA;AAIjG,IAAAA,KAAAA,CAAK,iBAAiB,EAAC;AACvB,IAAA,OAAO,QAAQ,KAAM,CAAA,kBAAA,EAAoB,oBAAsB,EAAA,qBAAqB,EAAE/G,KAAI,CAAA;AAAA;AAI5F,EAAA,SAAS,qBAAqBA,KAAM,EAAA;AAClC,IAAA,IAAI,WAAqB,SAAA,EAAA;AACzB,IAAA,cAAA,CAAe,SAAS,CAAA;AACxB,IAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAI/B,EAAA,SAAS,sBAAsBA,KAAM,EAAA;AACnC,IAAA+G,KAAAA,CAAK,OAAO,IAAKA,CAAAA,KAAAA,CAAK,KAAM,CAAA,IAAI,CAAI,GAAA,SAAA,KAAc,KAAM,CAAA,MAAA;AACxD,IAAkBA,eAAAA,GAAAA,KAAAA,CAAK,KAAM,CAAA,MAAA;AAC7B,IAAA,OAAO,UAAU/G,KAAI,CAAA;AAAA;AAIvB,EAAA,SAAS,kBAAkBA,KAAM,EAAA;AAE/B,IAAA+G,KAAAA,CAAK,iBAAiB,EAAC;AACvB,IAAA,OAAO,QAAQ,OAAQ,CAAA,kBAAA,EAAoB,iBAAmB,EAAA,SAAS,EAAE/G,KAAI,CAAA;AAAA;AAI/E,EAAA,SAAS,kBAAkBA,KAAM,EAAA;AAC/B,IAAA,SAAA,EAAA;AACA,IAAA,KAAA,CAAM,KAAK,CAAC+G,KAAAA,CAAK,gBAAkBA,EAAAA,KAAAA,CAAK,cAAc,CAAC,CAAA;AAEvD,IAAA,OAAO,kBAAkB/G,KAAI,CAAA;AAAA;AAI/B,EAAA,SAAS,UAAUA,KAAM,EAAA;AACvB,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,IAAI,WAAqB,SAAA,EAAA;AACzB,MAAA,cAAA,CAAe,CAAC,CAAA;AAChB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA;AAAA;AAEF,IAAA,SAAA,GAAY,aAAa+G,KAAK,CAAA,MAAA,CAAO,IAAKA,CAAAA,KAAAA,CAAK,KAAK,CAAA;AACpD,IAAA,OAAA,CAAQ,MAAM,WAAa,EAAA;AAAA,MACzB,UAAY,EAAA,SAAA;AAAA,MACZ,WAAa,EAAA,MAAA;AAAA,MACb,QAAU,EAAA;AAAA,KACX,CAAA;AACD,IAAA,OAAO,aAAa/G,KAAI,CAAA;AAAA;AAI1B,EAAA,SAAS,aAAaA,KAAM,EAAA;AAC1B,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,YAAA,CAAa,OAAQ,CAAA,IAAA,CAAK,WAAW,CAAA,EAAG,IAAI,CAAA;AAC5C,MAAA,cAAA,CAAe,CAAC,CAAA;AAChB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA;AAAA;AAEF,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAa,YAAA,CAAA,OAAA,CAAQ,IAAK,CAAA,WAAW,CAAC,CAAA;AAEtC,MAAY,SAAA,GAAA,CAAA;AACZ,MAAA+G,MAAK,SAAY,GAAA,KAAA,CAAA;AACjB,MAAOpF,OAAAA,MAAAA;AAAA;AAET,IAAA,OAAA,CAAQ,QAAQ3B,KAAI,CAAA;AACpB,IAAO,OAAA,YAAA;AAAA;AAWT,EAAS,SAAA,YAAA,CAAa,OAAO,SAAW,EAAA;AACtC,IAAM,MAAA,MAAA,GAAS+G,KAAK,CAAA,WAAA,CAAY,KAAK,CAAA;AACrC,IAAI,IAAA,SAAA,EAAkB,MAAA,CAAA,IAAA,CAAK,IAAI,CAAA;AAC/B,IAAA,KAAA,CAAM,QAAW,GAAA,UAAA;AACjB,IAAI,IAAA,UAAA,aAAuB,IAAO,GAAA,KAAA;AAClC,IAAa,UAAA,GAAA,KAAA;AACb,IAAU,SAAA,CAAA,UAAA,CAAW,MAAM,KAAK,CAAA;AAChC,IAAA,SAAA,CAAU,MAAM,MAAM,CAAA;AAmCtB,IAAA,IAAIA,MAAK,MAAO,CAAA,IAAA,CAAK,KAAM,CAAA,KAAA,CAAM,IAAI,CAAG,EAAA;AACtC,MAAIlC,IAAAA,MAAAA,GAAQ,UAAU,MAAO,CAAA,MAAA;AAC7B,MAAA,OAAOA,MAAS,EAAA,EAAA;AACd,QAAA;AAAA;AAAA,UAEA,UAAU,MAAOA,CAAAA,MAAK,EAAE,CAAC,CAAA,CAAE,MAAM,MAAS,GAAA,eAAA;AAAA,WAE1C,CAAC,SAAU,CAAA,MAAA,CAAOA,MAAK,CAAA,CAAE,CAAC,CAAE,CAAA,GAAA;AAAA,UAE5B,UAAU,MAAOA,CAAAA,MAAK,EAAE,CAAC,CAAA,CAAE,IAAI,MAAS,GAAA,eAAA;AAAA,UAAkB;AAGxD,UAAA;AAAA;AACF;AAKF,MAAM,MAAA,gBAAA,GAAmBkC,MAAK,MAAO,CAAA,MAAA;AACrC,MAAA,IAAI,eAAkB,GAAA,gBAAA;AAEtB,MAAI,IAAA,IAAA;AAEJ,MAAIyC,IAAAA,MAAAA;AAGJ,MAAA,OAAO,eAAmB,EAAA,EAAA;AACxB,QAAA,IAAIzC,KAAK,CAAA,MAAA,CAAO,eAAe,CAAA,CAAE,CAAC,CAAM,KAAA,MAAA,IAAUA,KAAK,CAAA,MAAA,CAAO,eAAe,CAAA,CAAE,CAAC,CAAA,CAAE,SAAS,WAAa,EAAA;AACtG,UAAA,IAAI,IAAM,EAAA;AACR,YAAAyC,SAAQzC,KAAK,CAAA,MAAA,CAAO,eAAe,CAAA,CAAE,CAAC,CAAE,CAAA,GAAA;AACxC,YAAA;AAAA;AAEF,UAAO,IAAA,GAAA,IAAA;AAAA;AACT;AAEF,MAAA,cAAA,CAAe,SAAS,CAAA;AAGxB,MAAAlC,MAAQ,GAAA,gBAAA;AACR,MAAOA,OAAAA,MAAAA,GAAQkC,KAAK,CAAA,MAAA,CAAO,MAAQ,EAAA;AACjC,QAAAA,MAAK,MAAOlC,CAAAA,MAAK,CAAE,CAAA,CAAC,EAAE,GAAM,GAAA;AAAA,UAC1B,GAAG2E;AAAA,SACL;AACA,QAAA3E,MAAAA,EAAAA;AAAA;AAIF,MAAOkC,MAAAA,CAAAA,KAAAA,CAAK,QAAQ,eAAkB,GAAA,CAAA,EAAG,GAAGA,KAAK,CAAA,MAAA,CAAO,KAAM,CAAA,gBAAgB,CAAC,CAAA;AAG/E,MAAAA,KAAAA,CAAK,OAAO,MAASlC,GAAAA,MAAAA;AAAA;AACvB;AASF,EAAA,SAAS,eAAe,IAAM,EAAA;AAC5B,IAAA,IAAIA,SAAQ,KAAM,CAAA,MAAA;AAGlB,IAAA,OAAOA,WAAU,IAAM,EAAA;AACrB,MAAM,MAAA,KAAA,GAAQ,MAAMA,MAAK,CAAA;AACzB,MAAAkC,KAAAA,CAAK,cAAiB,GAAA,KAAA,CAAM,CAAC,CAAA;AAC7B,MAAA,KAAA,CAAM,CAAC,CAAA,CAAE,IAAK,CAAA,IAAA,CAAKA,OAAM,OAAO,CAAA;AAAA;AAElC,IAAA,KAAA,CAAM,MAAS,GAAA,IAAA;AAAA;AAEjB,EAAA,SAAS,SAAY,GAAA;AACnB,IAAU,SAAA,CAAA,KAAA,CAAM,CAAC,IAAI,CAAC,CAAA;AACtB,IAAa,UAAA,GAAA,KAAA,CAAA;AACb,IAAY,SAAA,GAAA,KAAA,CAAA;AACZ,IAAAA,KAAAA,CAAK,eAAe,UAAa,GAAA,KAAA,CAAA;AAAA;AAErC;AAQA,SAAS,iBAAA,CAAkB,OAASsD,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAG3C,EAAO,OAAA,YAAA,CAAa,SAAS,OAAQ,CAAA,OAAA,CAAQ,KAAK,MAAO,CAAA,UAAA,CAAW,UAAUA,GAAI,EAAA,GAAG,GAAG,YAAc,EAAA,IAAA,CAAK,OAAO,UAAW,CAAA,OAAA,CAAQ,KAAK,QAAS,CAAA,cAAc,CAAI,GAAA,KAAA,CAAA,GAAY,CAAC,CAAA;AACpL;;;ACtVO,SAAS,kBAAkBrK,KAAM,EAAA;AACtC,EAAA,IAAIA,UAAS,IAAQ,IAAA,yBAAA,CAA0BA,KAAI,CAAK,IAAA,iBAAA,CAAkBA,KAAI,CAAG,EAAA;AAC/E,IAAO,OAAA,CAAA;AAAA;AAET,EAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,IAAO,OAAA,CAAA;AAAA;AAEX;;;ACVO,SAAS,UAAA,CAAWuK,WAAY,EAAA,MAAA,EAAQ,OAAS,EAAA;AAEtD,EAAA,MAAM,SAAS,EAAC;AAChB,EAAA,IAAI1F,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAO,OAAA,EAAEA,MAAQ0F,GAAAA,WAAAA,CAAW,MAAQ,EAAA;AAClC,IAAM,MAAA,OAAA,GAAUA,WAAW1F,CAAAA,MAAK,CAAE,CAAA,UAAA;AAElC,IAAA,IAAI,OAAW,IAAA,CAAC,MAAO,CAAA,QAAA,CAAS,OAAO,CAAG,EAAA;AACxC,MAAS,MAAA,GAAA,OAAA,CAAQ,QAAQ,OAAO,CAAA;AAChC,MAAA,MAAA,CAAO,KAAK,OAAO,CAAA;AAAA;AACrB;AAGF,EAAO,OAAA,MAAA;AACT;;;ACbO,IAAM,SAAY,GAAA;AAAA,EACvB,IAAM,EAAA,WAAA;AAAA,EACN,UAAY,EAAA,mBAAA;AAAA,EACZ,QAAU,EAAA;AACZ,CAAA;AAQA,SAAS,mBAAA,CAAoB,QAAQ,OAAS,EAAA;AAC5C,EAAA,IAAIA,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAI,IAAA,IAAA;AAEJ,EAAI,IAAA,KAAA;AAEJ,EAAI5C,IAAAA,KAAAA;AAEJ,EAAI,IAAA,eAAA;AAEJ,EAAI,IAAA,eAAA;AAEJ,EAAI,IAAA,GAAA;AAEJ,EAAI,IAAA,UAAA;AAEJ,EAAIR,IAAAA,OAAAA;AAMJ,EAAO,OAAA,EAAEoD,MAAQ,GAAA,MAAA,CAAO,MAAQ,EAAA;AAE9B,IAAA,IAAI,OAAOA,MAAK,CAAA,CAAE,CAAC,CAAM,KAAA,OAAA,IAAW,OAAOA,MAAK,CAAA,CAAE,CAAC,CAAA,CAAE,SAAS,mBAAuB,IAAA,MAAA,CAAOA,MAAK,CAAE,CAAA,CAAC,EAAE,MAAQ,EAAA;AAC5G,MAAOA,IAAAA,GAAAA,MAAAA;AAGP,MAAA,OAAO,IAAQ,EAAA,EAAA;AAEb,QAAA,IAAI,OAAO,IAAI,CAAA,CAAE,CAAC,CAAA,KAAM,UAAU,MAAO,CAAA,IAAI,CAAE,CAAA,CAAC,EAAE,IAAS,KAAA,mBAAA,IAAuB,OAAO,IAAI,CAAA,CAAE,CAAC,CAAE,CAAA,KAAA;AAAA,QAElG,OAAA,CAAQ,eAAe,MAAO,CAAA,IAAI,EAAE,CAAC,CAAC,EAAE,UAAW,CAAA,CAAC,MAAM,OAAQ,CAAA,cAAA,CAAe,OAAOA,MAAK,CAAA,CAAE,CAAC,CAAC,CAAA,CAAE,UAAW,CAAA,CAAC,CAAG,EAAA;AAKhlD,MAAQ,GAAA;AAAA,YACZ,GAAG,MAAA,CAAO,IAAI,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA,WACrB;AACA,UAAA,MAAM,GAAM,GAAA;AAAA,YACV,GAAG,MAAA,CAAOkD,MAAK,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA,WACtB;AACA,UAAUlD,SAAAA,CAAAA,MAAAA,EAAO,CAAC,GAAG,CAAA;AACrB,UAAA,SAAA,CAAU,KAAK,GAAG,CAAA;AAClB,UAAkB,eAAA,GAAA;AAAA,YAChB,IAAA,EAAM,GAAM,GAAA,CAAA,GAAI,gBAAmB,GAAA,kBAAA;AAAA,YACnC,KAAAA,EAAAA,MAAAA;AAAA,YACA,GAAK,EAAA;AAAA,cACH,GAAG,MAAA,CAAO,IAAI,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA;AACrB,WACF;AACA,UAAkB,eAAA,GAAA;AAAA,YAChB,IAAA,EAAM,GAAM,GAAA,CAAA,GAAI,gBAAmB,GAAA,kBAAA;AAAA,YACnC,KAAO,EAAA;AAAA,cACL,GAAG,MAAA,CAAOkD,MAAK,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA,aACtB;AAAA,YACA;AAAA,WACF;AACA,UAAA5C,KAAO,GAAA;AAAA,YACL,IAAA,EAAM,GAAM,GAAA,CAAA,GAAI,YAAe,GAAA,cAAA;AAAA,YAC/B,KAAO,EAAA;AAAA,cACL,GAAG,MAAA,CAAO,IAAI,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA,aACrB;AAAA,YACA,GAAK,EAAA;AAAA,cACH,GAAG,MAAA,CAAO4C,MAAK,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA;AACtB,WACF;AACA,UAAQ,KAAA,GAAA;AAAA,YACN,IAAA,EAAM,GAAM,GAAA,CAAA,GAAI,QAAW,GAAA,UAAA;AAAA,YAC3B,KAAO,EAAA;AAAA,cACL,GAAG,eAAgB,CAAA;AAAA,aACrB;AAAA,YACA,GAAK,EAAA;AAAA,cACH,GAAG,eAAgB,CAAA;AAAA;AACrB,WACF;AACA,UAAA,MAAA,CAAO,IAAI,CAAA,CAAE,CAAC,CAAA,CAAE,GAAM,GAAA;AAAA,YACpB,GAAG,eAAgB,CAAA;AAAA,WACrB;AACA,UAAA,MAAA,CAAOA,MAAK,CAAA,CAAE,CAAC,CAAA,CAAE,KAAQ,GAAA;AAAA,YACvB,GAAG,eAAgB,CAAA;AAAA,WACrB;AACA,UAAA,UAAA,GAAa,EAAC;AAGd,UAAA,IAAI,MAAO,CAAA,IAAI,CAAE,CAAA,CAAC,CAAE,CAAA,GAAA,CAAI,MAAS,GAAA,MAAA,CAAO,IAAI,CAAA,CAAE,CAAC,CAAA,CAAE,MAAM,MAAQ,EAAA;AAC7D,YAAa,UAAA,GAAA,IAAA,CAAK,YAAY,CAAC,CAAC,SAAS,MAAO,CAAA,IAAI,EAAE,CAAC,CAAA,EAAG,OAAO,CAAG,EAAA,CAAC,QAAQ,MAAO,CAAA,IAAI,EAAE,CAAC,CAAA,EAAG,OAAO,CAAC,CAAC,CAAA;AAAA;AAIzG,UAAa,UAAA,GAAA,IAAA,CAAK,YAAY,CAAC,CAAC,SAAS,KAAO,EAAA,OAAO,CAAG,EAAA,CAAC,OAAS,EAAA,eAAA,EAAiB,OAAO,CAAG,EAAA,CAAC,MAAQ,EAAA,eAAA,EAAiB,OAAO,CAAA,EAAG,CAAC,OAAS5C,EAAAA,KAAAA,EAAM,OAAO,CAAC,CAAC,CAAA;AAK5J,UAAA,UAAA,GAAa,IAAK,CAAA,UAAA,EAAY,UAAW,CAAA,OAAA,CAAQ,OAAO,UAAW,CAAA,UAAA,CAAW,IAAM,EAAA,MAAA,CAAO,MAAM,IAAO,GAAA,CAAA,EAAG4C,MAAK,CAAA,EAAG,OAAO,CAAC,CAAA;AAG3H,UAAa,UAAA,GAAA,IAAA,CAAK,YAAY,CAAC,CAAC,QAAQ5C,KAAM,EAAA,OAAO,CAAG,EAAA,CAAC,OAAS,EAAA,eAAA,EAAiB,OAAO,CAAG,EAAA,CAAC,MAAQ,EAAA,eAAA,EAAiB,OAAO,CAAA,EAAG,CAAC,MAAQ,EAAA,KAAA,EAAO,OAAO,CAAC,CAAC,CAAA;AAG1J,UAAA,IAAI,MAAO4C,CAAAA,MAAK,CAAE,CAAA,CAAC,CAAE,CAAA,GAAA,CAAI,MAAS,GAAA,MAAA,CAAOA,MAAK,CAAA,CAAE,CAAC,CAAA,CAAE,MAAM,MAAQ,EAAA;AAC/D,YAAApD,OAAS,GAAA,CAAA;AACT,YAAa,UAAA,GAAA,IAAA,CAAK,YAAY,CAAC,CAAC,SAAS,MAAOoD,CAAAA,MAAK,EAAE,CAAC,CAAA,EAAG,OAAO,CAAG,EAAA,CAAC,QAAQ,MAAOA,CAAAA,MAAK,EAAE,CAAC,CAAA,EAAG,OAAO,CAAC,CAAC,CAAA;AAAA,WACpG,MAAA;AACL,YAAApD,OAAS,GAAA,CAAA;AAAA;AAEX,UAAA,MAAA,CAAO,QAAQ,IAAO,GAAA,CAAA,EAAGoD,MAAQ,GAAA,IAAA,GAAO,GAAG,UAAU,CAAA;AACrD,UAAAA,MAAQ,GAAA,IAAA,GAAO,UAAW,CAAA,MAAA,GAASpD,OAAS,GAAA,CAAA;AAC5C,UAAA;AAAA;AACF;AACF;AACF;AAIF,EAAAoD,MAAQ,GAAA,CAAA,CAAA;AACR,EAAO,OAAA,EAAEA,MAAQ,GAAA,MAAA,CAAO,MAAQ,EAAA;AAC9B,IAAA,IAAI,OAAOA,MAAK,CAAA,CAAE,CAAC,CAAA,CAAE,SAAS,mBAAqB,EAAA;AACjD,MAAA,MAAA,CAAOA,MAAK,CAAA,CAAE,CAAC,CAAA,CAAE,IAAO,GAAA,MAAA;AAAA;AAC1B;AAEF,EAAO,OAAA,MAAA;AACT;AAOA,SAAS,iBAAA,CAAkB,SAASwF,GAAI,EAAA;AACtC,EAAA,MAAMG,iBAAmB,GAAA,IAAA,CAAK,MAAO,CAAA,UAAA,CAAW,gBAAiB,CAAA,IAAA;AACjE,EAAA,MAAMF,YAAW,IAAK,CAAA,QAAA;AACtB,EAAM,MAAA,MAAA,GAAS,kBAAkBA,SAAQ,CAAA;AAGzC,EAAI,IAAA,MAAA;AACJ,EAAO3I,OAAAA,MAAAA;AAYP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAASA,MAAAA,GAAAA,KAAAA;AACT,IAAA,OAAA,CAAQ,MAAM,mBAAmB,CAAA;AACjC,IAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAapB,EAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,IAAA,IAAIA,UAAS,MAAQ,EAAA;AACnB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,MAAA;AAAA;AAET,IAAM,MAAA,KAAA,GAAQ,OAAQ,CAAA,IAAA,CAAK,mBAAmB,CAAA;AAG9C,IAAM,MAAA,KAAA,GAAQ,kBAAkBA,KAAI,CAAA;AAIpC,IAAM,MAAA,IAAA,GAAO,CAAC,KAAS,IAAA,KAAA,KAAU,KAAK,MAAUwK,IAAAA,iBAAAA,CAAiB,SAASxK,KAAI,CAAA;AAC9E,IAAMyE,MAAAA,MAAAA,GAAQ,CAAC,MAAU,IAAA,MAAA,KAAW,KAAK,KAAS+F,IAAAA,iBAAAA,CAAiB,SAASF,SAAQ,CAAA;AACpF,IAAM,KAAA,CAAA,KAAA,GAAQ,QAAQ,MAAW,KAAA,EAAA,GAAK,OAAO,IAAS,KAAA,MAAA,IAAU,CAAC7F,MAAM,CAAA,CAAA;AACvE,IAAM,KAAA,CAAA,MAAA,GAAS,QAAQ,MAAW,KAAA,EAAA,GAAKA,SAAQA,MAAU,KAAA,KAAA,IAAS,CAAC,IAAK,CAAA,CAAA;AACxE,IAAA,OAAO4F,IAAGrK,KAAI,CAAA;AAAA;AAElB;AAeA,SAAS,SAAA,CAAUwJ,QAAO/H,OAAQ,EAAA;AAChC,EAAA+H,OAAM,MAAU/H,IAAAA,OAAAA;AAChB,EAAA+H,OAAM,MAAU/H,IAAAA,OAAAA;AAChB,EAAA+H,OAAM,YAAgB/H,IAAAA,OAAAA;AACxB;;;ACrOO,IAAM,QAAW,GAAA;AAAA,EACtB,IAAM,EAAA,UAAA;AAAA,EACN,QAAU,EAAA;AACZ,CAAA;AAOA,SAAS,gBAAA,CAAiB,OAAS4I,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC1C,EAAA,IAAI,IAAO,GAAA,CAAA;AACX,EAAO1I,OAAAA,MAAAA;AAcP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,IAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA;AAC9B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,gBAAgB,CAAA;AAC7B,IAAA,OAAA,CAAQ,MAAM,kBAAkB,CAAA;AAChC,IAAO,OAAA,IAAA;AAAA;AAeT,EAAA,SAAS,KAAKA,KAAM,EAAA;AAClB,IAAI,IAAA,UAAA,CAAWA,KAAI,CAAG,EAAA;AACpB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,kBAAA;AAAA;AAET,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAA,OAAO,WAAWA,KAAI,CAAA;AAAA;AAexB,EAAA,SAAS,mBAAmBA,KAAM,EAAA;AAEhC,IAAIA,IAAAA,KAAAA,KAAS,MAAMA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAM,IAAA,iBAAA,CAAkBA,KAAI,CAAG,EAAA;AAExE,MAAO,IAAA,GAAA,CAAA;AACP,MAAA,OAAO,yBAAyBA,KAAI,CAAA;AAAA;AAEtC,IAAA,OAAO,WAAWA,KAAI,CAAA;AAAA;AAexB,EAAA,SAAS,yBAAyBA,KAAM,EAAA;AACtC,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,IAAA,GAAA,CAAA;AACP,MAAO,OAAA,SAAA;AAAA;AAIT,IAAKA,IAAAA,CAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,MAAM,iBAAkBA,CAAAA,KAAI,CAAM,KAAA,IAAA,EAAA,GAAS,EAAI,EAAA;AACzF,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,wBAAA;AAAA;AAET,IAAO,IAAA,GAAA,CAAA;AACP,IAAA,OAAO,WAAWA,KAAI,CAAA;AAAA;AAaxB,EAAA,SAAS,UAAUA,KAAM,EAAA;AACvB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,KAAK,kBAAkB,CAAA;AAC/B,MAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA;AAC9B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,gBAAgB,CAAA;AAC7B,MAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,MAAOqK,OAAAA,GAAAA;AAAA;AAIT,IAAIrK,IAAAA,KAAAA,KAAS,QAAQA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAM,IAAA,YAAA,CAAaA,KAAI,CAAG,EAAA;AACrE,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,SAAA;AAAA;AAaT,EAAA,SAAS,WAAWA,KAAM,EAAA;AACxB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,gBAAA;AAAA;AAET,IAAI,IAAA,UAAA,CAAWA,KAAI,CAAG,EAAA;AACpB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,UAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,iBAAiBA,KAAM,EAAA;AAC9B,IAAA,OAAO,kBAAkBA,KAAI,CAAA,GAAI,WAAWA,KAAI,CAAA,GAAI,IAAIA,KAAI,CAAA;AAAA;AAa9D,EAAA,SAAS,WAAWA,KAAM,EAAA;AACxB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,IAAA,GAAA,CAAA;AACP,MAAO,OAAA,gBAAA;AAAA;AAET,IAAA,IAAIA,UAAS,EAAI,EAAA;AAEf,MAAQ,OAAA,CAAA,IAAA,CAAK,kBAAkB,CAAA,CAAE,IAAO,GAAA,eAAA;AACxC,MAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA;AAC9B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,gBAAgB,CAAA;AAC7B,MAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,MAAOqK,OAAAA,GAAAA;AAAA;AAET,IAAA,OAAO,WAAWrK,KAAI,CAAA;AAAA;AAexB,EAAA,SAAS,WAAWA,KAAM,EAAA;AAExB,IAAA,IAAA,CAAKA,UAAS,EAAM,IAAA,iBAAA,CAAkBA,KAAI,CAAA,KAAM,SAAS,EAAI,EAAA;AAC3D,MAAM,MAAA,IAAA,GAAOA,KAAS,KAAA,EAAA,GAAK,UAAa,GAAA,UAAA;AACxC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEnB;;;AC5NO,IAAM,SAAY,GAAA;AAAA,EACvB,OAAS,EAAA,IAAA;AAAA,EACT,QAAU,EAAA;AACZ,CAAA;AAOA,SAAS,iBAAA,CAAkB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC3C,EAAO1I,OAAAA,MAAAA;AAgBP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAO,OAAA,aAAA,CAAcA,KAAI,CAAA,GAAI,YAAa,CAAA,OAAA,EAAS,KAAO,EAAA,YAAY,CAAEA,CAAAA,KAAI,CAAI,GAAA,KAAA,CAAMA,KAAI,CAAA;AAAA;AAiB5F,EAAA,SAAS,MAAMA,KAAM,EAAA;AACnB,IAAOA,OAAAA,KAAAA,KAAS,QAAQ,kBAAmBA,CAAAA,KAAI,IAAIqK,GAAGrK,CAAAA,KAAI,CAAI,GAAA,GAAA,CAAIA,KAAI,CAAA;AAAA;AAE1E;;;AC/CO,IAAM,UAAa,GAAA;AAAA,EACxB,YAAc,EAAA;AAAA,IACZ,QAAU,EAAA;AAAA,GACZ;AAAA,EACA,IAAA;AAAA,EACA,IAAM,EAAA,YAAA;AAAA,EACN,QAAU,EAAA;AACZ,CAAA;AAOA,SAAS,uBAAA,CAAwB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AACjD,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAOpF,OAAAA,MAAAA;AAYP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,MAAM,QAAQ+G,KAAK,CAAA,cAAA;AACnB,MAAI,IAAA,CAAC,MAAM,IAAM,EAAA;AACf,QAAA,OAAA,CAAQ,MAAM,YAAc,EAAA;AAAA,UAC1B,UAAY,EAAA;AAAA,SACb,CAAA;AACD,QAAA,KAAA,CAAM,IAAO,GAAA,IAAA;AAAA;AAEf,MAAA,OAAA,CAAQ,MAAM,kBAAkB,CAAA;AAChC,MAAA,OAAA,CAAQ,MAAM,kBAAkB,CAAA;AAChC,MAAA,OAAA,CAAQ,QAAQ/G,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,kBAAkB,CAAA;AAC/B,MAAO,OAAA,KAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,MAAMA,KAAM,EAAA;AACnB,IAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,MAAA,OAAA,CAAQ,MAAM,4BAA4B,CAAA;AAC1C,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,4BAA4B,CAAA;AACzC,MAAA,OAAA,CAAQ,KAAK,kBAAkB,CAAA;AAC/B,MAAOqK,OAAAA,GAAAA;AAAA;AAET,IAAA,OAAA,CAAQ,KAAK,kBAAkB,CAAA;AAC/B,IAAA,OAAOA,IAAGrK,KAAI,CAAA;AAAA;AAElB;AAeA,SAAS,8BAAA,CAA+B,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AACxD,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAO,OAAA,SAAA;AAeP,EAAA,SAAS,UAAU/G,KAAM,EAAA;AACvB,IAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AAGvB,MAAA,OAAO,YAAa,CAAA,OAAA,EAAS,UAAY,EAAA,YAAA,EAAc+G,MAAK,MAAO,CAAA,UAAA,CAAW,OAAQ,CAAA,IAAA,CAAK,SAAS,cAAc,CAAA,GAAI,KAAY,CAAA,GAAA,CAAC,EAAE/G,KAAI,CAAA;AAAA;AAE3I,IAAA,OAAO,WAAWA,KAAI,CAAA;AAAA;AAgBxB,EAAA,SAAS,WAAWA,KAAM,EAAA;AACxB,IAAA,OAAO,QAAQ,OAAQ,CAAA,UAAA,EAAYqK,GAAI,EAAA,GAAG,EAAErK,KAAI,CAAA;AAAA;AAEpD;AAGA,SAAS,KAAK,OAAS,EAAA;AACrB,EAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AAC3B;;;ACnIO,IAAM,eAAkB,GAAA;AAAA,EAC7B,IAAM,EAAA,iBAAA;AAAA,EACN,QAAU,EAAA;AACZ,CAAA;AAOA,SAAS,uBAAA,CAAwB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AACjD,EAAO1I,OAAAA,MAAAA;AAYP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,MAAM,iBAAiB,CAAA;AAC/B,IAAA,OAAA,CAAQ,MAAM,cAAc,CAAA;AAC5B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,cAAc,CAAA;AAC3B,IAAO,OAAA,MAAA;AAAA;AAaT,EAAA,SAAS,OAAOA,KAAM,EAAA;AAEpB,IAAI,IAAA,gBAAA,CAAiBA,KAAI,CAAG,EAAA;AAC1B,MAAA,OAAA,CAAQ,MAAM,sBAAsB,CAAA;AACpC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,sBAAsB,CAAA;AACnC,MAAA,OAAA,CAAQ,KAAK,iBAAiB,CAAA;AAC9B,MAAOqK,OAAAA,GAAAA;AAAA;AAET,IAAA,OAAO,IAAIrK,KAAI,CAAA;AAAA;AAEnB;;;AClDO,IAAM,kBAAqB,GAAA;AAAA,EAChC,IAAM,EAAA,oBAAA;AAAA,EACN,QAAU,EAAA;AACZ,CAAA;AAOA,SAAS,0BAAA,CAA2B,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AACpD,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAA,IAAI,IAAO,GAAA,CAAA;AAEX,EAAI,IAAA,GAAA;AAEJ,EAAI,IAAA,IAAA;AACJ,EAAOpF,OAAAA,MAAAA;AAgBP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,MAAM,oBAAoB,CAAA;AAClC,IAAA,OAAA,CAAQ,MAAM,0BAA0B,CAAA;AACxC,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,0BAA0B,CAAA;AACvC,IAAO,OAAA,IAAA;AAAA;AAkBT,EAAA,SAAS,KAAKA,KAAM,EAAA;AAClB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,iCAAiC,CAAA;AAC/C,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,iCAAiC,CAAA;AAC9C,MAAO,OAAA,OAAA;AAAA;AAET,IAAA,OAAA,CAAQ,MAAM,yBAAyB,CAAA;AACvC,IAAM,GAAA,GAAA,EAAA;AACN,IAAO,IAAA,GAAA,iBAAA;AACP,IAAA,OAAOuE,OAAMvE,KAAI,CAAA;AAAA;AAenB,EAAA,SAAS,QAAQA,KAAM,EAAA;AACrB,IAAIA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,GAAK,EAAA;AAC/B,MAAA,OAAA,CAAQ,MAAM,qCAAqC,CAAA;AACnD,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,qCAAqC,CAAA;AAClD,MAAA,OAAA,CAAQ,MAAM,yBAAyB,CAAA;AACvC,MAAM,GAAA,GAAA,CAAA;AACN,MAAO,IAAA,GAAA,aAAA;AACP,MAAOuE,OAAAA,MAAAA;AAAA;AAET,IAAA,OAAA,CAAQ,MAAM,yBAAyB,CAAA;AACvC,IAAM,GAAA,GAAA,CAAA;AACN,IAAO,IAAA,GAAA,UAAA;AACP,IAAA,OAAOA,OAAMvE,KAAI,CAAA;AAAA;AAoBnB,EAAA,SAASuE,OAAMvE,KAAM,EAAA;AACnB,IAAIA,IAAAA,KAAAA,KAAS,MAAM,IAAM,EAAA;AACvB,MAAM,MAAA,KAAA,GAAQ,OAAQ,CAAA,IAAA,CAAK,yBAAyB,CAAA;AACpD,MAAI,IAAA,IAAA,KAAS,qBAAqB,CAAC,6BAAA,CAA8B+G,MAAK,cAAe,CAAA,KAAK,CAAC,CAAG,EAAA;AAC5F,QAAA,OAAO,IAAI/G,KAAI,CAAA;AAAA;AAKjB,MAAA,OAAA,CAAQ,MAAM,0BAA0B,CAAA;AACxC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,0BAA0B,CAAA;AACvC,MAAA,OAAA,CAAQ,KAAK,oBAAoB,CAAA;AACjC,MAAOqK,OAAAA,GAAAA;AAAA;AAET,IAAA,IAAI,IAAKrK,CAAAA,KAAI,CAAK,IAAA,IAAA,EAAA,GAAS,GAAK,EAAA;AAC9B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAOuE,OAAAA,MAAAA;AAAA;AAET,IAAA,OAAO,IAAIvE,KAAI,CAAA;AAAA;AAEnB;;;ACvIA,IAAM,mBAAsB,GAAA;AAAA,EAC1B,OAAS,EAAA,IAAA;AAAA,EACT,QAAU,EAAA;AACZ,CAAA;AAGO,IAAM,UAAa,GAAA;AAAA,EACxB,QAAU,EAAA,IAAA;AAAA,EACV,IAAM,EAAA,YAAA;AAAA,EACN,QAAU,EAAA;AACZ,CAAA;AAOA,SAAS,kBAAA,CAAmB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC5C,EAAA,MAAMtD,KAAO,GAAA,IAAA;AAEb,EAAA,MAAM,UAAa,GAAA;AAAA,IACjB,OAAS,EAAA,IAAA;AAAA,IACT,QAAU,EAAA;AAAA,GACZ;AACA,EAAA,IAAI,aAAgB,GAAA,CAAA;AACpB,EAAA,IAAI,QAAW,GAAA,CAAA;AAEf,EAAI,IAAA,MAAA;AACJ,EAAOpF,OAAAA,MAAAA;AAcP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AAEnB,IAAA,OAAO,mBAAmBA,KAAI,CAAA;AAAA;AAehC,EAAA,SAAS,mBAAmBA,KAAM,EAAA;AAChC,IAAA,MAAM,OAAO+G,KAAK,CAAA,MAAA,CAAOA,KAAK,CAAA,MAAA,CAAO,SAAS,CAAC,CAAA;AAC/C,IAAA,aAAA,GAAgB,IAAQ,IAAA,IAAA,CAAK,CAAC,CAAA,CAAE,SAAS,YAAe,GAAA,IAAA,CAAK,CAAC,CAAA,CAAE,eAAe,IAAK,CAAA,CAAC,CAAG,EAAA,IAAI,EAAE,MAAS,GAAA,CAAA;AACvG,IAAS/G,MAAAA,GAAAA,KAAAA;AACT,IAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,IAAA,OAAA,CAAQ,MAAM,iBAAiB,CAAA;AAC/B,IAAA,OAAA,CAAQ,MAAM,yBAAyB,CAAA;AACvC,IAAA,OAAO,aAAaA,KAAI,CAAA;AAAA;AAe1B,EAAA,SAAS,aAAaA,KAAM,EAAA;AAC1B,IAAA,IAAIA,UAAS,MAAQ,EAAA;AACnB,MAAA,QAAA,EAAA;AACA,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,YAAA;AAAA;AAET,IAAA,IAAI,WAAW,CAAG,EAAA;AAChB,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAA,OAAA,CAAQ,KAAK,yBAAyB,CAAA;AACtC,IAAO,OAAA,aAAA,CAAcA,KAAI,CAAA,GAAI,YAAa,CAAA,OAAA,EAAS,UAAY,EAAA,YAAY,CAAEA,CAAAA,KAAI,CAAI,GAAA,UAAA,CAAWA,KAAI,CAAA;AAAA;AAetG,EAAA,SAAS,WAAWA,KAAM,EAAA;AACxB,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,MAAA,OAAA,CAAQ,KAAK,iBAAiB,CAAA;AAC9B,MAAO+G,OAAAA,KAAAA,CAAK,SAAYsD,GAAAA,GAAAA,CAAGrK,KAAI,CAAA,GAAI,OAAQ,CAAA,KAAA,CAAM,mBAAqB,EAAA,cAAA,EAAgB,KAAK,CAAA,CAAEA,KAAI,CAAA;AAAA;AAEnG,IAAA,OAAA,CAAQ,MAAM,qBAAqB,CAAA;AACnC,IAAA,OAAA,CAAQ,MAAM,aAAe,EAAA;AAAA,MAC3B,WAAa,EAAA;AAAA,KACd,CAAA;AACD,IAAA,OAAO,KAAKA,KAAI,CAAA;AAAA;AAelB,EAAA,SAAS,KAAKA,KAAM,EAAA;AAClB,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,MAAA,OAAA,CAAQ,KAAK,aAAa,CAAA;AAC1B,MAAA,OAAA,CAAQ,KAAK,qBAAqB,CAAA;AAClC,MAAA,OAAO,WAAWA,KAAI,CAAA;AAAA;AAExB,IAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,MAAA,OAAA,CAAQ,KAAK,aAAa,CAAA;AAC1B,MAAA,OAAA,CAAQ,KAAK,qBAAqB,CAAA;AAClC,MAAA,OAAO,YAAa,CAAA,OAAA,EAAS,UAAY,EAAA,YAAY,EAAEA,KAAI,CAAA;AAAA;AAE7D,IAAIA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,MAAQ,EAAA;AAClC,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,IAAA;AAAA;AAeT,EAAA,SAAS,WAAWA,KAAM,EAAA;AACxB,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,MAAA,OAAO,WAAWA,KAAI,CAAA;AAAA;AAExB,IAAA,OAAA,CAAQ,MAAM,qBAAqB,CAAA;AACnC,IAAA,OAAA,CAAQ,MAAM,aAAe,EAAA;AAAA,MAC3B,WAAa,EAAA;AAAA,KACd,CAAA;AACD,IAAA,OAAO,KAAKA,KAAI,CAAA;AAAA;AAelB,EAAA,SAAS,KAAKA,KAAM,EAAA;AAClB,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,MAAA,OAAA,CAAQ,KAAK,aAAa,CAAA;AAC1B,MAAA,OAAA,CAAQ,KAAK,qBAAqB,CAAA;AAClC,MAAA,OAAO,WAAWA,KAAI,CAAA;AAAA;AAExB,IAAIA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,MAAQ,EAAA;AAClC,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,IAAA;AAAA;AAgBT,EAAA,SAAS,eAAeA,KAAM,EAAA;AAC5B,IAAA,OAAO,QAAQ,OAAQ,CAAA,UAAA,EAAY,KAAO,EAAA,aAAa,EAAEA,KAAI,CAAA;AAAA;AAe/D,EAAA,SAAS,cAAcA,KAAM,EAAA;AAC3B,IAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,IAAO,OAAA,YAAA;AAAA;AAeT,EAAA,SAAS,aAAaA,KAAM,EAAA;AAC1B,IAAA,OAAO,aAAgB,GAAA,CAAA,IAAK,aAAcA,CAAAA,KAAI,IAAI,YAAa,CAAA,OAAA,EAAS,kBAAoB,EAAA,YAAA,EAAc,gBAAgB,CAAC,CAAA,CAAEA,KAAI,CAAA,GAAI,mBAAmBA,KAAI,CAAA;AAAA;AAe9J,EAAA,SAAS,mBAAmBA,KAAM,EAAA;AAChC,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,MAAA,OAAO,QAAQ,KAAM,CAAA,mBAAA,EAAqB,cAAgB,EAAA,KAAK,EAAEA,KAAI,CAAA;AAAA;AAEvE,IAAA,OAAA,CAAQ,MAAM,eAAe,CAAA;AAC7B,IAAA,OAAO,aAAaA,KAAI,CAAA;AAAA;AAe1B,EAAA,SAAS,aAAaA,KAAM,EAAA;AAC1B,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,MAAA,OAAA,CAAQ,KAAK,eAAe,CAAA;AAC5B,MAAA,OAAO,mBAAmBA,KAAI,CAAA;AAAA;AAEhC,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,YAAA;AAAA;AAeT,EAAA,SAAS,MAAMA,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,IAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAQhB,EAAS,SAAA,kBAAA,CAAmByK,QAASJ,EAAAA,GAAAA,EAAIK,IAAK,EAAA;AAC5C,IAAA,IAAI,IAAO,GAAA,CAAA;AACX,IAAO,OAAA,WAAA;AAOP,IAAA,SAAS,YAAY1K,KAAM,EAAA;AACzB,MAAAyK,QAAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,MAAAA,QAAAA,CAAQ,QAAQzK,KAAI,CAAA;AACpB,MAAAyK,QAAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,MAAO9I,OAAAA,MAAAA;AAAA;AAeT,IAAA,SAASA,OAAM3B,KAAM,EAAA;AAInB,MAAAyK,QAAAA,CAAQ,MAAM,iBAAiB,CAAA;AAC/B,MAAO,OAAA,aAAA,CAAczK,KAAI,CAAI,GAAA,YAAA,CAAayK,UAAS,mBAAqB,EAAA,YAAA,EAAc1D,MAAK,MAAO,CAAA,UAAA,CAAW,QAAQ,IAAK,CAAA,QAAA,CAAS,cAAc,CAAI,GAAA,KAAA,CAAA,GAAY,CAAC,CAAE/G,CAAAA,KAAI,CAAI,GAAA,mBAAA,CAAoBA,KAAI,CAAA;AAAA;AAetM,IAAA,SAAS,oBAAoBA,KAAM,EAAA;AACjC,MAAA,IAAIA,UAAS,MAAQ,EAAA;AACnB,QAAAyK,QAAAA,CAAQ,MAAM,yBAAyB,CAAA;AACvC,QAAA,OAAO,cAAczK,KAAI,CAAA;AAAA;AAE3B,MAAA,OAAO0K,KAAI1K,KAAI,CAAA;AAAA;AAejB,IAAA,SAAS,cAAcA,KAAM,EAAA;AAC3B,MAAA,IAAIA,UAAS,MAAQ,EAAA;AACnB,QAAA,IAAA,EAAA;AACA,QAAAyK,QAAAA,CAAQ,QAAQzK,KAAI,CAAA;AACpB,QAAO,OAAA,aAAA;AAAA;AAET,MAAA,IAAI,QAAQ,QAAU,EAAA;AACpB,QAAAyK,QAAAA,CAAQ,KAAK,yBAAyB,CAAA;AACtC,QAAO,OAAA,aAAA,CAAczK,KAAI,CAAA,GAAI,YAAayK,CAAAA,QAAAA,EAAS,kBAAoB,EAAA,YAAY,CAAEzK,CAAAA,KAAI,CAAI,GAAA,kBAAA,CAAmBA,KAAI,CAAA;AAAA;AAEtH,MAAA,OAAO0K,KAAI1K,KAAI,CAAA;AAAA;AAejB,IAAA,SAAS,mBAAmBA,KAAM,EAAA;AAChC,MAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,QAAAyK,QAAAA,CAAQ,KAAK,iBAAiB,CAAA;AAC9B,QAAA,OAAOJ,IAAGrK,KAAI,CAAA;AAAA;AAEhB,MAAA,OAAO0K,KAAI1K,KAAI,CAAA;AAAA;AACjB;AAEJ;AAOA,SAAS,2BAAA,CAA4B,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AACrD,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAOpF,OAAAA,MAAAA;AAOP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,IAAO,OAAA,SAAA;AAAA;AAQT,EAAA,SAAS,UAAUA,KAAM,EAAA;AACvB,IAAA,OAAO+G,KAAK,CAAA,MAAA,CAAO,IAAKA,CAAAA,KAAAA,CAAK,GAAI,EAAA,CAAE,IAAI,CAAA,GAAI,GAAI/G,CAAAA,KAAI,CAAIqK,GAAAA,GAAAA,CAAGrK,KAAI,CAAA;AAAA;AAElE;;;AC/bO,IAAM,YAAe,GAAA;AAAA,EAC1B,IAAM,EAAA,cAAA;AAAA,EACN,QAAU,EAAA;AACZ,CAAA;AAGA,IAAM,YAAe,GAAA;AAAA,EACnB,OAAS,EAAA,IAAA;AAAA,EACT,QAAU,EAAA;AACZ,CAAA;AAOA,SAAS,oBAAA,CAAqB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC9C,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAOpF,OAAAA,MAAAA;AAgBP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AAGnB,IAAA,OAAA,CAAQ,MAAM,cAAc,CAAA;AAG5B,IAAA,OAAO,aAAa,OAAS,EAAA,WAAA,EAAa,cAAc,CAAI,GAAA,CAAC,EAAEA,KAAI,CAAA;AAAA;AAarE,EAAA,SAAS,YAAYA,KAAM,EAAA;AACzB,IAAA,MAAM,OAAO+G,KAAK,CAAA,MAAA,CAAOA,KAAK,CAAA,MAAA,CAAO,SAAS,CAAC,CAAA;AAC/C,IAAO,OAAA,IAAA,IAAQ,KAAK,CAAC,CAAA,CAAE,SAAS,YAAgB,IAAA,IAAA,CAAK,CAAC,CAAE,CAAA,cAAA,CAAe,KAAK,CAAC,CAAA,EAAG,IAAI,CAAE,CAAA,MAAA,IAAU,IAAI,OAAQ/G,CAAAA,KAAI,CAAI,GAAA,GAAA,CAAIA,KAAI,CAAA;AAAA;AAa9H,EAAA,SAAS,QAAQA,KAAM,EAAA;AACrB,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,OAAO,MAAMA,KAAI,CAAA;AAAA;AAEnB,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAA,OAAO,QAAQ,OAAQ,CAAA,YAAA,EAAc,OAAS,EAAA,KAAK,EAAEA,KAAI,CAAA;AAAA;AAE3D,IAAA,OAAA,CAAQ,MAAM,eAAe,CAAA;AAC7B,IAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAapB,EAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,MAAA,OAAA,CAAQ,KAAK,eAAe,CAAA;AAC5B,MAAA,OAAO,QAAQA,KAAI,CAAA;AAAA;AAErB,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,MAAA;AAAA;AAIT,EAAA,SAAS,MAAMA,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,KAAK,cAAc,CAAA;AAI3B,IAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAElB;AAOA,SAAS,oBAAA,CAAqB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC9C,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAO4D,OAAAA,aAAAA;AAaP,EAAA,SAASA,cAAa3K,KAAM,EAAA;AAG1B,IAAA,IAAI+G,MAAK,MAAO,CAAA,IAAA,CAAKA,MAAK,GAAI,EAAA,CAAE,IAAI,CAAG,EAAA;AACrC,MAAA,OAAO,IAAI/G,KAAI,CAAA;AAAA;AAEjB,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,MAAO2K,OAAAA,aAAAA;AAAA;AAST,IAAA,OAAO,aAAa,OAAS,EAAA,WAAA,EAAa,cAAc,CAAI,GAAA,CAAC,EAAE3K,KAAI,CAAA;AAAA;AAarE,EAAA,SAAS,YAAYA,KAAM,EAAA;AACzB,IAAA,MAAM,OAAO+G,KAAK,CAAA,MAAA,CAAOA,KAAK,CAAA,MAAA,CAAO,SAAS,CAAC,CAAA;AAC/C,IAAO,OAAA,IAAA,IAAQ,IAAK,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,YAAgB,IAAA,IAAA,CAAK,CAAC,CAAA,CAAE,cAAe,CAAA,IAAA,CAAK,CAAC,CAAA,EAAG,IAAI,CAAA,CAAE,MAAU,IAAA,CAAA,GAAIsD,GAAGrK,CAAAA,KAAI,CAAI,GAAA,kBAAA,CAAmBA,KAAI,CAAA,GAAI2K,aAAa3K,CAAAA,KAAI,CAAI,GAAA,GAAA,CAAIA,KAAI,CAAA;AAAA;AAE3K;;;AClKO,IAAM,QAAW,GAAA;AAAA,EACtB,IAAM,EAAA,UAAA;AAAA,EACN,QAAA;AAAA,EACA,OAAS,EAAA,eAAA;AAAA,EACT,QAAU,EAAA;AACZ,CAAA;AAIA,SAAS,gBAAgB,MAAQ,EAAA;AAC/B,EAAI,IAAA,aAAA,GAAgB,OAAO,MAAS,GAAA,CAAA;AACpC,EAAA,IAAI,cAAiB,GAAA,CAAA;AAErB,EAAI6E,IAAAA,MAAAA;AAEJ,EAAI,IAAA,KAAA;AAGJ,EAAK,IAAA,CAAA,MAAA,CAAO,cAAc,CAAA,CAAE,CAAC,CAAA,CAAE,IAAS,KAAA,YAAA,IAAgB,MAAO,CAAA,cAAc,CAAE,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,OAAa,MAAA,MAAA,CAAO,aAAa,CAAA,CAAE,CAAC,CAAA,CAAE,IAAS,KAAA,YAAA,IAAgB,MAAO,CAAA,aAAa,CAAE,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,OAAU,CAAA,EAAA;AACpM,IAAAA,MAAQ,GAAA,cAAA;AAGR,IAAO,OAAA,EAAEA,SAAQ,aAAe,EAAA;AAC9B,MAAA,IAAI,OAAOA,MAAK,CAAA,CAAE,CAAC,CAAA,CAAE,SAAS,cAAgB,EAAA;AAE5C,QAAA,MAAA,CAAO,cAAc,CAAA,CAAE,CAAC,CAAA,CAAE,IAAO,GAAA,iBAAA;AACjC,QAAA,MAAA,CAAO,aAAa,CAAA,CAAE,CAAC,CAAA,CAAE,IAAO,GAAA,iBAAA;AAChC,QAAkB,cAAA,IAAA,CAAA;AAClB,QAAiB,aAAA,IAAA,CAAA;AACjB,QAAA;AAAA;AACF;AACF;AAIF,EAAAA,SAAQ,cAAiB,GAAA,CAAA;AACzB,EAAA,aAAA,EAAA;AACA,EAAO,OAAA,EAAEA,UAAS,aAAe,EAAA;AAC/B,IAAA,IAAI,UAAU,KAAW,CAAA,EAAA;AACvB,MAAIA,IAAAA,MAAAA,KAAU,iBAAiB,MAAOA,CAAAA,MAAK,EAAE,CAAC,CAAA,CAAE,SAAS,YAAc,EAAA;AACrE,QAAQA,KAAAA,GAAAA,MAAAA;AAAA;AACV,KACF,MAAA,IAAWA,WAAU,aAAiB,IAAA,MAAA,CAAOA,MAAK,CAAE,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,YAAc,EAAA;AAC5E,MAAA,MAAA,CAAO,KAAK,CAAA,CAAE,CAAC,CAAA,CAAE,IAAO,GAAA,cAAA;AACxB,MAAIA,IAAAA,MAAAA,KAAU,QAAQ,CAAG,EAAA;AACvB,QAAO,MAAA,CAAA,KAAK,CAAE,CAAA,CAAC,CAAE,CAAA,GAAA,GAAM,OAAOA,MAAQ,GAAA,CAAC,CAAE,CAAA,CAAC,CAAE,CAAA,GAAA;AAC5C,QAAA,MAAA,CAAO,MAAO,CAAA,KAAA,GAAQ,CAAGA,EAAAA,MAAAA,GAAQ,QAAQ,CAAC,CAAA;AAC1C,QAAA,aAAA,IAAiBA,SAAQ,KAAQ,GAAA,CAAA;AACjC,QAAAA,SAAQ,KAAQ,GAAA,CAAA;AAAA;AAElB,MAAQ,KAAA,GAAA,KAAA,CAAA;AAAA;AACV;AAEF,EAAO,OAAA,MAAA;AACT;AAOA,SAAS,SAAS7E,KAAM,EAAA;AAEtB,EAAOA,OAAAA,KAAAA,KAAS,EAAM,IAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAE,CAAC,CAAA,CAAE,IAAS,KAAA,iBAAA;AACxE;AAOA,SAAS,gBAAA,CAAiB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAE1C,EAAA,IAAI,QAAW,GAAA,CAAA;AAEf,EAAI,IAAA,IAAA;AAEJ,EAAI,IAAA,KAAA;AACJ,EAAO1I,OAAAA,MAAAA;AAcP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,IAAA,OAAA,CAAQ,MAAM,kBAAkB,CAAA;AAChC,IAAA,OAAO,aAAaA,KAAI,CAAA;AAAA;AAa1B,EAAA,SAAS,aAAaA,KAAM,EAAA;AAC1B,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,QAAA,EAAA;AACA,MAAO,OAAA,YAAA;AAAA;AAET,IAAA,OAAA,CAAQ,KAAK,kBAAkB,CAAA;AAC/B,IAAA,OAAO4K,SAAQ5K,KAAI,CAAA;AAAA;AAarB,EAAA,SAAS4K,SAAQ5K,KAAM,EAAA;AAErB,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAMjB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,OAAO,CAAA;AACrB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,OAAO,CAAA;AACpB,MAAO4K,OAAAA,QAAAA;AAAA;AAIT,IAAA,IAAI5K,UAAS,EAAI,EAAA;AACf,MAAQ,KAAA,GAAA,OAAA,CAAQ,MAAM,kBAAkB,CAAA;AACxC,MAAO,IAAA,GAAA,CAAA;AACP,MAAA,OAAO,cAAcA,KAAI,CAAA;AAAA;AAE3B,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,MAAO4K,OAAAA,QAAAA;AAAA;AAIT,IAAA,OAAA,CAAQ,MAAM,cAAc,CAAA;AAC5B,IAAA,OAAOlE,MAAK1G,KAAI,CAAA;AAAA;AAalB,EAAA,SAAS0G,MAAK1G,KAAM,EAAA;AAClB,IAAIA,IAAAA,KAAAA,KAAS,QAAQA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAM,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC3E,MAAA,OAAA,CAAQ,KAAK,cAAc,CAAA;AAC3B,MAAA,OAAO4K,SAAQ5K,KAAI,CAAA;AAAA;AAErB,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO0G,OAAAA,KAAAA;AAAA;AAaT,EAAA,SAAS,cAAc1G,KAAM,EAAA;AAE3B,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,IAAA,EAAA;AACA,MAAO,OAAA,aAAA;AAAA;AAIT,IAAA,IAAI,SAAS,QAAU,EAAA;AACrB,MAAA,OAAA,CAAQ,KAAK,kBAAkB,CAAA;AAC/B,MAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,MAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAIhB,IAAA,KAAA,CAAM,IAAO,GAAA,cAAA;AACb,IAAA,OAAO0G,MAAK1G,KAAI,CAAA;AAAA;AAEpB;;;ACnMO,IAAM,eAAN,MAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxB,YAAY,OAAS,EAAA;AAEnB,IAAA,IAAA,CAAK,OAAO,OAAU,GAAA,CAAC,GAAG,OAAO,IAAI,EAAC;AAEtC,IAAA,IAAA,CAAK,QAAQ,EAAC;AAAA;AAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,IAAI6E,MAAO,EAAA;AACT,IAAIA,IAAAA,MAAAA,GAAQ,KAAKA,MAAS,IAAA,IAAA,CAAK,KAAK,MAAS,GAAA,IAAA,CAAK,MAAM,MAAQ,EAAA;AAC9D,MAAM,MAAA,IAAI,UAAW,CAAA,uBAAA,GAA0BA,MAAQ,GAAA,gCAAA,IAAoC,IAAK,CAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,MAAA,CAAA,GAAU,GAAG,CAAA;AAAA;AAExI,IAAA,IAAIA,SAAQ,IAAK,CAAA,IAAA,CAAK,QAAe,OAAA,IAAA,CAAK,KAAKA,MAAK,CAAA;AACpD,IAAO,OAAA,IAAA,CAAK,MAAM,IAAK,CAAA,KAAA,CAAM,SAASA,MAAQ,GAAA,IAAA,CAAK,IAAK,CAAA,MAAA,GAAS,CAAC,CAAA;AAAA;AACpE;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,MAAS,GAAA;AACX,IAAA,OAAO,IAAK,CAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,MAAA;AAAA;AACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,KAAQ,GAAA;AACN,IAAA,IAAA,CAAK,UAAU,CAAC,CAAA;AAChB,IAAO,OAAA,IAAA,CAAK,MAAM,GAAI,EAAA;AAAA;AACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,KAAA,CAAMlD,QAAO,GAAK,EAAA;AAEhB,IAAA,MAAM,OAAO,GAAQ,KAAA,IAAA,IAAQ,GAAQ,KAAA,KAAA,CAAA,GAAY,OAAO,iBAAoB,GAAA,GAAA;AAC5E,IAAI,IAAA,IAAA,GAAO,IAAK,CAAA,IAAA,CAAK,MAAQ,EAAA;AAC3B,MAAA,OAAO,IAAK,CAAA,IAAA,CAAK,KAAMA,CAAAA,MAAAA,EAAO,IAAI,CAAA;AAAA;AAEpC,IAAIA,IAAAA,MAAAA,GAAQ,IAAK,CAAA,IAAA,CAAK,MAAQ,EAAA;AAC5B,MAAA,OAAO,KAAK,KAAM,CAAA,KAAA,CAAM,KAAK,KAAM,CAAA,MAAA,GAAS,OAAO,IAAK,CAAA,IAAA,CAAK,MAAQ,EAAA,IAAA,CAAK,MAAM,MAASA,GAAAA,MAAAA,GAAQ,KAAK,IAAK,CAAA,MAAM,EAAE,OAAQ,EAAA;AAAA;AAE7H,IAAA,OAAO,KAAK,IAAK,CAAA,KAAA,CAAMA,MAAK,CAAE,CAAA,MAAA,CAAO,KAAK,KAAM,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,IAAO,GAAA,IAAA,CAAK,KAAK,MAAM,CAAA,CAAE,SAAS,CAAA;AAAA;AAC9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,MAAA,CAAOA,MAAO,EAAA,WAAA,EAAa,KAAO,EAAA;AAEhC,IAAA,MAAM,QAAQ,WAAe,IAAA,CAAA;AAC7B,IAAA,IAAA,CAAK,SAAU,CAAA,IAAA,CAAK,KAAMA,CAAAA,MAAK,CAAC,CAAA;AAChC,IAAM,MAAA,OAAA,GAAU,KAAK,KAAM,CAAA,MAAA,CAAO,KAAK,KAAM,CAAA,MAAA,GAAS,KAAO,EAAA,MAAA,CAAO,iBAAiB,CAAA;AACrF,IAAA,IAAI,KAAO,EAAA,WAAA,CAAY,IAAK,CAAA,IAAA,EAAM,KAAK,CAAA;AACvC,IAAA,OAAO,QAAQ,OAAQ,EAAA;AAAA;AACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,GAAM,GAAA;AACJ,IAAK,IAAA,CAAA,SAAA,CAAU,OAAO,iBAAiB,CAAA;AACvC,IAAO,OAAA,IAAA,CAAK,KAAK,GAAI,EAAA;AAAA;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,KAAK,IAAM,EAAA;AACT,IAAK,IAAA,CAAA,SAAA,CAAU,OAAO,iBAAiB,CAAA;AACvC,IAAK,IAAA,CAAA,IAAA,CAAK,KAAK,IAAI,CAAA;AAAA;AACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,SAAS,KAAO,EAAA;AACd,IAAK,IAAA,CAAA,SAAA,CAAU,OAAO,iBAAiB,CAAA;AACvC,IAAY,WAAA,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AAAA;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,QAAQ,IAAM,EAAA;AACZ,IAAA,IAAA,CAAK,UAAU,CAAC,CAAA;AAChB,IAAK,IAAA,CAAA,KAAA,CAAM,KAAK,IAAI,CAAA;AAAA;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,YAAY,KAAO,EAAA;AACjB,IAAA,IAAA,CAAK,UAAU,CAAC,CAAA;AAChB,IAAA,WAAA,CAAY,IAAK,CAAA,KAAA,EAAO,KAAM,CAAA,OAAA,EAAS,CAAA;AAAA;AACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,UAAU,CAAG,EAAA;AACX,IAAA,IAAI,MAAM,IAAK,CAAA,IAAA,CAAK,MAAU,IAAA,CAAA,GAAI,KAAK,IAAK,CAAA,MAAA,IAAU,IAAK,CAAA,KAAA,CAAM,WAAW,CAAK,IAAA,CAAA,GAAI,KAAK,IAAK,CAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AAClH,IAAI,IAAA,CAAA,GAAI,IAAK,CAAA,IAAA,CAAK,MAAQ,EAAA;AAExB,MAAA,MAAM,UAAU,IAAK,CAAA,IAAA,CAAK,MAAO,CAAA,CAAA,EAAG,OAAO,iBAAiB,CAAA;AAC5D,MAAA,WAAA,CAAY,IAAK,CAAA,KAAA,EAAO,OAAQ,CAAA,OAAA,EAAS,CAAA;AAAA,KACpC,MAAA;AAEL,MAAA,MAAM,OAAU,GAAA,IAAA,CAAK,KAAM,CAAA,MAAA,CAAO,IAAK,CAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,MAAA,GAAS,CAAG,EAAA,MAAA,CAAO,iBAAiB,CAAA;AACpG,MAAA,WAAA,CAAY,IAAK,CAAA,IAAA,EAAM,OAAQ,CAAA,OAAA,EAAS,CAAA;AAAA;AAC1C;AAEJ,CAAA;AAcA,SAAS,WAAA,CAAYkC,OAAM,KAAO,EAAA;AAEhC,EAAA,IAAI,UAAa,GAAA,CAAA;AACjB,EAAI,IAAA,KAAA,CAAM,SAAS,GAAO,EAAA;AACxB,IAAAA,KAAAA,CAAK,IAAK,CAAA,GAAG,KAAK,CAAA;AAAA,GACb,MAAA;AACL,IAAO,OAAA,UAAA,GAAa,MAAM,MAAQ,EAAA;AAChC,MAAAA,KAAAA,CAAK,KAAK,GAAG,KAAA,CAAM,MAAM,UAAY,EAAA,UAAA,GAAa,GAAK,CAAC,CAAA;AACxD,MAAc,UAAA,IAAA,GAAA;AAAA;AAChB;AAEJ;;;ACvOO,SAAS,YAAY,WAAa,EAAA;AAEvC,EAAA,MAAM,QAAQ,EAAC;AACf,EAAA,IAAIgB,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAI,IAAA,KAAA;AAEJ,EAAI,IAAA,SAAA;AAEJ,EAAI,IAAA,UAAA;AAEJ,EAAI,IAAA,UAAA;AAEJ,EAAI,IAAA,UAAA;AAEJ,EAAI,IAAA,SAAA;AAEJ,EAAI,IAAA,IAAA;AACJ,EAAM,MAAA,MAAA,GAAS,IAAI,YAAA,CAAa,WAAW,CAAA;AAC3C,EAAO,OAAA,EAAEA,MAAQ,GAAA,MAAA,CAAO,MAAQ,EAAA;AAC9B,IAAA,OAAOA,UAAS,KAAO,EAAA;AACrB,MAAAA,MAAAA,GAAQ,MAAMA,MAAK,CAAA;AAAA;AAErB,IAAQ,KAAA,GAAA,MAAA,CAAO,IAAIA,MAAK,CAAA;AAIxB,IAAA,IAAIA,MAAS,IAAA,KAAA,CAAM,CAAC,CAAA,CAAE,SAAS,WAAe,IAAA,MAAA,CAAO,GAAIA,CAAAA,MAAAA,GAAQ,CAAC,CAAA,CAAE,CAAC,CAAA,CAAE,SAAS,gBAAkB,EAAA;AAChG,MAAY,SAAA,GAAA,KAAA,CAAM,CAAC,CAAA,CAAE,UAAW,CAAA,MAAA;AAChC,MAAa,UAAA,GAAA,CAAA;AACb,MAAI,IAAA,UAAA,GAAa,UAAU,MAAU,IAAA,SAAA,CAAU,UAAU,CAAE,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,iBAAmB,EAAA;AACxF,QAAc,UAAA,IAAA,CAAA;AAAA;AAEhB,MAAI,IAAA,UAAA,GAAa,UAAU,MAAU,IAAA,SAAA,CAAU,UAAU,CAAE,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,SAAW,EAAA;AAChF,QAAO,OAAA,EAAE,UAAa,GAAA,SAAA,CAAU,MAAQ,EAAA;AACtC,UAAA,IAAI,UAAU,UAAU,CAAA,CAAE,CAAC,CAAA,CAAE,SAAS,SAAW,EAAA;AAC/C,YAAA;AAAA;AAEF,UAAA,IAAI,UAAU,UAAU,CAAA,CAAE,CAAC,CAAA,CAAE,SAAS,WAAa,EAAA;AACjD,YAAA,SAAA,CAAU,UAAU,CAAA,CAAE,CAAC,CAAA,CAAE,2BAA8B,GAAA,IAAA;AACvD,YAAA,UAAA,EAAA;AAAA;AACF;AACF;AACF;AAIF,IAAI,IAAA,KAAA,CAAM,CAAC,CAAA,KAAM,OAAS,EAAA;AACxB,MAAI,IAAA,KAAA,CAAM,CAAC,CAAA,CAAE,WAAa,EAAA;AACxB,QAAA,MAAA,CAAO,MAAO,CAAA,KAAA,EAAO,UAAW,CAAA,MAAA,EAAQA,MAAK,CAAC,CAAA;AAC9C,QAAAA,MAAAA,GAAQ,MAAMA,MAAK,CAAA;AACnB,QAAO,IAAA,GAAA,IAAA;AAAA;AACT,KAGO,MAAA,IAAA,KAAA,CAAM,CAAC,CAAA,CAAE,UAAY,EAAA;AAC5B,MAAaA,UAAAA,GAAAA,MAAAA;AACb,MAAY,SAAA,GAAA,KAAA,CAAA;AACZ,MAAA,OAAO,UAAc,EAAA,EAAA;AACnB,QAAa,UAAA,GAAA,MAAA,CAAO,IAAI,UAAU,CAAA;AAClC,QAAI,IAAA,UAAA,CAAW,CAAC,CAAE,CAAA,IAAA,KAAS,gBAAgB,UAAW,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,iBAAmB,EAAA;AACnF,UAAI,IAAA,UAAA,CAAW,CAAC,CAAA,KAAM,OAAS,EAAA;AAC7B,YAAA,IAAI,SAAW,EAAA;AACb,cAAA,MAAA,CAAO,GAAI,CAAA,SAAS,CAAE,CAAA,CAAC,EAAE,IAAO,GAAA,iBAAA;AAAA;AAElC,YAAW,UAAA,CAAA,CAAC,EAAE,IAAO,GAAA,YAAA;AACrB,YAAY,SAAA,GAAA,UAAA;AAAA;AACd,SACK,MAAA;AACL,UAAA;AAAA;AACF;AAEF,MAAA,IAAI,SAAW,EAAA;AAEb,QAAM,KAAA,CAAA,CAAC,EAAE,GAAM,GAAA;AAAA,UACb,GAAG,MAAO,CAAA,GAAA,CAAI,SAAS,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA,SAC9B;AAGA,QAAa,UAAA,GAAA,MAAA,CAAO,KAAM,CAAA,SAAA,EAAWA,MAAK,CAAA;AAC1C,QAAA,UAAA,CAAW,QAAQ,KAAK,CAAA;AACxB,QAAA,MAAA,CAAO,MAAO,CAAA,SAAA,EAAWA,MAAQ,GAAA,SAAA,GAAY,GAAG,UAAU,CAAA;AAAA;AAC5D;AACF;AAIF,EAAA,MAAA,CAAO,aAAa,CAAG,EAAA,MAAA,CAAO,mBAAmB,MAAO,CAAA,KAAA,CAAM,CAAC,CAAC,CAAA;AAChE,EAAA,OAAO,CAAC,IAAA;AACV;AAYA,SAAS,UAAA,CAAW,QAAQ,UAAY,EAAA;AACtC,EAAA,MAAM,KAAQ,GAAA,MAAA,CAAO,GAAI,CAAA,UAAU,EAAE,CAAC,CAAA;AACtC,EAAA,MAAM,OAAU,GAAA,MAAA,CAAO,GAAI,CAAA,UAAU,EAAE,CAAC,CAAA;AACxC,EAAA,IAAI,gBAAgB,UAAa,GAAA,CAAA;AAEjC,EAAA,MAAM,iBAAiB,EAAC;AACxB,EAAMrB,MAAAA,UAAAA,GAAY,MAAM,UAAc,IAAA,OAAA,CAAQ,OAAO,KAAM,CAAA,WAAW,CAAE,CAAA,KAAA,CAAM,KAAK,CAAA;AACnF,EAAA,MAAM,cAAcA,UAAU,CAAA,MAAA;AAE9B,EAAA,MAAM,QAAQ,EAAC;AAEf,EAAA,MAAM,OAAO,EAAC;AAEd,EAAI,IAAA,MAAA;AAEJ,EAAI8G,IAAAA,SAAAA;AACJ,EAAA,IAAIzF,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAA,IAAIyC,QAAU,GAAA,KAAA;AACd,EAAA,IAAI,MAAS,GAAA,CAAA;AACb,EAAA,IAAI3F,MAAQ,GAAA,CAAA;AACZ,EAAM,MAAA,MAAA,GAAS,CAACA,MAAK,CAAA;AAIrB,EAAA,OAAO2F,QAAS,EAAA;AAEd,IAAA,OAAO,OAAO,GAAI,CAAA,EAAE,aAAa,CAAE,CAAA,CAAC,MAAMA,QAAS,EAAA;AAAA;AAGnD,IAAA,cAAA,CAAe,KAAK,aAAa,CAAA;AACjC,IAAI,IAAA,CAACA,SAAQ,UAAY,EAAA;AACvB,MAAS,MAAA,GAAA,OAAA,CAAQ,YAAYA,QAAO,CAAA;AACpC,MAAI,IAAA,CAACA,SAAQ,IAAM,EAAA;AACjB,QAAA,MAAA,CAAO,KAAK,IAAI,CAAA;AAAA;AAElB,MAAA,IAAIgD,SAAU,EAAA;AACZ,QAAA9G,UAAAA,CAAU,UAAW8D,CAAAA,QAAAA,CAAQ,KAAK,CAAA;AAAA;AAEpC,MAAA,IAAIA,SAAQ,2BAA6B,EAAA;AACvC,QAAA9D,WAAU,kCAAqC,GAAA,IAAA;AAAA;AAEjD,MAAAA,UAAAA,CAAU,MAAM,MAAM,CAAA;AACtB,MAAA,IAAI8D,SAAQ,2BAA6B,EAAA;AACvC,QAAA9D,WAAU,kCAAqC,GAAA,KAAA,CAAA;AAAA;AACjD;AAIF,IAAA8G,SAAWhD,GAAAA,QAAAA;AACX,IAAAA,WAAUA,QAAQ,CAAA,IAAA;AAAA;AAKpB,EAAAA,QAAU,GAAA,KAAA;AACV,EAAO,OAAA,EAAEzC,MAAQ,GAAA,WAAA,CAAY,MAAQ,EAAA;AACnC,IAAA;AAAA;AAAA,MAEA,YAAYA,MAAK,CAAA,CAAE,CAAC,CAAA,KAAM,UAAU,WAAYA,CAAAA,MAAAA,GAAQ,CAAC,CAAA,CAAE,CAAC,CAAM,KAAA,OAAA,IAAW,YAAYA,MAAK,CAAA,CAAE,CAAC,CAAE,CAAA,IAAA,KAAS,WAAYA,CAAAA,MAAAA,GAAQ,CAAC,CAAE,CAAA,CAAC,CAAE,CAAA,IAAA,IAAQ,YAAYA,MAAK,CAAA,CAAE,CAAC,CAAA,CAAE,MAAM,IAAS,KAAA,WAAA,CAAYA,MAAK,CAAE,CAAA,CAAC,EAAE,GAAI,CAAA;AAAA,MAAM;AACjN,MAAAlD,SAAQkD,MAAQ,GAAA,CAAA;AAChB,MAAA,MAAA,CAAO,KAAKlD,MAAK,CAAA;AAEjB,MAAA2F,SAAQ,UAAa,GAAA,KAAA,CAAA;AACrB,MAAAA,SAAQ,QAAW,GAAA,KAAA,CAAA;AACnB,MAAAA,WAAUA,QAAQ,CAAA,IAAA;AAAA;AACpB;AAIF,EAAA9D,UAAAA,CAAU,SAAS,EAAC;AAKpB,EAAA,IAAI8D,QAAS,EAAA;AAEX,IAAAA,SAAQ,UAAa,GAAA,KAAA,CAAA;AACrB,IAAAA,SAAQ,QAAW,GAAA,KAAA,CAAA;AAAA,GACd,MAAA;AACL,IAAA,MAAA,CAAO,GAAI,EAAA;AAAA;AAKb,EAAAzC,SAAQ,MAAO,CAAA,MAAA;AACf,EAAA,OAAOA,MAAS,EAAA,EAAA;AACd,IAAM,MAAA,KAAA,GAAQ,YAAY,KAAM,CAAA,MAAA,CAAOA,MAAK,CAAG,EAAA,MAAA,CAAOA,MAAQ,GAAA,CAAC,CAAC,CAAA;AAChE,IAAMlD,MAAAA,MAAAA,GAAQ,eAAe,GAAI,EAAA;AACjC,IAAA,KAAA,CAAM,KAAK,CAACA,MAAAA,EAAOA,SAAQ,KAAM,CAAA,MAAA,GAAS,CAAC,CAAC,CAAA;AAC5C,IAAO,MAAA,CAAA,MAAA,CAAOA,MAAO,EAAA,CAAA,EAAG,KAAK,CAAA;AAAA;AAE/B,EAAA,KAAA,CAAM,OAAQ,EAAA;AACd,EAAAkD,MAAQ,GAAA,CAAA,CAAA;AACR,EAAO,OAAA,EAAEA,MAAQ,GAAA,KAAA,CAAM,MAAQ,EAAA;AAC7B,IAAK,IAAA,CAAA,MAAA,GAAS,KAAMA,CAAAA,MAAK,CAAE,CAAA,CAAC,CAAC,CAAA,GAAI,MAAS,GAAA,KAAA,CAAMA,MAAK,CAAA,CAAE,CAAC,CAAA;AACxD,IAAU,MAAA,IAAA,KAAA,CAAMA,MAAK,CAAE,CAAA,CAAC,IAAI,KAAMA,CAAAA,MAAK,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA;AAAA;AAEhD,EAAO,OAAA,IAAA;AACT;;;ACzMO,IAAMgG,QAAU,GAAA;AAAA,EACrB,OAAS,EAAA,cAAA;AAAA,EACT,QAAU,EAAA;AACZ,CAAA;AAGA,IAAM,qBAAwB,GAAA;AAAA,EAC5B,OAAS,EAAA,IAAA;AAAA,EACT,QAAU,EAAA;AACZ,CAAA;AAQA,SAAS,eAAe,MAAQ,EAAA;AAC9B,EAAA,WAAA,CAAY,MAAM,CAAA;AAClB,EAAO,OAAA,MAAA;AACT;AAOA,SAAS,eAAA,CAAgB,SAASR,GAAI,EAAA;AAEpC,EAAIC,IAAAA,SAAAA;AACJ,EAAO,OAAA,UAAA;AAYP,EAAA,SAAS,WAAWtK,KAAM,EAAA;AACxB,IAAA,OAAA,CAAQ,MAAM,SAAS,CAAA;AACvB,IAAAsK,SAAAA,GAAW,OAAQ,CAAA,KAAA,CAAM,cAAgB,EAAA;AAAA,MACvC,WAAa,EAAA;AAAA,KACd,CAAA;AACD,IAAA,OAAO,YAAYtK,KAAI,CAAA;AAAA;AAazB,EAAA,SAAS,YAAYA,KAAM,EAAA;AACzB,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,OAAO,WAAWA,KAAI,CAAA;AAAA;AAKxB,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAA,OAAO,QAAQ,KAAM,CAAA,qBAAA,EAAuB,eAAiB,EAAA,UAAU,EAAEA,KAAI,CAAA;AAAA;AAI/E,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,WAAA;AAAA;AAQT,EAAA,SAAS,WAAWA,KAAM,EAAA;AACxB,IAAA,OAAA,CAAQ,KAAK,cAAc,CAAA;AAC3B,IAAA,OAAA,CAAQ,KAAK,SAAS,CAAA;AACtB,IAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAQhB,EAAA,SAAS,gBAAgBA,KAAM,EAAA;AAC7B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,cAAc,CAAA;AAC3B,IAAAsK,SAAS,CAAA,IAAA,GAAO,OAAQ,CAAA,KAAA,CAAM,cAAgB,EAAA;AAAA,MAC5C,WAAa,EAAA,SAAA;AAAA,MACb,QAAAA,EAAAA;AAAA,KACD,CAAA;AACD,IAAAA,YAAWA,SAAS,CAAA,IAAA;AACpB,IAAO,OAAA,WAAA;AAAA;AAEX;AAOA,SAAS,oBAAA,CAAqB,OAASD,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC9C,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAO,OAAA,cAAA;AAOP,EAAA,SAAS,eAAe/G,KAAM,EAAA;AAC5B,IAAA,OAAA,CAAQ,KAAK,cAAc,CAAA;AAC3B,IAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,IAAO,OAAA,YAAA,CAAa,OAAS,EAAA,QAAA,EAAU,YAAY,CAAA;AAAA;AAQrD,EAAA,SAAS,SAASA,KAAM,EAAA;AACtB,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAKjB,IAAA,MAAM,OAAO+G,KAAK,CAAA,MAAA,CAAOA,KAAK,CAAA,MAAA,CAAO,SAAS,CAAC,CAAA;AAC/C,IAAI,IAAA,CAACA,KAAK,CAAA,MAAA,CAAO,UAAW,CAAA,OAAA,CAAQ,KAAK,QAAS,CAAA,cAAc,CAAK,IAAA,IAAA,IAAQ,IAAK,CAAA,CAAC,EAAE,IAAS,KAAA,YAAA,IAAgB,IAAK,CAAA,CAAC,CAAE,CAAA,cAAA,CAAe,IAAK,CAAA,CAAC,CAAG,EAAA,IAAI,CAAE,CAAA,MAAA,IAAU,CAAG,EAAA;AAC/J,MAAA,OAAOsD,IAAGrK,KAAI,CAAA;AAAA;AAEhB,IAAO,OAAA,OAAA,CAAQ,UAAU+G,KAAK,CAAA,MAAA,CAAO,WAAW,IAAM,EAAA,GAAA,EAAKsD,GAAE,CAAA,CAAErK,KAAI,CAAA;AAAA;AAEvE;;;ACxHO,SAAS,kBAAA,CAAmB,SAASqK,GAAI,EAAA,GAAA,EAAK,MAAM,WAAa,EAAA,iBAAA,EAAmB,OAAS,EAAA,UAAA,EAAY,GAAK,EAAA;AACnH,EAAM,MAAA,KAAA,GAAQ,OAAO,MAAO,CAAA,iBAAA;AAC5B,EAAA,IAAI,OAAU,GAAA,CAAA;AACd,EAAO1I,OAAAA,MAAAA;AAcP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,IAAI,CAAA;AAClB,MAAA,OAAA,CAAQ,MAAM,WAAW,CAAA;AACzB,MAAA,OAAA,CAAQ,MAAM,iBAAiB,CAAA;AAC/B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,iBAAiB,CAAA;AAC9B,MAAO,OAAA,cAAA;AAAA;AAIT,IAAIA,IAAAA,KAAAA,KAAS,QAAQA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAM,IAAA,YAAA,CAAaA,KAAI,CAAG,EAAA;AACrE,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAA,OAAA,CAAQ,MAAM,IAAI,CAAA;AAClB,IAAA,OAAA,CAAQ,MAAM,OAAO,CAAA;AACrB,IAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,IAAA,OAAA,CAAQ,MAAM,aAAe,EAAA;AAAA,MAC3B,WAAa,EAAA;AAAA,KACd,CAAA;AACD,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,eAAeA,KAAM,EAAA;AAC5B,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,iBAAiB,CAAA;AAC/B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,iBAAiB,CAAA;AAC9B,MAAA,OAAA,CAAQ,KAAK,WAAW,CAAA;AACxB,MAAA,OAAA,CAAQ,KAAK,IAAI,CAAA;AACjB,MAAOqK,OAAAA,GAAAA;AAAA;AAET,IAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,IAAA,OAAA,CAAQ,MAAM,aAAe,EAAA;AAAA,MAC3B,WAAa,EAAA;AAAA,KACd,CAAA;AACD,IAAA,OAAO,SAASrK,KAAI,CAAA;AAAA;AAatB,EAAA,SAAS,SAASA,KAAM,EAAA;AACtB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,KAAK,aAAa,CAAA;AAC1B,MAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,MAAA,OAAO,eAAeA,KAAI,CAAA;AAAA;AAE5B,IAAA,IAAIA,UAAS,IAAQA,IAAAA,KAAAA,KAAS,EAAM,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5D,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAOA,OAAAA,KAAAA,KAAS,KAAK,cAAiB,GAAA,QAAA;AAAA;AAaxC,EAAA,SAAS,eAAeA,KAAM,EAAA;AAC5B,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAI,EAAA;AAC7C,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,QAAA;AAAA;AAET,IAAA,OAAO,SAASA,KAAI,CAAA;AAAA;AAatB,EAAA,SAAS,IAAIA,KAAM,EAAA;AACjB,IAAI,IAAA,CAAC,YAAYA,KAAS,KAAA,IAAA,IAAQA,UAAS,EAAM,IAAA,yBAAA,CAA0BA,KAAI,CAAI,CAAA,EAAA;AACjF,MAAA,OAAA,CAAQ,KAAK,aAAa,CAAA;AAC1B,MAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,MAAA,OAAA,CAAQ,KAAK,OAAO,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,IAAI,CAAA;AACjB,MAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAEhB,IAAI,IAAA,OAAA,GAAU,KAASA,IAAAA,KAAAA,KAAS,EAAI,EAAA;AAClC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,EAAA;AACA,MAAO,OAAA,GAAA;AAAA;AAET,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,EAAA;AACA,MAAO,OAAA,GAAA;AAAA;AAMT,IAAIA,IAAAA,KAAAA,KAAS,QAAQA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAM,IAAA,YAAA,CAAaA,KAAI,CAAG,EAAA;AACrE,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAOA,OAAAA,KAAAA,KAAS,KAAK,SAAY,GAAA,GAAA;AAAA;AAanC,EAAA,SAAS,UAAUA,KAAM,EAAA;AACvB,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAI,EAAA;AAC7C,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,GAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEnB;;;ACpKO,SAAS,aAAa,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA,IAAA,EAAM,YAAY,UAAY,EAAA;AAC3E,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAA,IAAI,IAAO,GAAA,CAAA;AAEX,EAAI,IAAA,IAAA;AACJ,EAAOpF,OAAAA,MAAAA;AAYP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,MAAM,IAAI,CAAA;AAClB,IAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,IAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,IAAO,OAAA,OAAA;AAAA;AAaT,EAAA,SAAS,QAAQA,KAAM,EAAA;AACrB,IAAI,IAAA,IAAA,GAAO,OAAOA,KAAS,KAAA,IAAA,IAAQA,UAAS,EAAMA,IAAAA,KAAAA,KAAS,MAAM,CAAC,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMlEA,UAAS,EAAM,IAAA,CAAC,QAAQ,wBAA4B+G,IAAAA,KAAAA,CAAK,OAAO,UAAY,EAAA;AAC1E,MAAA,OAAO,IAAI/G,KAAI,CAAA;AAAA;AAEjB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,MAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,MAAA,OAAA,CAAQ,KAAK,IAAI,CAAA;AACjB,MAAOqK,OAAAA,GAAAA;AAAA;AAIT,IAAI,IAAA,kBAAA,CAAmBrK,KAAI,CAAG,EAAA;AAC5B,MAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,MAAO,OAAA,OAAA;AAAA;AAET,IAAA,OAAA,CAAQ,MAAM,aAAe,EAAA;AAAA,MAC3B,WAAa,EAAA;AAAA,KACd,CAAA;AACD,IAAA,OAAO,YAAYA,KAAI,CAAA;AAAA;AAazB,EAAA,SAAS,YAAYA,KAAM,EAAA;AACzB,IAAIA,IAAAA,KAAAA,KAAS,IAAQA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,MAAM,kBAAmBA,CAAAA,KAAI,CAAK,IAAA,IAAA,EAAA,GAAS,GAAK,EAAA;AAC3F,MAAA,OAAA,CAAQ,KAAK,aAAa,CAAA;AAC1B,MAAA,OAAO,QAAQA,KAAI,CAAA;AAAA;AAErB,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,IAAI,CAAC,IAAA,EAAa,IAAA,GAAA,CAAC,cAAcA,KAAI,CAAA;AACrC,IAAOA,OAAAA,KAAAA,KAAS,KAAK,WAAc,GAAA,WAAA;AAAA;AAarC,EAAA,SAAS,YAAYA,KAAM,EAAA;AACzB,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAI,EAAA;AAC7C,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,IAAA,EAAA;AACA,MAAO,OAAA,WAAA;AAAA;AAET,IAAA,OAAO,YAAYA,KAAI,CAAA;AAAA;AAE3B;;;ACzGO,SAAS,aAAa,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA,IAAA,EAAM,YAAY,UAAY,EAAA;AAE3E,EAAI,IAAA,MAAA;AACJ,EAAO1I,OAAAA,MAAAA;AAYP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAI,EAAA;AAC7C,MAAA,OAAA,CAAQ,MAAM,IAAI,CAAA;AAClB,MAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,MAASA,MAAAA,GAAAA,KAAAA,KAAS,KAAK,EAAKA,GAAAA,KAAAA;AAC5B,MAAO,OAAA,KAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAejB,EAAA,SAAS,MAAMA,KAAM,EAAA;AACnB,IAAA,IAAIA,UAAS,MAAQ,EAAA;AACnB,MAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,MAAA,OAAA,CAAQ,KAAK,IAAI,CAAA;AACjB,MAAOqK,OAAAA,GAAAA;AAAA;AAET,IAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,IAAA,OAAO,QAAQrK,KAAI,CAAA;AAAA;AAarB,EAAA,SAAS,QAAQA,KAAM,EAAA;AACrB,IAAA,IAAIA,UAAS,MAAQ,EAAA;AACnB,MAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,MAAA,OAAO,MAAM,MAAM,CAAA;AAAA;AAErB,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAIjB,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAE5B,MAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,MAAO,OAAA,YAAA,CAAa,OAAS,EAAA,OAAA,EAAS,YAAY,CAAA;AAAA;AAEpD,IAAA,OAAA,CAAQ,MAAM,aAAe,EAAA;AAAA,MAC3B,WAAa,EAAA;AAAA,KACd,CAAA;AACD,IAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAQpB,EAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,IAAA,IAAIA,UAAS,MAAUA,IAAAA,KAAAA,KAAS,IAAQ,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAChE,MAAA,OAAA,CAAQ,KAAK,aAAa,CAAA;AAC1B,MAAA,OAAO,QAAQA,KAAI,CAAA;AAAA;AAErB,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAOA,OAAAA,KAAAA,KAAS,KAAK,MAAS,GAAA,MAAA;AAAA;AAahC,EAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,IAAIA,IAAAA,KAAAA,KAAS,MAAUA,IAAAA,KAAAA,KAAS,EAAI,EAAA;AAClC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,MAAA;AAAA;AAET,IAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAEtB;;;ACrIO,SAAS,iBAAA,CAAkB,SAASqK,GAAI,EAAA;AAE7C,EAAI,IAAA,IAAA;AACJ,EAAO1I,OAAAA,MAAAA;AAGP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,MAAO,IAAA,GAAA,IAAA;AACP,MAAO2B,OAAAA,MAAAA;AAAA;AAET,IAAI,IAAA,aAAA,CAAc3B,KAAI,CAAG,EAAA;AACvB,MAAA,OAAO,aAAa,OAAS2B,EAAAA,MAAAA,EAAO,OAAO,YAAe,GAAA,YAAY,EAAE3B,KAAI,CAAA;AAAA;AAE9E,IAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAElB;;;AC1BO,IAAM,UAAa,GAAA;AAAA,EACxB,IAAM,EAAA,YAAA;AAAA,EACN,QAAU,EAAA;AACZ,CAAA;AAGA,IAAM,WAAc,GAAA;AAAA,EAClB,OAAS,EAAA,IAAA;AAAA,EACT,QAAU,EAAA;AACZ,CAAA;AAOA,SAAS,kBAAA,CAAmB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC5C,EAAA,MAAMtD,KAAO,GAAA,IAAA;AAEb,EAAI,IAAA,UAAA;AACJ,EAAOpF,OAAAA,MAAAA;AAYP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AAInB,IAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,IAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAapB,EAAA,SAAS,OAAOA,KAAM,EAAA;AAGpB,IAAA,OAAO,YAAa,CAAA,IAAA;AAAA,MAAK+G,KAAAA;AAAA,MAAM,OAAA;AAAA,MAAS,UAAA;AAAA;AAAA,MAExC,GAAA;AAAA,MAAK,iBAAA;AAAA,MAAmB,uBAAA;AAAA,MAAyB;AAAA,MAAyB/G,KAAI,CAAA;AAAA;AAahF,EAAA,SAAS,WAAWA,KAAM,EAAA;AACxB,IAAA,UAAA,GAAa,oBAAoB+G,KAAK,CAAA,cAAA,CAAeA,KAAK,CAAA,MAAA,CAAOA,MAAK,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAE,CAAC,CAAC,CAAA,CAAE,KAAM,CAAA,CAAA,EAAG,EAAE,CAAC,CAAA;AACzG,IAAA,IAAI/G,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,kBAAkB,CAAA;AAChC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,kBAAkB,CAAA;AAC/B,MAAO,OAAA,WAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,YAAYA,KAAM,EAAA;AAEzB,IAAO,OAAA,yBAAA,CAA0BA,KAAI,CAAA,GAAI,iBAAkB,CAAA,OAAA,EAAS,iBAAiB,CAAEA,CAAAA,KAAI,CAAI,GAAA,iBAAA,CAAkBA,KAAI,CAAA;AAAA;AAavH,EAAA,SAAS,kBAAkBA,KAAM,EAAA;AAC/B,IAAO,OAAA,kBAAA;AAAA,MAAmB,OAAA;AAAA,MAAS,gBAAA;AAAA;AAAA,MAEnC,GAAA;AAAA,MAAK,uBAAA;AAAA,MAAyB,8BAAA;AAAA,MAAgC,oCAAA;AAAA,MAAsC,0BAAA;AAAA,MAA4B;AAAA,MAA+BA,KAAI,CAAA;AAAA;AAarK,EAAA,SAAS,iBAAiBA,KAAM,EAAA;AAC9B,IAAA,OAAO,QAAQ,OAAQ,CAAA,WAAA,EAAa,KAAO,EAAA,KAAK,EAAEA,KAAI,CAAA;AAAA;AAexD,EAAA,SAAS,MAAMA,KAAM,EAAA;AACnB,IAAO,OAAA,aAAA,CAAcA,KAAI,CAAA,GAAI,YAAa,CAAA,OAAA,EAAS,eAAiB,EAAA,YAAY,CAAEA,CAAAA,KAAI,CAAI,GAAA,eAAA,CAAgBA,KAAI,CAAA;AAAA;AAehH,EAAA,SAAS,gBAAgBA,KAAM,EAAA;AAC7B,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,MAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AAKzB,MAAA+G,KAAK,CAAA,MAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,UAAU,CAAA;AAKnC,MAAA,OAAOsD,IAAGrK,KAAI,CAAA;AAAA;AAEhB,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEnB;AAOA,SAAS,mBAAA,CAAoB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC7C,EAAOS,OAAAA,YAAAA;AAcP,EAAA,SAASA,aAAY9K,KAAM,EAAA;AACzB,IAAO,OAAA,yBAAA,CAA0BA,KAAI,CAAA,GAAI,iBAAkB,CAAA,OAAA,EAAS,YAAY,CAAEA,CAAAA,KAAI,CAAI,GAAA,GAAA,CAAIA,KAAI,CAAA;AAAA;AAcpG,EAAA,SAAS,aAAaA,KAAM,EAAA;AAC1B,IAAO,OAAA,YAAA,CAAa,SAAS,UAAY,EAAA,GAAA,EAAK,mBAAmB,uBAAyB,EAAA,uBAAuB,EAAEA,KAAI,CAAA;AAAA;AAazH,EAAA,SAAS,WAAWA,KAAM,EAAA;AACxB,IAAO,OAAA,aAAA,CAAcA,KAAI,CAAA,GAAI,YAAa,CAAA,OAAA,EAAS,4BAA8B,EAAA,YAAY,CAAEA,CAAAA,KAAI,CAAI,GAAA,4BAAA,CAA6BA,KAAI,CAAA;AAAA;AAa1I,EAAA,SAAS,6BAA6BA,KAAM,EAAA;AAC1C,IAAOA,OAAAA,KAAAA,KAAS,QAAQ,kBAAmBA,CAAAA,KAAI,IAAIqK,GAAGrK,CAAAA,KAAI,CAAI,GAAA,GAAA,CAAIA,KAAI,CAAA;AAAA;AAE1E;;;AClPO,IAAM,eAAkB,GAAA;AAAA,EAC7B,IAAM,EAAA,iBAAA;AAAA,EACN,QAAU,EAAA;AACZ,CAAA;AAOA,SAAS,uBAAA,CAAwB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AACjD,EAAO1I,OAAAA,MAAAA;AAaP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,MAAM,iBAAiB,CAAA;AAC/B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,KAAA;AAAA;AAcT,EAAA,SAAS,MAAMA,KAAM,EAAA;AACnB,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAA,OAAA,CAAQ,KAAK,iBAAiB,CAAA;AAC9B,MAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAEhB,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEnB;;;AC5CO,IAAM,UAAa,GAAA;AAAA,EACxB,IAAM,EAAA,YAAA;AAAA,EACN,OAAS,EAAA,iBAAA;AAAA,EACT,QAAU,EAAA;AACZ,CAAA;AAGA,SAAS,iBAAA,CAAkB,QAAQ,OAAS,EAAA;AAC1C,EAAI,IAAA,UAAA,GAAa,OAAO,MAAS,GAAA,CAAA;AACjC,EAAA,IAAI,YAAe,GAAA,CAAA;AAEnB,EAAI6K,IAAAA,QAAAA;AAEJ,EAAI5I,IAAAA,KAAAA;AAGJ,EAAA,IAAI,OAAO,YAAY,CAAA,CAAE,CAAC,CAAA,CAAE,SAAS,YAAc,EAAA;AACjD,IAAgB,YAAA,IAAA,CAAA;AAAA;AAIlB,EAAI,IAAA,UAAA,GAAa,IAAI,YAAgB,IAAA,MAAA,CAAO,UAAU,CAAE,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,YAAc,EAAA;AAChF,IAAc,UAAA,IAAA,CAAA;AAAA;AAEhB,EAAI,IAAA,MAAA,CAAO,UAAU,CAAE,CAAA,CAAC,EAAE,IAAS,KAAA,oBAAA,KAAyB,iBAAiB,UAAa,GAAA,CAAA,IAAK,aAAa,CAAI,GAAA,YAAA,IAAgB,OAAO,UAAa,GAAA,CAAC,EAAE,CAAC,CAAA,CAAE,SAAS,YAAe,CAAA,EAAA;AAChL,IAAc,UAAA,IAAA,YAAA,GAAe,CAAM,KAAA,UAAA,GAAa,CAAI,GAAA,CAAA;AAAA;AAEtD,EAAA,IAAI,aAAa,YAAc,EAAA;AAC7B,IAAA4I,QAAU,GAAA;AAAA,MACR,IAAM,EAAA,gBAAA;AAAA,MACN,KAAO,EAAA,MAAA,CAAO,YAAY,CAAA,CAAE,CAAC,CAAE,CAAA,KAAA;AAAA,MAC/B,GAAK,EAAA,MAAA,CAAO,UAAU,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA,KAC7B;AACA,IAAA5I,KAAO,GAAA;AAAA,MACL,IAAM,EAAA,WAAA;AAAA,MACN,KAAO,EAAA,MAAA,CAAO,YAAY,CAAA,CAAE,CAAC,CAAE,CAAA,KAAA;AAAA,MAC/B,GAAK,EAAA,MAAA,CAAO,UAAU,CAAA,CAAE,CAAC,CAAE,CAAA,GAAA;AAAA,MAC3B,WAAa,EAAA;AAAA,KACf;AACA,IAAO,MAAA,CAAA,MAAA,EAAQ,YAAc,EAAA,UAAA,GAAa,YAAe,GAAA,CAAA,EAAG,CAAC,CAAC,OAAS4I,EAAAA,QAAAA,EAAS,OAAO,CAAA,EAAG,CAAC,OAAA,EAAS5I,OAAM,OAAO,CAAA,EAAG,CAAC,MAAA,EAAQA,KAAM,EAAA,OAAO,CAAG,EAAA,CAAC,MAAQ4I,EAAAA,QAAAA,EAAS,OAAO,CAAC,CAAC,CAAA;AAAA;AAE1K,EAAO,OAAA,MAAA;AACT;AAOA,SAAS,kBAAA,CAAmB,OAASR,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC5C,EAAA,IAAI,IAAO,GAAA,CAAA;AACX,EAAO1I,OAAAA,MAAAA;AAYP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AAEnB,IAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,IAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAapB,EAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,IAAA,OAAA,CAAQ,MAAM,oBAAoB,CAAA;AAClC,IAAA,OAAO,aAAaA,KAAI,CAAA;AAAA;AAa1B,EAAA,SAAS,aAAaA,KAAM,EAAA;AAC1B,IAAIA,IAAAA,KAAAA,KAAS,EAAM,IAAA,IAAA,EAAA,GAAS,CAAG,EAAA;AAC7B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,YAAA;AAAA;AAIT,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,yBAA0BA,CAAAA,KAAI,CAAG,EAAA;AACpD,MAAA,OAAA,CAAQ,KAAK,oBAAoB,CAAA;AACjC,MAAA,OAAO,QAAQA,KAAI,CAAA;AAAA;AAErB,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,QAAQA,KAAM,EAAA;AACrB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,oBAAoB,CAAA;AAClC,MAAA,OAAO,gBAAgBA,KAAI,CAAA;AAAA;AAE7B,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,MAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AAIzB,MAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAEhB,IAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,MAAA,OAAO,YAAa,CAAA,OAAA,EAAS,OAAS,EAAA,YAAY,EAAEA,KAAI,CAAA;AAAA;AAK1D,IAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA;AAC9B,IAAA,OAAO0G,MAAK1G,KAAI,CAAA;AAAA;AAelB,EAAA,SAAS,gBAAgBA,KAAM,EAAA;AAC7B,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,eAAA;AAAA;AAET,IAAA,OAAA,CAAQ,KAAK,oBAAoB,CAAA;AACjC,IAAA,OAAO,QAAQA,KAAI,CAAA;AAAA;AAarB,EAAA,SAAS0G,MAAK1G,KAAM,EAAA;AAClB,IAAA,IAAIA,UAAS,IAAQA,IAAAA,KAAAA,KAAS,EAAM,IAAA,yBAAA,CAA0BA,KAAI,CAAG,EAAA;AACnE,MAAA,OAAA,CAAQ,KAAK,gBAAgB,CAAA;AAC7B,MAAA,OAAO,QAAQA,KAAI,CAAA;AAAA;AAErB,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO0G,OAAAA,KAAAA;AAAA;AAEX;;;ACnLO,IAAM,cAAiB,GAAA;AAAA,EAC5B,SAAA;AAAA,EACA,SAAA;AAAA,EACA,OAAA;AAAA,EACA,MAAA;AAAA,EACA,UAAA;AAAA,EACA,YAAA;AAAA,EACA,MAAA;AAAA,EACA,SAAA;AAAA,EACA,QAAA;AAAA,EACA,KAAA;AAAA,EACA,UAAA;AAAA,EACA,IAAA;AAAA,EACA,SAAA;AAAA,EACA,QAAA;AAAA,EACA,KAAA;AAAA,EACA,KAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,UAAA;AAAA,EACA,YAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA,MAAA;AAAA,EACA,OAAA;AAAA,EACA,UAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA,IAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA,IAAA;AAAA,EACA,MAAA;AAAA,EACA,MAAA;AAAA,EACA,MAAA;AAAA,EACA,UAAA;AAAA,EACA,KAAA;AAAA,EACA,UAAA;AAAA,EACA,IAAA;AAAA,EACA,UAAA;AAAA,EACA,QAAA;AAAA,EACA,GAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,SAAA;AAAA,EACA,SAAA;AAAA,EACA,OAAA;AAAA,EACA,OAAA;AAAA,EACA,IAAA;AAAA,EACA,OAAA;AAAA,EACA,IAAA;AAAA,EACA,OAAA;AAAA,EACA,OAAA;AAAA,EACA,IAAA;AAAA,EACA,OAAA;AAAA,EACA;AACF,CAAA;AAcO,IAAM,YAAe,GAAA,CAAC,KAAO,EAAA,QAAA,EAAU,SAAS,UAAU,CAAA;;;AC5E1D,IAAM,QAAW,GAAA;AAAA,EACtB,QAAU,EAAA,IAAA;AAAA,EACV,IAAM,EAAA,UAAA;AAAA,EACN,SAAW,EAAA,iBAAA;AAAA,EACX,QAAU,EAAA;AACZ,CAAA;AAGA,IAAM,eAAkB,GAAA;AAAA,EACtB,OAAS,EAAA,IAAA;AAAA,EACT,QAAU,EAAA;AACZ,CAAA;AACA,IAAM,wBAA2B,GAAA;AAAA,EAC/B,OAAS,EAAA,IAAA;AAAA,EACT,QAAU,EAAA;AACZ,CAAA;AAGA,SAAS,kBAAkB,MAAQ,EAAA;AACjC,EAAA,IAAI7B,SAAQ,MAAO,CAAA,MAAA;AACnB,EAAA,OAAOA,MAAS,EAAA,EAAA;AACd,IAAA,IAAI,MAAOA,CAAAA,MAAK,CAAE,CAAA,CAAC,CAAM,KAAA,OAAA,IAAW,MAAOA,CAAAA,MAAK,CAAE,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,UAAY,EAAA;AACxE,MAAA;AAAA;AACF;AAEF,EAAIA,IAAAA,MAAAA,GAAQ,KAAK,MAAOA,CAAAA,MAAAA,GAAQ,CAAC,CAAE,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,YAAc,EAAA;AAE3D,IAAOA,MAAAA,CAAAA,MAAK,CAAE,CAAA,CAAC,CAAE,CAAA,KAAA,GAAQ,OAAOA,MAAQ,GAAA,CAAC,CAAE,CAAA,CAAC,CAAE,CAAA,KAAA;AAE9C,IAAOA,MAAAA,CAAAA,MAAAA,GAAQ,CAAC,CAAA,CAAE,CAAC,CAAA,CAAE,KAAQ,GAAA,MAAA,CAAOA,MAAQ,GAAA,CAAC,CAAE,CAAA,CAAC,CAAE,CAAA,KAAA;AAElD,IAAO,MAAA,CAAA,MAAA,CAAOA,MAAQ,GAAA,CAAA,EAAG,CAAC,CAAA;AAAA;AAE5B,EAAO,OAAA,MAAA;AACT;AAOA,SAAS,gBAAA,CAAiB,OAASwF,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC1C,EAAA,MAAMtD,KAAO,GAAA,IAAA;AAEb,EAAI,IAAA,MAAA;AAEJ,EAAI,IAAA,UAAA;AAEJ,EAAI,IAAA,MAAA;AAEJ,EAAIlC,IAAAA,MAAAA;AAEJ,EAAI,IAAA,OAAA;AACJ,EAAOlD,OAAAA,MAAAA;AAYP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AAEnB,IAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAapB,EAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,IAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,IAAA,OAAA,CAAQ,MAAM,cAAc,CAAA;AAC5B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,IAAA;AAAA;AAiBT,EAAA,SAAS,KAAKA,KAAM,EAAA;AAClB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,eAAA;AAAA;AAET,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAa,UAAA,GAAA,IAAA;AACb,MAAO,OAAA,aAAA;AAAA;AAET,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAS,MAAA,GAAA,CAAA;AAMT,MAAO+G,OAAAA,KAAAA,CAAK,YAAYsD,GAAK,GAAA,6BAAA;AAAA;AAI/B,IAAI,IAAA,UAAA,CAAWrK,KAAI,CAAG,EAAA;AAEpB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAS,MAAA,GAAA,MAAA,CAAO,aAAaA,KAAI,CAAA;AACjC,MAAO,OAAA,OAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAiBjB,EAAA,SAAS,gBAAgBA,KAAM,EAAA;AAC7B,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAS,MAAA,GAAA,CAAA;AACT,MAAO,OAAA,iBAAA;AAAA;AAET,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAS,MAAA,GAAA,CAAA;AACT,MAAA6E,MAAQ,GAAA,CAAA;AACR,MAAO,OAAA,eAAA;AAAA;AAIT,IAAI,IAAA,UAAA,CAAW7E,KAAI,CAAG,EAAA;AACpB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAS,MAAA,GAAA,CAAA;AAGT,MAAO+G,OAAAA,KAAAA,CAAK,YAAYsD,GAAK,GAAA,6BAAA;AAAA;AAE/B,IAAA,OAAO,IAAIrK,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,kBAAkBA,KAAM,EAAA;AAC/B,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AAGpB,MAAO+G,OAAAA,KAAAA,CAAK,YAAYsD,GAAK,GAAA,6BAAA;AAAA;AAE/B,IAAA,OAAO,IAAIrK,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,gBAAgBA,KAAM,EAAA;AAC7B,IAAA,MAAMuE,MAAQ,GAAA,QAAA;AACd,IAAA,IAAIvE,KAASuE,KAAAA,MAAAA,CAAM,UAAWM,CAAAA,MAAAA,EAAO,CAAG,EAAA;AACtC,MAAA,OAAA,CAAQ,QAAQ7E,KAAI,CAAA;AACpB,MAAI6E,IAAAA,MAAAA,KAAUN,OAAM,MAAQ,EAAA;AAG1B,QAAOwC,OAAAA,KAAAA,CAAK,YAAYsD,GAAK,GAAA,YAAA;AAAA;AAE/B,MAAO,OAAA,eAAA;AAAA;AAET,IAAA,OAAO,IAAIrK,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,cAAcA,KAAM,EAAA;AAC3B,IAAI,IAAA,UAAA,CAAWA,KAAI,CAAG,EAAA;AAEpB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAS,MAAA,GAAA,MAAA,CAAO,aAAaA,KAAI,CAAA;AACjC,MAAO,OAAA,OAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAejB,EAAA,SAAS,QAAQA,KAAM,EAAA;AACrB,IAAIA,IAAAA,KAAAA,KAAS,QAAQA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAM,IAAA,yBAAA,CAA0BA,KAAI,CAAG,EAAA;AAClF,MAAA,MAAM,QAAQA,KAAS,KAAA,EAAA;AACvB,MAAMd,MAAAA,KAAAA,GAAO,OAAO,WAAY,EAAA;AAChC,MAAA,IAAI,CAAC,KAAS,IAAA,CAAC,cAAc,YAAa,CAAA,QAAA,CAASA,KAAI,CAAG,EAAA;AACxD,QAAS,MAAA,GAAA,CAAA;AAGT,QAAA,OAAO6H,MAAK,SAAYsD,GAAAA,GAAAA,CAAGrK,KAAI,CAAA,GAAI,aAAaA,KAAI,CAAA;AAAA;AAEtD,MAAA,IAAI,cAAe,CAAA,QAAA,CAAS,MAAO,CAAA,WAAA,EAAa,CAAG,EAAA;AACjD,QAAS,MAAA,GAAA,CAAA;AACT,QAAA,IAAI,KAAO,EAAA;AACT,UAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,UAAO,OAAA,gBAAA;AAAA;AAKT,QAAA,OAAO+G,MAAK,SAAYsD,GAAAA,GAAAA,CAAGrK,KAAI,CAAA,GAAI,aAAaA,KAAI,CAAA;AAAA;AAEtD,MAAS,MAAA,GAAA,CAAA;AAET,MAAA,OAAO+G,MAAK,SAAa,IAAA,CAACA,MAAK,MAAO,CAAA,IAAA,CAAKA,MAAK,GAAI,EAAA,CAAE,IAAI,CAAI,GAAA,GAAA,CAAI/G,KAAI,CAAI,GAAA,UAAA,GAAa,wBAAwBA,KAAI,CAAA,GAAI,4BAA4BA,KAAI,CAAA;AAAA;AAIzJ,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAM,iBAAkBA,CAAAA,KAAI,CAAG,EAAA;AAC1C,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAU,MAAA,IAAA,MAAA,CAAO,aAAaA,KAAI,CAAA;AAClC,MAAO,OAAA,OAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,iBAAiBA,KAAM,EAAA;AAC9B,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AAGpB,MAAO+G,OAAAA,KAAAA,CAAK,YAAYsD,GAAK,GAAA,YAAA;AAAA;AAE/B,IAAA,OAAO,IAAIrK,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,wBAAwBA,KAAM,EAAA;AACrC,IAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,uBAAA;AAAA;AAET,IAAA,OAAO,YAAYA,KAAI,CAAA;AAAA;AA0BzB,EAAA,SAAS,4BAA4BA,KAAM,EAAA;AACzC,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,WAAA;AAAA;AAIT,IAAA,IAAIA,UAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAM,IAAA,UAAA,CAAWA,KAAI,CAAG,EAAA;AAClD,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,qBAAA;AAAA;AAET,IAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,2BAAA;AAAA;AAET,IAAA,OAAO,YAAYA,KAAI,CAAA;AAAA;AAiBzB,EAAA,SAAS,sBAAsBA,KAAM,EAAA;AAEnC,IAAIA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,MAAMA,KAAS,KAAA,EAAA,IAAM,iBAAkBA,CAAAA,KAAI,CAAG,EAAA;AACvF,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,qBAAA;AAAA;AAET,IAAA,OAAO,2BAA2BA,KAAI,CAAA;AAAA;AAgBxC,EAAA,SAAS,2BAA2BA,KAAM,EAAA;AACxC,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,4BAAA;AAAA;AAET,IAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,0BAAA;AAAA;AAET,IAAA,OAAO,4BAA4BA,KAAI,CAAA;AAAA;AAgBzC,EAAA,SAAS,6BAA6BA,KAAM,EAAA;AAC1C,IAAIA,IAAAA,KAAAA,KAAS,QAAQA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAI,EAAA;AAC7E,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAIA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAI,EAAA;AAC9B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAUA,OAAAA,GAAAA,KAAAA;AACV,MAAO,OAAA,4BAAA;AAAA;AAET,IAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,4BAAA;AAAA;AAET,IAAA,OAAO,+BAA+BA,KAAI,CAAA;AAAA;AAe5C,EAAA,SAAS,6BAA6BA,KAAM,EAAA;AAC1C,IAAA,IAAIA,UAAS,OAAS,EAAA;AACpB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAU,OAAA,GAAA,IAAA;AACV,MAAO,OAAA,iCAAA;AAAA;AAET,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,4BAAA;AAAA;AAaT,EAAA,SAAS,+BAA+BA,KAAM,EAAA;AAC5C,IAAA,IAAIA,UAAS,IAAQA,IAAAA,KAAAA,KAAS,MAAMA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,MAAMA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAM,IAAA,yBAAA,CAA0BA,KAAI,CAAG,EAAA;AAC7J,MAAA,OAAO,2BAA2BA,KAAI,CAAA;AAAA;AAExC,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,8BAAA;AAAA;AAcT,EAAA,SAAS,kCAAkCA,KAAM,EAAA;AAC/C,IAAA,IAAIA,UAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAM,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACrD,MAAA,OAAO,4BAA4BA,KAAI,CAAA;AAAA;AAEzC,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,YAAYA,KAAM,EAAA;AACzB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,aAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,cAAcA,KAAM,EAAA;AAC3B,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAG7C,MAAA,OAAO,aAAaA,KAAI,CAAA;AAAA;AAE1B,IAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,aAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,aAAaA,KAAM,EAAA;AAC1B,IAAIA,IAAAA,KAAAA,KAAS,EAAM,IAAA,MAAA,KAAW,CAAG,EAAA;AAC/B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,yBAAA;AAAA;AAET,IAAIA,IAAAA,KAAAA,KAAS,EAAM,IAAA,MAAA,KAAW,CAAG,EAAA;AAC/B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,sBAAA;AAAA;AAET,IAAIA,IAAAA,KAAAA,KAAS,EAAM,IAAA,MAAA,KAAW,CAAG,EAAA;AAC/B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,iBAAA;AAAA;AAET,IAAIA,IAAAA,KAAAA,KAAS,EAAM,IAAA,MAAA,KAAW,CAAG,EAAA;AAC/B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,6BAAA;AAAA;AAET,IAAIA,IAAAA,KAAAA,KAAS,EAAM,IAAA,MAAA,KAAW,CAAG,EAAA;AAC/B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,uBAAA;AAAA;AAET,IAAA,IAAI,mBAAmBA,KAAI,CAAA,KAAM,MAAW,KAAA,CAAA,IAAK,WAAW,CAAI,CAAA,EAAA;AAC9D,MAAA,OAAA,CAAQ,KAAK,cAAc,CAAA;AAC3B,MAAA,OAAO,QAAQ,KAAM,CAAA,eAAA,EAAiB,iBAAmB,EAAA,iBAAiB,EAAEA,KAAI,CAAA;AAAA;AAElF,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,MAAA,OAAA,CAAQ,KAAK,cAAc,CAAA;AAC3B,MAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAE/B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,YAAA;AAAA;AAcT,EAAA,SAAS,kBAAkBA,KAAM,EAAA;AAC/B,IAAA,OAAO,QAAQ,KAAM,CAAA,wBAAA,EAA0B,wBAA0B,EAAA,iBAAiB,EAAEA,KAAI,CAAA;AAAA;AAclG,EAAA,SAAS,yBAAyBA,KAAM,EAAA;AACtC,IAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,IAAO,OAAA,kBAAA;AAAA;AAcT,EAAA,SAAS,mBAAmBA,KAAM,EAAA;AAChC,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,MAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAE/B,IAAA,OAAA,CAAQ,MAAM,cAAc,CAAA;AAC5B,IAAA,OAAO,aAAaA,KAAI,CAAA;AAAA;AAa1B,EAAA,SAAS,0BAA0BA,KAAM,EAAA;AACvC,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,6BAAA;AAAA;AAET,IAAA,OAAO,aAAaA,KAAI,CAAA;AAAA;AAa1B,EAAA,SAAS,uBAAuBA,KAAM,EAAA;AACpC,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAS,MAAA,GAAA,EAAA;AACT,MAAO,OAAA,qBAAA;AAAA;AAET,IAAA,OAAO,aAAaA,KAAI,CAAA;AAAA;AAa1B,EAAA,SAAS,sBAAsBA,KAAM,EAAA;AACnC,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAMd,MAAAA,KAAAA,GAAO,OAAO,WAAY,EAAA;AAChC,MAAI,IAAA,YAAA,CAAa,QAASA,CAAAA,KAAI,CAAG,EAAA;AAC/B,QAAA,OAAA,CAAQ,QAAQc,KAAI,CAAA;AACpB,QAAO,OAAA,iBAAA;AAAA;AAET,MAAA,OAAO,aAAaA,KAAI,CAAA;AAAA;AAE1B,IAAA,IAAI,UAAWA,CAAAA,KAAI,CAAK,IAAA,MAAA,CAAO,SAAS,CAAG,EAAA;AAEzC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAU,MAAA,IAAA,MAAA,CAAO,aAAaA,KAAI,CAAA;AAClC,MAAO,OAAA,qBAAA;AAAA;AAET,IAAA,OAAO,aAAaA,KAAI,CAAA;AAAA;AAa1B,EAAA,SAAS,wBAAwBA,KAAM,EAAA;AACrC,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,6BAAA;AAAA;AAET,IAAA,OAAO,aAAaA,KAAI,CAAA;AAAA;AAqB1B,EAAA,SAAS,8BAA8BA,KAAM,EAAA;AAC3C,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,iBAAA;AAAA;AAIT,IAAIA,IAAAA,KAAAA,KAAS,EAAM,IAAA,MAAA,KAAW,CAAG,EAAA;AAC/B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,6BAAA;AAAA;AAET,IAAA,OAAO,aAAaA,KAAI,CAAA;AAAA;AAa1B,EAAA,SAAS,kBAAkBA,KAAM,EAAA;AAC/B,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,MAAA,OAAA,CAAQ,KAAK,cAAc,CAAA;AAC3B,MAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAE/B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,iBAAA;AAAA;AAaT,EAAA,SAAS,kBAAkBA,KAAM,EAAA;AAC/B,IAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AAKvB,IAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAElB;AAOA,SAAS,gCAAA,CAAiC,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC1D,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAOpF,OAAAA,MAAAA;AAaP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,MAAO,OAAA,KAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAcjB,EAAA,SAAS,MAAMA,KAAM,EAAA;AACnB,IAAA,OAAO+G,KAAK,CAAA,MAAA,CAAO,IAAKA,CAAAA,KAAAA,CAAK,GAAI,EAAA,CAAE,IAAI,CAAA,GAAI,GAAI/G,CAAAA,KAAI,CAAIqK,GAAAA,GAAAA,CAAGrK,KAAI,CAAA;AAAA;AAElE;AAOA,SAAS,uBAAA,CAAwB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AACjD,EAAO1I,OAAAA,MAAAA;AAaP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,IAAA,OAAO,OAAQ,CAAA,OAAA,CAAQ,SAAWqK,EAAAA,GAAAA,EAAI,GAAG,CAAA;AAAA;AAE7C;;;AC91BO,IAAM,QAAW,GAAA;AAAA,EACtB,IAAM,EAAA,UAAA;AAAA,EACN,QAAU,EAAA;AACZ,CAAA;AAOA,SAAS,gBAAA,CAAiB,OAASA,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC1C,EAAA,MAAMtD,KAAO,GAAA,IAAA;AAEb,EAAI,IAAA,MAAA;AAEJ,EAAIlC,IAAAA,MAAAA;AAEJ,EAAI,IAAA,WAAA;AACJ,EAAOlD,OAAAA,MAAAA;AAYP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,IAAA,OAAA,CAAQ,MAAM,cAAc,CAAA;AAC5B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,IAAA;AAAA;AAiBT,EAAA,SAAS,KAAKA,KAAM,EAAA;AAClB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,eAAA;AAAA;AAET,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,aAAA;AAAA;AAET,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,WAAA;AAAA;AAIT,IAAI,IAAA,UAAA,CAAWA,KAAI,CAAG,EAAA;AACpB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,OAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAiBjB,EAAA,SAAS,gBAAgBA,KAAM,EAAA;AAC7B,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,iBAAA;AAAA;AAET,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA6E,MAAQ,GAAA,CAAA;AACR,MAAO,OAAA,eAAA;AAAA;AAET,IAAI,IAAA,UAAA,CAAW7E,KAAI,CAAG,EAAA;AACpB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,WAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,kBAAkBA,KAAM,EAAA;AAC/B,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,UAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,QAAQA,KAAM,EAAA;AACrB,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,YAAA;AAAA;AAET,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAc,WAAA,GAAA,OAAA;AACd,MAAA,OAAO,iBAAiBA,KAAI,CAAA;AAAA;AAE9B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,OAAA;AAAA;AAaT,EAAA,SAAS,aAAaA,KAAM,EAAA;AAC1B,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,UAAA;AAAA;AAET,IAAA,OAAO,QAAQA,KAAI,CAAA;AAAA;AAarB,EAAA,SAAS,WAAWA,KAAM,EAAA;AACxB,IAAOA,OAAAA,KAAAA,KAAS,EAAK,GAAA,GAAA,CAAIA,KAAI,CAAA,GAAIA,KAAS,KAAA,EAAA,GAAK,YAAaA,CAAAA,KAAI,CAAI,GAAA,OAAA,CAAQA,KAAI,CAAA;AAAA;AAalF,EAAA,SAAS,gBAAgBA,KAAM,EAAA;AAC7B,IAAA,MAAMuE,MAAQ,GAAA,QAAA;AACd,IAAA,IAAIvE,KAASuE,KAAAA,MAAAA,CAAM,UAAWM,CAAAA,MAAAA,EAAO,CAAG,EAAA;AACtC,MAAA,OAAA,CAAQ,QAAQ7E,KAAI,CAAA;AACpB,MAAO6E,OAAAA,MAAAA,KAAUN,MAAM,CAAA,MAAA,GAAS,KAAQ,GAAA,eAAA;AAAA;AAE1C,IAAA,OAAO,IAAIvE,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,MAAMA,KAAM,EAAA;AACnB,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,UAAA;AAAA;AAET,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAc,WAAA,GAAA,KAAA;AACd,MAAA,OAAO,iBAAiBA,KAAI,CAAA;AAAA;AAE9B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,KAAA;AAAA;AAaT,EAAA,SAAS,WAAWA,KAAM,EAAA;AACxB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,QAAA;AAAA;AAET,IAAA,OAAO,MAAMA,KAAI,CAAA;AAAA;AAanB,EAAA,SAAS,SAASA,KAAM,EAAA;AACtB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,QAAA;AAAA;AAET,IAAA,OAAO,MAAMA,KAAI,CAAA;AAAA;AAanB,EAAA,SAAS,YAAYA,KAAM,EAAA;AACzB,IAAIA,IAAAA,KAAAA,KAAS,IAAQA,IAAAA,KAAAA,KAAS,EAAI,EAAA;AAChC,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAc,WAAA,GAAA,WAAA;AACd,MAAA,OAAO,iBAAiBA,KAAI,CAAA;AAAA;AAE9B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,WAAA;AAAA;AAaT,EAAA,SAAS,YAAYA,KAAM,EAAA;AACzB,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,gBAAA;AAAA;AAET,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAc,WAAA,GAAA,WAAA;AACd,MAAA,OAAO,iBAAiBA,KAAI,CAAA;AAAA;AAE9B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,WAAA;AAAA;AAaT,EAAA,SAAS,iBAAiBA,KAAM,EAAA;AAC9B,IAAA,OAAOA,UAAS,EAAK,GAAA,GAAA,CAAIA,KAAI,CAAA,GAAI,YAAYA,KAAI,CAAA;AAAA;AAanD,EAAA,SAAS,cAAcA,KAAM,EAAA;AAE3B,IAAI,IAAA,UAAA,CAAWA,KAAI,CAAG,EAAA;AACpB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,QAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,SAASA,KAAM,EAAA;AAEtB,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAM,iBAAkBA,CAAAA,KAAI,CAAG,EAAA;AAC1C,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,QAAA;AAAA;AAET,IAAA,OAAO,gBAAgBA,KAAI,CAAA;AAAA;AAa7B,EAAA,SAAS,gBAAgBA,KAAM,EAAA;AAC7B,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAc,WAAA,GAAA,eAAA;AACd,MAAA,OAAO,iBAAiBA,KAAI,CAAA;AAAA;AAE9B,IAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,eAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,QAAQA,KAAM,EAAA;AAErB,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAM,iBAAkBA,CAAAA,KAAI,CAAG,EAAA;AAC1C,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,OAAA;AAAA;AAET,IAAA,IAAIA,UAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAM,IAAA,yBAAA,CAA0BA,KAAI,CAAG,EAAA;AACjE,MAAA,OAAO,eAAeA,KAAI,CAAA;AAAA;AAE5B,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,eAAeA,KAAM,EAAA;AAC5B,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,GAAA;AAAA;AAIT,IAAA,IAAIA,UAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAM,IAAA,UAAA,CAAWA,KAAI,CAAG,EAAA;AAClD,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,oBAAA;AAAA;AAET,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAc,WAAA,GAAA,cAAA;AACd,MAAA,OAAO,iBAAiBA,KAAI,CAAA;AAAA;AAE9B,IAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,cAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,qBAAqBA,KAAM,EAAA;AAElC,IAAIA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,MAAMA,KAAS,KAAA,EAAA,IAAM,iBAAkBA,CAAAA,KAAI,CAAG,EAAA;AACvF,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,oBAAA;AAAA;AAET,IAAA,OAAO,0BAA0BA,KAAI,CAAA;AAAA;AAcvC,EAAA,SAAS,0BAA0BA,KAAM,EAAA;AACvC,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,2BAAA;AAAA;AAET,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAc,WAAA,GAAA,yBAAA;AACd,MAAA,OAAO,iBAAiBA,KAAI,CAAA;AAAA;AAE9B,IAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,yBAAA;AAAA;AAET,IAAA,OAAO,eAAeA,KAAI,CAAA;AAAA;AAc5B,EAAA,SAAS,4BAA4BA,KAAM,EAAA;AACzC,IAAIA,IAAAA,KAAAA,KAAS,QAAQA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAI,EAAA;AAC7E,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAIA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAI,EAAA;AAC9B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAASA,MAAAA,GAAAA,KAAAA;AACT,MAAO,OAAA,2BAAA;AAAA;AAET,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAc,WAAA,GAAA,2BAAA;AACd,MAAA,OAAO,iBAAiBA,KAAI,CAAA;AAAA;AAE9B,IAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,2BAAA;AAAA;AAET,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,6BAAA;AAAA;AAaT,EAAA,SAAS,4BAA4BA,KAAM,EAAA;AACzC,IAAA,IAAIA,UAAS,MAAQ,EAAA;AACnB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAS,MAAA,GAAA,KAAA,CAAA;AACT,MAAO,OAAA,gCAAA;AAAA;AAET,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAc,WAAA,GAAA,2BAAA;AACd,MAAA,OAAO,iBAAiBA,KAAI,CAAA;AAAA;AAE9B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,2BAAA;AAAA;AAaT,EAAA,SAAS,8BAA8BA,KAAM,EAAA;AAC3C,IAAIA,IAAAA,KAAAA,KAAS,IAAQA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAI,EAAA;AAC5F,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEjB,IAAA,IAAIA,UAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAM,IAAA,yBAAA,CAA0BA,KAAI,CAAG,EAAA;AACjE,MAAA,OAAO,eAAeA,KAAI,CAAA;AAAA;AAE5B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,6BAAA;AAAA;AAcT,EAAA,SAAS,iCAAiCA,KAAM,EAAA;AAC9C,IAAA,IAAIA,UAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAM,IAAA,yBAAA,CAA0BA,KAAI,CAAG,EAAA;AACjE,MAAA,OAAO,eAAeA,KAAI,CAAA;AAAA;AAE5B,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,IAAIA,KAAM,EAAA;AACjB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,cAAc,CAAA;AAC3B,MAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,MAAOqK,OAAAA,GAAAA;AAAA;AAET,IAAA,OAAO,IAAIrK,KAAI,CAAA;AAAA;AAiBjB,EAAA,SAAS,iBAAiBA,KAAM,EAAA;AAC9B,IAAA,OAAA,CAAQ,KAAK,cAAc,CAAA;AAC3B,IAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,IAAO,OAAA,eAAA;AAAA;AAiBT,EAAA,SAAS,gBAAgBA,KAAM,EAAA;AAG7B,IAAO,OAAA,aAAA,CAAcA,KAAI,CAAI,GAAA,YAAA,CAAa,SAAS,qBAAuB,EAAA,YAAA,EAAc+G,MAAK,MAAO,CAAA,UAAA,CAAW,QAAQ,IAAK,CAAA,QAAA,CAAS,cAAc,CAAI,GAAA,KAAA,CAAA,GAAY,CAAC,CAAE/G,CAAAA,KAAI,CAAI,GAAA,qBAAA,CAAsBA,KAAI,CAAA;AAAA;AAiB1M,EAAA,SAAS,sBAAsBA,KAAM,EAAA;AACnC,IAAA,OAAA,CAAQ,MAAM,cAAc,CAAA;AAC5B,IAAA,OAAO,YAAYA,KAAI,CAAA;AAAA;AAE3B;;;AChpBO,IAAM,QAAW,GAAA;AAAA,EACtB,IAAM,EAAA,UAAA;AAAA,EACN,UAAY,EAAA,kBAAA;AAAA,EACZ,SAAW,EAAA,iBAAA;AAAA,EACX,QAAU,EAAA;AACZ,CAAA;AAGA,IAAM,iBAAoB,GAAA;AAAA,EACxB,QAAU,EAAA;AACZ,CAAA;AAEA,IAAM,sBAAyB,GAAA;AAAA,EAC7B,QAAU,EAAA;AACZ,CAAA;AAEA,IAAM,2BAA8B,GAAA;AAAA,EAClC,QAAU,EAAA;AACZ,CAAA;AAGA,SAAS,mBAAmB,MAAQ,EAAA;AAClC,EAAA,IAAI6E,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAA,MAAM,YAAY,EAAC;AACnB,EAAO,OAAA,EAAEA,MAAQ,GAAA,MAAA,CAAO,MAAQ,EAAA;AAC9B,IAAA,MAAM,KAAQ,GAAA,MAAA,CAAOA,MAAK,CAAA,CAAE,CAAC,CAAA;AAC7B,IAAU,SAAA,CAAA,IAAA,CAAK,MAAOA,CAAAA,MAAK,CAAC,CAAA;AAC5B,IAAI,IAAA,KAAA,CAAM,SAAS,YAAgB,IAAA,KAAA,CAAM,SAAS,WAAe,IAAA,KAAA,CAAM,SAAS,UAAY,EAAA;AAE1F,MAAA,MAAMpD,OAAS,GAAA,KAAA,CAAM,IAAS,KAAA,YAAA,GAAe,CAAI,GAAA,CAAA;AACjD,MAAA,KAAA,CAAM,IAAO,GAAA,MAAA;AACb,MAAAoD,MAASpD,IAAAA,OAAAA;AAAA;AACX;AAIF,EAAI,IAAA,MAAA,CAAO,MAAW,KAAA,SAAA,CAAU,MAAQ,EAAA;AACtC,IAAA,MAAA,CAAO,MAAQ,EAAA,CAAA,EAAG,MAAO,CAAA,MAAA,EAAQ,SAAS,CAAA;AAAA;AAE5C,EAAO,OAAA,MAAA;AACT;AAGA,SAAS,iBAAA,CAAkB,QAAQ,OAAS,EAAA;AAC1C,EAAA,IAAIoD,SAAQ,MAAO,CAAA,MAAA;AACnB,EAAA,IAAIpD,OAAS,GAAA,CAAA;AAEb,EAAI,IAAA,KAAA;AAEJ,EAAI,IAAA,IAAA;AAEJ,EAAIgD,IAAAA,MAAAA;AAEJ,EAAI,IAAA,KAAA;AAGJ,EAAA,OAAOI,MAAS,EAAA,EAAA;AACd,IAAQ,KAAA,GAAA,MAAA,CAAOA,MAAK,CAAA,CAAE,CAAC,CAAA;AACvB,IAAA,IAAI,IAAM,EAAA;AAER,MAAA,IAAI,MAAM,IAAS,KAAA,MAAA,IAAU,MAAM,IAAS,KAAA,WAAA,IAAe,MAAM,SAAW,EAAA;AAC1E,QAAA;AAAA;AAKF,MAAI,IAAA,MAAA,CAAOA,MAAK,CAAE,CAAA,CAAC,MAAM,OAAW,IAAA,KAAA,CAAM,SAAS,WAAa,EAAA;AAC9D,QAAA,KAAA,CAAM,SAAY,GAAA,IAAA;AAAA;AACpB,eACSJ,MAAO,EAAA;AAChB,MAAA,IAAI,MAAOI,CAAAA,MAAK,CAAE,CAAA,CAAC,MAAM,OAAY,KAAA,KAAA,CAAM,IAAS,KAAA,YAAA,IAAgB,KAAM,CAAA,IAAA,KAAS,WAAgB,CAAA,IAAA,CAAC,MAAM,SAAW,EAAA;AACnH,QAAOA,IAAAA,GAAAA,MAAAA;AACP,QAAI,IAAA,KAAA,CAAM,SAAS,WAAa,EAAA;AAC9B,UAAApD,OAAS,GAAA,CAAA;AACT,UAAA;AAAA;AACF;AACF,KACF,MAAA,IAAW,KAAM,CAAA,IAAA,KAAS,UAAY,EAAA;AACpC,MAAAgD,MAAQI,GAAAA,MAAAA;AAAA;AACV;AAEF,EAAA,MAAM,KAAQ,GAAA;AAAA,IACZ,IAAA,EAAM,OAAO,IAAI,CAAA,CAAE,CAAC,CAAE,CAAA,IAAA,KAAS,cAAc,MAAS,GAAA,OAAA;AAAA,IACtD,KAAO,EAAA;AAAA,MACL,GAAG,MAAA,CAAO,IAAI,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA,KACrB;AAAA,IACA,GAAK,EAAA;AAAA,MACH,GAAG,MAAO,CAAA,MAAA,CAAO,SAAS,CAAC,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA;AAClC,GACF;AACA,EAAA,MAAM,KAAQ,GAAA;AAAA,IACZ,IAAM,EAAA,OAAA;AAAA,IACN,KAAO,EAAA;AAAA,MACL,GAAG,MAAA,CAAO,IAAI,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA,KACrB;AAAA,IACA,GAAK,EAAA;AAAA,MACH,GAAG,MAAA,CAAOJ,MAAK,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA;AACtB,GACF;AACA,EAAA,MAAMxC,KAAO,GAAA;AAAA,IACX,IAAM,EAAA,WAAA;AAAA,IACN,KAAO,EAAA;AAAA,MACL,GAAG,MAAO,CAAA,IAAA,GAAOR,UAAS,CAAC,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA,KAClC;AAAA,IACA,GAAK,EAAA;AAAA,MACH,GAAG,MAAOgD,CAAAA,MAAAA,GAAQ,CAAC,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA;AAC1B,GACF;AACA,EAAQ,KAAA,GAAA,CAAC,CAAC,OAAA,EAAS,KAAO,EAAA,OAAO,GAAG,CAAC,OAAA,EAAS,KAAO,EAAA,OAAO,CAAC,CAAA;AAG7D,EAAQ,KAAA,GAAA,IAAA,CAAK,OAAO,MAAO,CAAA,KAAA,CAAM,OAAO,CAAG,EAAA,IAAA,GAAOhD,OAAS,GAAA,CAAC,CAAC,CAAA;AAG7D,EAAQ,KAAA,GAAA,IAAA,CAAK,OAAO,CAAC,CAAC,SAASQ,KAAM,EAAA,OAAO,CAAC,CAAC,CAAA;AAK9C,EAAA,KAAA,GAAQ,KAAK,KAAO,EAAA,UAAA,CAAW,OAAQ,CAAA,MAAA,CAAO,WAAW,UAAW,CAAA,IAAA,EAAM,MAAO,CAAA,KAAA,CAAM,OAAOR,OAAS,GAAA,CAAA,EAAGgD,SAAQ,CAAC,CAAA,EAAG,OAAO,CAAC,CAAA;AAG9H,EAAQ,KAAA,GAAA,IAAA,CAAK,OAAO,CAAC,CAAC,QAAQxC,KAAM,EAAA,OAAO,GAAG,MAAOwC,CAAAA,MAAAA,GAAQ,CAAC,CAAG,EAAA,MAAA,CAAOA,SAAQ,CAAC,CAAA,EAAG,CAAC,MAAQ,EAAA,KAAA,EAAO,OAAO,CAAC,CAAC,CAAA;AAG7G,EAAA,KAAA,GAAQ,KAAK,KAAO,EAAA,MAAA,CAAO,KAAMA,CAAAA,MAAAA,GAAQ,CAAC,CAAC,CAAA;AAG3C,EAAQ,KAAA,GAAA,IAAA,CAAK,OAAO,CAAC,CAAC,QAAQ,KAAO,EAAA,OAAO,CAAC,CAAC,CAAA;AAC9C,EAAA,MAAA,CAAO,MAAQ,EAAA,IAAA,EAAM,MAAO,CAAA,MAAA,EAAQ,KAAK,CAAA;AACzC,EAAO,OAAA,MAAA;AACT;AAOA,SAAS,gBAAA,CAAiB,OAAS4F,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC1C,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAIlC,IAAAA,MAAAA,GAAQkC,MAAK,MAAO,CAAA,MAAA;AAExB,EAAI,IAAA,UAAA;AAEJ,EAAI,IAAA,OAAA;AAGJ,EAAA,OAAOlC,MAAS,EAAA,EAAA;AACd,IAAKkC,IAAAA,CAAAA,KAAAA,CAAK,OAAOlC,MAAK,CAAA,CAAE,CAAC,CAAE,CAAA,IAAA,KAAS,YAAgBkC,IAAAA,KAAAA,CAAK,MAAOlC,CAAAA,MAAK,EAAE,CAAC,CAAA,CAAE,IAAS,KAAA,WAAA,KAAgB,CAACkC,KAAAA,CAAK,OAAOlC,MAAK,CAAA,CAAE,CAAC,CAAA,CAAE,SAAW,EAAA;AACnI,MAAA,UAAA,GAAakC,KAAK,CAAA,MAAA,CAAOlC,MAAK,CAAA,CAAE,CAAC,CAAA;AACjC,MAAA;AAAA;AACF;AAEF,EAAOlD,OAAAA,MAAAA;AAiBP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AAEnB,IAAA,IAAI,CAAC,UAAY,EAAA;AACf,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAYjB,IAAA,IAAI,WAAW,SAAW,EAAA;AACxB,MAAA,OAAO,YAAYA,KAAI,CAAA;AAAA;AAEzB,IAAA,OAAA,GAAU+G,MAAK,MAAO,CAAA,OAAA,CAAQ,QAAS,CAAA,mBAAA,CAAoBA,MAAK,cAAe,CAAA;AAAA,MAC7E,OAAO,UAAW,CAAA,GAAA;AAAA,MAClB,GAAA,EAAKA,MAAK,GAAI;AAAA,KACf,CAAC,CAAC,CAAA;AACH,IAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,IAAA,OAAA,CAAQ,MAAM,aAAa,CAAA;AAC3B,IAAA,OAAA,CAAQ,QAAQ/G,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,aAAa,CAAA;AAC1B,IAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,IAAO,OAAA,KAAA;AAAA;AAmBT,EAAA,SAAS,MAAMA,KAAM,EAAA;AAKnB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAO,OAAA,OAAA,CAAQ,QAAQ,iBAAmB,EAAA,UAAA,EAAY,UAAU,UAAa,GAAA,WAAW,EAAEA,KAAI,CAAA;AAAA;AAIhG,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAO,OAAA,OAAA,CAAQ,QAAQ,sBAAwB,EAAA,UAAA,EAAY,UAAU,gBAAmB,GAAA,WAAW,EAAEA,KAAI,CAAA;AAAA;AAI3G,IAAA,OAAO,OAAU,GAAA,UAAA,CAAWA,KAAI,CAAA,GAAI,YAAYA,KAAI,CAAA;AAAA;AAiBtD,EAAA,SAAS,iBAAiBA,KAAM,EAAA;AAC9B,IAAA,OAAO,QAAQ,OAAQ,CAAA,2BAAA,EAA6B,UAAY,EAAA,WAAW,EAAEA,KAAI,CAAA;AAAA;AAmBnF,EAAA,SAAS,WAAWA,KAAM,EAAA;AAExB,IAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAmBhB,EAAA,SAAS,YAAYA,KAAM,EAAA;AACzB,IAAA,UAAA,CAAW,SAAY,GAAA,IAAA;AACvB,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEnB;AAOA,SAAS,gBAAA,CAAiB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC1C,EAAO,OAAA,aAAA;AAYP,EAAA,SAAS,cAAcrK,KAAM,EAAA;AAC3B,IAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,IAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA;AAC9B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,gBAAgB,CAAA;AAC7B,IAAO,OAAA,cAAA;AAAA;AAaT,EAAA,SAAS,eAAeA,KAAM,EAAA;AAC5B,IAAO,OAAA,yBAAA,CAA0BA,KAAI,CAAA,GAAI,iBAAkB,CAAA,OAAA,EAAS,YAAY,CAAEA,CAAAA,KAAI,CAAI,GAAA,YAAA,CAAaA,KAAI,CAAA;AAAA;AAa7G,EAAA,SAAS,aAAaA,KAAM,EAAA;AAC1B,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAO,YAAYA,KAAI,CAAA;AAAA;AAEzB,IAAO,OAAA,kBAAA,CAAmB,OAAS,EAAA,wBAAA,EAA0B,0BAA4B,EAAA,qBAAA,EAAuB,4BAA8B,EAAA,kCAAA,EAAoC,wBAA0B,EAAA,2BAAA,EAA6B,EAAE,CAAA,CAAEA,KAAI,CAAA;AAAA;AAanP,EAAA,SAAS,yBAAyBA,KAAM,EAAA;AACtC,IAAO,OAAA,yBAAA,CAA0BA,KAAI,CAAA,GAAI,iBAAkB,CAAA,OAAA,EAAS,eAAe,CAAEA,CAAAA,KAAI,CAAI,GAAA,WAAA,CAAYA,KAAI,CAAA;AAAA;AAa/G,EAAA,SAAS,2BAA2BA,KAAM,EAAA;AACxC,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,gBAAgBA,KAAM,EAAA;AAC7B,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAI,EAAA;AAC7C,MAAO,OAAA,YAAA,CAAa,SAAS,kBAAoB,EAAA,GAAA,EAAK,iBAAiB,qBAAuB,EAAA,qBAAqB,EAAEA,KAAI,CAAA;AAAA;AAE3H,IAAA,OAAO,YAAYA,KAAI,CAAA;AAAA;AAazB,EAAA,SAAS,mBAAmBA,KAAM,EAAA;AAChC,IAAO,OAAA,yBAAA,CAA0BA,KAAI,CAAA,GAAI,iBAAkB,CAAA,OAAA,EAAS,WAAW,CAAEA,CAAAA,KAAI,CAAI,GAAA,WAAA,CAAYA,KAAI,CAAA;AAAA;AAa3G,EAAA,SAAS,YAAYA,KAAM,EAAA;AACzB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA;AAC9B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,gBAAgB,CAAA;AAC7B,MAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,MAAOqK,OAAAA,GAAAA;AAAA;AAET,IAAA,OAAO,IAAIrK,KAAI,CAAA;AAAA;AAEnB;AAOA,SAAS,qBAAA,CAAsB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC/C,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAO,OAAA,aAAA;AAYP,EAAA,SAAS,cAAc/G,KAAM,EAAA;AAC3B,IAAO,OAAA,YAAA,CAAa,IAAK+G,CAAAA,KAAAA,EAAM,OAAS,EAAA,kBAAA,EAAoB,sBAAsB,WAAa,EAAA,iBAAA,EAAmB,iBAAiB,CAAA,CAAE/G,KAAI,CAAA;AAAA;AAa3I,EAAA,SAAS,mBAAmBA,KAAM,EAAA;AAChC,IAAO+G,OAAAA,KAAAA,CAAK,MAAO,CAAA,OAAA,CAAQ,QAAS,CAAA,mBAAA,CAAoBA,KAAK,CAAA,cAAA,CAAeA,KAAK,CAAA,MAAA,CAAOA,KAAK,CAAA,MAAA,CAAO,MAAS,GAAA,CAAC,CAAE,CAAA,CAAC,CAAC,CAAA,CAAE,KAAM,CAAA,CAAA,EAAG,CAAE,CAAA,CAAC,CAAC,CAAA,GAAIsD,GAAGrK,CAAAA,KAAI,CAAI,GAAA,GAAA,CAAIA,KAAI,CAAA;AAAA;AAa1J,EAAA,SAAS,qBAAqBA,KAAM,EAAA;AAClC,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEnB;AAOA,SAAS,0BAAA,CAA2B,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AACpD,EAAO,OAAA,uBAAA;AAcP,EAAA,SAAS,wBAAwBrK,KAAM,EAAA;AAGrC,IAAA,OAAA,CAAQ,MAAM,WAAW,CAAA;AACzB,IAAA,OAAA,CAAQ,MAAM,iBAAiB,CAAA;AAC/B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,iBAAiB,CAAA;AAC9B,IAAO,OAAA,sBAAA;AAAA;AAeT,EAAA,SAAS,uBAAuBA,KAAM,EAAA;AACpC,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,iBAAiB,CAAA;AAC/B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,iBAAiB,CAAA;AAC9B,MAAA,OAAA,CAAQ,KAAK,WAAW,CAAA;AACxB,MAAOqK,OAAAA,GAAAA;AAAA;AAET,IAAA,OAAO,IAAIrK,KAAI,CAAA;AAAA;AAEnB;;;ACniBO,IAAM,eAAkB,GAAA;AAAA,EAC7B,IAAM,EAAA,iBAAA;AAAA,EACN,YAAY,QAAS,CAAA,UAAA;AAAA,EACrB,QAAU,EAAA;AACZ,CAAA;AAOA,SAAS,uBAAA,CAAwB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AACjD,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAOpF,OAAAA,MAAAA;AAYP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,IAAA,OAAA,CAAQ,MAAM,kBAAkB,CAAA;AAChC,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,kBAAkB,CAAA;AAC/B,IAAO,OAAA,IAAA;AAAA;AAaT,EAAA,SAAS,KAAKA,KAAM,EAAA;AAClB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,aAAa,CAAA;AAC3B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,aAAa,CAAA;AAC1B,MAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,MAAO,OAAA,KAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AA8BjB,EAAA,SAAS,MAAMA,KAAM,EAAA;AAMnB,IAAOA,OAAAA,KAAAA,KAAS,EAAM,IAAA,wBAAA,IAA4B+G,KAAK,CAAA,MAAA,CAAO,aAAa,GAAI/G,CAAAA,KAAI,CAAIqK,GAAAA,GAAAA,CAAGrK,KAAI,CAAA;AAAA;AAElG;;;ACzFO,IAAM,cAAiB,GAAA;AAAA,EAC5B,IAAM,EAAA,gBAAA;AAAA,EACN,YAAY,QAAS,CAAA,UAAA;AAAA,EACrB,QAAU,EAAA;AACZ,CAAA;AAOA,SAAS,sBAAA,CAAuB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAChD,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAOpF,OAAAA,MAAAA;AAYP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,MAAM,WAAW,CAAA;AACzB,IAAA,OAAA,CAAQ,MAAM,aAAa,CAAA;AAC3B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,aAAa,CAAA;AAC1B,IAAA,OAAA,CAAQ,KAAK,WAAW,CAAA;AACxB,IAAO,OAAA,KAAA;AAAA;AAIT,EAAA,SAAS,MAAMA,KAAM,EAAA;AAKnB,IAAOA,OAAAA,KAAAA,KAAS,EAAM,IAAA,wBAAA,IAA4B+G,KAAK,CAAA,MAAA,CAAO,aAAa,GAAI/G,CAAAA,KAAI,CAAIqK,GAAAA,GAAAA,CAAGrK,KAAI,CAAA;AAAA;AAElG;;;AC1CO,IAAM,UAAa,GAAA;AAAA,EACxB,IAAM,EAAA,YAAA;AAAA,EACN,QAAU,EAAA;AACZ,CAAA;AAOA,SAAS,kBAAA,CAAmB,SAASqK,GAAI,EAAA;AACvC,EAAO1I,OAAAA,MAAAA;AAGP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,IAAO,OAAA,YAAA,CAAa,OAASqK,EAAAA,GAAAA,EAAI,YAAY,CAAA;AAAA;AAEjD;;;ACnBO,IAAM,aAAgB,GAAA;AAAA,EAC3B,IAAM,EAAA,eAAA;AAAA,EACN,QAAU,EAAA;AACZ,CAAA;AAOA,SAAS,qBAAA,CAAsB,OAASA,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC/C,EAAA,IAAI,IAAO,GAAA,CAAA;AAEX,EAAI,IAAA,MAAA;AACJ,EAAO1I,OAAAA,MAAAA;AAYP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,MAAM,eAAe,CAAA;AAE7B,IAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAapB,EAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,IAASA,MAAAA,GAAAA,KAAAA;AACT,IAAA,OAAO,QAAQA,KAAI,CAAA;AAAA;AAarB,EAAA,SAAS,QAAQA,KAAM,EAAA;AACrB,IAAA,IAAIA,UAAS,MAAQ,EAAA;AACnB,MAAA,OAAA,CAAQ,MAAM,uBAAuB,CAAA;AACrC,MAAA,OAAO,SAASA,KAAI,CAAA;AAAA;AAEtB,IAAA,IAAI,QAAQ,CAAMA,KAAAA,KAAAA,KAAS,IAAQ,IAAA,kBAAA,CAAmBA,KAAI,CAAI,CAAA,EAAA;AAC5D,MAAA,OAAA,CAAQ,KAAK,eAAe,CAAA;AAC5B,MAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAEhB,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,EAAA,SAAS,SAASA,KAAM,EAAA;AACtB,IAAA,IAAIA,UAAS,MAAQ,EAAA;AACnB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,IAAA,EAAA;AACA,MAAO,OAAA,QAAA;AAAA;AAET,IAAA,OAAA,CAAQ,KAAK,uBAAuB,CAAA;AACpC,IAAO,OAAA,aAAA,CAAcA,KAAI,CAAA,GAAI,YAAa,CAAA,OAAA,EAAS,OAAS,EAAA,YAAY,CAAEA,CAAAA,KAAI,CAAI,GAAA,OAAA,CAAQA,KAAI,CAAA;AAAA;AAElG;;;ACpFO,IAAM,IAAO,GAAA;AAAA,EAClB,YAAc,EAAA;AAAA,IACZ,QAAU,EAAA;AAAA,GACZ;AAAA,EACA,IAAM,EAAA,eAAA;AAAA,EACN,IAAM,EAAA,MAAA;AAAA,EACN,QAAU,EAAA;AACZ,CAAA;AAGA,IAAM,iCAAoC,GAAA;AAAA,EACxC,OAAS,EAAA,IAAA;AAAA,EACT,QAAU,EAAA;AACZ,CAAA;AAGA,IAAM,eAAkB,GAAA;AAAA,EACtB,OAAS,EAAA,IAAA;AAAA,EACT,QAAU,EAAA;AACZ,CAAA;AAUA,SAAS,iBAAA,CAAkB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC3C,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAA,MAAM,OAAOA,KAAK,CAAA,MAAA,CAAOA,KAAK,CAAA,MAAA,CAAO,SAAS,CAAC,CAAA;AAC/C,EAAA,IAAI,cAAc,IAAQ,IAAA,IAAA,CAAK,CAAC,CAAA,CAAE,SAAS,YAAe,GAAA,IAAA,CAAK,CAAC,CAAA,CAAE,eAAe,IAAK,CAAA,CAAC,CAAG,EAAA,IAAI,EAAE,MAAS,GAAA,CAAA;AACzG,EAAA,IAAI,IAAO,GAAA,CAAA;AACX,EAAOpF,OAAAA,MAAAA;AAGP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAM,MAAA,IAAA,GAAO+G,KAAK,CAAA,cAAA,CAAe,IAAS/G,KAAAA,KAAAA,KAAS,MAAMA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,GAAK,eAAkB,GAAA,aAAA,CAAA;AACxG,IAAA,IAAI,IAAS,KAAA,eAAA,GAAkB,CAAC+G,KAAAA,CAAK,cAAe,CAAA,MAAA,IAAU/G,KAAS+G,KAAAA,KAAAA,CAAK,cAAe,CAAA,MAAA,GAAS,UAAW/G,CAAAA,KAAI,CAAG,EAAA;AACpH,MAAI,IAAA,CAAC+G,KAAK,CAAA,cAAA,CAAe,IAAM,EAAA;AAC7B,QAAAA,KAAAA,CAAK,eAAe,IAAO,GAAA,IAAA;AAC3B,QAAA,OAAA,CAAQ,MAAM,IAAM,EAAA;AAAA,UAClB,UAAY,EAAA;AAAA,SACb,CAAA;AAAA;AAEH,MAAA,IAAI,SAAS,eAAiB,EAAA;AAC5B,QAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA;AAC9B,QAAA,OAAO/G,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,GAAK,OAAQ,CAAA,KAAA,CAAM,aAAe,EAAA,GAAA,EAAK,QAAQ,CAAA,CAAEA,KAAI,CAAA,GAAI,SAASA,KAAI,CAAA;AAAA;AAEvG,MAAA,IAAI,CAAC+G,KAAAA,CAAK,SAAa/G,IAAAA,KAAAA,KAAS,EAAI,EAAA;AAClC,QAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA;AAC9B,QAAA,OAAA,CAAQ,MAAM,eAAe,CAAA;AAC7B,QAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AACpB;AAEF,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAIjB,EAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,IAAA,IAAI,UAAWA,CAAAA,KAAI,CAAK,IAAA,EAAE,OAAO,EAAI,EAAA;AACnC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,MAAA;AAAA;AAET,IAAA,IAAA,CAAK,CAAC+G,KAAAA,CAAK,SAAa,IAAA,IAAA,GAAO,OAAOA,KAAK,CAAA,cAAA,CAAe,MAAS/G,GAAAA,KAAAA,KAAS+G,MAAK,cAAe,CAAA,MAAA,GAAS/G,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAK,CAAA,EAAA;AACpI,MAAA,OAAA,CAAQ,KAAK,eAAe,CAAA;AAC5B,MAAA,OAAO,SAASA,KAAI,CAAA;AAAA;AAEtB,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAMjB,EAAA,SAAS,SAASA,KAAM,EAAA;AACtB,IAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA;AAC9B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,gBAAgB,CAAA;AAC7B,IAAA+G,KAAK,CAAA,cAAA,CAAe,MAASA,GAAAA,KAAAA,CAAK,eAAe,MAAU/G,IAAAA,KAAAA;AAC3D,IAAA,OAAO,OAAQ,CAAA,KAAA;AAAA,MAAM,SAAA;AAAA;AAAA,MAErB+G,KAAAA,CAAK,YAAY,GAAM,GAAA,OAAA;AAAA,MAAS,OAAQ,CAAA,OAAA,CAAQ,iCAAmC,EAAA,WAAA,EAAa,WAAW;AAAA,KAAC;AAAA;AAI9G,EAAA,SAAS,QAAQ/G,KAAM,EAAA;AACrB,IAAA+G,KAAAA,CAAK,eAAe,gBAAmB,GAAA,IAAA;AACvC,IAAA,WAAA,EAAA;AACA,IAAA,OAAO,YAAY/G,KAAI,CAAA;AAAA;AAIzB,EAAA,SAAS,YAAYA,KAAM,EAAA;AACzB,IAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,MAAA,OAAA,CAAQ,MAAM,0BAA0B,CAAA;AACxC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,0BAA0B,CAAA;AACvC,MAAO,OAAA,WAAA;AAAA;AAET,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAIjB,EAAA,SAAS,YAAYA,KAAM,EAAA;AACzB,IAAA+G,KAAAA,CAAK,cAAe,CAAA,IAAA,GAAO,WAAcA,GAAAA,KAAAA,CAAK,cAAe,CAAA,OAAA,CAAQ,IAAK,CAAA,gBAAgB,CAAG,EAAA,IAAI,CAAE,CAAA,MAAA;AACnG,IAAA,OAAOsD,IAAGrK,KAAI,CAAA;AAAA;AAElB;AAOA,SAAS,wBAAA,CAAyB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAClD,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAAA,KAAAA,CAAK,eAAe,UAAa,GAAA,KAAA,CAAA;AACjC,EAAA,OAAO,OAAQ,CAAA,KAAA,CAAM,SAAW,EAAA,OAAA,EAAS,QAAQ,CAAA;AAGjD,EAAA,SAAS,QAAQ/G,KAAM,EAAA;AACrB,IAAA+G,MAAK,cAAe,CAAA,iBAAA,GAAoBA,MAAK,cAAe,CAAA,iBAAA,IAAqBA,MAAK,cAAe,CAAA,gBAAA;AAIrG,IAAO,OAAA,YAAA,CAAa,SAASsD,GAAI,EAAA,gBAAA,EAAkBtD,MAAK,cAAe,CAAA,IAAA,GAAO,CAAC,CAAA,CAAE/G,KAAI,CAAA;AAAA;AAIvF,EAAA,SAAS,SAASA,KAAM,EAAA;AACtB,IAAA,IAAI+G,MAAK,cAAe,CAAA,iBAAA,IAAqB,CAAC,aAAA,CAAc/G,KAAI,CAAG,EAAA;AACjE,MAAA+G,KAAAA,CAAK,eAAe,iBAAoB,GAAA,KAAA,CAAA;AACxC,MAAAA,KAAAA,CAAK,eAAe,gBAAmB,GAAA,KAAA,CAAA;AACvC,MAAA,OAAO,iBAAiB/G,KAAI,CAAA;AAAA;AAE9B,IAAA+G,KAAAA,CAAK,eAAe,iBAAoB,GAAA,KAAA,CAAA;AACxC,IAAAA,KAAAA,CAAK,eAAe,gBAAmB,GAAA,KAAA,CAAA;AACvC,IAAA,OAAO,QAAQ,OAAQ,CAAA,eAAA,EAAiBsD,GAAI,EAAA,gBAAgB,EAAErK,KAAI,CAAA;AAAA;AAIpE,EAAA,SAAS,iBAAiBA,KAAM,EAAA;AAE9B,IAAA+G,KAAAA,CAAK,eAAe,UAAa,GAAA,IAAA;AAEjC,IAAAA,MAAK,SAAY,GAAA,KAAA,CAAA;AAGjB,IAAO,OAAA,YAAA,CAAa,SAAS,OAAQ,CAAA,OAAA,CAAQ,MAAMsD,GAAI,EAAA,GAAG,GAAG,YAActD,EAAAA,KAAAA,CAAK,OAAO,UAAW,CAAA,OAAA,CAAQ,KAAK,QAAS,CAAA,cAAc,IAAI,KAAY,CAAA,GAAA,CAAC,EAAE/G,KAAI,CAAA;AAAA;AAEjK;AAOA,SAAS,cAAA,CAAe,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AACxC,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAA,OAAO,aAAa,OAAS,EAAA,WAAA,EAAa,kBAAkBA,KAAK,CAAA,cAAA,CAAe,OAAO,CAAC,CAAA;AAGxF,EAAA,SAAS,YAAY/G,KAAM,EAAA;AACzB,IAAA,MAAM,OAAO+G,KAAK,CAAA,MAAA,CAAOA,KAAK,CAAA,MAAA,CAAO,SAAS,CAAC,CAAA;AAC/C,IAAO,OAAA,IAAA,IAAQ,KAAK,CAAC,CAAA,CAAE,SAAS,gBAAoB,IAAA,IAAA,CAAK,CAAC,CAAA,CAAE,cAAe,CAAA,IAAA,CAAK,CAAC,CAAG,EAAA,IAAI,CAAE,CAAA,MAAA,KAAWA,KAAK,CAAA,cAAA,CAAe,OAAOsD,GAAGrK,CAAAA,KAAI,CAAI,GAAA,GAAA,CAAIA,KAAI,CAAA;AAAA;AAEvJ;AAOA,SAAS,gBAAgB,OAAS,EAAA;AAChC,EAAQ,OAAA,CAAA,IAAA,CAAK,IAAK,CAAA,cAAA,CAAe,IAAI,CAAA;AACvC;AAOA,SAAS,gCAAA,CAAiC,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC1D,EAAA,MAAMtD,KAAO,GAAA,IAAA;AAIb,EAAA,OAAO,YAAa,CAAA,OAAA,EAAS,WAAa,EAAA,0BAAA,EAA4BA,MAAK,MAAO,CAAA,UAAA,CAAW,OAAQ,CAAA,IAAA,CAAK,QAAS,CAAA,cAAc,CAAI,GAAA,KAAA,CAAA,GAAY,IAAI,CAAC,CAAA;AAGtJ,EAAA,SAAS,YAAY/G,KAAM,EAAA;AACzB,IAAA,MAAM,OAAO+G,KAAK,CAAA,MAAA,CAAOA,KAAK,CAAA,MAAA,CAAO,SAAS,CAAC,CAAA;AAC/C,IAAA,OAAO,CAAC,aAAA,CAAc/G,KAAI,CAAA,IAAK,QAAQ,IAAK,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,0BAA6BqK,GAAAA,GAAAA,CAAGrK,KAAI,CAAA,GAAI,IAAIA,KAAI,CAAA;AAAA;AAE5G;;;ACtMO,IAAM,eAAkB,GAAA;AAAA,EAC7B,IAAM,EAAA,iBAAA;AAAA,EACN,SAAW,EAAA,wBAAA;AAAA,EACX,QAAU,EAAA;AACZ,CAAA;AAGA,SAAS,wBAAA,CAAyB,QAAQ,OAAS,EAAA;AAEjD,EAAA,IAAI6E,SAAQ,MAAO,CAAA,MAAA;AAEnB,EAAIgG,IAAAA,QAAAA;AAEJ,EAAI5I,IAAAA,KAAAA;AAEJ,EAAI8I,IAAAA,WAAAA;AAIJ,EAAA,OAAOlG,MAAS,EAAA,EAAA;AACd,IAAA,IAAI,MAAOA,CAAAA,MAAK,CAAE,CAAA,CAAC,MAAM,OAAS,EAAA;AAChC,MAAA,IAAI,OAAOA,MAAK,CAAA,CAAE,CAAC,CAAA,CAAE,SAAS,SAAW,EAAA;AACvC,QAAAgG,QAAUhG,GAAAA,MAAAA;AACV,QAAA;AAAA;AAEF,MAAA,IAAI,OAAOA,MAAK,CAAA,CAAE,CAAC,CAAA,CAAE,SAAS,WAAa,EAAA;AACzC,QAAA5C,KAAO4C,GAAAA,MAAAA;AAAA;AACT,KAGG,MAAA;AACH,MAAA,IAAI,OAAOA,MAAK,CAAA,CAAE,CAAC,CAAA,CAAE,SAAS,SAAW,EAAA;AAEvC,QAAO,MAAA,CAAA,MAAA,CAAOA,QAAO,CAAC,CAAA;AAAA;AAExB,MAAI,IAAA,CAACkG,eAAc,MAAOlG,CAAAA,MAAK,EAAE,CAAC,CAAA,CAAE,SAAS,YAAc,EAAA;AACzD,QAAAkG,WAAalG,GAAAA,MAAAA;AAAA;AACf;AACF;AAEF,EAAA,MAAMmG,QAAU,GAAA;AAAA,IACd,IAAM,EAAA,eAAA;AAAA,IACN,KAAO,EAAA;AAAA,MACL,GAAG,MAAA,CAAO/I,KAAI,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA,KACrB;AAAA,IACA,GAAK,EAAA;AAAA,MACH,GAAG,MAAO,CAAA,MAAA,CAAO,SAAS,CAAC,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA;AAClC,GACF;AAGA,EAAA,MAAA,CAAOA,KAAI,CAAA,CAAE,CAAC,CAAA,CAAE,IAAO,GAAA,mBAAA;AAIvB,EAAA,IAAI8I,WAAY,EAAA;AACd,IAAA,MAAA,CAAO,OAAO9I,KAAM,EAAA,CAAA,EAAG,CAAC,OAAS+I,EAAAA,QAAAA,EAAS,OAAO,CAAC,CAAA;AAClD,IAAA,MAAA,CAAO,MAAOD,CAAAA,WAAAA,GAAa,CAAG,EAAA,CAAA,EAAG,CAAC,MAAA,EAAQ,MAAOF,CAAAA,QAAO,CAAE,CAAA,CAAC,CAAG,EAAA,OAAO,CAAC,CAAA;AACtE,IAAA,MAAA,CAAOA,QAAO,CAAA,CAAE,CAAC,CAAA,CAAE,GAAM,GAAA;AAAA,MACvB,GAAG,MAAA,CAAOE,WAAU,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA,KAC3B;AAAA,GACK,MAAA;AACL,IAAOF,MAAAA,CAAAA,QAAO,CAAE,CAAA,CAAC,CAAIG,GAAAA,QAAAA;AAAA;AAIvB,EAAA,MAAA,CAAO,IAAK,CAAA,CAAC,MAAQA,EAAAA,QAAAA,EAAS,OAAO,CAAC,CAAA;AACtC,EAAO,OAAA,MAAA;AACT;AAOA,SAAS,uBAAA,CAAwB,OAASX,EAAAA,GAAAA,EAAI,GAAK,EAAA;AACjD,EAAA,MAAMtD,KAAO,GAAA,IAAA;AAEb,EAAI,IAAA,MAAA;AACJ,EAAOpF,OAAAA,MAAAA;AAaP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAI6E,IAAAA,MAAAA,GAAQkC,MAAK,MAAO,CAAA,MAAA;AAExB,IAAIkE,IAAAA,UAAAA;AAEJ,IAAA,OAAOpG,MAAS,EAAA,EAAA;AAGd,MAAIkC,IAAAA,KAAAA,CAAK,OAAOlC,MAAK,CAAA,CAAE,CAAC,CAAE,CAAA,IAAA,KAAS,YAAgBkC,IAAAA,KAAAA,CAAK,MAAOlC,CAAAA,MAAK,EAAE,CAAC,CAAA,CAAE,IAAS,KAAA,YAAA,IAAgBkC,KAAK,CAAA,MAAA,CAAOlC,MAAK,CAAE,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,SAAW,EAAA;AAC1I,QAAAoG,aAAYlE,KAAK,CAAA,MAAA,CAAOlC,MAAK,CAAE,CAAA,CAAC,EAAE,IAAS,KAAA,WAAA;AAC3C,QAAA;AAAA;AACF;AAKF,IAAI,IAAA,CAACkC,KAAK,CAAA,MAAA,CAAO,IAAKA,CAAAA,KAAAA,CAAK,GAAI,EAAA,CAAE,IAAI,CAAA,KAAMA,KAAK,CAAA,SAAA,IAAakE,UAAY,CAAA,EAAA;AACvE,MAAA,OAAA,CAAQ,MAAM,mBAAmB,CAAA;AACjC,MAASjL,MAAAA,GAAAA,KAAAA;AACT,MAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAEpB,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAcjB,EAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,IAAA,OAAA,CAAQ,MAAM,2BAA2B,CAAA;AACzC,IAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAcpB,EAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,IAAA,IAAIA,UAAS,MAAQ,EAAA;AACnB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,MAAA;AAAA;AAET,IAAA,OAAA,CAAQ,KAAK,2BAA2B,CAAA;AACxC,IAAO,OAAA,aAAA,CAAcA,KAAI,CAAA,GAAI,YAAa,CAAA,OAAA,EAAS,KAAO,EAAA,YAAY,CAAEA,CAAAA,KAAI,CAAI,GAAA,KAAA,CAAMA,KAAI,CAAA;AAAA;AAc5F,EAAA,SAAS,MAAMA,KAAM,EAAA;AACnB,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,MAAA,OAAA,CAAQ,KAAK,mBAAmB,CAAA;AAChC,MAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAEhB,IAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAEnB;;;AC3KO,IAAM,IAAO,GAAA;AAAA,EAClB,QAAU,EAAA;AACZ,CAAA;AAQA,SAAS,eAAe,OAAS,EAAA;AAC/B,EAAA,MAAM+G,KAAO,GAAA,IAAA;AACb,EAAA,MAAM,UAAU,OAAQ,CAAA,OAAA;AAAA;AAAA,IAExB,SAAA;AAAA,IAAW,aAAA;AAAA;AAAA,IAEX,OAAA,CAAQ,QAAQ,IAAK,CAAA,MAAA,CAAO,WAAW,WAAa,EAAA,cAAA,EAAgB,YAAa,CAAA,OAAA,EAAS,OAAQ,CAAA,OAAA,CAAQ,KAAK,MAAO,CAAA,UAAA,CAAW,IAAM,EAAA,cAAA,EAAgB,OAAQ,CAAA,OAAA,CAAQ8D,UAAS,cAAc,CAAC,CAAG,EAAA,YAAY,CAAC;AAAA,GAAC;AAChN,EAAO,OAAA,OAAA;AAGP,EAAA,SAAS,cAAc7K,KAAM,EAAA;AAC3B,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA;AAAA;AAEF,IAAA,OAAA,CAAQ,MAAM,iBAAiB,CAAA;AAC/B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,iBAAiB,CAAA;AAC9B,IAAA+G,MAAK,gBAAmB,GAAA,KAAA,CAAA;AACxB,IAAO,OAAA,OAAA;AAAA;AAIT,EAAA,SAAS,eAAe/G,KAAM,EAAA;AAC5B,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA;AAAA;AAEF,IAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,IAAA+G,MAAK,gBAAmB,GAAA,KAAA,CAAA;AACxB,IAAO,OAAA,OAAA;AAAA;AAEX;;;AC9CO,IAAM,QAAW,GAAA;AAAA,EACtB,YAAY,cAAe;AAC7B,CAAA;AACO,IAAM,MAAA,GAAS,kBAAkB,QAAQ,CAAA;AACzC,IAAM,IAAA,GAAO,kBAAkB,MAAM,CAAA;AAQ5C,SAAS,kBAAkB,KAAO,EAAA;AAChC,EAAO,OAAA;AAAA,IACL,UAAY,EAAA,cAAA,CAAe,KAAU,KAAA,MAAA,GAAS,yBAAyB,KAAS,CAAA,CAAA;AAAA,IAChF,QAAU,EAAA;AAAA,GACZ;AAOA,EAAA,SAAS,eAAe,OAAS,EAAA;AAC/B,IAAA,MAAMA,KAAO,GAAA,IAAA;AACb,IAAA,MAAMwD,WAAa,GAAA,IAAA,CAAK,MAAO,CAAA,UAAA,CAAW,KAAK,CAAA;AAC/C,IAAA,MAAMtI,KAAO,GAAA,OAAA,CAAQ,OAAQsI,CAAAA,WAAAA,EAAY5I,QAAO,OAAO,CAAA;AACvD,IAAOA,OAAAA,MAAAA;AAGP,IAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,MAAA,OAAO,QAAQA,KAAI,CAAA,GAAIiC,MAAKjC,KAAI,CAAA,GAAI,QAAQA,KAAI,CAAA;AAAA;AAIlD,IAAA,SAAS,QAAQA,KAAM,EAAA;AACrB,MAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,QAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,QAAA;AAAA;AAEF,MAAA,OAAA,CAAQ,MAAM,MAAM,CAAA;AACpB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO0G,OAAAA,KAAAA;AAAA;AAIT,IAAA,SAASA,MAAK1G,KAAM,EAAA;AAClB,MAAI,IAAA,OAAA,CAAQA,KAAI,CAAG,EAAA;AACjB,QAAA,OAAA,CAAQ,KAAK,MAAM,CAAA;AACnB,QAAA,OAAOiC,MAAKjC,KAAI,CAAA;AAAA;AAIlB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO0G,OAAAA,KAAAA;AAAA;AAST,IAAA,SAAS,QAAQ1G,KAAM,EAAA;AACrB,MAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,QAAO,OAAA,IAAA;AAAA;AAET,MAAM6D,MAAAA,KAAAA,GAAO0G,YAAWvK,KAAI,CAAA;AAC5B,MAAA,IAAI6E,MAAQ,GAAA,CAAA,CAAA;AACZ,MAAA,IAAIhB,KAAM,EAAA;AAGR,QAAO,OAAA,EAAEgB,MAAQhB,GAAAA,KAAAA,CAAK,MAAQ,EAAA;AAC5B,UAAM,MAAA,IAAA,GAAOA,MAAKgB,MAAK,CAAA;AACvB,UAAI,IAAA,CAAC,KAAK,QAAY,IAAA,IAAA,CAAK,SAAS,IAAKkC,CAAAA,KAAAA,EAAMA,KAAK,CAAA,QAAQ,CAAG,EAAA;AAC7D,YAAO,OAAA,IAAA;AAAA;AACT;AACF;AAEF,MAAO,OAAA,KAAA;AAAA;AACT;AAEJ;AAQA,SAAS,eAAe,aAAe,EAAA;AACrC,EAAO,OAAA,cAAA;AAGP,EAAS,SAAA,cAAA,CAAe,QAAQ,OAAS,EAAA;AACvC,IAAA,IAAIlC,MAAQ,GAAA,CAAA,CAAA;AAEZ,IAAI,IAAA,KAAA;AAIJ,IAAO,OAAA,EAAEA,MAAS,IAAA,MAAA,CAAO,MAAQ,EAAA;AAC/B,MAAA,IAAI,UAAU,KAAW,CAAA,EAAA;AACvB,QAAI,IAAA,MAAA,CAAOA,MAAK,CAAK,IAAA,MAAA,CAAOA,MAAK,CAAE,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,MAAQ,EAAA;AACrD,UAAQA,KAAAA,GAAAA,MAAAA;AACR,UAAAA,MAAAA,EAAAA;AAAA;AACF,OACF,MAAA,IAAW,CAAC,MAAA,CAAOA,MAAK,CAAA,IAAK,MAAOA,CAAAA,MAAK,CAAE,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,MAAQ,EAAA;AAE7D,QAAIA,IAAAA,MAAAA,KAAU,QAAQ,CAAG,EAAA;AACvB,UAAO,MAAA,CAAA,KAAK,CAAE,CAAA,CAAC,CAAE,CAAA,GAAA,GAAM,OAAOA,MAAQ,GAAA,CAAC,CAAE,CAAA,CAAC,CAAE,CAAA,GAAA;AAC5C,UAAA,MAAA,CAAO,MAAO,CAAA,KAAA,GAAQ,CAAGA,EAAAA,MAAAA,GAAQ,QAAQ,CAAC,CAAA;AAC1C,UAAAA,SAAQ,KAAQ,GAAA,CAAA;AAAA;AAElB,QAAQ,KAAA,GAAA,KAAA,CAAA;AAAA;AACV;AAEF,IAAA,OAAO,aAAgB,GAAA,aAAA,CAAc,MAAQ,EAAA,OAAO,CAAI,GAAA,MAAA;AAAA;AAE5D;AAaA,SAAS,sBAAA,CAAuB,QAAQ,OAAS,EAAA;AAC/C,EAAA,IAAI,UAAa,GAAA,CAAA;AAEjB,EAAO,OAAA,EAAE,UAAc,IAAA,MAAA,CAAO,MAAQ,EAAA;AACpC,IAAA,IAAA,CAAK,eAAe,MAAO,CAAA,MAAA,IAAU,MAAO,CAAA,UAAU,EAAE,CAAC,CAAA,CAAE,IAAS,KAAA,YAAA,KAAiB,OAAO,UAAa,GAAA,CAAC,EAAE,CAAC,CAAA,CAAE,SAAS,MAAQ,EAAA;AAC9H,MAAA,MAAM6B,KAAO,GAAA,MAAA,CAAO,UAAa,GAAA,CAAC,EAAE,CAAC,CAAA;AACrC,MAAM,MAAA,MAAA,GAAS,OAAQ,CAAA,WAAA,CAAYA,KAAI,CAAA;AACvC,MAAA,IAAI7B,SAAQ,MAAO,CAAA,MAAA;AACnB,MAAA,IAAI,WAAc,GAAA,CAAA,CAAA;AAClB,MAAA,IAAI,IAAO,GAAA,CAAA;AAEX,MAAI,IAAA,IAAA;AACJ,MAAA,OAAOA,MAAS,EAAA,EAAA;AACd,QAAM,MAAA,KAAA,GAAQ,OAAOA,MAAK,CAAA;AAC1B,QAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,UAAA,WAAA,GAAc,KAAM,CAAA,MAAA;AACpB,UAAA,OAAO,KAAM,CAAA,UAAA,CAAW,WAAc,GAAA,CAAC,MAAM,EAAI,EAAA;AAC/C,YAAA,IAAA,EAAA;AACA,YAAA,WAAA,EAAA;AAAA;AAEF,UAAA,IAAI,WAAa,EAAA;AACjB,UAAc,WAAA,GAAA,CAAA,CAAA;AAAA,SAChB,MAAA,IAES,UAAU,CAAI,CAAA,EAAA;AACrB,UAAO,IAAA,GAAA,IAAA;AACP,UAAA,IAAA,EAAA;AAAA,SACF,MAAA,IAAW,UAAU,CAAI,CAAA,EAAA,CAElB,MAAA;AAEL,UAAAA,MAAAA,EAAAA;AACA,UAAA;AAAA;AACF;AAEF,MAAA,IAAI,IAAM,EAAA;AACR,QAAA,MAAM,KAAQ,GAAA;AAAA,UACZ,MAAM,UAAe,KAAA,MAAA,CAAO,UAAU,IAAQ,IAAA,IAAA,GAAO,IAAI,YAAe,GAAA,mBAAA;AAAA,UACxE,KAAO,EAAA;AAAA,YACL,YAAcA,EAAAA,MAAAA,GAAQ,WAAc6B,GAAAA,KAAAA,CAAK,MAAM,YAAe,GAAA,WAAA;AAAA,YAC9D,MAAA,EAAQA,KAAK,CAAA,KAAA,CAAM,MAAS7B,GAAAA,MAAAA;AAAA,YAC5B,IAAA,EAAM6B,MAAK,GAAI,CAAA,IAAA;AAAA,YACf,MAAA,EAAQA,KAAK,CAAA,GAAA,CAAI,MAAS,GAAA,IAAA;AAAA,YAC1B,MAAA,EAAQA,KAAK,CAAA,GAAA,CAAI,MAAS,GAAA;AAAA,WAC5B;AAAA,UACA,GAAK,EAAA;AAAA,YACH,GAAGA,KAAK,CAAA;AAAA;AACV,SACF;AACA,QAAAA,MAAK,GAAM,GAAA;AAAA,UACT,GAAG,KAAM,CAAA;AAAA,SACX;AACA,QAAA,IAAIA,KAAK,CAAA,KAAA,CAAM,MAAWA,KAAAA,KAAAA,CAAK,IAAI,MAAQ,EAAA;AACzC,UAAO,MAAA,CAAA,MAAA,CAAOA,OAAM,KAAK,CAAA;AAAA,SACpB,MAAA;AACL,UAAA,MAAA,CAAO,MAAO,CAAA,UAAA,EAAY,CAAG,EAAA,CAAC,OAAS,EAAA,KAAA,EAAO,OAAO,CAAA,EAAG,CAAC,MAAA,EAAQ,KAAO,EAAA,OAAO,CAAC,CAAA;AAChF,UAAc,UAAA,IAAA,CAAA;AAAA;AAChB;AAEF,MAAA,UAAA,EAAA;AAAA;AACF;AAEF,EAAO,OAAA,MAAA;AACT;;;AC9MA,IAAA,kBAAA,GAAA,EAAA;AAAA,QAAA,CAAA,kBAAA,EAAA;AAAA,EAAA,gBAAA,EAAA,MAAA,gBAAA;AAAA,EAAA,cAAA,EAAA,MAAA,cAAA;AAAA,EAAA,OAAA,EAAA,MAAA,OAAA;AAAA,EAAAwE,QAAAA,EAAAA,MAAAA,SAAAA;AAAA,EAAA,IAAAC,EAAAA,MAAAA,KAAAA;AAAA,EAAA,WAAA,EAAA,MAAA,WAAA;AAAA,EAAA,UAAA,EAAA,MAAA,UAAA;AAAA,EAAAC,MAAAA,EAAAA,MAAAA,OAAAA;AAAA,EAAA,IAAAnJ,EAAAA,MAAAA;AAAA,CAAA,CAAA;AAQO,IAAMiJ,SAAW,GAAA;AAAA,EACtB,CAAC,EAAE,GAAG,IAAA;AAAA,EACN,CAAC,EAAE,GAAG,IAAA;AAAA,EACN,CAAC,EAAE,GAAG,IAAA;AAAA,EACN,CAAC,EAAE,GAAG,IAAA;AAAA,EACN,CAAC,EAAE,GAAG,IAAA;AAAA,EACN,CAAC,EAAE,GAAG,IAAA;AAAA,EACN,CAAC,EAAE,GAAG,IAAA;AAAA,EACN,CAAC,EAAE,GAAG,IAAA;AAAA,EACN,CAAC,EAAE,GAAG,IAAA;AAAA,EACN,CAAC,EAAE,GAAG,IAAA;AAAA,EACN,CAAC,EAAE,GAAG,IAAA;AAAA,EACN,CAAC,EAAE,GAAG,IAAA;AAAA,EACN,CAAC,EAAE,GAAG,IAAA;AAAA,EACN,CAAC,EAAE,GAAG;AACR,CAAA;AAGO,IAAM,cAAiB,GAAA;AAAA,EAC5B,CAAC,EAAE,GAAG;AACR,CAAA;AAGO,IAAM,WAAc,GAAA;AAAA,EACzB,CAAC,EAAE,GAAG,YAAA;AAAA,EACN,CAAC,EAAE,GAAG,YAAA;AAAA,EACN,CAAC,EAAE,GAAG;AACR,CAAA;AAGO,IAAMC,KAAO,GAAA;AAAA,EAClB,CAAC,EAAE,GAAG,UAAA;AAAA,EACN,CAAC,EAAE,GAAG,aAAA;AAAA,EACN,CAAC,EAAE,GAAG,CAAC,iBAAiB,aAAa,CAAA;AAAA,EACrC,CAAC,EAAE,GAAG,QAAA;AAAA,EACN,CAAC,EAAE,GAAG,eAAA;AAAA,EACN,CAAC,EAAE,GAAG,aAAA;AAAA,EACN,CAAC,EAAE,GAAG,UAAA;AAAA,EACN,CAAC,GAAG,GAAG;AACT,CAAA;AAGO,IAAMC,OAAS,GAAA;AAAA,EACpB,CAAC,EAAE,GAAG,kBAAA;AAAA,EACN,CAAC,EAAE,GAAG;AACR,CAAA;AAGO,IAAMnJ,KAAO,GAAA;AAAA,EAClB,CAAC,EAAE,GAAG,UAAA;AAAA,EACN,CAAC,EAAE,GAAG,UAAA;AAAA,EACN,CAAC,EAAE,GAAG,UAAA;AAAA,EACN,CAAC,EAAE,GAAG,eAAA;AAAA,EACN,CAAC,EAAE,GAAG,kBAAA;AAAA,EACN,CAAC,EAAE,GAAG,SAAA;AAAA,EACN,CAAC,EAAE,GAAG,CAAC,UAAU,QAAQ,CAAA;AAAA,EACzB,CAAC,EAAE,GAAG,cAAA;AAAA,EACN,CAAC,EAAE,GAAG,CAAC,iBAAiB,eAAe,CAAA;AAAA,EACvC,CAAC,EAAE,GAAG,QAAA;AAAA,EACN,CAAC,EAAE,GAAG,SAAA;AAAA,EACN,CAAC,EAAE,GAAG;AACR,CAAA;AAGO,IAAM,UAAa,GAAA;AAAA,EACxB,IAAA,EAAM,CAAC,SAAA,EAAW,QAAW;AAC/B,CAAA;AAGO,IAAM,gBAAmB,GAAA;AAAA,EAC9B,IAAA,EAAM,CAAC,EAAA,EAAI,EAAE;AACf,CAAA;AAGO,IAAM,OAAU,GAAA;AAAA,EACrB,MAAM;AACR,CAAA;;;ACxBO,SAAS,eAAA,CAAgB,MAAQ,EAAA,UAAA,EAAY,IAAM,EAAA;AAExD,EAAA,IAAIuH,MAAQ,GAAA;AAAA,IACV,YAAc,EAAA,CAAA,CAAA;AAAA,IACd,MAAQ,EAAA,CAAA;AAAA,IACR,IAAA,EAAM,IAAQ,IAAA,IAAA,CAAK,IAAQ,IAAA,CAAA;AAAA,IAC3B,MAAA,EAAQ,IAAQ,IAAA,IAAA,CAAK,MAAU,IAAA,CAAA;AAAA,IAC/B,MAAA,EAAQ,IAAQ,IAAA,IAAA,CAAK,MAAU,IAAA;AAAA,GACjC;AAEA,EAAA,MAAM,cAAc,EAAC;AAErB,EAAA,MAAM,uBAAuB,EAAC;AAE9B,EAAA,IAAI,SAAS,EAAC;AAEd,EAAA,IAAI,QAAQ,EAAC;AASb,EAAA,MAAM,OAAU,GAAA;AAAA,IACd,OAAA,EAAS,iBAAiB,qBAAqB,CAAA;AAAA,IAC/C,KAAA,EAAO,iBAAiB,iBAAiB,CAAA;AAAA,IACzC,OAAA;AAAA,IACA,KAAA;AAAA,IACA,IAAA6B,EAAAA,KAAAA;AAAA,IACA,SAAA,EAAW,iBAAiB,iBAAmB,EAAA;AAAA,MAC7C,SAAW,EAAA;AAAA,KACZ;AAAA,GACH;AAOA,EAAA,MAAM,OAAU,GAAA;AAAA,IACd,IAAM,EAAA,IAAA;AAAA,IACN,gBAAgB,EAAC;AAAA,IACjB,UAAA;AAAA,IACA,QAAQ,EAAC;AAAA,IACT,GAAA;AAAA,IACA,MAAA;AAAA,IACA,QAAU,EAAA,IAAA;AAAA,IACV,cAAA;AAAA,IACA,WAAA;AAAA,IACA;AAAA,GACF;AAOA,EAAA,IAAI,KAAQ,GAAA,UAAA,CAAW,QAAS,CAAA,IAAA,CAAK,SAAS,OAAO,CAAA;AAQrD,EAAA,IAAI,WAAW,UAAY,EAAA;AACzB,IAAA,oBAAA,CAAqB,KAAK,UAAU,CAAA;AAAA;AAEtC,EAAO,OAAA,OAAA;AAGP,EAAA,SAAS,MAAM,KAAO,EAAA;AACpB,IAAS,MAAA,GAAA,IAAA,CAAK,QAAQ,KAAK,CAAA;AAC3B,IAAK,IAAA,EAAA;AAGL,IAAA,IAAI,MAAO,CAAA,MAAA,CAAO,MAAS,GAAA,CAAC,MAAM,IAAM,EAAA;AACtC,MAAA,OAAO,EAAC;AAAA;AAEV,IAAA,SAAA,CAAU,YAAY,CAAC,CAAA;AAGvB,IAAA,OAAA,CAAQ,MAAS,GAAA,UAAA,CAAW,oBAAsB,EAAA,OAAA,CAAQ,QAAQ,OAAO,CAAA;AACzE,IAAA,OAAO,OAAQ,CAAA,MAAA;AAAA;AAQjB,EAAS,SAAA,cAAA,CAAe,OAAO,UAAY,EAAA;AACzC,IAAA,OAAO,eAAgB,CAAA,WAAA,CAAY,KAAK,CAAA,EAAG,UAAU,CAAA;AAAA;AAIvD,EAAA,SAAS,YAAY,KAAO,EAAA;AAC1B,IAAO,OAAA,WAAA,CAAY,QAAQ,KAAK,CAAA;AAAA;AAIlC,EAAA,SAAS,GAAM,GAAA;AAEb,IAAM,MAAA;AAAA,MACJ,YAAA;AAAA,MACA,MAAA;AAAA,MACA,IAAA;AAAA,MACA,MAAA;AAAA,MACA,MAAA5J,EAAAA;AAAA,KACE+H,GAAAA,MAAAA;AACJ,IAAO,OAAA;AAAA,MACL,YAAA;AAAA,MACA,MAAA;AAAA,MACA,IAAA;AAAA,MACA,MAAA;AAAA,MACA,MAAA/H,EAAAA;AAAA,KACF;AAAA;AAIF,EAAA,SAAS,WAAW8C,MAAO,EAAA;AACzB,IAAYA,WAAAA,CAAAA,MAAAA,CAAM,IAAI,CAAA,GAAIA,MAAM,CAAA,MAAA;AAChC,IAAwB,uBAAA,EAAA;AAAA;AAkB1B,EAAA,SAAS,IAAO,GAAA;AAEd,IAAI,IAAA,UAAA;AACJ,IAAOiF,OAAAA,MAAAA,CAAM,MAAS,GAAA,MAAA,CAAO,MAAQ,EAAA;AACnC,MAAM,MAAA,KAAA,GAAQ,MAAOA,CAAAA,MAAAA,CAAM,MAAM,CAAA;AAGjC,MAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,QAAA,UAAA,GAAaA,MAAM,CAAA,MAAA;AACnB,QAAIA,IAAAA,MAAAA,CAAM,eAAe,CAAG,EAAA;AAC1B,UAAAA,OAAM,YAAe,GAAA,CAAA;AAAA;AAEvB,QAAA,OAAOA,OAAM,MAAW,KAAA,UAAA,IAAcA,MAAM,CAAA,YAAA,GAAe,MAAM,MAAQ,EAAA;AACvE,UAAA,EAAA,CAAG,KAAM,CAAA,UAAA,CAAWA,MAAM,CAAA,YAAY,CAAC,CAAA;AAAA;AACzC,OACK,MAAA;AACL,QAAA,EAAA,CAAG,KAAK,CAAA;AAAA;AACV;AACF;AAWF,EAAA,SAAS,GAAGxJ,KAAM,EAAA;AAGhB,IAAA,KAAA,GAAQ,MAAMA,KAAI,CAAA;AAAA;AAIpB,EAAA,SAAS,QAAQA,KAAM,EAAA;AACrB,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAAwJ,MAAM,CAAA,IAAA,EAAA;AACN,MAAAA,OAAM,MAAS,GAAA,CAAA;AACf,MAAAA,MAAM,CAAA,MAAA,IAAUxJ,KAAS,KAAA,CAAA,CAAA,GAAK,CAAI,GAAA,CAAA;AAClC,MAAwB,uBAAA,EAAA;AAAA,KAC1B,MAAA,IAAWA,UAAS,CAAI,CAAA,EAAA;AACtB,MAAAwJ,MAAM,CAAA,MAAA,EAAA;AACN,MAAAA,MAAM,CAAA,MAAA,EAAA;AAAA;AAIR,IAAIA,IAAAA,MAAAA,CAAM,eAAe,CAAG,EAAA;AAC1B,MAAAA,MAAM,CAAA,MAAA,EAAA;AAAA,KACD,MAAA;AACL,MAAAA,MAAM,CAAA,YAAA,EAAA;AAGN,MAAA,IAAIA,MAAM,CAAA,YAAA;AAAA;AAAA;AAAA,MAIV,MAAOA,CAAAA,MAAAA,CAAM,MAAM,CAAA,CAAE,MAAQ,EAAA;AAC3B,QAAAA,OAAM,YAAe,GAAA,CAAA,CAAA;AACrB,QAAAA,MAAM,CAAA,MAAA,EAAA;AAAA;AACR;AAIF,IAAA,OAAA,CAAQ,QAAWxJ,GAAAA,KAAAA;AAGR;AAIb,EAAS,SAAA,KAAA,CAAM,MAAM,MAAQ,EAAA;AAG3B,IAAM,MAAA,KAAA,GAAQ,UAAU,EAAC;AACzB,IAAA,KAAA,CAAM,IAAO,GAAA,IAAA;AACb,IAAA,KAAA,CAAM,QAAQ,GAAI,EAAA;AAClB,IAAA,OAAA,CAAQ,OAAO,IAAK,CAAA,CAAC,OAAS,EAAA,KAAA,EAAO,OAAO,CAAC,CAAA;AAC7C,IAAA,KAAA,CAAM,KAAK,KAAK,CAAA;AAChB,IAAO,OAAA,KAAA;AAAA;AAIT,EAAA,SAASqL,MAAK,IAAM,EAAA;AAClB,IAAM,MAAA,KAAA,GAAQ,MAAM,GAAI,EAAA;AACxB,IAAA,KAAA,CAAM,MAAM,GAAI,EAAA;AAChB,IAAA,OAAA,CAAQ,OAAO,IAAK,CAAA,CAAC,MAAQ,EAAA,KAAA,EAAO,OAAO,CAAC,CAAA;AAC5C,IAAO,OAAA,KAAA;AAAA;AAQT,EAAS,SAAA,qBAAA,CAAsB,WAAW,IAAM,EAAA;AAC9C,IAAU,SAAA,CAAA,SAAA,EAAW,KAAK,IAAI,CAAA;AAAA;AAQhC,EAAS,SAAA,iBAAA,CAAkB,GAAG,IAAM,EAAA;AAClC,IAAA,IAAA,CAAK,OAAQ,EAAA;AAAA;AAWf,EAAS,SAAA,gBAAA,CAAiB,UAAU,MAAQ,EAAA;AAC1C,IAAO,OAAA,IAAA;AAeP,IAAS,SAAA,IAAA,CAAKd,WAAY,EAAA,WAAA,EAAa,UAAY,EAAA;AAEjD,MAAI,IAAA,gBAAA;AAEJ,MAAI,IAAA,cAAA;AAEJ,MAAI,IAAA,gBAAA;AAEJ,MAAI,IAAA,IAAA;AACJ,MAAO,OAAA,KAAA,CAAM,QAAQA,WAAU,CAAA;AAAA;AAAA,QAC/B,uBAAuBA,WAAU;AAAA,UAAI,UAAcA,IAAAA,WAAAA;AAAA;AAAA,QAEnD,sBAAuB,CAAA;AAAA;AAAA,UAA0BA;AAAA,SAAY;AAAA,UAAI,sBAAsBA,WAAU,CAAA;AAUjG,MAAA,SAAS,sBAAsBe,IAAK,EAAA;AAClC,QAAO3J,OAAAA,MAAAA;AAGP,QAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,UAAA,MAAM,IAAOA,GAAAA,KAAAA,KAAS,IAAQsL,IAAAA,IAAAA,CAAItL,KAAI,CAAA;AACtC,UAAMmK,MAAAA,IAAAA,GAAMnK,KAAS,KAAA,IAAA,IAAQsL,IAAI,CAAA,IAAA;AACjC,UAAA,MAAMzH,KAAO,GAAA;AAAA;AAAA;AAAA,YAGb,GAAI,KAAM,CAAA,OAAA,CAAQ,IAAI,CAAA,GAAI,OAAO,IAAO,GAAA,CAAC,IAAI,CAAA,GAAI,EAAC;AAAA,YAAI,GAAI,KAAM,CAAA,OAAA,CAAQsG,IAAG,CAAA,GAAIA,OAAMA,IAAM,GAAA,CAACA,IAAG,CAAA,GAAI;AAAC,WAAE;AACtG,UAAO,OAAA,sBAAA,CAAuBtG,KAAI,CAAA,CAAE7D,KAAI,CAAA;AAAA;AAC1C;AAWF,MAAA,SAAS,uBAAuB6D,KAAM,EAAA;AACpC,QAAmBA,gBAAAA,GAAAA,KAAAA;AACnB,QAAiB,cAAA,GAAA,CAAA;AACjB,QAAIA,IAAAA,KAAAA,CAAK,WAAW,CAAG,EAAA;AACrB,UAAO,OAAA,UAAA;AAAA;AAET,QAAO,OAAA,eAAA,CAAgBA,KAAK,CAAA,cAAc,CAAC,CAAA;AAAA;AAW7C,MAAA,SAAS,gBAAgB,SAAW,EAAA;AAClC,QAAOlC,OAAAA,MAAAA;AAGP,QAAA,SAASA,OAAM3B,KAAM,EAAA;AAKnB,UAAA,IAAA,GAAO,KAAM,EAAA;AACb,UAAmB,gBAAA,GAAA,SAAA;AACnB,UAAI,IAAA,CAAC,UAAU,OAAS,EAAA;AACtB,YAAA,OAAA,CAAQ,gBAAmB,GAAA,SAAA;AAAA;AAK7B,UAAI,IAAA,SAAA,CAAU,IAAQ,IAAA,OAAA,CAAQ,MAAO,CAAA,UAAA,CAAW,QAAQ,IAAK,CAAA,QAAA,CAAS,SAAU,CAAA,IAAI,CAAG,EAAA;AACrF,YAAA,OAAO,IAAQ,CAAA;AAAA;AAEjB,UAAA,OAAO,UAAU,QAAS,CAAA,IAAA;AAAA;AAAA;AAAA;AAAA,YAI1B,MAAA,GAAS,OAAO,MAAO,CAAA,MAAA,CAAO,OAAO,OAAO,CAAA,EAAG,MAAM,CAAI,GAAA,OAAA;AAAA,YAAS,OAAA;AAAA,YAASqK,GAAAA;AAAA,YAAI;AAAA,YAAKrK,KAAI,CAAA;AAAA;AAC1F;AAIF,MAAA,SAASqK,IAAGrK,KAAM,EAAA;AAEhB,QAAA,QAAA,CAAS,kBAAkB,IAAI,CAAA;AAC/B,QAAO,OAAA,WAAA;AAAA;AAIT,MAAA,SAAS,IAAIA,KAAM,EAAA;AAEjB,QAAA,IAAA,CAAK,OAAQ,EAAA;AACb,QAAI,IAAA,EAAE,cAAiB,GAAA,gBAAA,CAAiB,MAAQ,EAAA;AAC9C,UAAO,OAAA,eAAA,CAAgB,gBAAiB,CAAA,cAAc,CAAC,CAAA;AAAA;AAEzD,QAAO,OAAA,UAAA;AAAA;AACT;AACF;AAWF,EAAS,SAAA,SAAA,CAAU,WAAWuL,KAAM,EAAA;AAClC,IAAA,IAAI,UAAU,UAAc,IAAA,CAAC,oBAAqB,CAAA,QAAA,CAAS,SAAS,CAAG,EAAA;AACrE,MAAA,oBAAA,CAAqB,KAAK,SAAS,CAAA;AAAA;AAErC,IAAA,IAAI,UAAU,OAAS,EAAA;AACrB,MAAA,MAAA,CAAO,OAAQ,CAAA,MAAA,EAAQA,KAAM,EAAA,OAAA,CAAQ,OAAO,MAASA,GAAAA,KAAAA,EAAM,SAAU,CAAA,OAAA,CAAQ,QAAQ,MAAO,CAAA,KAAA,CAAMA,KAAI,CAAA,EAAG,OAAO,CAAC,CAAA;AAAA;AAEnH,IAAA,IAAI,UAAU,SAAW,EAAA;AACvB,MAAA,OAAA,CAAQ,MAAS,GAAA,SAAA,CAAU,SAAU,CAAA,OAAA,CAAQ,QAAQ,OAAO,CAAA;AAAA;AAC9D;AASF,EAAA,SAAS,KAAQ,GAAA;AACf,IAAA,MAAM,aAAa,GAAI,EAAA;AACvB,IAAA,MAAM,gBAAgB,OAAQ,CAAA,QAAA;AAC9B,IAAA,MAAM,wBAAwB,OAAQ,CAAA,gBAAA;AACtC,IAAM,MAAA,gBAAA,GAAmB,QAAQ,MAAO,CAAA,MAAA;AACxC,IAAM,MAAA,UAAA,GAAa,KAAM,CAAA,IAAA,CAAK,KAAK,CAAA;AACnC,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,gBAAA;AAAA,MACN;AAAA,KACF;AAQA,IAAA,SAAS,OAAU,GAAA;AACjB,MAAA/B,MAAQ,GAAA,UAAA;AACR,MAAA,OAAA,CAAQ,QAAW,GAAA,aAAA;AACnB,MAAA,OAAA,CAAQ,gBAAmB,GAAA,qBAAA;AAC3B,MAAA,OAAA,CAAQ,OAAO,MAAS,GAAA,gBAAA;AACxB,MAAQ,KAAA,GAAA,UAAA;AACR,MAAwB,uBAAA,EAAA;AAAA;AAC1B;AAUF,EAAA,SAAS,uBAA0B,GAAA;AACjC,IAAA,IAAIA,MAAM,CAAA,IAAA,IAAQ,WAAeA,IAAAA,MAAAA,CAAM,SAAS,CAAG,EAAA;AACjD,MAAAA,MAAM,CAAA,MAAA,GAAS,WAAYA,CAAAA,MAAAA,CAAM,IAAI,CAAA;AACrC,MAAAA,MAAM,CAAA,MAAA,IAAU,WAAYA,CAAAA,MAAAA,CAAM,IAAI,CAAI,GAAA,CAAA;AAAA;AAC5C;AAEJ;AAYA,SAAS,WAAA,CAAY,QAAQ,KAAO,EAAA;AAClC,EAAM,MAAA,UAAA,GAAa,MAAM,KAAM,CAAA,MAAA;AAC/B,EAAM,MAAA,gBAAA,GAAmB,MAAM,KAAM,CAAA,YAAA;AACrC,EAAM,MAAA,QAAA,GAAW,MAAM,GAAI,CAAA,MAAA;AAC3B,EAAM,MAAA,cAAA,GAAiB,MAAM,GAAI,CAAA,YAAA;AAEjC,EAAI,IAAA,IAAA;AACJ,EAAA,IAAI,eAAe,QAAU,EAAA;AAE3B,IAAA,IAAA,GAAO,CAAC,MAAO,CAAA,UAAU,EAAE,KAAM,CAAA,gBAAA,EAAkB,cAAc,CAAC,CAAA;AAAA,GAC7D,MAAA;AACL,IAAO,IAAA,GAAA,MAAA,CAAO,KAAM,CAAA,UAAA,EAAY,QAAQ,CAAA;AACxC,IAAA,IAAI,mBAAmB,CAAI,CAAA,EAAA;AACzB,MAAM,MAAA,IAAA,GAAO,KAAK,CAAC,CAAA;AACnB,MAAI,IAAA,OAAO,SAAS,QAAU,EAAA;AAC5B,QAAA,IAAA,CAAK,CAAC,CAAA,GAAI,IAAK,CAAA,KAAA,CAAM,gBAAgB,CAAA;AAAA,OAChC,MAAA;AACL,QAAA,IAAA,CAAK,KAAM,EAAA;AAAA;AACb;AAEF,IAAA,IAAI,iBAAiB,CAAG,EAAA;AAEtB,MAAA,IAAA,CAAK,KAAK,MAAO,CAAA,QAAQ,EAAE,KAAM,CAAA,CAAA,EAAG,cAAc,CAAC,CAAA;AAAA;AACrD;AAEF,EAAO,OAAA,IAAA;AACT;AAYA,SAAS,eAAA,CAAgB,QAAQ,UAAY,EAAA;AAC3C,EAAA,IAAI3E,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAA,MAAM,SAAS,EAAC;AAEhB,EAAI,IAAA,KAAA;AACJ,EAAO,OAAA,EAAEA,MAAQ,GAAA,MAAA,CAAO,MAAQ,EAAA;AAC9B,IAAM,MAAA,KAAA,GAAQ,OAAOA,MAAK,CAAA;AAE1B,IAAIN,IAAAA,MAAAA;AACJ,IAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,MAAAA,MAAQ,GAAA,KAAA;AAAA,KACV,cAAe,KAAO;AAAA,MACpB,KAAK,CACH,CAAA,EAAA;AACE,QAAAA,MAAQ,GAAA,IAAA;AACR,QAAA;AAAA;AACF,MACF,KAAK,CACH,CAAA,EAAA;AACE,QAAAA,MAAQ,GAAA,IAAA;AACR,QAAA;AAAA;AACF,MACF,KAAK,CACH,CAAA,EAAA;AACE,QAAAA,MAAQ,GAAA,MAAA;AACR,QAAA;AAAA;AACF,MACF,KAAK,CACH,CAAA,EAAA;AACE,QAAAA,MAAAA,GAAQ,aAAa,GAAM,GAAA,GAAA;AAC3B,QAAA;AAAA;AACF,MACF,KAAK,CACH,CAAA,EAAA;AACE,QAAI,IAAA,CAAC,cAAc,KAAO,EAAA;AAC1B,QAAAA,MAAQ,GAAA,GAAA;AACR,QAAA;AAAA;AACF,MACF,SACE;AAEE,QAAAA,MAAAA,GAAQ,MAAO,CAAA,YAAA,CAAa,KAAK,CAAA;AAAA;AACnC;AAEJ,IAAA,KAAA,GAAQ,KAAU,KAAA,CAAA,CAAA;AAClB,IAAA,MAAA,CAAO,KAAKA,MAAK,CAAA;AAAA;AAEnB,EAAO,OAAA,MAAA,CAAO,KAAK,EAAE,CAAA;AACvB;;;ACzkBO,SAAS,MAAMvF,QAAS,EAAA;AAC7B,EAAM,MAAA,QAAA,GAAWA,YAAW,EAAC;AAC7B,EAAMuL,MAAAA,WAAAA;AAAA;AAAA,IACN,iBAAA,CAAkB,CAAC,kBAAmB,EAAA,GAAI,SAAS,UAAc,IAAA,EAAG,CAAC;AAAA,GAAA;AAGrE,EAAA,MAAM,MAAS,GAAA;AAAA,IACb,UAAAA,EAAAA,WAAAA;AAAA,IACA,OAAA,EAASiB,QAAO,OAAO,CAAA;AAAA,IACvB,SAAS,EAAC;AAAA,IACV,QAAA,EAAUA,QAAO,QAAQ,CAAA;AAAA,IACzB,IAAA,EAAMA,QAAO,IAAI,CAAA;AAAA,IACjB,MAAM,EAAC;AAAA,IACP,MAAA,EAAQA,QAAO,MAAM,CAAA;AAAA,IACrB,IAAA,EAAMA,QAAO,IAAI;AAAA,GACnB;AACA,EAAO,OAAA,MAAA;AAQP,EAAA,SAASA,QAAO,OAAS,EAAA;AACvB,IAAO,OAAA,OAAA;AAEP,IAAA,SAAS,QAAQ,IAAM,EAAA;AACrB,MAAO,OAAA,eAAA,CAAgB,MAAQ,EAAA,OAAA,EAAS,IAAI,CAAA;AAAA;AAC9C;AAEJ;;;AC3CO,SAAS,YAAY,MAAQ,EAAA;AAClC,EAAO,OAAA,CAAC,WAAY,CAAA,MAAM,CAAG,EAAA;AAAA;AAG7B,EAAO,OAAA,MAAA;AACT;;;ACAA,IAAM,MAAS,GAAA,aAAA;AAMR,SAAS,UAAa,GAAA;AAC3B,EAAA,IAAI,MAAS,GAAA,CAAA;AACb,EAAA,IAAI,MAAS,GAAA,EAAA;AAEb,EAAA,IAAI7J,MAAQ,GAAA,IAAA;AAEZ,EAAI,IAAA,gBAAA;AACJ,EAAO,OAAA,YAAA;AAIP,EAAS,SAAA,YAAA,CAAa4C,MAAO,EAAA,QAAA,EAAU,GAAK,EAAA;AAE1C,IAAA,MAAM,SAAS,EAAC;AAEhB,IAAI,IAAA,KAAA;AAEJ,IAAI,IAAA,IAAA;AAEJ,IAAI,IAAA,aAAA;AAEJ,IAAI,IAAA,WAAA;AAEJ,IAAIvE,IAAAA,KAAAA;AACJ,IAAAuE,MAAQ,GAAA,MAAA,IAAU,OAAOA,MAAAA,KAAU,WAAWA,MAAM,CAAA,QAAA,EAAa,GAAA,IAAI,WAAY,CAAA,QAAA,IAAY,KAAS,CAAA,CAAA,CAAE,OAAOA,MAAK,CAAA,CAAA;AACpH,IAAgB,aAAA,GAAA,CAAA;AAChB,IAAS,MAAA,GAAA,EAAA;AACT,IAAA,IAAI5C,MAAO,EAAA;AAET,MAAA,IAAI4C,MAAM,CAAA,UAAA,CAAW,CAAC,CAAA,KAAM,KAAO,EAAA;AACjC,QAAA,aAAA,EAAA;AAAA;AAEF,MAAA5C,MAAQ,GAAA,KAAA,CAAA;AAAA;AAEV,IAAO,OAAA,aAAA,GAAgB4C,OAAM,MAAQ,EAAA;AACnC,MAAA,MAAA,CAAO,SAAY,GAAA,aAAA;AACnB,MAAQ,KAAA,GAAA,MAAA,CAAO,KAAKA,MAAK,CAAA;AACzB,MAAA,WAAA,GAAc,SAAS,KAAM,CAAA,KAAA,KAAU,KAAY,CAAA,GAAA,KAAA,CAAM,QAAQA,MAAM,CAAA,MAAA;AACvE,MAAAvE,KAAAA,GAAOuE,MAAM,CAAA,UAAA,CAAW,WAAW,CAAA;AACnC,MAAA,IAAI,CAAC,KAAO,EAAA;AACV,QAASA,MAAAA,GAAAA,MAAAA,CAAM,MAAM,aAAa,CAAA;AAClC,QAAA;AAAA;AAEF,MAAA,IAAIvE,KAAS,KAAA,EAAA,IAAM,aAAkB,KAAA,WAAA,IAAe,gBAAkB,EAAA;AACpE,QAAA,MAAA,CAAO,KAAK,CAAE,CAAA,CAAA;AACd,QAAmB,gBAAA,GAAA,KAAA,CAAA;AAAA,OACd,MAAA;AACL,QAAA,IAAI,gBAAkB,EAAA;AACpB,UAAA,MAAA,CAAO,KAAK,CAAE,CAAA,CAAA;AACd,UAAmB,gBAAA,GAAA,KAAA,CAAA;AAAA;AAErB,QAAA,IAAI,gBAAgB,WAAa,EAAA;AAC/B,UAAA,MAAA,CAAO,IAAKuE,CAAAA,MAAAA,CAAM,KAAM,CAAA,aAAA,EAAe,WAAW,CAAC,CAAA;AACnD,UAAA,MAAA,IAAU,WAAc,GAAA,aAAA;AAAA;AAE1B,QAAA,QAAQvE,KAAM;AAAA,UACZ,KAAK,CACH,EAAA;AACE,YAAA,MAAA,CAAO,KAAK,KAAK,CAAA;AACjB,YAAA,MAAA,EAAA;AACA,YAAA;AAAA;AACF,UACF,KAAK,CACH,EAAA;AACE,YAAA,IAAA,GAAO,IAAK,CAAA,IAAA,CAAK,MAAS,GAAA,CAAC,CAAI,GAAA,CAAA;AAC/B,YAAA,MAAA,CAAO,KAAK,CAAE,CAAA,CAAA;AACd,YAAA,OAAO,MAAW,EAAA,GAAA,IAAA,EAAa,MAAA,CAAA,IAAA,CAAK,CAAE,CAAA,CAAA;AACtC,YAAA;AAAA;AACF,UACF,KAAK,EACH,EAAA;AACE,YAAA,MAAA,CAAO,KAAK,CAAE,CAAA,CAAA;AACd,YAAS,MAAA,GAAA,CAAA;AACT,YAAA;AAAA;AACF,UACF,SACE;AACE,YAAmB,gBAAA,GAAA,IAAA;AACnB,YAAS,MAAA,GAAA,CAAA;AAAA;AACX;AACJ;AAEF,MAAA,aAAA,GAAgB,WAAc,GAAA,CAAA;AAAA;AAEhC,IAAA,IAAI,GAAK,EAAA;AACP,MAAI,IAAA,gBAAA,EAAyB,MAAA,CAAA,IAAA,CAAK,CAAE,CAAA,CAAA;AACpC,MAAI,IAAA,MAAA,EAAe,MAAA,CAAA,IAAA,CAAK,MAAM,CAAA;AAC9B,MAAA,MAAA,CAAO,KAAK,IAAI,CAAA;AAAA;AAElB,IAAO,OAAA,MAAA;AAAA;AAEX;;;AChHA,IAAM,0BAA6B,GAAA,mEAAA;AAc5B,SAAS,aAAauE,MAAO,EAAA;AAClC,EAAOA,OAAAA,MAAAA,CAAM,OAAQ,CAAA,0BAAA,EAA4B,MAAM,CAAA;AACzD;AAYA,SAAS,MAAA,CAAO,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA;AAC1B,EAAA,IAAI,EAAI,EAAA;AAEN,IAAO,OAAA,EAAA;AAAA;AAIT,EAAM,MAAA,IAAA,GAAO,EAAG,CAAA,UAAA,CAAW,CAAC,CAAA;AAC5B,EAAA,IAAI,SAAS,EAAI,EAAA;AACf,IAAMkH,MAAAA,KAAAA,GAAO,EAAG,CAAA,UAAA,CAAW,CAAC,CAAA;AAC5B,IAAM,MAAA,GAAA,GAAMA,KAAS,KAAA,GAAA,IAAOA,KAAS,KAAA,EAAA;AACrC,IAAO,OAAA,+BAAA,CAAgC,GAAG,KAAM,CAAA,GAAA,GAAM,IAAI,CAAC,CAAA,EAAG,GAAM,GAAA,EAAA,GAAK,EAAE,CAAA;AAAA;AAE7E,EAAO,OAAA,6BAAA,CAA8B,EAAE,CAAK,IAAA,EAAA;AAC9C;;;ACIA,IAAMvB,IAAAA,GAAM,EAAG,CAAA,cAAA;AAyBR,SAAS,YAAA,CAAa3F,MAAO,EAAA,QAAA,EAAUvF,QAAS,EAAA;AACrD,EAAI,IAAA,OAAO,aAAa,QAAU,EAAA;AAChC,IAAAA,QAAU,GAAA,QAAA;AACV,IAAW,QAAA,GAAA,KAAA,CAAA;AAAA;AAEb,EAAA,OAAO,SAASA,QAAO,CAAA,CAAE,WAAY,CAAA,KAAA,CAAMA,QAAO,CAAE,CAAA,QAAA,EAAW,CAAA,KAAA,CAAM,YAAauF,CAAAA,MAAAA,EAAO,UAAU,IAAI,CAAC,CAAC,CAAC,CAAA;AAC5G;AAOA,SAAS,SAASvF,QAAS,EAAA;AAEzB,EAAA,MAAM,MAAS,GAAA;AAAA,IACb,YAAY,EAAC;AAAA,IACb,gBAAgB,CAAC,UAAA,EAAY,UAAY,EAAA,SAAA,EAAW,aAAa,QAAQ,CAAA;AAAA,IACzE,KAAO,EAAA;AAAA,MACL,QAAA,EAAU0M,QAAOC,KAAI,CAAA;AAAA,MACrB,gBAAkB,EAAA,WAAA;AAAA,MAClB,aAAe,EAAA,WAAA;AAAA,MACf,UAAA,EAAYD,QAAOV,QAAO,CAAA;AAAA,MAC1B,UAAA,EAAYU,QAAOE,WAAU,CAAA;AAAA,MAC7B,eAAiB,EAAA,WAAA;AAAA,MACjB,kBAAoB,EAAA,WAAA;AAAA,MACpB,UAAA,EAAYF,QAAO,QAAQ,CAAA;AAAA,MAC3B,mBAAqB,EAAA,MAAA;AAAA,MACrB,mBAAqB,EAAA,MAAA;AAAA,MACrB,YAAA,EAAcA,OAAO,CAAA,QAAA,EAAU,MAAM,CAAA;AAAA,MACrC,QAAA,EAAUA,OAAOG,CAAAA,SAAAA,EAAU,MAAM,CAAA;AAAA,MACjC,YAAc,EAAA,WAAA;AAAA,MACd,IAAM,EAAA,WAAA;AAAA,MACN,aAAe,EAAA,WAAA;AAAA,MACf,UAAA,EAAYH,QAAOX,WAAU,CAAA;AAAA,MAC7B,2BAA6B,EAAA,MAAA;AAAA,MAC7B,qBAAuB,EAAA,MAAA;AAAA,MACvB,qBAAuB,EAAA,MAAA;AAAA,MACvB,QAAA,EAAUW,QAAOI,SAAQ,CAAA;AAAA,MACzB,eAAA,EAAiBJ,QAAOK,UAAS,CAAA;AAAA,MACjC,iBAAA,EAAmBL,QAAOK,UAAS,CAAA;AAAA,MACnC,QAAA,EAAUL,OAAOM,CAAAA,KAAAA,EAAM,MAAM,CAAA;AAAA,MAC7B,YAAc,EAAA,WAAA;AAAA,MACd,QAAA,EAAUN,OAAOM,CAAAA,KAAAA,EAAM,MAAM,CAAA;AAAA,MAC7B,YAAc,EAAA,WAAA;AAAA,MACd,KAAA,EAAON,QAAOO,MAAK,CAAA;AAAA,MACnB,KAAO,EAAA,MAAA;AAAA,MACP,IAAA,EAAMP,QAAOC,KAAI,CAAA;AAAA,MACjB,QAAA,EAAUD,QAAOQ,SAAQ,CAAA;AAAA,MACzB,aAAe,EAAA,oBAAA;AAAA,MACf,WAAA,EAAaR,OAAO7H,CAAAA,KAAAA,EAAM,kBAAkB,CAAA;AAAA,MAC5C,aAAA,EAAe6H,QAAO7H,KAAI,CAAA;AAAA,MAC1B,SAAA,EAAW6H,QAAOT,UAAS,CAAA;AAAA,MAC3B,SAAW,EAAA,gBAAA;AAAA,MACX,eAAiB,EAAA,MAAA;AAAA,MACjB,yBAA2B,EAAA,MAAA;AAAA,MAC3B,mBAAqB,EAAA,MAAA;AAAA,MACrB,aAAA,EAAeS,QAAOV,QAAO,CAAA;AAAA,MAC7B,MAAA,EAAQU,QAAOS,OAAM,CAAA;AAAA,MACrB,aAAA,EAAeT,QAAOU,cAAa;AAAA,KACrC;AAAA,IACA,IAAM,EAAA;AAAA,MACJ,YAAY,MAAO,EAAA;AAAA,MACnB,kBAAoB,EAAA,wBAAA;AAAA,MACpB,UAAU,MAAO,EAAA;AAAA,MACjB,aAAe,EAAA,mBAAA;AAAA,MACf,gBAAkB,EAAA,sBAAA;AAAA,MAClB,YAAY,MAAO,EAAA;AAAA,MACnB,oBAAsB,EAAA,UAAA;AAAA,MACtB,mCAAqC,EAAA,8BAAA;AAAA,MACrC,+BAAiC,EAAA,8BAAA;AAAA,MACjC,uBAAyB,EAAA,6BAAA;AAAA,MACzB,kBAAoB,EAAA,wBAAA;AAAA,MACpB,UAAA,EAAY,OAAO,gBAAgB,CAAA;AAAA,MACnC,eAAiB,EAAA,qBAAA;AAAA,MACjB,mBAAqB,EAAA,yBAAA;AAAA,MACrB,mBAAqB,EAAA,yBAAA;AAAA,MACrB,aAAe,EAAA,UAAA;AAAA,MACf,YAAA,EAAc,OAAO,kBAAkB,CAAA;AAAA,MACvC,QAAA,EAAU,OAAO,cAAc,CAAA;AAAA,MAC/B,YAAc,EAAA,UAAA;AAAA,MACd,IAAM,EAAA,UAAA;AAAA,MACN,YAAY,MAAO,EAAA;AAAA,MACnB,2BAA6B,EAAA,iCAAA;AAAA,MAC7B,qBAAuB,EAAA,2BAAA;AAAA,MACvB,qBAAuB,EAAA,2BAAA;AAAA,MACvB,UAAU,MAAO,EAAA;AAAA,MACjB,eAAA,EAAiB,OAAO,eAAe,CAAA;AAAA,MACvC,iBAAA,EAAmB,OAAO,eAAe,CAAA;AAAA,MACzC,QAAA,EAAU,OAAO,cAAc,CAAA;AAAA,MAC/B,YAAc,EAAA,UAAA;AAAA,MACd,QAAA,EAAU,OAAO,cAAc,CAAA;AAAA,MAC/B,YAAc,EAAA,UAAA;AAAA,MACd,KAAA,EAAO,OAAO,WAAW,CAAA;AAAA,MACzB,KAAO,EAAA,WAAA;AAAA,MACP,SAAW,EAAA,eAAA;AAAA,MACX,UAAY,EAAA,gBAAA;AAAA,MACZ,IAAA,EAAM,OAAO,UAAU,CAAA;AAAA,MACvB,UAAU,MAAO,EAAA;AAAA,MACjB,aAAa,MAAO,EAAA;AAAA,MACpB,eAAe,MAAO,EAAA;AAAA,MACtB,WAAW,MAAO,EAAA;AAAA,MAClB,eAAiB,EAAA,qBAAA;AAAA,MACjB,yBAA2B,EAAA,+BAAA;AAAA,MAC3B,mBAAqB,EAAA,yBAAA;AAAA,MACrB,QAAU,EAAA,cAAA;AAAA,MACV,aAAA,EAAe,OAAO,mBAAmB,CAAA;AAAA,MACzC,yBAA2B,EAAA,+BAAA;AAAA,MAC3B,iBAAmB,EAAA,uBAAA;AAAA,MACnB,QAAQ,MAAO,EAAA;AAAA,MACf,eAAe,MAAO;AAAA;AACxB,GACF;AACA,EAAA,SAAA,CAAU,SAASpN,QAAW,IAAA,EAAI,EAAA,eAAA,IAAmB,EAAE,CAAA;AAGvD,EAAA,MAAM0H,QAAO,EAAC;AACd,EAAO,OAAA,OAAA;AAUP,EAAA,SAAS,QAAQ,MAAQ,EAAA;AAEvB,IAAA,IAAI,IAAO,GAAA;AAAA,MACT,IAAM,EAAA,MAAA;AAAA,MACN,UAAU;AAAC,KACb;AAEA,IAAA,MAAM,OAAU,GAAA;AAAA,MACd,KAAA,EAAO,CAAC,IAAI,CAAA;AAAA,MACZ,YAAY,EAAC;AAAA,MACb,MAAA;AAAA,MACA,KAAA;AAAA,MACA,IAAA2E,EAAAA,KAAAA;AAAA,MACA,MAAA;AAAA,MACA,MAAA;AAAA,MACA,IAAA3E,EAAAA;AAAA,KACF;AAEA,IAAA,MAAM,YAAY,EAAC;AACnB,IAAA,IAAI7B,MAAQ,GAAA,CAAA,CAAA;AACZ,IAAO,OAAA,EAAEA,MAAQ,GAAA,MAAA,CAAO,MAAQ,EAAA;AAG9B,MAAA,IAAI,MAAOA,CAAAA,MAAK,CAAE,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,aAAiB,IAAA,MAAA,CAAOA,MAAK,CAAA,CAAE,CAAC,CAAA,CAAE,SAAS,eAAiB,EAAA;AACxF,QAAA,IAAI,MAAOA,CAAAA,MAAK,CAAE,CAAA,CAAC,MAAM,OAAS,EAAA;AAChC,UAAA,SAAA,CAAU,KAAKA,MAAK,CAAA;AAAA,SACf,MAAA;AACL,UAAM,MAAA,IAAA,GAAO,UAAU,GAAI,EAAA;AAC3B,UAAAA,MAAQ,GAAA,WAAA,CAAY,MAAQ,EAAA,IAAA,EAAMA,MAAK,CAAA;AAAA;AACzC;AACF;AAEF,IAAAA,MAAQ,GAAA,CAAA,CAAA;AACR,IAAO,OAAA,EAAEA,MAAQ,GAAA,MAAA,CAAO,MAAQ,EAAA;AAC9B,MAAA,MAAMwH,WAAU,MAAO,CAAA,MAAA,CAAOxH,MAAK,CAAA,CAAE,CAAC,CAAC,CAAA;AACvC,MAAIqF,IAAAA,IAAAA,CAAI,KAAKmC,QAAS,EAAA,MAAA,CAAOxH,MAAK,CAAE,CAAA,CAAC,CAAE,CAAA,IAAI,CAAG,EAAA;AAC5C,QAAAwH,QAAAA,CAAQ,MAAOxH,CAAAA,MAAK,CAAE,CAAA,CAAC,EAAE,IAAI,CAAA,CAAE,IAAK,CAAA,MAAA,CAAO,MAAO,CAAA;AAAA,UAChD,cAAgB,EAAA,MAAA,CAAOA,MAAK,CAAA,CAAE,CAAC,CAAE,CAAA;AAAA,WAChC,OAAO,CAAA,EAAG,OAAOA,MAAK,CAAA,CAAE,CAAC,CAAC,CAAA;AAAA;AAC/B;AAIF,IAAI,IAAA,OAAA,CAAQ,UAAW,CAAA,MAAA,GAAS,CAAG,EAAA;AACjC,MAAA,MAAM,OAAO,OAAQ,CAAA,UAAA,CAAW,OAAQ,CAAA,UAAA,CAAW,SAAS,CAAC,CAAA;AAC7D,MAAMwH,MAAAA,QAAAA,GAAU,IAAK,CAAA,CAAC,CAAK,IAAA,cAAA;AAC3B,MAAAA,SAAQ,IAAK,CAAA,OAAA,EAAS,KAAW,CAAA,EAAA,IAAA,CAAK,CAAC,CAAC,CAAA;AAAA;AAI1C,IAAA,IAAA,CAAK,QAAW,GAAA;AAAA,MACd,KAAA,EAAO7C,MAAM,CAAA,MAAA,CAAO,MAAS,GAAA,CAAA,GAAI,OAAO,CAAC,CAAA,CAAE,CAAC,CAAA,CAAE,KAAQ,GAAA;AAAA,QACpD,IAAM,EAAA,CAAA;AAAA,QACN,MAAQ,EAAA,CAAA;AAAA,QACR,MAAQ,EAAA;AAAA,OACT,CAAA;AAAA,MACD,GAAKA,EAAAA,MAAAA,CAAM,MAAO,CAAA,MAAA,GAAS,CAAI,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAE,CAAC,CAAA,CAAE,GAAM,GAAA;AAAA,QAChE,IAAM,EAAA,CAAA;AAAA,QACN,MAAQ,EAAA,CAAA;AAAA,QACR,MAAQ,EAAA;AAAA,OACT;AAAA,KACH;AAGA,IAAA3E,MAAQ,GAAA,CAAA,CAAA;AACR,IAAA,OAAO,EAAEA,MAAAA,GAAQ,MAAO,CAAA,UAAA,CAAW,MAAQ,EAAA;AACzC,MAAA,IAAA,GAAO,MAAO,CAAA,UAAA,CAAWA,MAAK,CAAA,CAAE,IAAI,CAAK,IAAA,IAAA;AAAA;AAE3C,IAAO,OAAA,IAAA;AAAA;AAST,EAAS,SAAA,WAAA,CAAY,MAAQlD,EAAAA,MAAAA,EAAO,MAAQ,EAAA;AAC1C,IAAA,IAAIkD,SAAQlD,MAAQ,GAAA,CAAA;AACpB,IAAA,IAAI,gBAAmB,GAAA,CAAA,CAAA;AACvB,IAAA,IAAI,UAAa,GAAA,KAAA;AAEjB,IAAIuK,IAAAA,SAAAA;AAEJ,IAAI,IAAA,SAAA;AAEJ,IAAI,IAAA,mBAAA;AAEJ,IAAI,IAAA,QAAA;AACJ,IAAO,OAAA,EAAErH,UAAS,MAAQ,EAAA;AACxB,MAAM,MAAA,KAAA,GAAQ,OAAOA,MAAK,CAAA;AAC1B,MAAQ,QAAA,KAAA,CAAM,CAAC,CAAA,CAAE,IAAM;AAAA,QACrB,KAAK,eAAA;AAAA,QACL,KAAK,aAAA;AAAA,QACL,KAAK,YACH,EAAA;AACE,UAAI,IAAA,KAAA,CAAM,CAAC,CAAA,KAAM,OAAS,EAAA;AACxB,YAAA,gBAAA,EAAA;AAAA,WACK,MAAA;AACL,YAAA,gBAAA,EAAA;AAAA;AAEF,UAAW,QAAA,GAAA,KAAA,CAAA;AACX,UAAA;AAAA;AACF,QACF,KAAK,iBACH,EAAA;AACE,UAAI,IAAA,KAAA,CAAM,CAAC,CAAA,KAAM,OAAS,EAAA;AACxB,YAAA,IAAIqH,aAAY,CAAC,QAAA,IAAY,CAAC,gBAAA,IAAoB,CAAC,mBAAqB,EAAA;AACtE,cAAsBrH,mBAAAA,GAAAA,MAAAA;AAAA;AAExB,YAAW,QAAA,GAAA,KAAA,CAAA;AAAA;AAEb,UAAA;AAAA;AACF,QACF,KAAK,YAAA;AAAA,QACL,KAAK,eAAA;AAAA,QACL,KAAK,gBAAA;AAAA,QACL,KAAK,gBAAA;AAAA,QACL,KAAK,0BACH,EAAA;AAGE,UAAA;AAAA;AACF,QACF,SACE;AACE,UAAW,QAAA,GAAA,KAAA,CAAA;AAAA;AACb;AAEJ,MAAI,IAAA,CAAC,gBAAoB,IAAA,KAAA,CAAM,CAAC,CAAA,KAAM,OAAW,IAAA,KAAA,CAAM,CAAC,CAAA,CAAE,IAAS,KAAA,gBAAA,IAAoB,gBAAqB,KAAA,CAAA,CAAA,IAAM,MAAM,CAAC,CAAA,KAAM,MAAW,KAAA,KAAA,CAAM,CAAC,CAAA,CAAE,IAAS,KAAA,eAAA,IAAmB,KAAM,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,aAAgB,CAAA,EAAA;AAC/M,QAAA,IAAIqH,SAAU,EAAA;AACZ,UAAA,IAAI,SAAYrH,GAAAA,MAAAA;AAChB,UAAY,SAAA,GAAA,KAAA,CAAA;AACZ,UAAA,OAAO,SAAa,EAAA,EAAA;AAClB,YAAM,MAAA,SAAA,GAAY,OAAO,SAAS,CAAA;AAClC,YAAI,IAAA,SAAA,CAAU,CAAC,CAAE,CAAA,IAAA,KAAS,gBAAgB,SAAU,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,iBAAmB,EAAA;AACjF,cAAI,IAAA,SAAA,CAAU,CAAC,CAAA,KAAM,MAAQ,EAAA;AAC7B,cAAA,IAAI,SAAW,EAAA;AACb,gBAAA,MAAA,CAAO,SAAS,CAAA,CAAE,CAAC,CAAA,CAAE,IAAO,GAAA,iBAAA;AAC5B,gBAAa,UAAA,GAAA,IAAA;AAAA;AAEf,cAAU,SAAA,CAAA,CAAC,EAAE,IAAO,GAAA,YAAA;AACpB,cAAY,SAAA,GAAA,SAAA;AAAA,aACd,MAAA,IAAW,SAAU,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,gBAAgB,SAAU,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,kBAAsB,IAAA,SAAA,CAAU,CAAC,CAAE,CAAA,IAAA,KAAS,4BAAgC,IAAA,SAAA,CAAU,CAAC,CAAA,CAAE,IAAS,KAAA,kBAAA,IAAsB,SAAU,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,gBAAkB,EAAA,CAEhO,MAAA;AACL,cAAA;AAAA;AACF;AAEF,UAAA,IAAI,mBAAwB,KAAA,CAAC,SAAa,IAAA,mBAAA,GAAsB,SAAY,CAAA,EAAA;AAC1E,YAAAqH,UAAS,OAAU,GAAA,IAAA;AAAA;AAIrB,UAAAA,UAAS,GAAM,GAAA,MAAA,CAAO,MAAO,CAAA,IAAI,SAAY,GAAA,MAAA,CAAO,SAAS,CAAA,CAAE,CAAC,CAAE,CAAA,KAAA,GAAQ,KAAM,CAAA,CAAC,EAAE,GAAG,CAAA;AACtF,UAAO,MAAA,CAAA,MAAA,CAAO,SAAarH,IAAAA,MAAAA,EAAO,CAAG,EAAA,CAAC,QAAQqH,SAAU,EAAA,KAAA,CAAM,CAAC,CAAC,CAAC,CAAA;AACjE,UAAArH,MAAAA,EAAAA;AACA,UAAA,MAAA,EAAA;AAAA;AAIF,QAAA,IAAI,KAAM,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,gBAAkB,EAAA;AAEtC,UAAA,MAAM,IAAO,GAAA;AAAA,YACX,IAAM,EAAA,UAAA;AAAA,YACN,OAAS,EAAA,KAAA;AAAA,YACT,KAAA,EAAO,OAAO,MAAO,CAAA,IAAI,KAAM,CAAA,CAAC,EAAE,KAAK,CAAA;AAAA;AAAA,YAEvC,GAAK,EAAA,KAAA;AAAA,WACP;AACA,UAAAqH,SAAW,GAAA,IAAA;AACX,UAAO,MAAA,CAAA,MAAA,CAAOrH,QAAO,CAAG,EAAA,CAAC,SAAS,IAAM,EAAA,KAAA,CAAM,CAAC,CAAC,CAAC,CAAA;AACjD,UAAAA,MAAAA,EAAAA;AACA,UAAA,MAAA,EAAA;AACA,UAAsB,mBAAA,GAAA,KAAA,CAAA;AACtB,UAAW,QAAA,GAAA,IAAA;AAAA;AACb;AACF;AAEF,IAAA,MAAA,CAAOlD,MAAK,CAAA,CAAE,CAAC,CAAA,CAAE,OAAU,GAAA,UAAA;AAC3B,IAAO,OAAA,MAAA;AAAA;AAaT,EAAS+J,SAAAA,OAAAA,CAAOF,SAAQ,GAAK,EAAA;AAC3B,IAAO,OAAA,IAAA;AAOP,IAAA,SAAS,KAAK,KAAO,EAAA;AACnB,MAAA,KAAA,CAAM,IAAK,CAAA,IAAA,EAAMA,OAAO,CAAA,KAAK,GAAG,KAAK,CAAA;AACrC,MAAA,IAAI,GAAK,EAAA,GAAA,CAAI,IAAK,CAAA,IAAA,EAAM,KAAK,CAAA;AAAA;AAC/B;AAMF,EAAA,SAAS,MAAS,GAAA;AAChB,IAAA,IAAA,CAAK,MAAM,IAAK,CAAA;AAAA,MACd,IAAM,EAAA,UAAA;AAAA,MACN,UAAU;AAAC,KACZ,CAAA;AAAA;AAMH,EAAS,SAAA,KAAA,CAAMlI,KAAM,EAAA,KAAA,EAAO,YAAc,EAAA;AACxC,IAAA,MAAM,SAAS,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAE/C,IAAA,MAAM,WAAW,MAAO,CAAA,QAAA;AACxB,IAAA,QAAA,CAAS,KAAKA,KAAI,CAAA;AAClB,IAAK,IAAA,CAAA,KAAA,CAAM,KAAKA,KAAI,CAAA;AACpB,IAAA,IAAA,CAAK,WAAW,IAAK,CAAA,CAAC,KAAO,EAAA,YAAA,IAAgB,MAAS,CAAC,CAAA;AACvD,IAAAA,MAAK,QAAW,GAAA;AAAA,MACd,KAAA,EAAOkG,MAAM,CAAA,KAAA,CAAM,KAAK,CAAA;AAAA;AAAA,MAExB,GAAK,EAAA,KAAA;AAAA,KACP;AAAA;AAWF,EAAA,SAAS,OAAO,GAAK,EAAA;AACnB,IAAO/E,OAAAA,MAAAA;AAOP,IAAA,SAASA,OAAM,KAAO,EAAA;AACpB,MAAA,IAAI,GAAK,EAAA,GAAA,CAAI,IAAK,CAAA,IAAA,EAAM,KAAK,CAAA;AAC7B,MAAA4G,KAAAA,CAAK,IAAK,CAAA,IAAA,EAAM,KAAK,CAAA;AAAA;AACvB;AAMF,EAASA,SAAAA,KAAAA,CAAK,OAAO,WAAa,EAAA;AAChC,IAAM/H,MAAAA,KAAAA,GAAO,IAAK,CAAA,KAAA,CAAM,GAAI,EAAA;AAC5B,IAAM,MAAA,IAAA,GAAO,IAAK,CAAA,UAAA,CAAW,GAAI,EAAA;AACjC,IAAA,IAAI,CAAC,IAAM,EAAA;AACT,MAAA,MAAM,IAAI,KAAM,CAAA,gBAAA,GAAmB,KAAM,CAAA,IAAA,GAAO,QAAQ,iBAAkB,CAAA;AAAA,QACxE,OAAO,KAAM,CAAA,KAAA;AAAA,QACb,KAAK,KAAM,CAAA;AAAA,OACZ,IAAI,uBAAkB,CAAA;AAAA,eACd,IAAK,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,MAAM,IAAM,EAAA;AACtC,MAAA,IAAI,WAAa,EAAA;AACf,QAAA,WAAA,CAAY,IAAK,CAAA,IAAA,EAAM,KAAO,EAAA,IAAA,CAAK,CAAC,CAAC,CAAA;AAAA,OAChC,MAAA;AACL,QAAM+I,MAAAA,QAAAA,GAAU,IAAK,CAAA,CAAC,CAAK,IAAA,cAAA;AAC3B,QAAAA,SAAQ,IAAK,CAAA,IAAA,EAAM,KAAO,EAAA,IAAA,CAAK,CAAC,CAAC,CAAA;AAAA;AACnC;AAEF,IAAA/I,KAAK,CAAA,QAAA,CAAS,GAAMkG,GAAAA,MAAAA,CAAM,MAAM,GAAG,CAAA;AAAA;AAMrC,EAAA,SAAS,MAAS,GAAA;AAChB,IAAA,OAAO,QAAS,CAAA,IAAA,CAAK,KAAM,CAAA,GAAA,EAAK,CAAA;AAAA;AAWlC,EAAA,SAAS,kBAAqB,GAAA;AAC5B,IAAA,IAAA,CAAK,KAAK,2BAA8B,GAAA,IAAA;AAAA;AAO1C,EAAA,SAAS,qBAAqB,KAAO,EAAA;AACnC,IAAI,IAAA,IAAA,CAAK,KAAK,2BAA6B,EAAA;AACzC,MAAA,MAAM,WAAW,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AACjD,MAAA,QAAA,CAAS,QAAQ,MAAO,CAAA,QAAA,CAAS,KAAK,cAAe,CAAA,KAAK,GAAG,EAAE,CAAA;AAC/D,MAAA,IAAA,CAAK,KAAK,2BAA8B,GAAA,KAAA,CAAA;AAAA;AAC1C;AAOF,EAAA,SAAS,yBAA4B,GAAA;AACnC,IAAM9C,MAAAA,KAAAA,GAAO,KAAK,MAAO,EAAA;AACzB,IAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAAA,MAAK,IAAOoD,GAAAA,KAAAA;AAAA;AAOd,EAAA,SAAS,yBAA4B,GAAA;AACnC,IAAMA,MAAAA,KAAAA,GAAO,KAAK,MAAO,EAAA;AACzB,IAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAAA,MAAK,IAAOoD,GAAAA,KAAAA;AAAA;AAOd,EAAA,SAAS,qBAAwB,GAAA;AAE/B,IAAI,IAAA,IAAA,CAAK,KAAK,cAAgB,EAAA;AAC9B,IAAA,IAAA,CAAK,MAAO,EAAA;AACZ,IAAA,IAAA,CAAK,KAAK,cAAiB,GAAA,IAAA;AAAA;AAO7B,EAAA,SAAS,gBAAmB,GAAA;AAC1B,IAAMA,MAAAA,KAAAA,GAAO,KAAK,MAAO,EAAA;AACzB,IAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAAA,KAAK,CAAA,KAAA,GAAQoD,KAAK,CAAA,OAAA,CAAQ,4BAA4B,EAAE,CAAA;AACxD,IAAA,IAAA,CAAK,KAAK,cAAiB,GAAA,KAAA,CAAA;AAAA;AAO7B,EAAA,SAAS,kBAAqB,GAAA;AAC5B,IAAMA,MAAAA,KAAAA,GAAO,KAAK,MAAO,EAAA;AACzB,IAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAAA,KAAK,CAAA,KAAA,GAAQoD,KAAK,CAAA,OAAA,CAAQ,gBAAgB,EAAE,CAAA;AAAA;AAO9C,EAAA,SAAS,4BAA4B,KAAO,EAAA;AAC1C,IAAM,MAAA,KAAA,GAAQ,KAAK,MAAO,EAAA;AAC1B,IAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAAA,MAAK,KAAQ,GAAA,KAAA;AACb,IAAAA,KAAAA,CAAK,aAAa,mBAAoB,CAAA,IAAA,CAAK,eAAe,KAAK,CAAC,EAAE,WAAY,EAAA;AAAA;AAOhF,EAAA,SAAS,2BAA8B,GAAA;AACrC,IAAMoD,MAAAA,KAAAA,GAAO,KAAK,MAAO,EAAA;AACzB,IAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAAA,MAAK,KAAQoD,GAAAA,KAAAA;AAAA;AAOf,EAAA,SAAS,iCAAoC,GAAA;AAC3C,IAAMA,MAAAA,KAAAA,GAAO,KAAK,MAAO,EAAA;AACzB,IAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAAA,MAAK,GAAMoD,GAAAA,KAAAA;AAAA;AAOb,EAAA,SAAS,yBAAyB,KAAO,EAAA;AACvC,IAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAI,IAAA,CAACA,MAAK,KAAO,EAAA;AACf,MAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,cAAe,CAAA,KAAK,CAAE,CAAA,MAAA;AACzC,MAAAA,MAAK,KAAQ,GAAA,KAAA;AAAA;AACf;AAOF,EAAA,SAAS,uBAA0B,GAAA;AACjC,IAAA,IAAA,CAAK,KAAK,4BAA+B,GAAA,IAAA;AAAA;AAO3C,EAAA,SAAS,gCAAgC,KAAO,EAAA;AAC9C,IAAA,MAAMA,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAAA,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,cAAe,CAAA,KAAK,EAAE,WAAY,CAAA,CAAC,CAAM,KAAA,EAAA,GAAK,CAAI,GAAA,CAAA;AAAA;AAOtE,EAAA,SAAS,mBAAsB,GAAA;AAC7B,IAAA,IAAA,CAAK,KAAK,4BAA+B,GAAA,KAAA,CAAA;AAAA;AAQ3C,EAAA,SAAS,YAAY,KAAO,EAAA;AAC1B,IAAA,MAAMA,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAE7C,IAAA,MAAM,WAAWA,KAAK,CAAA,QAAA;AACtB,IAAA,IAAI,IAAO,GAAA,QAAA,CAAS,QAAS,CAAA,MAAA,GAAS,CAAC,CAAA;AACvC,IAAA,IAAI,CAAC,IAAA,IAAQ,IAAK,CAAA,IAAA,KAAS,MAAQ,EAAA;AAEjC,MAAA,IAAA,GAAOrB,KAAK,EAAA;AACZ,MAAA,IAAA,CAAK,QAAW,GAAA;AAAA,QACd,KAAA,EAAOuH,MAAM,CAAA,KAAA,CAAM,KAAK,CAAA;AAAA;AAAA,QAExB,GAAK,EAAA,KAAA;AAAA,OACP;AACA,MAAA,QAAA,CAAS,KAAK,IAAI,CAAA;AAAA;AAEpB,IAAK,IAAA,CAAA,KAAA,CAAM,KAAK,IAAI,CAAA;AAAA;AAQtB,EAAA,SAAS,WAAW,KAAO,EAAA;AACzB,IAAM,MAAA,IAAA,GAAO,IAAK,CAAA,KAAA,CAAM,GAAI,EAAA;AAC5B,IAAK,IAAA,CAAA,KAAA,IAAS,IAAK,CAAA,cAAA,CAAe,KAAK,CAAA;AACvC,IAAA,IAAA,CAAK,QAAS,CAAA,GAAA,GAAMA,MAAM,CAAA,KAAA,CAAM,GAAG,CAAA;AAAA;AAQrC,EAAA,SAAS,iBAAiB,KAAO,EAAA;AAC/B,IAAA,MAAM,UAAU,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAEhD,IAAI,IAAA,IAAA,CAAK,KAAK,WAAa,EAAA;AACzB,MAAA,MAAM,OAAO,OAAQ,CAAA,QAAA,CAAS,OAAQ,CAAA,QAAA,CAAS,SAAS,CAAC,CAAA;AACzD,MAAA,IAAA,CAAK,QAAS,CAAA,GAAA,GAAMA,MAAM,CAAA,KAAA,CAAM,GAAG,CAAA;AACnC,MAAA,IAAA,CAAK,KAAK,WAAc,GAAA,KAAA,CAAA;AACxB,MAAA;AAAA;AAEF,IAAI,IAAA,CAAC,KAAK,IAAK,CAAA,4BAAA,IAAgC,OAAO,cAAe,CAAA,QAAA,CAAS,OAAQ,CAAA,IAAI,CAAG,EAAA;AAC3F,MAAY,WAAA,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AAC5B,MAAW,UAAA,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AAAA;AAC7B;AAQF,EAAA,SAAS,eAAkB,GAAA;AACzB,IAAA,IAAA,CAAK,KAAK,WAAc,GAAA,IAAA;AAAA;AAQ1B,EAAA,SAAS,cAAiB,GAAA;AACxB,IAAM9C,MAAAA,KAAAA,GAAO,KAAK,MAAO,EAAA;AACzB,IAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAAA,MAAK,KAAQoD,GAAAA,KAAAA;AAAA;AAQf,EAAA,SAAS,cAAiB,GAAA;AACxB,IAAMA,MAAAA,KAAAA,GAAO,KAAK,MAAO,EAAA;AACzB,IAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAAA,MAAK,KAAQoD,GAAAA,KAAAA;AAAA;AAQf,EAAA,SAAS,cAAiB,GAAA;AACxB,IAAMA,MAAAA,KAAAA,GAAO,KAAK,MAAO,EAAA;AACzB,IAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAAA,MAAK,KAAQoD,GAAAA,KAAAA;AAAA;AAQf,EAAA,SAAS,UAAa,GAAA;AACpB,IAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAK7C,IAAI,IAAA,IAAA,CAAK,KAAK,WAAa,EAAA;AAEzB,MAAM,MAAA,aAAA,GAAgB,IAAK,CAAA,IAAA,CAAK,aAAiB,IAAA,UAAA;AACjD,MAAAA,MAAK,IAAQ,IAAA,WAAA;AAEb,MAAAA,MAAK,aAAgB,GAAA,aAAA;AAErB,MAAA,OAAOA,KAAK,CAAA,GAAA;AACZ,MAAA,OAAOA,KAAK,CAAA,KAAA;AAAA,KACP,MAAA;AAEL,MAAA,OAAOA,KAAK,CAAA,UAAA;AAEZ,MAAA,OAAOA,KAAK,CAAA,KAAA;AAAA;AAEd,IAAA,IAAA,CAAK,KAAK,aAAgB,GAAA,KAAA,CAAA;AAAA;AAQ5B,EAAA,SAAS,WAAc,GAAA;AACrB,IAAA,MAAMA,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAK7C,IAAI,IAAA,IAAA,CAAK,KAAK,WAAa,EAAA;AAEzB,MAAM,MAAA,aAAA,GAAgB,IAAK,CAAA,IAAA,CAAK,aAAiB,IAAA,UAAA;AACjD,MAAAA,MAAK,IAAQ,IAAA,WAAA;AAEb,MAAAA,MAAK,aAAgB,GAAA,aAAA;AAErB,MAAA,OAAOA,KAAK,CAAA,GAAA;AACZ,MAAA,OAAOA,KAAK,CAAA,KAAA;AAAA,KACP,MAAA;AAEL,MAAA,OAAOA,KAAK,CAAA,UAAA;AAEZ,MAAA,OAAOA,KAAK,CAAA,KAAA;AAAA;AAEd,IAAA,IAAA,CAAK,KAAK,aAAgB,GAAA,KAAA,CAAA;AAAA;AAQ5B,EAAA,SAAS,gBAAgB,KAAO,EAAA;AAC9B,IAAM8H,MAAAA,OAAAA,GAAS,IAAK,CAAA,cAAA,CAAe,KAAK,CAAA;AACxC,IAAA,MAAM,WAAW,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAGjD,IAAS,QAAA,CAAA,KAAA,GAAQ,aAAaA,OAAM,CAAA;AAEpC,IAAA,QAAA,CAAS,UAAa,GAAA,mBAAA,CAAoBA,OAAM,CAAA,CAAE,WAAY,EAAA;AAAA;AAQhE,EAAA,SAAS,WAAc,GAAA;AACrB,IAAA,MAAM,WAAW,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AACjD,IAAM7G,MAAAA,MAAAA,GAAQ,KAAK,MAAO,EAAA;AAC1B,IAAA,MAAMjB,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAE7C,IAAA,IAAA,CAAK,KAAK,WAAc,GAAA,IAAA;AACxB,IAAIA,IAAAA,KAAAA,CAAK,SAAS,MAAQ,EAAA;AAExB,MAAA,MAAM,WAAW,QAAS,CAAA,QAAA;AAC1B,MAAAA,MAAK,QAAW,GAAA,QAAA;AAAA,KACX,MAAA;AACL,MAAAA,MAAK,GAAMiB,GAAAA,MAAAA;AAAA;AACb;AAQF,EAAA,SAAS,+BAAkC,GAAA;AACzC,IAAMmC,MAAAA,KAAAA,GAAO,KAAK,MAAO,EAAA;AACzB,IAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAAA,MAAK,GAAMoD,GAAAA,KAAAA;AAAA;AAQb,EAAA,SAAS,yBAA4B,GAAA;AACnC,IAAMA,MAAAA,KAAAA,GAAO,KAAK,MAAO,EAAA;AACzB,IAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAAA,MAAK,KAAQoD,GAAAA,KAAAA;AAAA;AAQf,EAAA,SAAS,cAAiB,GAAA;AACxB,IAAA,IAAA,CAAK,KAAK,WAAc,GAAA,KAAA,CAAA;AAAA;AAQ1B,EAAA,SAAS,gBAAmB,GAAA;AAC1B,IAAA,IAAA,CAAK,KAAK,aAAgB,GAAA,WAAA;AAAA;AAQ5B,EAAA,SAAS,sBAAsB,KAAO,EAAA;AACpC,IAAM,MAAA,KAAA,GAAQ,KAAK,MAAO,EAAA;AAC1B,IAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAG7C,IAAAA,MAAK,KAAQ,GAAA,KAAA;AAEb,IAAAA,KAAAA,CAAK,aAAa,mBAAoB,CAAA,IAAA,CAAK,eAAe,KAAK,CAAC,EAAE,WAAY,EAAA;AAC9E,IAAA,IAAA,CAAK,KAAK,aAAgB,GAAA,MAAA;AAAA;AAQ5B,EAAA,SAAS,+BAA+B,KAAO,EAAA;AAC7C,IAAK,IAAA,CAAA,IAAA,CAAK,yBAAyB,KAAM,CAAA,IAAA;AAAA;AAO3C,EAAA,SAAS,8BAA8B,KAAO,EAAA;AAC5C,IAAMoD,MAAAA,KAAAA,GAAO,IAAK,CAAA,cAAA,CAAe,KAAK,CAAA;AACtC,IAAM,MAAA,IAAA,GAAO,KAAK,IAAK,CAAA,sBAAA;AAEvB,IAAInC,IAAAA,MAAAA;AACJ,IAAA,IAAI,IAAM,EAAA;AACR,MAAAA,SAAQ,+BAAgCmC,CAAAA,KAAAA,EAAM,IAAS,KAAA,iCAAA,GAAoC,KAAK,EAAE,CAAA;AAClG,MAAA,IAAA,CAAK,KAAK,sBAAyB,GAAA,KAAA,CAAA;AAAA,KAC9B,MAAA;AACL,MAAM,MAAA,MAAA,GAAS,8BAA8BA,KAAI,CAAA;AACjD,MAAAnC,MAAQ,GAAA,MAAA;AAAA;AAEV,IAAA,MAAM,OAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAA,IAAA,CAAK,KAASA,IAAAA,MAAAA;AAAA;AAOhB,EAAA,SAAS,yBAAyB,KAAO,EAAA;AACvC,IAAM,MAAA,IAAA,GAAO,IAAK,CAAA,KAAA,CAAM,GAAI,EAAA;AAC5B,IAAA,IAAA,CAAK,QAAS,CAAA,GAAA,GAAMiF,MAAM,CAAA,KAAA,CAAM,GAAG,CAAA;AAAA;AAOrC,EAAA,SAAS,uBAAuB,KAAO,EAAA;AACrC,IAAW,UAAA,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AAC3B,IAAA,MAAMlG,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAAA,KAAK,CAAA,GAAA,GAAM,IAAK,CAAA,cAAA,CAAe,KAAK,CAAA;AAAA;AAOtC,EAAA,SAAS,oBAAoB,KAAO,EAAA;AAClC,IAAW,UAAA,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AAC3B,IAAA,MAAMA,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,IAAAA,KAAK,CAAA,GAAA,GAAM,SAAY,GAAA,IAAA,CAAK,eAAe,KAAK,CAAA;AAAA;AAQlD,EAAA,SAASsI,WAAa,GAAA;AACpB,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,YAAA;AAAA,MACN,UAAU;AAAC,KACb;AAAA;AAIF,EAAA,SAAS,QAAW,GAAA;AAClB,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,MAAA;AAAA,MACN,IAAM,EAAA,IAAA;AAAA,MACN,IAAM,EAAA,IAAA;AAAA,MACN,KAAO,EAAA;AAAA,KACT;AAAA;AAIF,EAAA,SAASC,SAAW,GAAA;AAClB,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,YAAA;AAAA,MACN,KAAO,EAAA;AAAA,KACT;AAAA;AAIF,EAAA,SAASd,WAAa,GAAA;AACpB,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,YAAA;AAAA,MACN,UAAY,EAAA,EAAA;AAAA,MACZ,KAAO,EAAA,IAAA;AAAA,MACP,KAAO,EAAA,IAAA;AAAA,MACP,GAAK,EAAA;AAAA,KACP;AAAA;AAIF,EAAA,SAASe,SAAW,GAAA;AAClB,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,UAAA;AAAA,MACN,UAAU;AAAC,KACb;AAAA;AAIF,EAAA,SAASd,QAAU,GAAA;AACjB,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,SAAA;AAAA;AAAA,MAEN,KAAO,EAAA,CAAA;AAAA,MACP,UAAU;AAAC,KACb;AAAA;AAIF,EAAA,SAASe,UAAY,GAAA;AACnB,IAAO,OAAA;AAAA,MACL,IAAM,EAAA;AAAA,KACR;AAAA;AAIF,EAAA,SAASC,KAAO,GAAA;AACd,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,MAAA;AAAA,MACN,KAAO,EAAA;AAAA,KACT;AAAA;AAIF,EAAA,SAASC,MAAQ,GAAA;AACf,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,OAAA;AAAA,MACN,KAAO,EAAA,IAAA;AAAA,MACP,GAAK,EAAA,EAAA;AAAA,MACL,GAAK,EAAA;AAAA,KACP;AAAA;AAIF,EAAA,SAASN,KAAO,GAAA;AACd,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,MAAA;AAAA,MACN,KAAO,EAAA,IAAA;AAAA,MACP,GAAK,EAAA,EAAA;AAAA,MACL,UAAU;AAAC,KACb;AAAA;AAOF,EAAA,SAAS9H,MAAK,KAAO,EAAA;AACnB,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,MAAA;AAAA,MACN,OAAA,EAAS,MAAM,IAAS,KAAA,aAAA;AAAA,MACxB,KAAO,EAAA,IAAA;AAAA,MACP,QAAQ,KAAM,CAAA,OAAA;AAAA,MACd,UAAU;AAAC,KACb;AAAA;AAOF,EAAA,SAASqI,UAAS,KAAO,EAAA;AACvB,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,UAAA;AAAA,MACN,QAAQ,KAAM,CAAA,OAAA;AAAA,MACd,OAAS,EAAA,IAAA;AAAA,MACT,UAAU;AAAC,KACb;AAAA;AAIF,EAAA,SAASjB,UAAY,GAAA;AACnB,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,WAAA;AAAA,MACN,UAAU;AAAC,KACb;AAAA;AAIF,EAAA,SAASkB,OAAS,GAAA;AAChB,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,QAAA;AAAA,MACN,UAAU;AAAC,KACb;AAAA;AAIF,EAAA,SAASlK,KAAO,GAAA;AACd,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,MAAA;AAAA,MACN,KAAO,EAAA;AAAA,KACT;AAAA;AAIF,EAAA,SAASmK,cAAgB,GAAA;AACvB,IAAO,OAAA;AAAA,MACL,IAAM,EAAA;AAAA,KACR;AAAA;AAEJ;AAUA,SAAS5C,OAAM,CAAG,EAAA;AAChB,EAAO,OAAA;AAAA,IACL,MAAM,CAAE,CAAA,IAAA;AAAA,IACR,QAAQ,CAAE,CAAA,MAAA;AAAA,IACV,QAAQ,CAAE,CAAA;AAAA,GACZ;AACF;AAOA,SAAS,SAAA,CAAU,UAAU,UAAY,EAAA;AACvC,EAAA,IAAI3E,MAAQ,GAAA,CAAA,CAAA;AACZ,EAAO,OAAA,EAAEA,MAAQ,GAAA,UAAA,CAAW,MAAQ,EAAA;AAClC,IAAMN,MAAAA,MAAAA,GAAQ,WAAWM,MAAK,CAAA;AAC9B,IAAI,IAAA,KAAA,CAAM,OAAQN,CAAAA,MAAK,CAAG,EAAA;AACxB,MAAA,SAAA,CAAU,UAAUA,MAAK,CAAA;AAAA,KACpB,MAAA;AACL,MAAA,SAAA,CAAU,UAAUA,MAAK,CAAA;AAAA;AAC3B;AAEJ;AAOA,SAAS,SAAA,CAAU,UAAU6F,UAAW,EAAA;AAEtC,EAAI,IAAA,GAAA;AACJ,EAAA,KAAK,OAAOA,UAAW,EAAA;AACrB,IAAA,IAAIF,IAAI,CAAA,IAAA,CAAKE,UAAW,EAAA,GAAG,CAAG,EAAA;AAC5B,MAAA,QAAQ,GAAK;AAAA,QACX,KAAK,gBACH,EAAA;AACE,UAAM,MAAA,KAAA,GAAQA,WAAU,GAAG,CAAA;AAC3B,UAAA,IAAI,KAAO,EAAA;AACT,YAAA,QAAA,CAAS,GAAG,CAAA,CAAE,IAAK,CAAA,GAAG,KAAK,CAAA;AAAA;AAE7B,UAAA;AAAA;AACF,QACF,KAAK,YACH,EAAA;AACE,UAAM,MAAA,KAAA,GAAQA,WAAU,GAAG,CAAA;AAC3B,UAAA,IAAI,KAAO,EAAA;AACT,YAAA,QAAA,CAAS,GAAG,CAAA,CAAE,IAAK,CAAA,GAAG,KAAK,CAAA;AAAA;AAE7B,UAAA;AAAA;AACF,QACF,KAAK,OAAA;AAAA,QACL,KAAK,MACH,EAAA;AACE,UAAM,MAAA,KAAA,GAAQA,WAAU,GAAG,CAAA;AAC3B,UAAA,IAAI,KAAO,EAAA;AACT,YAAA,MAAA,CAAO,MAAO,CAAA,QAAA,CAAS,GAAG,CAAA,EAAG,KAAK,CAAA;AAAA;AAEpC,UAAA;AAAA;AACF;AAEJ;AACF;AAEJ;AAGA,SAAS,cAAA,CAAe,MAAM,KAAO,EAAA;AACnC,EAAA,IAAI,IAAM,EAAA;AACR,IAAA,MAAM,IAAI,KAAM,CAAA,gBAAA,GAAmB,IAAK,CAAA,IAAA,GAAO,QAAQ,iBAAkB,CAAA;AAAA,MACvE,OAAO,IAAK,CAAA,KAAA;AAAA,MACZ,KAAK,IAAK,CAAA;AAAA,KACX,CAAI,GAAA,yBAAA,GAA4B,KAAM,CAAA,IAAA,GAAO,QAAQ,iBAAkB,CAAA;AAAA,MACtE,OAAO,KAAM,CAAA,KAAA;AAAA,MACb,KAAK,KAAM,CAAA;AAAA,KACZ,IAAI,WAAW,CAAA;AAAA,GACX,MAAA;AACL,IAAA,MAAM,IAAI,KAAM,CAAA,mCAAA,GAAsC,KAAM,CAAA,IAAA,GAAO,QAAQ,iBAAkB,CAAA;AAAA,MAC3F,OAAO,KAAM,CAAA,KAAA;AAAA,MACb,KAAK,KAAM,CAAA;AAAA,KACZ,IAAI,iBAAiB,CAAA;AAAA;AAE1B;;;ACnoCe,SAAR,YAA6BpL,QAAS,EAAA;AAG3C,EAAA,MAAM+H,KAAO,GAAA,IAAA;AAEb,EAAAA,MAAK,MAAS,GAAA,MAAA;AAKd,EAAA,SAAS,OAAO,GAAK,EAAA;AACnB,IAAA,OAAO,aAAa,GAAK,EAAA;AAAA,MACvB,GAAGA,KAAK,CAAA,IAAA,CAAK,UAAU,CAAA;AAAA,MACvB,GAAG/H,QAAAA;AAAA;AAAA;AAAA;AAAA,MAIH,UAAY+H,EAAAA,KAAAA,CAAK,IAAK,CAAA,qBAAqB,KAAK,EAAC;AAAA,MACjD,eAAiBA,EAAAA,KAAAA,CAAK,IAAK,CAAA,wBAAwB,KAAK;AAAC,KAC1D,CAAA;AAAA;AAEL;;;ACvBO,SAAS,yBAA4B,GAAA;AAC1C,EAAO,OAAA;AAAA,IACL,KAAO,EAAA;AAAA,MACL,iBAAmB,EAAA,sBAAA;AAAA,MACnB,iBAAmB,EAAA;AAAA,KACrB;AAAA,IACA,IAAM,EAAA;AAAA,MACJ,iBAAmB,EAAA,iBAAA;AAAA,MACnB,sBAAwB,EAAA,qBAAA;AAAA,MACxB,iBAAmB,EAAA,iBAAA;AAAA,MACnB,sBAAwB,EAAA;AAAA;AAC1B,GACF;AACF;AASO,SAAS,uBAA0B,GAAA;AACxC,EAAO,OAAA;AAAA,IACL,QAAU,EAAA;AAAA,MACR,iBAAmB,EAAA,mBAAA;AAAA,MACnB,iBAAmB,EAAA;AAAA,KACrB;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,EAAC,SAAW,EAAA,GAAA,EAAK,WAAa,EAAA,CAAC,UAAU,CAAC,EAAA;AAAA,MAC1C,EAAC,OAAA,EAAS,IAAM,EAAA,SAAA,EAAW,GAAG;AAAA;AAChC,GACF;AACF;AAMA,SAAS,uBAAuB,KAAO,EAAA;AACrC,EAAA,IAAA,CAAK,MAAM,EAAC,IAAA,EAAM,qBAAqB,KAAO,EAAA,EAAA,IAAK,KAAK,CAAA;AACxD,EAAA,IAAA,CAAK,MAAO,EAAA;AACd;AAMA,SAAS,uBAAuB,KAAO,EAAA;AACrC,EAAA,IAAA,CAAK,MAAM,EAAC,IAAA,EAAM,qBAAqB,KAAO,EAAA,EAAA,IAAK,KAAK,CAAA;AACxD,EAAA,IAAA,CAAK,MAAO,EAAA;AACd;AAMA,SAAS,kBAAkB,KAAO,EAAA;AAChC,EAAMxC,MAAAA,MAAAA,GAAQ,KAAK,MAAO,EAAA;AAC1B,EAAA,MAAM,SAAS,KAAM,CAAA,MAAA;AACrB,EAAA,MAAMjB,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,EAAA,EAAA,CAAOA,KAAK,CAAA,IAAA,KAAS,mBAAuBA,IAAAA,KAAAA,CAAK,SAAS,mBAAmB,CAAA;AAC7E,EAAA,IAAA,CAAK,KAAK,KAAK,CAAA;AACf,EAAAA,MAAK,KAAQiB,GAAAA,MAAAA;AAEb,EAAA,IAAI,MAAQ,EAAA;AACV,IAAAjB,KAAAA,CAAK,IAAO,GAAA,EAAC,MAAM,EAAA;AAAA;AAEvB;AAMA,SAAS,sBAAsB,KAAO,EAAA;AACpC,EAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,IAAK,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AACvC,EAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,IAAK,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AACxC;AAaA,SAAS,mBAAA,CAAoBA,KAAM,EAAA,MAAA,EAAQ,KAAO,EAAA;AAChD,EAAMiB,MAAAA,MAAAA,GAAQjB,MAAK,KAAS,IAAA,EAAA;AAC5B,EAAA,MAAM,SAAS,KAAM,CAAA,WAAA,CAAYiB,QAAO,SAAU,IAAA,EAAMM,QAAO,KAAO,EAAA;AAKpE,IAAA,OAAA,CAAQA,MAAU,KAAA,CAAA,IAAK,KAAQ,GAAA,EAAA,GAAK,IAAQ,IAAA,IAAA;AAAA,GAC7C,CAAA;AACD,EAAA,OAAO,MAAM,MAAS,GAAA,GAAA;AACxB;;;AC7GO,SAAS,MAAA,CAAON,QAAO,SAAW,EAAA;AACvC,EAAM,MAAA,MAAA,GAAS,OAAOA,MAAK,CAAA;AAE3B,EAAI,IAAA,OAAO,cAAc,QAAU,EAAA;AACjC,IAAM,MAAA,IAAI,UAAU,oBAAoB,CAAA;AAAA;AAG1C,EAAA,IAAI,KAAQ,GAAA,CAAA;AACZ,EAAIM,IAAAA,MAAAA,GAAQ,MAAO,CAAA,OAAA,CAAQ,SAAS,CAAA;AAEpC,EAAA,OAAOA,WAAU,CAAI,CAAA,EAAA;AACnB,IAAA,KAAA,EAAA;AACA,IAAAA,SAAQ,MAAO,CAAA,OAAA,CAAQ,SAAWA,EAAAA,MAAAA,GAAQ,UAAU,MAAM,CAAA;AAAA;AAG5D,EAAO,OAAA,KAAA;AACT;;;ACrBO,IAAM,uBAA0B,GAAA;AAAA,EACrC,OAAA;AAAA,EACA,KAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,MAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA,KAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,MAAA;AAAA,EACA,IAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,MAAA;AAAA,EACA,IAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA,MAAA;AAAA,EACA,MAAA;AAAA,EACA,KAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,OAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,KAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,MAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA,KAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,KAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA,IAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA,MAAA;AAAA,EACA,OAAA;AAAA,EACA,IAAA;AAAA,EACA,MAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,MAAA;AAAA,EACA,KAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,MAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA,MAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,MAAA;AAAA,EACA,OAAA;AAAA,EACA,KAAA;AAAA,EACA,MAAA;AAAA,EACA,KAAA;AAAA,EACA,MAAA;AAAA,EACA,MAAA;AAAA,EACA,MAAA;AAAA,EACA,OAAA;AAAA,EACA,OAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,KAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA,KAAA;AAAA,EACA;AACF,CAAA;;;AC3GO,IAAM,yBAA4B,GAAA;AAAA,EACvC,CAAG,EAAA,QAAA;AAAA,EACH,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA,QAAA;AAAA,EACL,GAAK,EAAA;AACP,CAAA;;;AC3BO,SAAS,UAAU,SAAW,EAAA;AACnC,EAAA,MAAM7E,QACJ,OAAO,SAAA,KAAc,WAAW,SAAU,CAAA,UAAA,CAAW,CAAC,CAAI,GAAA,SAAA;AAE5D,EAAOA,OAAAA,KAAAA,IAAQ,MAAMA,KAAQ,IAAA,EAAA;AAC/B;;;ACLO,SAAS,cAAc,SAAW,EAAA;AACvC,EAAA,MAAMA,QACJ,OAAO,SAAA,KAAc,WAAW,SAAU,CAAA,UAAA,CAAW,CAAC,CAAI,GAAA,SAAA;AAE5D,EACGA,OAAAA,KAAAA,IAAQ,EAAcA,IAAAA,KAAAA,IAAQ,GAC9BA,IAAAA,KAAAA,IAAQ,MAAcA,KAAQ,IAAA,EAAA,IAC9BA,KAAQ,IAAA,EAAA,IAAcA,KAAQ,IAAA,EAAA;AAEnC;;;ACTO,SAAS,eAAe,SAAW,EAAA;AACxC,EAAA,MAAMA,QACJ,OAAO,SAAA,KAAc,WAAW,SAAU,CAAA,UAAA,CAAW,CAAC,CAAI,GAAA,SAAA;AAE5D,EAAA,OACGA,SAAQ,EAAMA,IAAAA,KAAAA,IAAQ,GACtBA,IAAAA,KAAAA,IAAQ,MAAMA,KAAQ,IAAA,EAAA;AAE3B;;;ACLO,SAAS,iBAAiB,SAAW,EAAA;AAC1C,EAAA,OAAO,cAAe,CAAA,SAAS,CAAK,IAAA,SAAA,CAAU,SAAS,CAAA;AACzD;;;ACAA,IAAM,eAAe,MAAO,CAAA,YAAA;AAG5B,IAAM,QAAW,GAAA;AAAA,EACf,EAAA;AAAA;AAAA,EAEA,8DAAA;AAAA;AAAA,EAEA,gEAAA;AAAA;AAAA,EAEA,4CAAA;AAAA;AAAA,EAEA,8CAAA;AAAA;AAAA,EAEA,0CAAA;AAAA;AAAA,EAEA,mDAAA;AAAA;AAAA,EAEA;AACF,CAAA;AAQO,SAAS,aAAcuE,CAAAA,MAAAA,EAAOvF,QAAU,GAAA,EAAI,EAAA;AACjD,EAAM,MAAA,UAAA,GACJ,OAAOA,QAAAA,CAAQ,UAAe,KAAA,QAAA,GAC1BA,SAAQ,UAAW,CAAA,UAAA,CAAW,CAAC,CAAA,GAC/BA,QAAQ,CAAA,UAAA;AAEd,EAAA,MAAM,SAAS,EAAC;AAChB,EAAA,IAAI6F,MAAQ,GAAA,CAAA;AACZ,EAAA,IAAI,KAAQ,GAAA,CAAA,CAAA;AACZ,EAAA,IAAI,KAAQ,GAAA,EAAA;AAEZ,EAAI2E,IAAAA,MAAAA;AAEJ,EAAI8C,IAAAA,OAAAA;AAEJ,EAAA,IAAItN,SAAQ,QAAU,EAAA;AACpB,IAAA,IAAI,OAAWA,IAAAA,QAAAA,CAAQ,QAAY,IAAA,QAAA,IAAYA,SAAQ,QAAU,EAAA;AAE/D,MAAAsN,OAAAA,GAAStN,SAAQ,QAAS,CAAA,MAAA;AAE1B,MAAAwK,MAAAA,GAAQxK,SAAQ,QAAS,CAAA,KAAA;AAAA,KACpB,MAAA;AACL,MAAAwK,SAAQxK,QAAQ,CAAA,QAAA;AAAA;AAClB;AAGF,EAAA,IAAI,IAAQwK,GAAAA,CAAAA,MAAAA,GAAQA,MAAM,CAAA,IAAA,GAAO,CAAM,KAAA,CAAA;AACvC,EAAA,IAAI,MAAUA,GAAAA,CAAAA,MAAAA,GAAQA,MAAM,CAAA,MAAA,GAAS,CAAM,KAAA,CAAA;AAG3C,EAAA,IAAIc,YAAW,GAAI,EAAA;AAEnB,EAAI,IAAA,SAAA;AAGJ,EAAAzF,MAAAA,EAAAA;AAEA,EAAO,OAAA,EAAEA,MAASN,IAAAA,MAAAA,CAAM,MAAQ,EAAA;AAE9B,IAAA,IAAI,cAAc,EAAe,EAAA;AAC/B,MAAA,MAAA,GAAA,CAAU+H,OAASA,GAAAA,OAAAA,CAAO,KAAK,CAAA,GAAI,CAAM,KAAA,CAAA;AAAA;AAG3C,IAAY/H,SAAAA,GAAAA,MAAAA,CAAM,WAAWM,MAAK,CAAA;AAElC,IAAA,IAAI,cAAc,EAAc,EAAA;AAC9B,MAAA,MAAM,SAAYN,GAAAA,MAAAA,CAAM,UAAWM,CAAAA,MAAAA,GAAQ,CAAC,CAAA;AAG5C,MAAA,IACE,cAAc,CACd,IAAA,SAAA,KAAc,MACd,SAAc,KAAA,EAAA,IACd,cAAc,EACd,IAAA,SAAA,KAAc,EACd,IAAA,SAAA,KAAc,MACd,MAAO,CAAA,KAAA,CAAM,SAAS,CACrB,IAAA,UAAA,IAAc,cAAc,UAC7B,EAAA;AAIA,QAAA,KAAA,IAAS,aAAa,SAAS,CAAA;AAC/B,QAAA,MAAA,EAAA;AACA,QAAA;AAAA;AAGF,MAAA,MAAMlD,SAAQkD,MAAQ,GAAA,CAAA;AACtB,MAAA,IAAI,KAAQlD,GAAAA,MAAAA;AACZ,MAAA,IAAI,GAAMA,GAAAA,MAAAA;AAEV,MAAI,IAAA,IAAA;AAEJ,MAAA,IAAI,cAAc,EAAc,EAAA;AAE9B,QAAA,GAAA,GAAM,EAAE,KAAA;AAGR,QAAM4K,MAAAA,UAAAA,GAAYhI,MAAM,CAAA,UAAA,CAAW,GAAG,CAAA;AAEtC,QAAIgI,IAAAA,UAAAA,KAAc,EAAgBA,IAAAA,UAAAA,KAAc,GAAe,EAAA;AAE7D,UAAO,IAAA,GAAA,aAAA;AACP,UAAA,GAAA,GAAM,EAAE,KAAA;AAAA,SACH,MAAA;AAEL,UAAO,IAAA,GAAA,SAAA;AAAA;AACT,OACK,MAAA;AAEL,QAAO,IAAA,GAAA,OAAA;AAAA;AAGT,MAAA,IAAI,4BAA+B,GAAA,EAAA;AACnC,MAAA,IAAIC,mBAAqB,GAAA,EAAA;AACzB,MAAA,IAAI,UAAa,GAAA,EAAA;AAIjB,MAAA,MAAM,OACJ,IAAS,KAAA,OAAA,GACL,gBACA,GAAA,IAAA,KAAS,YACT,SACA,GAAA,aAAA;AAEN,MAAA,GAAA,EAAA;AAEA,MAAO,OAAA,EAAE,GAAOjI,IAAAA,MAAAA,CAAM,MAAQ,EAAA;AAC5B,QAAMgI,MAAAA,UAAAA,GAAYhI,MAAM,CAAA,UAAA,CAAW,GAAG,CAAA;AAEtC,QAAI,IAAA,CAAC,IAAKgI,CAAAA,UAAS,CAAG,EAAA;AACpB,UAAA;AAAA;AAGF,QAAA,UAAA,IAAc,aAAaA,UAAS,CAAA;AAKpC,QAAA,IAAI,IAAS,KAAA,OAAA,IAAW,uBAAwB,CAAA,QAAA,CAAS,UAAU,CAAG,EAAA;AACpE,UAA+B,4BAAA,GAAA,UAAA;AAE/B,UAAAC,mBAAAA,GAAqB,8BAA8B,UAAU,CAAA;AAAA;AAC/D;AAGF,MAAA,IAAI,UAAajI,GAAAA,MAAAA,CAAM,UAAW,CAAA,GAAG,CAAM,KAAA,EAAA;AAE3C,MAAA,IAAI,UAAY,EAAA;AACd,QAAA,GAAA,EAAA;AAEA,QAAA,MAAM,cACJ,GAAA,IAAA,KAAS,OAAU,GAAA,6BAAA,CAA8B,UAAU,CAAI,GAAA,KAAA;AAEjE,QAAA,IAAI,cAAgB,EAAA;AAClB,UAA+B,4BAAA,GAAA,UAAA;AAC/B,UAAAiI,mBAAqB,GAAA,cAAA;AAAA;AACvB;AAGF,MAAI,IAAA,IAAA,GAAO,IAAI,GAAM7K,GAAAA,MAAAA;AACrB,MAAA,IAAI,SAAY,GAAA,EAAA;AAEhB,MAAA,IAAI,CAAC,UAAA,IAAc3C,QAAQ,CAAA,aAAA,KAAkB,KAAO,EAAA,CAEpD,MAAA,IAAW,CAAC,UAAY,EAAA;AAGtB,QAAA,IAAI,SAAS,OAAS,EAAA;AACpB,UAAA,OAAA,CAAQ,GAAyB,IAAI,CAAA;AAAA;AACvC,OACF,MAAA,IAAW,SAAS,OAAS,EAAA;AAG3B,QAAI,IAAA,UAAA,IAAc,CAACwN,mBAAoB,EAAA;AACrC,UAAA,OAAA,CAAQ,GAAyB,CAAC,CAAA;AAAA,SAC7B,MAAA;AAGL,UAAA,IAAI,iCAAiC,UAAY,EAAA;AAC/C,YAAA,GAAA,GAAM,QAAQ,4BAA6B,CAAA,MAAA;AAC3C,YAAA,IAAA,GAAO,IAAI,GAAM,GAAA,KAAA;AACjB,YAAa,UAAA,GAAA,KAAA;AAAA;AAIf,UAAA,IAAI,CAAC,UAAY,EAAA;AACf,YAAM,MAAA,MAAA,GAAS,+BACX,CACA,GAAA,CAAA;AAEJ,YAAA,IAAIxN,SAAQ,SAAW,EAAA;AACrB,cAAMuN,MAAAA,UAAAA,GAAYhI,MAAM,CAAA,UAAA,CAAW,GAAG,CAAA;AAEtC,cAAA,IAAIgI,eAAc,EAAc,EAAA;AAC9B,gBAAA,OAAA,CAAQ,QAAQ,IAAI,CAAA;AACpB,gBAAAC,mBAAqB,GAAA,EAAA;AAAA,eACvB,MAAA,IAAW,gBAAiBD,CAAAA,UAAS,CAAG,EAAA;AACtC,gBAAAC,mBAAqB,GAAA,EAAA;AAAA,eAChB,MAAA;AACL,gBAAA,OAAA,CAAQ,QAAQ,IAAI,CAAA;AAAA;AACtB,aACK,MAAA;AACL,cAAA,OAAA,CAAQ,QAAQ,IAAI,CAAA;AAAA;AACtB;AACF;AAGF,QAAYA,SAAAA,GAAAA,mBAAAA;AAAA,OACP,MAAA;AACL,QAAA,IAAI,CAAC,UAAY,EAAA;AAGf,UAAA,OAAA,CAAQ,GAAkC,IAAI,CAAA;AAAA;AAKhD,QAAA,IAAI,gBAAgB,MAAO,CAAA,QAAA;AAAA,UACzB,UAAA;AAAA,UACA,IAAA,KAAS,gBAAgB,EAAK,GAAA;AAAA,SAChC;AAIA,QAAI,IAAA,UAAA,CAAW,aAAa,CAAG,EAAA;AAC7B,UAAA,OAAA,CAAQ,GAA8B,IAAI,CAAA;AAC1C,UAAY,SAAA,GAAA,YAAA;AAAA,YAAa;AAAA;AAAA,WAAe;AAAA,SAC1C,MAAA,IAAW,iBAAiB,yBAA2B,EAAA;AAGrD,UAAA,OAAA,CAAQ,GAA8B,IAAI,CAAA;AAC1C,UAAA,SAAA,GAAY,0BAA0B,aAAa,CAAA;AAAA,SAC9C,MAAA;AAEL,UAAA,IAAI,MAAS,GAAA,EAAA;AAGb,UAAI,IAAA,UAAA,CAAW,aAAa,CAAG,EAAA;AAC7B,YAAA,OAAA,CAAQ,GAA8B,IAAI,CAAA;AAAA;AAI5C,UAAA,IAAI,gBAAgB,KAAQ,EAAA;AAC1B,YAAiB,aAAA,IAAA,KAAA;AACjB,YAAA,MAAA,IAAU,YAAc,CAAA,aAAA,MAAmB,EAAK,GAAA,IAAA,CAAA,GAAU,KAAM,CAAA;AAChE,YAAA,aAAA,GAAgB,QAAU,aAAgB,GAAA,IAAA;AAAA;AAG5C,UAAY,SAAA,GAAA,MAAA,GAAS,aAAa,aAAa,CAAA;AAAA;AACjD;AAKF,MAAA,IAAI,SAAW,EAAA;AACb,QAAM,KAAA,EAAA;AAEN,QAAAlC,YAAW,GAAI,EAAA;AACf,QAAAzF,SAAQ,GAAM,GAAA,CAAA;AACd,QAAA,MAAA,IAAU,MAAMlD,MAAQ,GAAA,CAAA;AACxB,QAAA,MAAA,CAAO,KAAK,SAAS,CAAA;AACrB,QAAA,MAAM,OAAO,GAAI,EAAA;AACjB,QAAK,IAAA,CAAA,MAAA,EAAA;AAEL,QAAA,IAAI3C,SAAQ,SAAW,EAAA;AACrB,UAAAA,SAAQ,SAAU,CAAA,IAAA;AAAA,YAChBA,QAAQ,CAAA,gBAAA;AAAA,YACR,SAAA;AAAA,YACA,EAAC,KAAA,EAAOsL,SAAU,EAAA,GAAA,EAAK,IAAI,EAAA;AAAA,YAC3B/F,MAAM,CAAA,KAAA,CAAM5C,MAAQ,GAAA,CAAA,EAAG,GAAG;AAAA,WAC5B;AAAA;AAGF,QAAA2I,SAAW,GAAA,IAAA;AAAA,OACN,MAAA;AAKL,QAAA,UAAA,GAAa/F,MAAM,CAAA,KAAA,CAAM5C,MAAQ,GAAA,CAAA,EAAG,GAAG,CAAA;AACvC,QAAS,KAAA,IAAA,UAAA;AACT,QAAA,MAAA,IAAU,UAAW,CAAA,MAAA;AACrB,QAAAkD,SAAQ,GAAM,GAAA,CAAA;AAAA;AAChB,KACK,MAAA;AAEL,MAAA,IAAI,cAAc,EAAe,EAAA;AAC/B,QAAA,IAAA,EAAA;AACA,QAAA,KAAA,EAAA;AACA,QAAS,MAAA,GAAA,CAAA;AAAA;AAGX,MAAI,IAAA,MAAA,CAAO,KAAM,CAAA,SAAS,CAAG,EAAA;AAC3B,QAAM,KAAA,EAAA;AAAA,OACD,MAAA;AACL,QAAA,KAAA,IAAS,aAAa,SAAS,CAAA;AAC/B,QAAA,MAAA,EAAA;AAAA;AACF;AACF;AAIF,EAAO,OAAA,MAAA,CAAO,KAAK,EAAE,CAAA;AAGrB,EAAA,SAAS,GAAM,GAAA;AACb,IAAO,OAAA;AAAA,MACL,IAAA;AAAA,MACA,MAAA;AAAA,MACA,MAAQA,EAAAA,MAAAA,IAAAA,CAAU2E,MAAQA,GAAAA,MAAAA,CAAM,SAAS,CAAM,KAAA,CAAA;AAAA,KACjD;AAAA;AASF,EAAS,SAAA,OAAA,CAAQxJ,OAAMyB,OAAQ,EAAA;AAE7B,IAAI2H,IAAAA,SAAAA;AAEJ,IAAA,IAAIpK,SAAQ,OAAS,EAAA;AACnB,MAAAoK,YAAW,GAAI,EAAA;AACf,MAAAA,UAAS,MAAU3H,IAAAA,OAAAA;AACnB,MAAA2H,UAAS,MAAU3H,IAAAA,OAAAA;AAEnB,MAAAzC,SAAQ,OAAQ,CAAA,IAAA;AAAA,QACdA,QAAQ,CAAA,cAAA;AAAA,QACR,SAASgB,KAAI,CAAA;AAAA,QACboJ,SAAAA;AAAA,QACApJ;AAAA,OACF;AAAA;AACF;AAQF,EAAA,SAAS,KAAQ,GAAA;AACf,IAAA,IAAI,KAAO,EAAA;AACT,MAAA,MAAA,CAAO,KAAK,KAAK,CAAA;AAEjB,MAAA,IAAIhB,SAAQ,IAAM,EAAA;AAChB,QAAAA,QAAQ,CAAA,IAAA,CAAK,IAAKA,CAAAA,QAAAA,CAAQ,aAAa,KAAO,EAAA;AAAA,UAC5C,KAAOsL,EAAAA,SAAAA;AAAA,UACP,KAAK,GAAI;AAAA,SACV,CAAA;AAAA;AAGH,MAAQ,KAAA,GAAA,EAAA;AAAA;AACV;AAEJ;AAQA,SAAS,WAAWtK,KAAM,EAAA;AACxB,EAAA,OAAQA,KAAQ,IAAA,KAAA,IAAUA,KAAQ,IAAA,KAAA,IAAWA,KAAO,GAAA,OAAA;AACtD;AAQA,SAAS,WAAWA,KAAM,EAAA;AACxB,EACGA,OAAAA,KAAAA,IAAQ,KAAUA,KAAQ,IAAA,CAAA,IAC3BA,UAAS,EACRA,IAAAA,KAAAA,IAAQ,EAAUA,IAAAA,KAAAA,IAAQ,EAC1BA,IAAAA,KAAAA,IAAQ,OAAUA,KAAQ,IAAA,GAAA,IAC1BA,SAAQ,KAAUA,IAAAA,KAAAA,IAAQ,UAC1BA,KAAO,GAAA,KAAA,MAAY,KACnBA,IAAAA,CAAAA,KAAAA,GAAO,KAAY,MAAA,KAAA;AAExB;;;ACtYA,IAAM,kBAAqB,GAAA,WAAA;AAC3B,IAAM,mBAAsB,GAAA,iCAAA;AAC5B,IAAM,sBAAA;AAAA;AAAA,EAEJ;AAAA,CAAA;AACF,IAAM,gBAAmB,GAAA,qBAAA;AAGzB,IAAM,kBAAA,uBAAyB,OAAQ,EAAA;AAShC,SAAS,IAAA,CAAKuE,QAAOvF,QAAS,EAAA;AACnC,EAAAuF,SAAQA,MAAM,CAAA,OAAA;AAAA,IACZvF,QAAQ,CAAA,MAAA,GACJ,4BAA6BA,CAAAA,QAAAA,CAAQ,MAAM,CAC3C,GAAA,kBAAA;AAAA,IACJ;AAAA,GACF;AAEA,EAAIA,IAAAA,QAAAA,CAAQ,MAAUA,IAAAA,QAAAA,CAAQ,UAAY,EAAA;AACxC,IAAOuF,OAAAA,MAAAA;AAAA;AAGT,EAAA,OACEA,OAEG,OAAQ,CAAA,mBAAA,EAAqB,SAAS,CAGtC,CAAA,OAAA,CAAQ,wBAAwB,KAAK,CAAA;AAQ1C,EAAS,SAAA,SAAA,CAAU,IAAMM,EAAAA,MAAAA,EAAOsF,IAAK,EAAA;AACnC,IAAA,OAAOnL,QAAQ,CAAA,MAAA;AAAA,MACZ,CAAA,IAAA,CAAK,UAAW,CAAA,CAAC,CAAI,GAAA,KAAA,IAAU,OAC9B,IAAK,CAAA,UAAA,CAAW,CAAC,CAAA,GACjB,KACA,GAAA,KAAA;AAAA,MACFmL,IAAAA,CAAI,UAAWtF,CAAAA,MAAAA,GAAQ,CAAC,CAAA;AAAA,MACxB7F;AAAA,KACF;AAAA;AAQF,EAAS,SAAA,KAAA,CAAM,SAAW6F,EAAAA,MAAAA,EAAOsF,IAAK,EAAA;AACpC,IAAA,OAAOnL,QAAQ,CAAA,MAAA;AAAA,MACb,SAAA,CAAU,WAAW,CAAC,CAAA;AAAA,MACtBmL,IAAAA,CAAI,UAAWtF,CAAAA,MAAAA,GAAQ,CAAC,CAAA;AAAA,MACxB7F;AAAA,KACF;AAAA;AAEJ;AAUA,SAAS,6BAA6B,MAAQ,EAAA;AAC5C,EAAI,IAAA,MAAA,GAAS,kBAAmB,CAAA,GAAA,CAAI,MAAM,CAAA;AAE1C,EAAA,IAAI,CAAC,MAAQ,EAAA;AACX,IAAA,MAAA,GAAS,uBAAuB,MAAM,CAAA;AACtC,IAAmB,kBAAA,CAAA,GAAA,CAAI,QAAQ,MAAM,CAAA;AAAA;AAGvC,EAAO,OAAA,MAAA;AACT;AAMA,SAAS,uBAAuB,MAAQ,EAAA;AAEtC,EAAA,MAAM,SAAS,EAAC;AAChB,EAAA,IAAI6F,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAO,OAAA,EAAEA,MAAQ,GAAA,MAAA,CAAO,MAAQ,EAAA;AAC9B,IAAA,MAAA,CAAO,KAAK,MAAOA,CAAAA,MAAK,EAAE,OAAQ,CAAA,gBAAA,EAAkB,MAAM,CAAC,CAAA;AAAA;AAG7D,EAAO,OAAA,IAAI,OAAO,KAAQ,GAAA,MAAA,CAAO,KAAK,GAAG,CAAA,GAAI,KAAK,GAAG,CAAA;AACvD;;;AC9GO,SAAS,YAAY7E,KAAM,EAAA;AAChC,EAAA,OAAO,QAAQA,KAAK,CAAA,QAAA,CAAS,EAAE,CAAA,CAAE,aAAgB,GAAA,GAAA;AACnD;;;ACyBO,SAAS,sBAAA,CAAuBuE,QAAOvF,QAAS,EAAA;AACrD,EAAO,OAAA,IAAA,CAAKuF,QAAO,MAAO,CAAA,MAAA,CAAO,EAAC,MAAQ,EAAA,WAAA,EAAcvF,EAAAA,QAAO,CAAC,CAAA;AAClE;;;ACgBA,IAAM,MAAS,GAAA,IAAA;AAWR,SAAS,kBAAqB,GAAA;AACnC,EAAO,OAAA;AAAA,IACL,cAAA,EAAgB,CAAC,mBAAmB,CAAA;AAAA,IACpC,KAAO,EAAA;AAAA,MACL,aAAe,EAAA,cAAA;AAAA,MACf,0BAA4B,EAAA,2BAAA;AAAA,MAC5B,sBAAwB,EAAA,uBAAA;AAAA,MACxB,gCAAkC,EAAA,iCAAA;AAAA,MAClC,kCAAoC,EAAA,MAAA;AAAA,MACpC,qCAAuC,EAAA,MAAA;AAAA,MACvC,8BAAgC,EAAA,+BAAA;AAAA,MAEhC,aAAe,EAAA,cAAA;AAAA,MACf,0BAA4B,EAAA,2BAAA;AAAA,MAC5B,sBAAwB,EAAA,uBAAA;AAAA,MACxB,gCAAkC,EAAA,iCAAA;AAAA,MAClC,kCAAoC,EAAA,MAAA;AAAA,MACpC,qCAAuC,EAAA,MAAA;AAAA,MACvC,8BAAgC,EAAA;AAAA,KAClC;AAAA,IACA,IAAM,EAAA;AAAA,MACJ,0BAA4B,EAAA,0BAAA;AAAA,MAC5B,wBAA0B,EAAA,wBAAA;AAAA,MAC1B,uBAAyB,EAAA,uBAAA;AAAA,MACzB,sBAAwB,EAAA,sBAAA;AAAA,MACxB,gCAAkC,EAAA,gCAAA;AAAA,MAClC,qCAAuC0H,EAAAA,KAAAA;AAAA,MACvC,iCAAmC,EAAA,iCAAA;AAAA,MACnC,+BAAiC,EAAA,+BAAA;AAAA,MACjC,kCAAoC,EAAA,kCAAA;AAAA,MACpC,uCAAyCA,EAAAA,KAAAA;AAAA,MACzC,qCACE,EAAA,qCAAA;AAAA,MACF,0CAA4CA,EAAAA,KAAAA;AAAA,MAC5C,8BAAgC,EAAA,8BAAA;AAAA,MAChC,aAAe,EAAA,aAAA;AAAA,MAEf,0BAA4B,EAAA,0BAAA;AAAA,MAC5B,wBAA0B,EAAA,wBAAA;AAAA,MAC1B,uBAAyB,EAAA,uBAAA;AAAA,MACzB,sBAAwB,EAAA,sBAAA;AAAA,MACxB,gCAAkC,EAAA,gCAAA;AAAA,MAClC,qCAAuCA,EAAAA,KAAAA;AAAA,MACvC,iCAAmC,EAAA,iCAAA;AAAA,MACnC,+BAAiC,EAAA,+BAAA;AAAA,MACjC,kCAAoC,EAAA,kCAAA;AAAA,MACpC,uCAAyCA,EAAAA,KAAAA;AAAA,MACzC,qCACE,EAAA,qCAAA;AAAA,MACF,0CAA4CA,EAAAA,KAAAA;AAAA,MAC5C,8BAAgC,EAAA,8BAAA;AAAA,MAChC,aAAe,EAAA;AAAA;AACjB,GACF;AAMA,EAAA,SAAS,MAAS,GAAA;AAChB,IAAA,IAAA,CAAK,MAAO,EAAA;AAAA;AAWd,EAAA,SAAS8C,OAAM,CAAG,EAAA;AAChB,IAAO,OAAA,EAAC,MAAM,CAAE,CAAA,IAAA,EAAM,QAAQ,CAAE,CAAA,MAAA,EAAQ,MAAQ,EAAA,CAAA,CAAE,MAAM,EAAA;AAAA;AAO1D,EAAA,SAAS9C,MAAK,KAAO,EAAA;AACnB,IAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,IAAK,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AACvC,IAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,IAAK,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AAAA;AAOxC,EAAA,SAAS,eAAe,KAAO,EAAA;AAE7B,IAAA,MAAM,GAAM,GAAA;AAAA,MACV,IAAM,EAAA,KAAA,CAAA;AAAA,MACN,YAAY,EAAC;AAAA,MACb,KAAO,EAAA,KAAA;AAAA,MACP,WAAa,EAAA,KAAA;AAAA,MACb,OAAO,KAAM,CAAA,KAAA;AAAA,MACb,KAAK,KAAM,CAAA;AAAA,KACb;AACA,IAAA,IAAI,CAAC,IAAK,CAAA,IAAA,CAAK,gBAAqB,IAAA,CAAA,IAAA,CAAK,iBAAiB,EAAC;AAC3D,IAAA,IAAA,CAAK,KAAK,SAAY,GAAA,GAAA;AACtB,IAAA,IAAA,CAAK,MAAO,EAAA;AAAA;AAOd,EAAA,SAAS,4BAA4B,KAAO,EAAA;AAC1C,IAAM,MAAA,KAAA,GAAQ,KAAK,IAAK,CAAA,cAAA;AAGxB,IAAI,IAAA,KAAA,CAAM,WAAW,CAAG,EAAA;AACtB,MAAA,MAAM,IAAI,YAAA;AAAA,QACR,iEAAA;AAAA,QACA,EAAC,KAAO,EAAA,KAAA,CAAM,KAAO,EAAA,GAAA,EAAK,MAAM,GAAG,EAAA;AAAA,QACnC;AAAA,OACF;AAAA;AACF;AAOF,EAAA,SAAS,2BAA2B,KAAO,EAAA;AACzC,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAGtB,IAAA,IAAI,IAAI,KAAO,EAAA;AACb,MAAA,MAAM,IAAI,YAAA;AAAA,QACR,kEAAA;AAAA,QACA,EAAC,KAAO,EAAA,KAAA,CAAM,KAAO,EAAA,GAAA,EAAK,MAAM,GAAG,EAAA;AAAA,QACnC;AAAA,OACF;AAAA;AACF;AAOF,EAAA,SAAS,gCAAgC,KAAO,EAAA;AAC9C,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAGtB,IAAA,IAAI,IAAI,KAAO,EAAA;AACb,MAAA,MAAM,IAAI,YAAA;AAAA,QACR,+EAAA;AAAA,QACA,EAAC,KAAO,EAAA,KAAA,CAAM,KAAO,EAAA,GAAA,EAAK,MAAM,GAAG,EAAA;AAAA,QACnC;AAAA,OACF;AAAA;AACF;AAOF,EAAA,SAAS,0BAA6B,GAAA;AACpC,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAEtB,IAAA,GAAA,CAAI,KAAQ,GAAA,IAAA;AAAA;AAOd,EAAA,SAAS,yBAAyB,KAAO,EAAA;AACvC,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAEtB,IAAI,GAAA,CAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,KAAK,CAAA;AAAA;AAOtC,EAAA,SAAS,wBAAwB,KAAO,EAAA;AACtC,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAEtB,IAAA,GAAA,CAAI,IAAQ,IAAA,GAAA,GAAM,IAAK,CAAA,cAAA,CAAe,KAAK,CAAA;AAAA;AAO7C,EAAA,SAAS,uBAAuB,KAAO,EAAA;AACrC,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAEtB,IAAA,GAAA,CAAI,IAAQ,IAAA,GAAA,GAAM,IAAK,CAAA,cAAA,CAAe,KAAK,CAAA;AAAA;AAO7C,EAAA,SAAS,wBAAwB,KAAO,EAAA;AACtC,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAEtB,IAA2B,0BAAA,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AAC3C,IAAA,GAAA,CAAI,WAAW,IAAK,CAAA;AAAA,MAClB,IAAM,EAAA,iBAAA;AAAA,MACN,IAAM,EAAA,EAAA;AAAA,MACN,KAAO,EAAA,IAAA;AAAA,MACP,QAAU,EAAA;AAAA,QACR,KAAA,EAAO8C,MAAM,CAAA,KAAA,CAAM,KAAK,CAAA;AAAA;AAAA,QAExB,GAAK,EAAA,KAAA;AAAA;AACP,KACD,CAAA;AAAA;AAOH,EAAA,SAAS,kCAAkC,KAAO,EAAA;AAChD,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAEtB,IAA2B,0BAAA,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AAC3C,IAAA,GAAA,CAAI,WAAW,IAAK,CAAA,EAAC,MAAM,2BAA6B,EAAA,KAAA,EAAO,IAAG,CAAA;AAClE,IAAA,IAAA,CAAK,MAAO,EAAA;AAAA;AAOd,EAAA,SAAS,iCAAiC,KAAO,EAAA;AAC/C,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAEtB,IAAA,MAAM,OAAO,GAAI,CAAA,UAAA,CAAW,GAAI,CAAA,UAAA,CAAW,SAAS,CAAC,CAAA;AACrD,IAAO,EAAA,CAAA,IAAA,CAAK,SAAS,2BAA2B,CAAA;AAChD,IAAA,MAAM,SAAS,KAAM,CAAA,MAAA;AAErB,IAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,MAAO,EAAA;AAEzB,IAAA,IAAI,MAAQ,EAAA;AACV,MAAK,IAAA,CAAA,IAAA,GAAO,EAAC,MAAM,EAAA;AAAA;AACrB;AAOF,EAAA,SAAS,kCAAkC,KAAO,EAAA;AAChD,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAEtB,IAAA,MAAMlG,QAAO,GAAI,CAAA,UAAA,CAAW,GAAI,CAAA,UAAA,CAAW,SAAS,CAAC,CAAA;AACrD,IAAOA,EAAAA,CAAAA,KAAAA,CAAK,SAAS,iBAAiB,CAAA;AACtC,IAAAA,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,KAAK,CAAA;AACrC,IAAOA,EAAAA,CAAAA,KAAAA,CAAK,aAAa,KAAS,CAAA,CAAA;AAClC,IAAAA,KAAK,CAAA,QAAA,CAAS,GAAMkG,GAAAA,MAAAA,CAAM,MAAM,GAAG,CAAA;AAAA;AAOrC,EAAA,SAAS,gCAAgC,KAAO,EAAA;AAC9C,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAEtB,IAAA,MAAMlG,QAAO,GAAI,CAAA,UAAA,CAAW,GAAI,CAAA,UAAA,CAAW,SAAS,CAAC,CAAA;AACrD,IAAOA,EAAAA,CAAAA,KAAAA,CAAK,SAAS,iBAAiB,CAAA;AACtC,IAAAA,KAAK,CAAA,IAAA,IAAQ,GAAM,GAAA,IAAA,CAAK,eAAe,KAAK,CAAA;AAC5C,IAAOA,EAAAA,CAAAA,KAAAA,CAAK,aAAa,KAAS,CAAA,CAAA;AAClC,IAAAA,KAAK,CAAA,QAAA,CAAS,GAAMkG,GAAAA,MAAAA,CAAM,MAAM,GAAG,CAAA;AAAA;AAOrC,EAAA,SAAS,mCAAmC,KAAO,EAAA;AACjD,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAEtB,IAAA,MAAMlG,QAAO,GAAI,CAAA,UAAA,CAAW,GAAI,CAAA,UAAA,CAAW,SAAS,CAAC,CAAA;AACrD,IAAAA,KAAAA,CAAK,QAAQ,aAAc,CAAA,IAAA,CAAK,QAAU,EAAA,EAAC,aAAe,EAAA,KAAA,EAAM,CAAA;AAChE,IAAOA,EAAAA,CAAAA,KAAAA,CAAK,aAAa,KAAS,CAAA,CAAA;AAClC,IAAAA,KAAK,CAAA,QAAA,CAAS,GAAMkG,GAAAA,MAAAA,CAAM,MAAM,GAAG,CAAA;AAAA;AAOrC,EAAA,SAAS,sCAAsC,KAAO,EAAA;AACpD,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAEtB,IAAA,MAAM,OAAO,GAAI,CAAA,UAAA,CAAW,GAAI,CAAA,UAAA,CAAW,SAAS,CAAC,CAAA;AACrD,IAAO,EAAA,CAAA,IAAA,CAAK,SAAS,iBAAiB,CAAA;AAEtC,IAAA,MAAMlG,QAAO,EAAC,IAAA,EAAM,kCAAkC,KAAO,EAAA,IAAA,CAAK,QAAQ,EAAA;AAC1E,IAAA,MAAM,SAAS,KAAM,CAAA,MAAA;AAErB,IAAA,IAAI,MAAQ,EAAA;AACV,MAAAA,KAAAA,CAAK,IAAO,GAAA,EAAC,MAAM,EAAA;AAAA;AAGrB,IAAA,IAAA,CAAK,KAAQA,GAAAA,KAAAA;AACb,IAAO,EAAA,CAAA,IAAA,CAAK,aAAa,KAAS,CAAA,CAAA;AAClC,IAAA,IAAA,CAAK,QAAS,CAAA,GAAA,GAAMkG,MAAM,CAAA,KAAA,CAAM,GAAG,CAAA;AAAA;AAOrC,EAAA,SAAS,8BAAiC,GAAA;AACxC,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAGtB,IAAA,GAAA,CAAI,WAAc,GAAA,IAAA;AAAA;AAOpB,EAAA,SAAS,cAAc,KAAO,EAAA;AAC5B,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAEtB,IAAM,MAAA,KAAA,GAAQ,KAAK,IAAK,CAAA,cAAA;AAExB,IAAA,MAAM,IAAO,GAAA,KAAA,CAAM,KAAM,CAAA,MAAA,GAAS,CAAC,CAAA;AAEnC,IAAA,IAAI,GAAI,CAAA,KAAA,IAAS,IAAK,CAAA,IAAA,KAAS,IAAI,IAAM,EAAA;AACvC,MAAA,MAAM,IAAI,YAAA;AAAA,QACR,0BAAA,GACE,uBAAwB,CAAA,GAAG,CAC3B,GAAA,6CAAA,GACA,uBAAwB,CAAA,IAAI,CAC5B,GAAA,KAAA,GACA,iBAAkB,CAAA,IAAI,CACtB,GAAA,GAAA;AAAA,QACF,EAAC,KAAO,EAAA,KAAA,CAAM,KAAO,EAAA,GAAA,EAAK,MAAM,GAAG,EAAA;AAAA,QACnC;AAAA,OACF;AAAA;AAIF,IAAA,IAAA,CAAK,MAAO,EAAA;AAEZ,IAAA,IAAI,IAAI,KAAO,EAAA;AACb,MAAA,KAAA,CAAM,GAAI,EAAA;AAAA,KACL,MAAA;AACL,MAAK,IAAA,CAAA,KAAA;AAAA,QACH;AAAA,UACE,IACE,EAAA,KAAA,CAAM,IAAS,KAAA,eAAA,GACX,mBACA,GAAA,mBAAA;AAAA,UACN,IAAA,EAAM,IAAI,IAAQ,IAAA,IAAA;AAAA,UAClB,YAAY,GAAI,CAAA,UAAA;AAAA,UAChB,UAAU;AAAC,SACb;AAAA,QACA,KAAA;AAAA,QACA;AAAA,OACF;AAAA;AAGF,IAAI,IAAA,GAAA,CAAI,WAAe,IAAA,GAAA,CAAI,KAAO,EAAA;AAChC,MAAK,IAAA,CAAA,IAAA,CAAK,OAAO,gBAAgB,CAAA;AAAA,KAC5B,MAAA;AACL,MAAA,KAAA,CAAM,KAAK,GAAG,CAAA;AAAA;AAChB;AAOF,EAAS,SAAA,iBAAA,CAAkB,SAAS,IAAM,EAAA;AACxC,IAAM,MAAA,KAAA,GAAQ,KAAK,IAAK,CAAA,cAAA;AAExB,IAAA,MAAM,GAAM,GAAA,KAAA,CAAM,KAAM,CAAA,MAAA,GAAS,CAAC,CAAA;AAElC,IAAA,MAAM,KAAQ,GAAA,OAAA,GAAU,sBAAyB,GAAA,OAAA,CAAQ,OAAO,GAAM,GAAA,EAAA;AACtE,IAAMJ,MAAAA,SAAAA,GAAW,UACb,EAAC,KAAA,EAAO,QAAQ,KAAO,EAAA,GAAA,EAAK,OAAQ,CAAA,GAAA,EACpC,GAAA,KAAA,CAAA;AAEJ,IAAA,MAAM,IAAI,YAAA;AAAA,MACR,8BACE,GAAA,uBAAA,CAAwB,GAAG,CAAA,GAC3B,QACA,iBAAkB,CAAA,EAAC,KAAO,EAAA,IAAA,CAAK,OAAO,GAAK,EAAA,IAAA,CAAK,GAAG,EAAC,IACpD,GACA,GAAA,KAAA;AAAA,MACFA,SAAAA;AAAA,MACA;AAAA,KACF;AAAA;AAOF,EAAS,SAAA,gBAAA,CAAiB,GAAG,CAAG,EAAA;AAC9B,IAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,SAAA;AAGtB,IAAA,MAAM,IAAI,YAAA;AAAA,MACR,+BACE,uBAAwB,CAAA,GAAG,IAC3B,6BACA,GAAA,CAAA,CAAE,OACF,KACA,GAAA,iBAAA,CAAkB,EAAE,GAAG,CAAA,GACvB,kDACA,CAAE,CAAA,IAAA,GACF,QACA,iBAAkB,CAAA,CAAA,CAAE,KAAK,CACzB,GAAA,GAAA;AAAA,MACF,EAAC,KAAO,EAAA,CAAA,CAAE,KAAO,EAAA,GAAA,EAAK,EAAE,GAAG,EAAA;AAAA,MAC3B;AAAA,KACF;AAAA;AAUF,EAAA,SAAS,wBAAwB,GAAK,EAAA;AACpC,IAAA,OAAO,OAAO,GAAI,CAAA,KAAA,GAAQ,MAAM,EAAO,CAAA,IAAA,GAAA,CAAI,QAAQ,EAAM,CAAA,GAAA,GAAA;AAAA;AAE7D;AAcO,SAAS,iBAAiBpK,QAAS,EAAA;AACxC,EAAM,MAAA,QAAA,GAAWA,YAAW,EAAC;AAC7B,EAAM,MAAA,KAAA,GAAQ,SAAS,KAAS,IAAA,GAAA;AAChC,EAAM,MAAA,UAAA,GAAa,SAAS,UAAc,IAAA,KAAA;AAC1C,EAAM,MAAA,gBAAA,GAAmB,SAAS,gBAAoB,IAAA,KAAA;AACtD,EAAM,MAAA,UAAA,GAAa,QAAS,CAAA,UAAA,IAAc,MAAO,CAAA,iBAAA;AACjD,EAAM,MAAA,WAAA,GAAc,KAAU,KAAA,GAAA,GAAM,GAAM,GAAA,GAAA;AAE1C,EAAI,IAAA,KAAA,KAAU,GAAO,IAAA,KAAA,KAAU,GAAK,EAAA;AAClC,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,6CACE,KACA,GAAA;AAAA,KACJ;AAAA;AAGF,EAAA,UAAA,CAAW,IAAO,GAAA,WAAA;AAElB,EAAO,OAAA;AAAA,IACL,QAAU,EAAA;AAAA,MACR,iBAAmB,EAAA,UAAA;AAAA,MACnB,iBAAmB,EAAA;AAAA,KACrB;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,EAAC,SAAW,EAAA,GAAA,EAAK,WAAa,EAAA,CAAC,UAAU,CAAC,EAAA;AAAA,MAC1C,EAAC,OAAA,EAAS,IAAM,EAAA,SAAA,EAAW,GAAG;AAAA,KAChC;AAAA;AAAA,IAEA,MAAQ,EAAA,IAAA;AAAA;AAAA,IAER,YAAc,EAAA;AAAA,GAChB;AAOA,EAAA,SAAS,UAAWsE,CAAAA,KAAAA,EAAM,CAAG,EAAA,KAAA,EAAO,IAAM,EAAA;AACxC,IAAM6H,MAAAA,KAAAA,GAAO7H,MAAK,IAAS,KAAA,mBAAA;AAC3B,IAAM,MAAA,WAAA,GAAcA,MAAK,IACrB,GAAA,CAACA,MAAK,QAAYA,IAAAA,KAAAA,CAAK,QAAS,CAAA,MAAA,KAAW,CAC3C,GAAA,KAAA;AACJ,IAAM,MAAA,KAAA,GAAQ,WAAW,KAAK,CAAA;AAC9B,IAAM,MAAA,aAAA,GAAgB,aAAa,KAAK,CAAA;AACxC,IAAM,MAAA,cAAA,GAAiB,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AAC/C,IAAM,MAAA,gBAAA,GAAmB,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AAEjD,IAAA,MAAM,uBAAuB,EAAC;AAC9B,IAAA,MAAM,UAAU6H,KAAO,GAAA,aAAA,GAAgB,EAAM,IAAA,GAAA,IAAO7H,MAAK,IAAQ,IAAA,EAAA,CAAA;AACjE,IAAA,MAAM+H,KAAO,GAAA,KAAA,CAAM,KAAM/H,CAAAA,KAAAA,CAAK,IAAI,CAAA;AAElC,IAAA,cAAA,CAAe,KAAK,MAAM,CAAA;AAC1B,IAAA,gBAAA,CAAiB,KAAK,MAAM,CAAA;AAG5B,IAAA,IAAIA,KAAK,CAAA,UAAA,IAAcA,KAAK,CAAA,UAAA,CAAW,SAAS,CAAG,EAAA;AACjD,MAAI,IAAA,CAACA,MAAK,IAAM,EAAA;AACd,QAAM,MAAA,IAAI,MAAM,yCAAyC,CAAA;AAAA;AAG3D,MAAA,IAAIuB,MAAQ,GAAA,CAAA,CAAA;AACZ,MAAA,OAAO,EAAEA,MAAAA,GAAQvB,KAAK,CAAA,UAAA,CAAW,MAAQ,EAAA;AACvC,QAAM,MAAA,SAAA,GAAYA,KAAK,CAAA,UAAA,CAAWuB,MAAK,CAAA;AAEvC,QAAI,IAAA,MAAA;AAEJ,QAAI,IAAA,SAAA,CAAU,SAAS,2BAA6B,EAAA;AAClD,UAAS,MAAA,GAAA,GAAA,IAAO,SAAU,CAAA,KAAA,IAAS,EAAM,CAAA,GAAA,GAAA;AAAA,SACpC,MAAA;AACL,UAAI,IAAA,CAAC,UAAU,IAAM,EAAA;AACnB,YAAM,MAAA,IAAI,MAAM,qCAAqC,CAAA;AAAA;AAGvD,UAAA,MAAMN,SAAQ,SAAU,CAAA,KAAA;AACxB,UAAA,MAAM,OAAO,SAAU,CAAA,IAAA;AAEvB,UAAA,IAAI,KAAQ,GAAA,EAAA;AAEZ,UAAIA,IAAAA,MAAAA,KAAU,IAAQA,IAAAA,MAAAA,KAAU,KAAW,CAAA,EAAA,CAE3C,MAAA,IAAW,OAAOA,MAAAA,KAAU,QAAU,EAAA;AACpC,YAAQ,KAAA,GAAA,GAAA,IAAOA,MAAM,CAAA,KAAA,IAAS,EAAM,CAAA,GAAA,GAAA;AAAA,WAC/B,MAAA;AAEL,YAAM,MAAA,YAAA,GACJ,UAAc,IAAA,MAAA,CAAOA,MAAO,EAAA,KAAK,IAAI,MAAOA,CAAAA,MAAAA,EAAO,WAAW,CAAA,GAC1D,WACA,GAAA,KAAA;AACN,YACE,KAAA,GAAA,YAAA,GACA,uBAAuBA,MAAO,EAAA,EAAC,QAAQ,CAAC,YAAY,CAAC,EAAC,CACtD,GAAA,YAAA;AAAA;AAGJ,UAAS,MAAA,GAAA,IAAA,IAAQ,KAAQ,GAAA,GAAA,GAAM,EAAM,CAAA,GAAA,KAAA;AAAA;AAGvC,QAAA,oBAAA,CAAqB,KAAK,MAAM,CAAA;AAAA;AAClC;AAGF,IAAA,IAAI,wBAA2B,GAAA,KAAA;AAC/B,IAAM,MAAA,mBAAA,GAAsB,oBAAqB,CAAA,IAAA,CAAK,GAAG,CAAA;AAEzD,IAAA;AAAA;AAAA,MAEE4G,KAAAA;AAAA,OAEC,UAAA,CAAW,KAAK,mBAAmB,CAAA;AAAA,MAElC,cAAA,CAAe,OAAQ,EAAA,CAAE,GAAI,CAAA,MAAA;AAAA;AAAA,MAG3B,mBAAoB,CAAA,MAAA;AAAA,OAEnB,WAAe,GAAA,gBAAA,GAAmB,CAAI,GAAA,CAAA,GAAK,CAC5C,CAAA,GAAA,UAAA;AAAA,MACJ;AACA,MAA2B,wBAAA,GAAA,IAAA;AAAA;AAG7B,IAAA,IAAI,OAAU,GAAA,cAAA;AACd,IAAA,IAAI5G,MAAQ,GAAA,MAAA;AAEZ,IAAA,IAAI,wBAA0B,EAAA;AAC5B,MAAU,OAAA,GAAA,gBAAA;AAEV,MAAA,IAAIM,MAAQ,GAAA,CAAA,CAAA;AAEZ,MAAO,OAAA,EAAEA,MAAQ,GAAA,oBAAA,CAAqB,MAAQ,EAAA;AAG5C,QAAA,oBAAA,CAAqBA,MAAK,CAAA,GACxB,aAAgB,GAAA,MAAA,GAAS,qBAAqBA,MAAK,CAAA;AAAA;AAGvD,MAAAN,UAAS,OAAQ,CAAA,IAAA;AAAA,QACf,IAAO,GAAA,oBAAA,CAAqB,IAAK,CAAA,IAAI,IAAI,IAAO,GAAA;AAAA,OAClD;AAAA,eACS,mBAAqB,EAAA;AAC9B,MAAAA,MAAS,IAAA,OAAA,CAAQ,IAAK,CAAA,GAAA,GAAM,mBAAmB,CAAA;AAAA;AAGjD,IAAA,IAAI,WAAa,EAAA;AACf,MAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,QACd,CAAA,gBAAA,IAAoB,wBAA2B,GAAA,EAAA,GAAK,GAAO,IAAA;AAAA,OAC9D;AAAA;AAGF,IAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AAEzB,IAAA,IAAIjB,KAAK,CAAA,QAAA,IAAYA,KAAK,CAAA,QAAA,CAAS,SAAS,CAAG,EAAA;AAC7C,MAAIA,IAAAA,KAAAA,CAAK,SAAS,mBAAqB,EAAA;AACrC,QAAAiB,UAAS,OAAQ,CAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAKf,KAAA,CAAM,kBAAkBjB,KAAM,EAAA;AAAA,YAC5B,GAAG,QAAQ,OAAQ,EAAA;AAAA,YACnB,MAAQ,EAAA,GAAA;AAAA,YACR,KAAO,EAAA;AAAA,WACR;AAAA,SACH;AAAA,OACK,MAAA;AACL,QAAA,OAAA,CAAQ,MAAM,CAAC,CAAA;AACf,QAAAiB,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,IAAI,CAAA;AAC1B,QAAAA,MAAAA,IAAS,QAAQ,IAAK,CAAA,aAAA,CAAcjB,OAAM,KAAO,EAAA,OAAA,CAAQ,OAAQ,EAAC,CAAC,CAAA;AACnE,QAAAiB,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA;AAC5B;AAGF,IAAA,IAAI,CAAC,WAAa,EAAA;AAChB,MAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,QAAA,CACd4G,QAAO,aAAgB,GAAA,EAAA,IAAM,IAAQ7H,IAAAA,KAAAA,CAAK,QAAQ,EAAM,CAAA,GAAA;AAAA,OAC3D;AAAA;AAGF,IAAA+H,KAAK,EAAA;AACL,IAAO9G,OAAAA,MAAAA;AAAA;AAEX;AAkBA,SAAS,aAAA,CAAc,MAAQ,EAAA,KAAA,EAAO,IAAM,EAAA;AAC1C,EAAA,MAAM,aAAa,KAAM,CAAA,UAAA;AACzB,EAAA,MAAM,WAAW,MAAO,CAAA,QAAA;AACxB,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AACxC,EAAA,MAAM,aAAgB,GAAA,YAAA,CAAa,UAAW,CAAA,KAAK,CAAC,CAAA;AAEpD,EAAA,MAAM,UAAU,EAAC;AACjB,EAAA,IAAIM,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAA,UAAA,CAAW,KAAK,CAAE,CAAA,CAAA;AAElB,EAAO,OAAA,EAAEA,MAAQ,GAAA,QAAA,CAAS,MAAQ,EAAA;AAChC,IAAM,MAAA,KAAA,GAAQ,SAASA,MAAK,CAAA;AAE5B,IAAW,UAAA,CAAA,UAAA,CAAW,MAAS,GAAA,CAAC,CAAIA,GAAAA,MAAAA;AAEpC,IAAM,MAAA,SAAA,GAAY,EAAC,MAAQ,EAAA,IAAA,EAAM,OAAO,IAAM,EAAA,GAAG,OAAQ,CAAA,OAAA,EAAS,EAAA;AAElE,IAAA,MAAM,SAAS,KAAM,CAAA,MAAA,CAAO,KAAO,EAAA,MAAA,EAAQ,OAAO,SAAS,CAAA;AAE3D,IAAM,MAAA,eAAA,GACJ,KAAM,CAAA,IAAA,KAAS,mBACX,GAAA,MAAA,GACA,KAAM,CAAA,WAAA,CAAY,MAAQ,EAAA,SAAU,IAAM,EAAA,CAAA,EAAG,KAAO,EAAA;AAClD,MAAQ,OAAA,CAAA,KAAA,GAAQ,KAAK,aAAiB,IAAA,IAAA;AAAA,KACvC,CAAA;AAEP,IAAA,OAAA,CAAQ,IAAK,CAAA,OAAA,CAAQ,IAAK,CAAA,eAAe,CAAC,CAAA;AAE1C,IAAI,IAAA,KAAA,CAAM,SAAS,MAAQ,EAAA;AACzB,MAAA,KAAA,CAAM,cAAiB,GAAA,KAAA,CAAA;AAAA;AAGzB,IAAIA,IAAAA,MAAAA,GAAQ,QAAS,CAAA,MAAA,GAAS,CAAG,EAAA;AAC/B,MAAA,OAAA,CAAQ,IAAK,CAAA,OAAA,CAAQ,IAAK,CAAA,MAAM,CAAC,CAAA;AAAA;AACnC;AAGF,EAAA,UAAA,CAAW,GAAI,EAAA;AAEf,EAAO,OAAA,OAAA,CAAQ,KAAK,EAAE,CAAA;AACxB;AAMA,SAAS,WAAW,KAAO,EAAA;AACzB,EAAA,IAAI,KAAQ,GAAA,CAAA;AACZ,EAAIA,IAAAA,MAAAA,GAAQ,MAAM,KAAM,CAAA,MAAA;AAExB,EAAO,OAAA,EAAEA,SAAQ,CAAI,CAAA,EAAA;AACnB,IAAM3F,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM2F,MAAK,CAAA;AAE9B,IAAI3F,IAAAA,KAAAA,KAAS,YAAgBA,IAAAA,KAAAA,KAAS,UAAY,EAAA;AAClD,IAAA,IAAIA,UAAS,mBAAqB,EAAA,KAAA,EAAA;AAAA;AAGpC,EAAO,OAAA,KAAA;AACT;AAMA,SAAS,aAAa,KAAO,EAAA;AAC3B,EAAO,OAAA,MAAA,CAAO,OAAO,KAAK,CAAA;AAC5B;AAKA,SAAS,WAAc,GAAA;AACrB,EAAO,OAAA,GAAA;AACT;;;ACtvBO,SAAS,oBAAuB,GAAA;AACrC,EAAO,OAAA;AAAA,IACL,KAAA,EAAO,EAAC,QAAA,EAAU,aAAa,EAAA;AAAA,IAC/B,IAAM,EAAA,EAAC,QAAU,EAAA,YAAA,EAAc,cAAc,gBAAgB;AAAA,GAC/D;AACF;AASO,SAAS,kBAAqB,GAAA;AACnC,EAAA,OAAO,EAAC,QAAA,EAAU,EAAC,QAAA,EAAU,gBAAe,EAAA;AAC9C;AAMA,SAAS,cAAc,KAAO,EAAA;AAC5B,EAAA,IAAA,CAAK,MAAM,EAAC,IAAA,EAAM,YAAY,KAAO,EAAA,EAAA,IAAK,KAAK,CAAA;AAC/C,EAAA,IAAA,CAAK,MAAO,EAAA;AACd;AAMA,SAAS,aAAa,KAAO,EAAA;AAC3B,EAAMqF,MAAAA,MAAAA,GAAQ,KAAK,MAAO,EAAA;AAC1B,EAAA,MAAMjB,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAC7C,EAAOA,EAAAA,CAAAA,KAAAA,CAAK,SAAS,UAAU,CAAA;AAE/B,EAAA,IAAA,CAAK,KAAK,KAAK,CAAA;AAEf,EAAA,MAAM,SAAS,KAAM,CAAA,MAAA;AAErB,EAAAA,MAAK,KAAQiB,GAAAA,MAAAA;AAEb,EAAA,IAAI,MAAQ,EAAA;AACV,IAAAjB,KAAAA,CAAK,IAAO,GAAA,EAAC,MAAM,EAAA;AAAA;AAEvB;AAMA,SAAS,iBAAiB,KAAO,EAAA;AAC/B,EAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,IAAK,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AACvC,EAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,IAAK,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AACxC;AAMA,SAAS,eAAeA,KAAM,EAAA;AAC5B,EAAA,OAAOA,MAAK,KAAS,IAAA,EAAA;AACvB;;;AC9DO,SAAS,eAAkB,GAAA;AAChC,EAAO,OAAA;AAAA,IACL,yBAA0B,EAAA;AAAA,IAC1B,kBAAmB,EAAA;AAAA,IACnB,oBAAqB;AAAA,GACvB;AACF;AAYO,SAAS,cAActE,QAAS,EAAA;AACrC,EAAO,OAAA;AAAA,IACL,UAAY,EAAA;AAAA,MACV,uBAAwB,EAAA;AAAA,MACxB,iBAAiBA,QAAO,CAAA;AAAA,MACxB,kBAAmB;AAAA;AACrB,GACF;AACF;;;ACjDA,IAAI,wBAAwB,CAAC,GAAA,EAAK,CAAG,EAAA,GAAA,EAAK,GAAG,GAAK,EAAA,CAAA,EAAG,GAAK,EAAA,CAAA,EAAG,MAAM,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,KAAK,CAAG,EAAA,GAAA,EAAK,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,KAAK,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,CAAA,EAAG,GAAK,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,GAAK,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,GAAA,EAAK,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,GAAA,EAAK,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,GAAA,EAAK,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,GAAA,EAAK,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,GAAA,EAAK,GAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,IAAI,IAAM,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,OAAO,EAAI,EAAA,IAAA,EAAM,CAAG,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,EAAA,EAAI,GAAG,GAAK,EAAA,CAAA,EAAG,GAAK,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,CAAA,EAAG,KAAO,EAAA,CAAA,EAAG,MAAM,CAAG,EAAA,GAAA,EAAK,EAAI,EAAA,CAAA,EAAG,IAAI,GAAK,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAG,GAAK,EAAA,CAAA,EAAG,IAAM,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,IAAA,EAAM,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,GAAA,EAAK,CAAG,EAAA,GAAA,EAAK,GAAG,EAAI,EAAA,CAAA,EAAG,GAAK,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,GAAG,CAAG,EAAA,CAAA,EAAG,GAAK,EAAA,CAAA,EAAG,KAAK,CAAG,EAAA,CAAA,EAAG,GAAG,IAAM,EAAA,CAAA,EAAG,QAAQ,GAAG,CAAA;AAGzoC,IAAI,0BAA6B,GAAA,CAAC,CAAG,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,KAAK,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,IAAI,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,GAAA,EAAK,IAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,KAAK,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,IAAI,CAAG,EAAA,GAAA,EAAK,EAAI,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,GAAK,EAAA,CAAA,EAAG,EAAI,EAAA,GAAA,EAAK,KAAK,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,IAAA,EAAM,IAAI,EAAI,EAAA,IAAA,EAAM,EAAI,EAAA,CAAA,EAAG,IAAI,IAAM,EAAA,CAAA,EAAG,GAAK,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,GAAK,EAAA,CAAA,EAAG,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,IAAI,CAAG,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,IAAA,EAAM,GAAG,IAAM,EAAA,EAAA,EAAI,CAAG,EAAA,IAAA,EAAM,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,GAAA,EAAK,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,GAAA,EAAK,IAAM,EAAA,GAAA,EAAK,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,IAAA,EAAM,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,GAAK,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,GAAG,EAAI,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAG,IAAM,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,GAAA,EAAK,IAAI,EAAI,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,GAAA,EAAK,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,GAAA,EAAK,IAAI,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,IAAA,EAAM,GAAG,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,IAAM,EAAA,KAAA,EAAO,EAAI,EAAA,IAAA,EAAM,CAAG,EAAA,GAAA,EAAK,GAAG,IAAM,EAAA,EAAA,EAAI,IAAM,EAAA,EAAA,EAAI,KAAK,IAAM,EAAA,GAAA,EAAK,IAAM,EAAA,IAAA,EAAM,GAAG,IAAI,CAAA;AAGnpE,IAAI,uBAA0B,GAAA,2lFAAA;AAG9B,IAAI,4BAA+B,GAAA,8qIAAA;AASnC,IAAI,aAAgB,GAAA;AAAA,EAClB,CAAG,EAAA,qNAAA;AAAA,EACH,CAAG,EAAA,8CAAA;AAAA,EACH,CAAG,EAAA,MAAA;AAAA,EACH,MAAQ,EAAA,wEAAA;AAAA,EACR,UAAY,EAAA;AACd,CAAA;AAIA,IAAI,oBAAuB,GAAA,6KAAA;AAE3B,IAAI,UAAa,GAAA;AAAA,EACf,CAAG,EAAA,oBAAA;AAAA,EACH,WAAW,oBAAuB,GAAA,gBAAA;AAAA,EAClC,GAAG,oBAAuB,GAAA;AAC5B,CAAA;AAEA,IAAI,yBAA4B,GAAA,iBAAA;AAIhC,IAAI,uBAA0B,GAAA,IAAI,MAAO,CAAA,GAAA,GAAM,+BAA+B,GAAG,CAAA;AACjF,IAAI,qBAAqB,IAAI,MAAA,CAAO,GAAM,GAAA,4BAAA,GAA+B,0BAA0B,GAAG,CAAA;AAKtG,SAAS,aAAA,CAAcgB,OAAM,GAAK,EAAA;AAChC,EAAA,IAAI,GAAM,GAAA,KAAA;AACV,EAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,GAAI,CAAA,MAAA,EAAQ,KAAK,CAAG,EAAA;AACtC,IAAA,GAAA,IAAO,IAAI,CAAC,CAAA;AACZ,IAAA,IAAI,MAAMA,KAAM,EAAA;AAAE,MAAO,OAAA,KAAA;AAAA;AACzB,IAAO,GAAA,IAAA,GAAA,CAAI,IAAI,CAAC,CAAA;AAChB,IAAA,IAAI,OAAOA,KAAM,EAAA;AAAE,MAAO,OAAA,IAAA;AAAA;AAAK;AAEjC,EAAO,OAAA,KAAA;AACT;AAIA,SAAS,iBAAA,CAAkBA,OAAM,MAAQ,EAAA;AACvC,EAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,IAAA,OAAOA,KAAS,KAAA,EAAA;AAAA;AACjC,EAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AACxB,EAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,IAAA,OAAOA,KAAS,KAAA,EAAA;AAAA;AACjC,EAAA,IAAIA,QAAO,GAAK,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AACzB,EAAA,IAAIA,SAAQ,KAAQ,EAAA;AAAE,IAAA,OAAOA,SAAQ,GAAQ,IAAA,uBAAA,CAAwB,KAAK,MAAO,CAAA,YAAA,CAAaA,KAAI,CAAC,CAAA;AAAA;AACnG,EAAA,IAAI,WAAW,KAAO,EAAA;AAAE,IAAO,OAAA,KAAA;AAAA;AAC/B,EAAO,OAAA,aAAA,CAAcA,OAAM,0BAA0B,CAAA;AACvD;AAIA,SAAS,gBAAA,CAAiBA,OAAM,MAAQ,EAAA;AACtC,EAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,IAAA,OAAOA,KAAS,KAAA,EAAA;AAAA;AACjC,EAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AACxB,EAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,IAAO,OAAA,KAAA;AAAA;AACxB,EAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AACxB,EAAA,IAAIA,QAAO,EAAI,EAAA;AAAE,IAAA,OAAOA,KAAS,KAAA,EAAA;AAAA;AACjC,EAAA,IAAIA,QAAO,GAAK,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AACzB,EAAA,IAAIA,SAAQ,KAAQ,EAAA;AAAE,IAAA,OAAOA,SAAQ,GAAQ,IAAA,kBAAA,CAAmB,KAAK,MAAO,CAAA,YAAA,CAAaA,KAAI,CAAC,CAAA;AAAA;AAC9F,EAAA,IAAI,WAAW,KAAO,EAAA;AAAE,IAAO,OAAA,KAAA;AAAA;AAC/B,EAAA,OAAO,cAAcA,KAAM,EAAA,0BAA0B,CAAK,IAAA,aAAA,CAAcA,OAAM,qBAAqB,CAAA;AACrG;AAyBA,IAAI,SAAY,GAAA,SAASI,UAAU,CAAA,KAAA,EAAO,IAAM,EAAA;AAC9C,EAAK,IAAA,IAAA,KAAS,KAAS,CAAA,EAAA,IAAA,GAAO,EAAC;AAE/B,EAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AACb,EAAA,IAAA,CAAK,UAAU,IAAK,CAAA,OAAA;AACpB,EAAK,IAAA,CAAA,UAAA,GAAa,CAAC,CAAC,IAAK,CAAA,UAAA;AACzB,EAAK,IAAA,CAAA,UAAA,GAAa,CAAC,CAAC,IAAK,CAAA,UAAA;AACzB,EAAK,IAAA,CAAA,MAAA,GAAS,CAAC,CAAC,IAAK,CAAA,MAAA;AACrB,EAAK,IAAA,CAAA,QAAA,GAAW,CAAC,CAAC,IAAK,CAAA,QAAA;AACvB,EAAK,IAAA,CAAA,MAAA,GAAS,CAAC,CAAC,IAAK,CAAA,MAAA;AACrB,EAAK,IAAA,CAAA,OAAA,GAAU,CAAC,CAAC,IAAK,CAAA,OAAA;AACtB,EAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,KAAS,IAAA,IAAA;AAC3B,EAAA,IAAA,CAAK,aAAgB,GAAA,IAAA;AACvB,CAAA;AAEA,SAAS,KAAA,CAAMlB,OAAM,IAAM,EAAA;AACzB,EAAO,OAAA,IAAI,UAAUA,KAAM,EAAA,EAAC,YAAY,IAAM,EAAA,KAAA,EAAO,MAAK,CAAA;AAC5D;AACA,IAAI,UAAA,GAAa,EAAC,UAAA,EAAY,IAAI,EAAA;AAAlC,IAAqC,UAAA,GAAa,EAAC,UAAA,EAAY,IAAI,EAAA;AAInE,IAAI,WAAW,EAAC;AAGhB,SAAS,EAAA,CAAGA,OAAMF,QAAS,EAAA;AACzB,EAAA,IAAKA,QAAY,KAAA,KAAA,CAAA,EAASA,QAAAA,GAAU,EAAC;AAErC,EAAAA,SAAQ,OAAUE,GAAAA,KAAAA;AAClB,EAAA,OAAO,SAASA,KAAI,CAAA,GAAI,IAAI,SAAA,CAAUA,OAAMF,QAAO,CAAA;AACrD;AAEA,IAAI,OAAU,GAAA;AAAA,EACZ,GAAK,EAAA,IAAI,SAAU,CAAA,KAAA,EAAO,UAAU,CAAA;AAAA,EACpC,MAAQ,EAAA,IAAI,SAAU,CAAA,QAAA,EAAU,UAAU,CAAA;AAAA,EAC1C,MAAQ,EAAA,IAAI,SAAU,CAAA,QAAA,EAAU,UAAU,CAAA;AAAA,EAC1C,IAAM,EAAA,IAAI,SAAU,CAAA,MAAA,EAAQ,UAAU,CAAA;AAAA,EACtC,SAAW,EAAA,IAAI,SAAU,CAAA,WAAA,EAAa,UAAU,CAAA;AAAA,EAChD,GAAA,EAAK,IAAI,SAAA,CAAU,KAAK,CAAA;AAAA;AAAA,EAGxB,QAAA,EAAU,IAAI,SAAU,CAAA,GAAA,EAAK,EAAC,UAAY,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA,EACjE,QAAA,EAAU,IAAI,SAAA,CAAU,GAAG,CAAA;AAAA,EAC3B,MAAA,EAAQ,IAAI,SAAU,CAAA,GAAA,EAAK,EAAC,UAAY,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA,EAC/D,MAAA,EAAQ,IAAI,SAAA,CAAU,GAAG,CAAA;AAAA,EACzB,MAAA,EAAQ,IAAI,SAAU,CAAA,GAAA,EAAK,EAAC,UAAY,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA,EAC/D,MAAA,EAAQ,IAAI,SAAA,CAAU,GAAG,CAAA;AAAA,EACzB,KAAO,EAAA,IAAI,SAAU,CAAA,GAAA,EAAK,UAAU,CAAA;AAAA,EACpC,IAAM,EAAA,IAAI,SAAU,CAAA,GAAA,EAAK,UAAU,CAAA;AAAA,EACnC,KAAO,EAAA,IAAI,SAAU,CAAA,GAAA,EAAK,UAAU,CAAA;AAAA,EACpC,GAAA,EAAK,IAAI,SAAA,CAAU,GAAG,CAAA;AAAA,EACtB,QAAU,EAAA,IAAI,SAAU,CAAA,GAAA,EAAK,UAAU,CAAA;AAAA,EACvC,WAAA,EAAa,IAAI,SAAA,CAAU,IAAI,CAAA;AAAA,EAC/B,KAAO,EAAA,IAAI,SAAU,CAAA,IAAA,EAAM,UAAU,CAAA;AAAA,EACrC,QAAA,EAAU,IAAI,SAAA,CAAU,UAAU,CAAA;AAAA,EAClC,eAAA,EAAiB,IAAI,SAAA,CAAU,iBAAiB,CAAA;AAAA,EAChD,QAAU,EAAA,IAAI,SAAU,CAAA,KAAA,EAAO,UAAU,CAAA;AAAA,EACzC,SAAW,EAAA,IAAI,SAAU,CAAA,GAAA,EAAK,UAAU,CAAA;AAAA,EACxC,YAAA,EAAc,IAAI,SAAU,CAAA,IAAA,EAAM,EAAC,UAAY,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBtE,EAAA,EAAI,IAAI,SAAU,CAAA,GAAA,EAAK,EAAC,UAAY,EAAA,IAAA,EAAM,QAAU,EAAA,IAAA,EAAK,CAAA;AAAA,EACzD,MAAA,EAAQ,IAAI,SAAU,CAAA,IAAA,EAAM,EAAC,UAAY,EAAA,IAAA,EAAM,QAAU,EAAA,IAAA,EAAK,CAAA;AAAA,EAC9D,MAAA,EAAQ,IAAI,SAAA,CAAU,OAAS,EAAA,EAAC,MAAQ,EAAA,IAAA,EAAM,OAAS,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA,EAC9E,MAAA,EAAQ,IAAI,SAAA,CAAU,KAAO,EAAA,EAAC,UAAY,EAAA,IAAA,EAAM,MAAQ,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA,EAC/E,SAAA,EAAW,KAAM,CAAA,IAAA,EAAM,CAAC,CAAA;AAAA,EACxB,UAAA,EAAY,KAAM,CAAA,IAAA,EAAM,CAAC,CAAA;AAAA,EACzB,SAAA,EAAW,KAAM,CAAA,GAAA,EAAK,CAAC,CAAA;AAAA,EACvB,UAAA,EAAY,KAAM,CAAA,GAAA,EAAK,CAAC,CAAA;AAAA,EACxB,UAAA,EAAY,KAAM,CAAA,GAAA,EAAK,CAAC,CAAA;AAAA,EACxB,QAAA,EAAU,KAAM,CAAA,eAAA,EAAiB,CAAC,CAAA;AAAA,EAClC,UAAA,EAAY,KAAM,CAAA,WAAA,EAAa,CAAC,CAAA;AAAA,EAChC,QAAA,EAAU,KAAM,CAAA,WAAA,EAAa,CAAC,CAAA;AAAA,EAC9B,OAAS,EAAA,IAAI,SAAU,CAAA,KAAA,EAAO,EAAC,UAAA,EAAY,IAAM,EAAA,KAAA,EAAO,CAAG,EAAA,MAAA,EAAQ,IAAM,EAAA,UAAA,EAAY,MAAK,CAAA;AAAA,EAC1F,MAAA,EAAQ,KAAM,CAAA,GAAA,EAAK,EAAE,CAAA;AAAA,EACrB,IAAA,EAAM,KAAM,CAAA,GAAA,EAAK,EAAE,CAAA;AAAA,EACnB,KAAA,EAAO,KAAM,CAAA,GAAA,EAAK,EAAE,CAAA;AAAA,EACpB,UAAU,IAAI,SAAA,CAAU,MAAM,EAAC,UAAA,EAAY,MAAK,CAAA;AAAA,EAChD,QAAA,EAAU,KAAM,CAAA,IAAA,EAAM,CAAC,CAAA;AAAA;AAAA,EAGvB,MAAA,EAAQ,GAAG,OAAO,CAAA;AAAA,EAClB,KAAA,EAAO,EAAG,CAAA,MAAA,EAAQ,UAAU,CAAA;AAAA,EAC5B,MAAA,EAAQ,GAAG,OAAO,CAAA;AAAA,EAClB,SAAA,EAAW,GAAG,UAAU,CAAA;AAAA,EACxB,SAAA,EAAW,GAAG,UAAU,CAAA;AAAA,EACxB,QAAA,EAAU,EAAG,CAAA,SAAA,EAAW,UAAU,CAAA;AAAA,EAClC,GAAA,EAAK,GAAG,IAAM,EAAA,EAAC,QAAQ,IAAM,EAAA,UAAA,EAAY,MAAK,CAAA;AAAA,EAC9C,KAAA,EAAO,EAAG,CAAA,MAAA,EAAQ,UAAU,CAAA;AAAA,EAC5B,QAAA,EAAU,GAAG,SAAS,CAAA;AAAA,EACtB,MAAM,EAAG,CAAA,KAAA,EAAO,EAAC,MAAA,EAAQ,MAAK,CAAA;AAAA,EAC9B,SAAA,EAAW,EAAG,CAAA,UAAA,EAAY,UAAU,CAAA;AAAA,EACpC,GAAA,EAAK,GAAG,IAAI,CAAA;AAAA,EACZ,OAAA,EAAS,EAAG,CAAA,QAAA,EAAU,UAAU,CAAA;AAAA,EAChC,OAAA,EAAS,GAAG,QAAQ,CAAA;AAAA,EACpB,MAAA,EAAQ,EAAG,CAAA,OAAA,EAAS,UAAU,CAAA;AAAA,EAC9B,IAAA,EAAM,GAAG,KAAK,CAAA;AAAA,EACd,IAAA,EAAM,GAAG,KAAK,CAAA;AAAA,EACd,MAAA,EAAQ,GAAG,OAAO,CAAA;AAAA,EAClB,QAAQ,EAAG,CAAA,OAAA,EAAS,EAAC,MAAA,EAAQ,MAAK,CAAA;AAAA,EAClC,KAAA,EAAO,GAAG,MAAM,CAAA;AAAA,EAChB,IAAA,EAAM,GAAG,KAAO,EAAA,EAAC,YAAY,IAAM,EAAA,UAAA,EAAY,MAAK,CAAA;AAAA,EACpD,KAAA,EAAO,EAAG,CAAA,MAAA,EAAQ,UAAU,CAAA;AAAA,EAC5B,MAAA,EAAQ,EAAG,CAAA,OAAA,EAAS,UAAU,CAAA;AAAA,EAC9B,MAAA,EAAQ,EAAG,CAAA,OAAA,EAAS,UAAU,CAAA;AAAA,EAC9B,QAAA,EAAU,EAAG,CAAA,SAAA,EAAW,UAAU,CAAA;AAAA,EAClC,OAAA,EAAS,GAAG,QAAQ,CAAA;AAAA,EACpB,OAAA,EAAS,EAAG,CAAA,QAAA,EAAU,UAAU,CAAA;AAAA,EAChC,KAAA,EAAO,EAAG,CAAA,MAAA,EAAQ,UAAU,CAAA;AAAA,EAC5B,KAAA,EAAO,EAAG,CAAA,MAAA,EAAQ,UAAU,CAAA;AAAA,EAC5B,MAAA,EAAQ,EAAG,CAAA,OAAA,EAAS,UAAU,CAAA;AAAA,EAC9B,GAAA,EAAK,GAAG,IAAM,EAAA,EAAC,YAAY,IAAM,EAAA,KAAA,EAAO,GAAE,CAAA;AAAA,EAC1C,WAAA,EAAa,GAAG,YAAc,EAAA,EAAC,YAAY,IAAM,EAAA,KAAA,EAAO,GAAE,CAAA;AAAA,EAC1D,OAAA,EAAS,EAAG,CAAA,QAAA,EAAU,EAAC,UAAA,EAAY,MAAM,MAAQ,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA,EACxE,KAAA,EAAO,EAAG,CAAA,MAAA,EAAQ,EAAC,UAAA,EAAY,MAAM,MAAQ,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK,CAAA;AAAA,EACpE,OAAA,EAAS,EAAG,CAAA,QAAA,EAAU,EAAC,UAAA,EAAY,MAAM,MAAQ,EAAA,IAAA,EAAM,UAAY,EAAA,IAAA,EAAK;AAC1E,CAAA;AAKA,IAAI,SAAY,GAAA,wBAAA;AAChB,IAAI,UAAa,GAAA,IAAI,MAAO,CAAA,SAAA,CAAU,QAAQ,GAAG,CAAA;AAEjD,SAAS,UAAUgB,KAAM,EAAA;AACvB,EAAA,OAAOA,UAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,QAAUA,KAAS,KAAA,IAAA;AACnE;AAEA,SAAS,aAAA,CAAcA,KAAM,EAAA,IAAA,EAAM,GAAK,EAAA;AACtC,EAAK,IAAA,GAAA,KAAQ,KAAS,CAAA,EAAA,GAAA,GAAMA,KAAK,CAAA,MAAA;AAEjC,EAAA,KAAA,IAAS,CAAI,GAAA,IAAA,EAAM,CAAI,GAAA,GAAA,EAAK,CAAK,EAAA,EAAA;AAC/B,IAAI,IAAA,IAAA,GAAOA,KAAK,CAAA,UAAA,CAAW,CAAC,CAAA;AAC5B,IAAI,IAAA,SAAA,CAAU,IAAI,CAChB,EAAA;AAAE,MAAA,OAAO,CAAI,GAAA,GAAA,GAAM,CAAK,IAAA,IAAA,KAAS,EAAMA,IAAAA,KAAAA,CAAK,UAAW,CAAA,CAAA,GAAI,CAAC,CAAA,KAAM,EAAK,GAAA,CAAA,GAAI,IAAI,CAAI,GAAA,CAAA;AAAA;AAAE;AAEzF,EAAO,OAAA,CAAA,CAAA;AACT;AAEA,IAAI,kBAAqB,GAAA,+CAAA;AAEzB,IAAI,cAAiB,GAAA,+BAAA;AAErB,IAAI,MAAM,MAAO,CAAA,SAAA;AACjB,IAAIkB,kBAAiB,GAAI,CAAA,cAAA;AACzB,IAAIC,YAAW,GAAI,CAAA,QAAA;AAEnB,IAAI,MAAS,GAAA,MAAA,CAAO,MAAW,IAAA,SAAU,KAAK,QAAU,EAAA;AAAE,EACxDD,OAAAA,eAAAA,CAAe,IAAK,CAAA,GAAA,EAAK,QAAQ,CAAA;AAChC,CAAA;AAEH,IAAI,OAAU,GAAA,KAAA,CAAM,OAAY,IAAA,SAAU,GAAK,EAAA;AAAE,EAC/CC,OAAAA,SAAAA,CAAS,IAAK,CAAA,GAAG,CAAM,KAAA,gBAAA;AACtB,CAAA;AAEH,IAAI,WAAA,mBAAqB,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA;AAEpC,SAAS,YAAY,KAAO,EAAA;AAC1B,EAAA,OAAO,WAAY,CAAA,KAAK,CAAM,KAAA,WAAA,CAAY,KAAK,CAAI,GAAA,IAAI,MAAO,CAAA,MAAA,GAAS,KAAM,CAAA,OAAA,CAAQ,IAAM,EAAA,GAAG,IAAI,IAAI,CAAA,CAAA;AACxG;AAEA,SAAS,kBAAkBnB,KAAM,EAAA;AAE/B,EAAA,IAAIA,SAAQ,KAAQ,EAAA;AAAE,IAAO,OAAA,MAAA,CAAO,aAAaA,KAAI,CAAA;AAAA;AACrD,EAAAA,KAAQ,IAAA,KAAA;AACR,EAAA,OAAO,OAAO,YAAcA,CAAAA,CAAAA,KAAAA,IAAQ,MAAM,KAASA,EAAAA,CAAAA,KAAAA,GAAO,QAAQ,KAAM,CAAA;AAC1E;AAEA,IAAI,aAAgB,GAAA,8EAAA;AAKpB,IAAI,QAAW,GAAA,SAASwB,SAAS,CAAA,IAAA,EAAM,GAAK,EAAA;AAC1C,EAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AACZ,EAAA,IAAA,CAAK,MAAS,GAAA,GAAA;AAChB,CAAA;AAEA,QAAA,CAAS,SAAU,CAAA,MAAA,GAAS,SAAS,MAAA,CAAQ,CAAG,EAAA;AAC9C,EAAA,OAAO,IAAI,QAAS,CAAA,IAAA,CAAK,IAAM,EAAA,IAAA,CAAK,SAAS,CAAC,CAAA;AAChD,CAAA;AAEA,IAAI,cAAiB,GAAA,SAASE,eAAe,CAAA,CAAA,EAAGC,QAAO,GAAK,EAAA;AAC1D,EAAA,IAAA,CAAK,KAAQA,GAAAA,MAAAA;AACb,EAAA,IAAA,CAAK,GAAM,GAAA,GAAA;AACX,EAAI,IAAA,CAAA,CAAE,eAAe,IAAM,EAAA;AAAE,IAAA,IAAA,CAAK,SAAS,CAAE,CAAA,UAAA;AAAA;AAC/C,CAAA;AAQA,SAAS,WAAA,CAAY,OAAOF,OAAQ,EAAA;AAClC,EAAS,KAAA,IAAA,IAAA,GAAO,CAAG,EAAA,GAAA,GAAM,CAAK,MAAA;AAC5B,IAAA,IAAI,SAAY,GAAA,aAAA,CAAc,KAAO,EAAA,GAAA,EAAKA,OAAM,CAAA;AAChD,IAAA,IAAI,YAAY,CAAG,EAAA;AAAE,MAAA,OAAO,IAAI,QAAA,CAAS,IAAMA,EAAAA,OAAAA,GAAS,GAAG,CAAA;AAAA;AAC3D,IAAE,EAAA,IAAA;AACF,IAAM,GAAA,GAAA,SAAA;AAAA;AAEV;AAKA,IAAI,cAAiB,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOnB,WAAa,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA,EAIb,UAAY,EAAA,QAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMZ,mBAAqB,EAAA,IAAA;AAAA;AAAA;AAAA,EAGrB,eAAiB,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKjB,aAAe,EAAA,IAAA;AAAA;AAAA;AAAA,EAGf,0BAA4B,EAAA,KAAA;AAAA;AAAA;AAAA;AAAA,EAI5B,2BAA6B,EAAA,KAAA;AAAA;AAAA;AAAA;AAAA,EAI7B,yBAA2B,EAAA,IAAA;AAAA;AAAA;AAAA,EAG3B,uBAAyB,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA,EAIzB,aAAe,EAAA,KAAA;AAAA;AAAA;AAAA;AAAA,EAIf,kBAAoB,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKpB,SAAW,EAAA,KAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMX,OAAS,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaT,SAAW,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASX,MAAQ,EAAA,KAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMR,OAAS,EAAA,IAAA;AAAA;AAAA;AAAA,EAGT,UAAY,EAAA,IAAA;AAAA;AAAA;AAAA,EAGZ,gBAAkB,EAAA,IAAA;AAAA;AAAA;AAAA,EAGlB,cAAgB,EAAA;AAClB,CAAA;AAIA,IAAI,sBAAyB,GAAA,KAAA;AAE7B,SAAS,WAAW,IAAM,EAAA;AACxB,EAAA,IAAIzC,WAAU,EAAC;AAEf,EAAA,KAAA,IAAS,OAAO,cACd,EAAA;AAAE,IAAAA,QAAQ,CAAA,GAAG,CAAI,GAAA,IAAA,IAAQ,MAAO,CAAA,IAAA,EAAM,GAAG,CAAA,GAAI,IAAK,CAAA,GAAG,CAAI,GAAA,cAAA,CAAe,GAAG,CAAA;AAAA;AAE7E,EAAIA,IAAAA,QAAAA,CAAQ,gBAAgB,QAAU,EAAA;AACpC,IAAAA,SAAQ,WAAc,GAAA,GAAA;AAAA,GACxB,MAAA,IAAWA,QAAQ,CAAA,WAAA,IAAe,IAAM,EAAA;AACtC,IAAA,IAAI,CAAC,sBAA0B,IAAA,OAAO,OAAY,KAAA,QAAA,IAAY,QAAQ,IAAM,EAAA;AAC1E,MAAyB,sBAAA,GAAA,IAAA;AACzB,MAAA,OAAA,CAAQ,KAAK,oHAAoH,CAAA;AAAA;AAEnI,IAAAA,SAAQ,WAAc,GAAA,EAAA;AAAA,GACxB,MAAA,IAAWA,QAAQ,CAAA,WAAA,IAAe,IAAM,EAAA;AACtC,IAAAA,SAAQ,WAAe,IAAA,IAAA;AAAA;AAGzB,EAAIA,IAAAA,QAAAA,CAAQ,iBAAiB,IAC3B,EAAA;AAAE,IAAAA,QAAAA,CAAQ,aAAgBA,GAAAA,QAAAA,CAAQ,WAAc,GAAA,CAAA;AAAA;AAElD,EAAA,IAAI,CAAC,IAAA,IAAQ,IAAK,CAAA,aAAA,IAAiB,IACjC,EAAA;AAAE,IAAAA,QAAAA,CAAQ,aAAgBA,GAAAA,QAAAA,CAAQ,WAAe,IAAA,EAAA;AAAA;AAEnD,EAAI,IAAA,OAAA,CAAQA,QAAQ,CAAA,OAAO,CAAG,EAAA;AAC5B,IAAA,IAAI,SAASA,QAAQ,CAAA,OAAA;AACrB,IAAAA,QAAAA,CAAQ,OAAU,GAAA,SAAU,KAAO,EAAA;AAAE,MAAO,OAAA,MAAA,CAAO,KAAK,KAAK,CAAA;AAAA,KAAG;AAAA;AAElE,EAAI,IAAA,OAAA,CAAQA,QAAQ,CAAA,SAAS,CAC3B,EAAA;AAAE,IAAAA,QAAQ,CAAA,SAAA,GAAY,WAAYA,CAAAA,QAAAA,EAASA,SAAQ,SAAS,CAAA;AAAA;AAE9D,EAAOA,OAAAA,QAAAA;AACT;AAEA,SAAS,WAAA,CAAYA,UAAS,KAAO,EAAA;AACnC,EAAA,OAAO,SAAS,KAAOiD,EAAAA,KAAAA,EAAMN,MAAO,EAAA,GAAA,EAAK,UAAU,MAAQ,EAAA;AACzD,IAAA,IAAI,OAAU,GAAA;AAAA,MACZ,IAAA,EAAM,QAAQ,OAAU,GAAA,MAAA;AAAA,MACxB,KAAOM,EAAAA,KAAAA;AAAA,MACP,KAAON,EAAAA,MAAAA;AAAA,MACP;AAAA,KACF;AACA,IAAA,IAAI3C,SAAQ,SACV,EAAA;AAAE,MAAA,OAAA,CAAQ,GAAM,GAAA,IAAI,cAAe,CAAA,IAAA,EAAM,UAAU,MAAM,CAAA;AAAA;AAC3D,IAAA,IAAIA,SAAQ,MACV,EAAA;AAAE,MAAQ,OAAA,CAAA,KAAA,GAAQ,CAAC2C,MAAAA,EAAO,GAAG,CAAA;AAAA;AAC/B,IAAA,KAAA,CAAM,KAAK,OAAO,CAAA;AAAA,GACpB;AACF;AAGA,IACI,SAAY,GAAA,CAAA;AADhB,IAEI,cAAiB,GAAA,CAAA;AAFrB,IAGI,WAAc,GAAA,CAAA;AAHlB,IAII,eAAkB,GAAA,CAAA;AAJtB,IAKI,WAAc,GAAA,EAAA;AALlB,IAMI,kBAAqB,GAAA,EAAA;AANzB,IAOI,WAAc,GAAA,EAAA;AAPlB,IAQI,kBAAqB,GAAA,GAAA;AARzB,IASI,wBAA2B,GAAA,GAAA;AAT/B,IAUI,SAAA,GAAY,YAAY,cAAiB,GAAA,wBAAA;AAE7C,SAAS,aAAA,CAAc,OAAO,SAAW,EAAA;AACvC,EAAA,OAAO,cAAkB,IAAA,KAAA,GAAQ,WAAc,GAAA,CAAA,CAAA,IAAM,YAAY,eAAkB,GAAA,CAAA,CAAA;AACrF;AAGA,IACI,SAAY,GAAA,CAAA;AADhB,IAEI,QAAW,GAAA,CAAA;AAFf,IAGI,YAAe,GAAA,CAAA;AAHnB,IAII,aAAgB,GAAA,CAAA;AAJpB,IAKI,iBAAoB,GAAA,CAAA;AALxB,IAMI,YAAe,GAAA,CAAA;AAEnB,IAAI,MAAS,GAAA,SAASwB,OAAOnE,CAAAA,QAAAA,EAAS,OAAO,QAAU,EAAA;AACrD,EAAK,IAAA,CAAA,OAAA,GAAUA,QAAU,GAAA,UAAA,CAAWA,QAAO,CAAA;AAC3C,EAAA,IAAA,CAAK,aAAaA,QAAQ,CAAA,UAAA;AAC1B,EAAA,IAAA,CAAK,QAAW,GAAA,WAAA,CAAY,UAAWA,CAAAA,QAAAA,CAAQ,WAAe,IAAA,CAAA,GAAI,CAAIA,GAAAA,QAAAA,CAAQ,UAAe,KAAA,QAAA,GAAW,SAAY,GAAA,CAAC,CAAC,CAAA;AACtH,EAAA,IAAI,QAAW,GAAA,EAAA;AACf,EAAIA,IAAAA,QAAAA,CAAQ,kBAAkB,IAAM,EAAA;AAClC,IAAW,QAAA,GAAA,aAAA,CAAcA,SAAQ,WAAe,IAAA,CAAA,GAAI,IAAIA,QAAQ,CAAA,WAAA,KAAgB,CAAI,GAAA,CAAA,GAAI,CAAC,CAAA;AACzF,IAAIA,IAAAA,QAAAA,CAAQ,eAAe,QAAU,EAAA;AAAE,MAAY,QAAA,IAAA,QAAA;AAAA;AAAU;AAE/D,EAAK,IAAA,CAAA,aAAA,GAAgB,YAAY,QAAQ,CAAA;AACzC,EAAA,IAAI,cAAkB,GAAA,CAAA,QAAA,GAAW,QAAW,GAAA,GAAA,GAAM,MAAM,aAAc,CAAA,MAAA;AACtE,EAAK,IAAA,CAAA,mBAAA,GAAsB,YAAY,cAAc,CAAA;AACrD,EAAA,IAAA,CAAK,uBAA0B,GAAA,WAAA,CAAY,cAAiB,GAAA,GAAA,GAAM,cAAc,UAAU,CAAA;AAC1F,EAAK,IAAA,CAAA,KAAA,GAAQ,OAAO,KAAK,CAAA;AAKzB,EAAA,IAAA,CAAK,WAAc,GAAA,KAAA;AAKnB,EAAA,IAAI,QAAU,EAAA;AACZ,IAAA,IAAA,CAAK,GAAM,GAAA,QAAA;AACX,IAAA,IAAA,CAAK,YAAY,IAAK,CAAA,KAAA,CAAM,YAAY,IAAM,EAAA,QAAA,GAAW,CAAC,CAAI,GAAA,CAAA;AAC9D,IAAK,IAAA,CAAA,OAAA,GAAU,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,CAAA,EAAG,KAAK,SAAS,CAAA,CAAE,KAAM,CAAA,SAAS,CAAE,CAAA,MAAA;AAAA,GAC/D,MAAA;AACL,IAAK,IAAA,CAAA,GAAA,GAAM,KAAK,SAAY,GAAA,CAAA;AAC5B,IAAA,IAAA,CAAK,OAAU,GAAA,CAAA;AAAA;AAKjB,EAAA,IAAA,CAAK,OAAO,OAAQ,CAAA,GAAA;AAEpB,EAAA,IAAA,CAAK,KAAQ,GAAA,IAAA;AAEb,EAAK,IAAA,CAAA,KAAA,GAAQ,IAAK,CAAA,GAAA,GAAM,IAAK,CAAA,GAAA;AAG7B,EAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAK,WAAY,EAAA;AAG/C,EAAK,IAAA,CAAA,aAAA,GAAgB,KAAK,eAAkB,GAAA,IAAA;AAC5C,EAAK,IAAA,CAAA,YAAA,GAAe,IAAK,CAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAK3C,EAAK,IAAA,CAAA,OAAA,GAAU,KAAK,cAAe,EAAA;AACnC,EAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AAGnB,EAAK,IAAA,CAAA,QAAA,GAAWA,SAAQ,UAAe,KAAA,QAAA;AACvC,EAAA,IAAA,CAAK,SAAS,IAAK,CAAA,QAAA,IAAY,IAAK,CAAA,eAAA,CAAgB,KAAK,GAAG,CAAA;AAG5D,EAAA,IAAA,CAAK,gBAAmB,GAAA,CAAA,CAAA;AACxB,EAAA,IAAA,CAAK,wBAA2B,GAAA,KAAA;AAGhC,EAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAK,aAAgB,GAAA,CAAA;AAErD,EAAA,IAAA,CAAK,SAAS,EAAC;AAEf,EAAK,IAAA,CAAA,gBAAA,mBAA0B,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA;AAG1C,EAAI,IAAA,IAAA,CAAK,GAAQ,KAAA,CAAA,IAAKA,QAAQ,CAAA,aAAA,IAAiB,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,CAAA,EAAG,CAAC,CAAA,KAAM,IACxE,EAAA;AAAE,IAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA;AAAA;AAG1B,EAAA,IAAA,CAAK,aAAa,EAAC;AACnB,EAAA,IAAA,CAAK,WAAW,SAAS,CAAA;AAGzB,EAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AAKnB,EAAA,IAAA,CAAK,mBAAmB,EAAC;AAC3B,CAAA;AAEA,IAAI,kBAAA,GAAqB,EAAE,UAAY,EAAA,EAAE,cAAc,IAAK,EAAA,EAAE,aAAa,EAAE,YAAA,EAAc,MAAO,EAAA,OAAA,EAAS,EAAE,YAAc,EAAA,IAAA,IAAO,QAAU,EAAA,EAAE,YAAc,EAAA,IAAA,EAAO,EAAA,UAAA,EAAY,EAAE,YAAc,EAAA,IAAA,IAAO,gBAAkB,EAAA,EAAE,cAAc,IAAK,EAAA,EAAE,qBAAqB,EAAE,YAAA,EAAc,MAAO,EAAA,iBAAA,EAAmB,EAAE,YAAc,EAAA,IAAA,IAAO,kBAAoB,EAAA,EAAE,YAAc,EAAA,IAAA,EAAO,EAAA;AAEhX,MAAO,CAAA,SAAA,CAAU,KAAQ,GAAA,SAASqE,MAAS,GAAA;AACzC,EAAA,IAAIC,KAAO,GAAA,IAAA,CAAK,OAAQ,CAAA,OAAA,IAAW,KAAK,SAAU,EAAA;AAClD,EAAA,IAAA,CAAK,SAAU,EAAA;AACf,EAAO,OAAA,IAAA,CAAK,cAAcA,KAAI,CAAA;AAChC,CAAA;AAEA,kBAAmB,CAAA,UAAA,CAAW,MAAM,WAAY;AAAE,EAAA,OAAA,CAAQ,IAAK,CAAA,eAAA,EAAkB,CAAA,KAAA,GAAQ,cAAkB,IAAA,CAAA;AAAE,CAAA;AAE7G,kBAAmB,CAAA,WAAA,CAAY,MAAM,WAAY;AAAE,EAAQ,OAAA,CAAA,IAAA,CAAK,iBAAkB,CAAA,KAAA,GAAQ,mBAAmB,CAAK,IAAA,CAAC,IAAK,CAAA,eAAA,EAAkB,CAAA,gBAAA;AAAiB,CAAA;AAE3J,kBAAmB,CAAA,OAAA,CAAQ,MAAM,WAAY;AAAE,EAAQ,OAAA,CAAA,IAAA,CAAK,iBAAkB,CAAA,KAAA,GAAQ,eAAe,CAAK,IAAA,CAAC,IAAK,CAAA,eAAA,EAAkB,CAAA,gBAAA;AAAiB,CAAA;AAEnJ,kBAAmB,CAAA,QAAA,CAAS,MAAM,WAAY;AAC5C,EAAA,KAAA,IAAS,IAAI,IAAK,CAAA,UAAA,CAAW,SAAS,CAAG,EAAA,CAAA,IAAK,GAAG,CAAK,EAAA,EAAA;AACpD,IAAI,IAAA,KAAA,GAAQ,IAAK,CAAA,UAAA,CAAW,CAAC,CAAA;AAC7B,IAAA,IAAI,KAAM,CAAA,gBAAA,IAAoB,KAAM,CAAA,KAAA,GAAQ,wBAA0B,EAAA;AAAE,MAAO,OAAA,KAAA;AAAA;AAC/E,IAAI,IAAA,KAAA,CAAM,QAAQ,cAAgB,EAAA;AAAE,MAAQ,OAAA,CAAA,KAAA,CAAM,QAAQ,WAAe,IAAA,CAAA;AAAA;AAAE;AAE7E,EAAA,OAAQ,KAAK,QAAY,IAAA,IAAA,CAAK,QAAQ,WAAe,IAAA,EAAA,IAAO,KAAK,OAAQ,CAAA,yBAAA;AAC3E,CAAA;AAEA,kBAAmB,CAAA,UAAA,CAAW,MAAM,WAAY;AAC9C,EAAIrC,IAAAA,IAAAA,GAAM,KAAK,gBAAiB,EAAA;AAC9B,EAAA,IAAI,QAAQA,IAAI,CAAA,KAAA;AAChB,EAAA,IAAI,mBAAmBA,IAAI,CAAA,gBAAA;AAC7B,EAAA,OAAA,CAAQ,KAAQ,GAAA,WAAA,IAAe,CAAK,IAAA,gBAAA,IAAoB,KAAK,OAAQ,CAAA,uBAAA;AACvE,CAAA;AAEA,kBAAmB,CAAA,gBAAA,CAAiB,MAAM,WAAY;AAAE,EAAA,OAAA,CAAQ,IAAK,CAAA,gBAAA,EAAmB,CAAA,KAAA,GAAQ,kBAAsB,IAAA,CAAA;AAAE,CAAA;AAExH,kBAAmB,CAAA,mBAAA,CAAoB,MAAM,WAAY;AAAE,EAAA,OAAO,IAAK,CAAA,0BAAA,CAA2B,IAAK,CAAA,YAAA,EAAc,CAAA;AAAE,CAAA;AAEvH,kBAAmB,CAAA,iBAAA,CAAkB,MAAM,WAAY;AACrD,EAAIA,IAAAA,IAAAA,GAAM,KAAK,gBAAiB,EAAA;AAC9B,EAAA,IAAI,QAAQA,IAAI,CAAA,KAAA;AAChB,EAAA,IAAI,mBAAmBA,IAAI,CAAA,gBAAA;AAC7B,EAAQ,OAAA,CAAA,KAAA,IAAS,cAAiB,GAAA,wBAAA,CAAA,IAA6B,CAAK,IAAA,gBAAA;AACtE,CAAA;AAEA,kBAAmB,CAAA,kBAAA,CAAmB,MAAM,WAAY;AACtD,EAAA,OAAA,CAAQ,IAAK,CAAA,eAAA,EAAkB,CAAA,KAAA,GAAQ,wBAA4B,IAAA,CAAA;AACrE,CAAA;AAEA,MAAO,CAAA,MAAA,GAAS,SAAS9B,OAAU,GAAA;AAC/B,EAAA,IAAI,OAAU,GAAA,EAAI,EAAA,GAAA,GAAM,SAAU,CAAA,MAAA;AAClC,EAAA,OAAQ,GAAQ,EAAA,EAAA,OAAA,CAAS,GAAI,CAAA,GAAI,UAAW,GAAI,CAAA;AAElD,EAAA,IAAI,GAAM,GAAA,IAAA;AACV,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,OAAA,CAAQ,QAAQ,CAAK,EAAA,EAAA;AAAE,IAAM,GAAA,GAAA,OAAA,CAAQ,CAAC,CAAA,CAAE,GAAG,CAAA;AAAA;AAC/D,EAAO,OAAA,GAAA;AACT,CAAA;AAEA,MAAA,CAAO,KAAQ,GAAA,SAASkE,MAAO,CAAA,KAAA,EAAOrE,QAAS,EAAA;AAC7C,EAAA,OAAO,IAAI,IAAA,CAAKA,QAAS,EAAA,KAAK,EAAE,KAAM,EAAA;AACxC,CAAA;AAEA,MAAA,CAAO,iBAAoB,GAAA,SAAS,iBAAmB,CAAA,KAAA,EAAO,KAAKA,QAAS,EAAA;AAC1E,EAAA,IAAI,MAAS,GAAA,IAAI,IAAKA,CAAAA,QAAAA,EAAS,OAAO,GAAG,CAAA;AACzC,EAAA,MAAA,CAAO,SAAU,EAAA;AACjB,EAAA,OAAO,OAAO,eAAgB,EAAA;AAChC,CAAA;AAEA,MAAA,CAAO,SAAY,GAAA,SAAS,SAAW,CAAA,KAAA,EAAOA,QAAS,EAAA;AACrD,EAAO,OAAA,IAAI,IAAKA,CAAAA,QAAAA,EAAS,KAAK,CAAA;AAChC,CAAA;AAEA,MAAO,CAAA,gBAAA,CAAkB,MAAO,CAAA,SAAA,EAAW,kBAAmB,CAAA;AAE9D,IAAI,OAAO,MAAO,CAAA,SAAA;AAIlB,IAAI,OAAU,GAAA,oDAAA;AACd,IAAK,CAAA,eAAA,GAAkB,SAAS2C,MAAO,EAAA;AACrC,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,GAAc,CAAG,EAAA;AAAE,IAAO,OAAA,KAAA;AAAA;AAC3C,EAAS,WAAA;AAEP,IAAA,cAAA,CAAe,SAAYA,GAAAA,MAAAA;AAC3B,IAAAA,UAAS,cAAe,CAAA,IAAA,CAAK,KAAK,KAAK,CAAA,CAAE,CAAC,CAAE,CAAA,MAAA;AAC5C,IAAA,IAAI,QAAQ,OAAQ,CAAA,IAAA,CAAK,KAAK,KAAM,CAAA,KAAA,CAAMA,MAAK,CAAC,CAAA;AAChD,IAAA,IAAI,CAAC,KAAO,EAAA;AAAE,MAAO,OAAA,KAAA;AAAA;AACrB,IAAA,IAAA,CAAK,MAAM,CAAC,CAAA,IAAK,KAAM,CAAA,CAAC,OAAO,YAAc,EAAA;AAC3C,MAAA,cAAA,CAAe,SAAYA,GAAAA,MAAAA,GAAQ,KAAM,CAAA,CAAC,CAAE,CAAA,MAAA;AAC5C,MAAI,IAAA,UAAA,GAAa,cAAe,CAAA,IAAA,CAAK,IAAK,CAAA,KAAK,CAAG,EAAA,GAAA,GAAM,UAAW,CAAA,KAAA,GAAQ,UAAW,CAAA,CAAC,CAAE,CAAA,MAAA;AACzF,MAAA,IAAI,IAAO,GAAA,IAAA,CAAK,KAAM,CAAA,MAAA,CAAO,GAAG,CAAA;AAChC,MAAO,OAAA,IAAA,KAAS,OAAO,IAAS,KAAA,GAAA,IAC7B,UAAU,IAAK,CAAA,UAAA,CAAW,CAAC,CAAC,CAC5B,IAAA,EAAE,sBAAsB,IAAK,CAAA,IAAI,KAAK,IAAS,KAAA,GAAA,IAAO,KAAK,KAAM,CAAA,MAAA,CAAO,GAAM,GAAA,CAAC,CAAM,KAAA,GAAA,CAAA;AAAA;AAE1F,IAAAA,MAAAA,IAAS,KAAM,CAAA,CAAC,CAAE,CAAA,MAAA;AAGlB,IAAA,cAAA,CAAe,SAAYA,GAAAA,MAAAA;AAC3B,IAAAA,UAAS,cAAe,CAAA,IAAA,CAAK,KAAK,KAAK,CAAA,CAAE,CAAC,CAAE,CAAA,MAAA;AAC5C,IAAA,IAAI,IAAK,CAAA,KAAA,CAAMA,MAAK,CAAA,KAAM,GACxB,EAAA;AAAE,MAAAA,MAAAA,EAAAA;AAAA;AAAS;AAEjB,CAAA;AAKA,IAAK,CAAA,GAAA,GAAM,SAAS,IAAM,EAAA;AACxB,EAAI,IAAA,IAAA,CAAK,SAAS,IAAM,EAAA;AACtB,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAO,OAAA,IAAA;AAAA,GACF,MAAA;AACL,IAAO,OAAA,KAAA;AAAA;AAEX,CAAA;AAIA,IAAK,CAAA,YAAA,GAAe,SAASzC,KAAM,EAAA;AACjC,EAAO,OAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,IAAA,IAAQ,KAAK,KAAUA,KAAAA,KAAAA,IAAQ,CAAC,IAAK,CAAA,WAAA;AACpE,CAAA;AAIA,IAAK,CAAA,aAAA,GAAgB,SAASA,KAAM,EAAA;AAClC,EAAA,IAAI,CAAC,IAAA,CAAK,YAAaA,CAAAA,KAAI,CAAG,EAAA;AAAE,IAAO,OAAA,KAAA;AAAA;AACvC,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAO,OAAA,IAAA;AACT,CAAA;AAIA,IAAK,CAAA,gBAAA,GAAmB,SAASA,KAAM,EAAA;AACrC,EAAA,IAAI,CAAC,IAAA,CAAK,aAAcA,CAAAA,KAAI,CAAG,EAAA;AAAE,IAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACnD,CAAA;AAIA,IAAA,CAAK,qBAAqB,WAAW;AACnC,EAAA,OAAO,KAAK,IAAS,KAAA,OAAA,CAAQ,GAC3B,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA,IACtB,SAAU,CAAA,IAAA,CAAK,KAAK,KAAM,CAAA,KAAA,CAAM,KAAK,UAAY,EAAA,IAAA,CAAK,KAAK,CAAC,CAAA;AAChE,CAAA;AAEA,IAAA,CAAK,kBAAkB,WAAW;AAChC,EAAI,IAAA,IAAA,CAAK,oBAAsB,EAAA;AAC7B,IAAI,IAAA,IAAA,CAAK,QAAQ,mBACf,EAAA;AAAE,MAAA,IAAA,CAAK,OAAQ,CAAA,mBAAA,CAAoB,IAAK,CAAA,UAAA,EAAY,KAAK,aAAa,CAAA;AAAA;AACxE,IAAO,OAAA,IAAA;AAAA;AAEX,CAAA;AAKA,IAAA,CAAK,YAAY,WAAW;AAC1B,EAAI,IAAA,CAAC,KAAK,GAAI,CAAA,OAAA,CAAQ,IAAI,CAAK,IAAA,CAAC,IAAK,CAAA,eAAA,EAAmB,EAAA;AAAE,IAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC5E,CAAA;AAEA,IAAK,CAAA,kBAAA,GAAqB,SAAS,OAAA,EAAS,OAAS,EAAA;AACnD,EAAI,IAAA,IAAA,CAAK,SAAS,OAAS,EAAA;AACzB,IAAI,IAAA,IAAA,CAAK,QAAQ,eACf,EAAA;AAAE,MAAA,IAAA,CAAK,OAAQ,CAAA,eAAA,CAAgB,IAAK,CAAA,YAAA,EAAc,KAAK,eAAe,CAAA;AAAA;AACxE,IAAA,IAAI,CAAC,OACH,EAAA;AAAE,MAAA,IAAA,CAAK,IAAK,EAAA;AAAA;AACd,IAAO,OAAA,IAAA;AAAA;AAEX,CAAA;AAKA,IAAK,CAAA,MAAA,GAAS,SAAS,IAAM,EAAA;AAC3B,EAAA,IAAA,CAAK,GAAI,CAAA,IAAI,CAAK,IAAA,IAAA,CAAK,UAAW,EAAA;AACpC,CAAA;AAIA,IAAK,CAAA,UAAA,GAAa,SAAS,GAAK,EAAA;AAC9B,EAAA,IAAA,CAAK,MAAM,GAAO,IAAA,IAAA,GAAO,GAAM,GAAA,IAAA,CAAK,OAAO,kBAAkB,CAAA;AAC/D,CAAA;AAEA,IAAI,mBAAA,GAAsB,SAASyE,oBAAsB,GAAA;AACvD,EAAK,IAAA,CAAA,eAAA,GACL,KAAK,aACL,GAAA,IAAA,CAAK,sBACL,IAAK,CAAA,iBAAA,GACL,KAAK,WACH,GAAA,CAAA,CAAA;AACJ,CAAA;AAEA,IAAK,CAAA,kBAAA,GAAqB,SAAS,sBAAA,EAAwB,QAAU,EAAA;AACnE,EAAA,IAAI,CAAC,sBAAwB,EAAA;AAAE,IAAA;AAAA;AAC/B,EAAI,IAAA,sBAAA,CAAuB,gBAAgB,CACzC,CAAA,EAAA;AAAE,IAAK,IAAA,CAAA,gBAAA,CAAiB,sBAAuB,CAAA,aAAA,EAAe,+CAA+C,CAAA;AAAA;AAC/G,EAAA,IAAI,MAAS,GAAA,QAAA,GAAW,sBAAuB,CAAA,mBAAA,GAAsB,sBAAuB,CAAA,iBAAA;AAC5F,EAAA,IAAI,SAAS,CAAI,CAAA,EAAA;AAAE,IAAA,IAAA,CAAK,gBAAiB,CAAA,MAAA,EAAQ,QAAW,GAAA,qBAAA,GAAwB,uBAAuB,CAAA;AAAA;AAC7G,CAAA;AAEA,IAAK,CAAA,qBAAA,GAAwB,SAAS,sBAAA,EAAwB,QAAU,EAAA;AACtE,EAAA,IAAI,CAAC,sBAAwB,EAAA;AAAE,IAAO,OAAA,KAAA;AAAA;AACtC,EAAA,IAAI,kBAAkB,sBAAuB,CAAA,eAAA;AAC7C,EAAA,IAAI,cAAc,sBAAuB,CAAA,WAAA;AACzC,EAAA,IAAI,CAAC,QAAU,EAAA;AAAE,IAAO,OAAA,eAAA,IAAmB,KAAK,WAAe,IAAA,CAAA;AAAA;AAC/D,EAAA,IAAI,mBAAmB,CACrB,EAAA;AAAE,IAAK,IAAA,CAAA,KAAA,CAAM,iBAAiB,yEAAyE,CAAA;AAAA;AACzG,EAAA,IAAI,eAAe,CACjB,EAAA;AAAE,IAAK,IAAA,CAAA,gBAAA,CAAiB,aAAa,oCAAoC,CAAA;AAAA;AAC7E,CAAA;AAEA,IAAA,CAAK,iCAAiC,WAAW;AAC/C,EAAI,IAAA,IAAA,CAAK,aAAa,CAAC,IAAA,CAAK,YAAY,IAAK,CAAA,QAAA,GAAW,KAAK,QAC3D,CAAA,EAAA;AAAE,IAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,QAAA,EAAU,4CAA4C,CAAA;AAAA;AAC1E,EAAA,IAAI,KAAK,QACP,EAAA;AAAE,IAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,QAAA,EAAU,4CAA4C,CAAA;AAAA;AAC5E,CAAA;AAEA,IAAK,CAAA,oBAAA,GAAuB,SAAS,IAAM,EAAA;AACzC,EAAI,IAAA,IAAA,CAAK,SAAS,yBAChB,EAAA;AAAE,IAAO,OAAA,IAAA,CAAK,oBAAqB,CAAA,IAAA,CAAK,UAAU,CAAA;AAAA;AACpD,EAAA,OAAO,IAAK,CAAA,IAAA,KAAS,YAAgB,IAAA,IAAA,CAAK,IAAS,KAAA,kBAAA;AACrD,CAAA;AAEA,IAAI,OAAO,MAAO,CAAA,SAAA;AASlB,IAAK,CAAA,aAAA,GAAgB,SAASL,KAAM,EAAA;AAClC,EAAI,IAAA,OAAA,mBAAiB,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA;AAChC,EAAI,IAAA,CAACA,MAAK,IAAM,EAAA;AAAE,IAAAA,KAAAA,CAAK,OAAO,EAAC;AAAA;AAC/B,EAAO,OAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,GAAK,EAAA;AAChC,IAAA,IAAI,IAAO,GAAA,IAAA,CAAK,cAAe,CAAA,IAAA,EAAM,MAAM,OAAO,CAAA;AAClD,IAAAA,KAAAA,CAAK,IAAK,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA;AAErB,EAAA,IAAI,KAAK,QACP,EAAA;AAAE,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAGO,KAAO,GAAA,MAAA,CAAO,IAAK,CAAA,IAAA,CAAK,gBAAgB,CAAA,EAAG,CAAIA,GAAAA,KAAAA,CAAK,MAAQ,EAAA,CAAA,IAAK,CACjF,EAAA;AACE,MAAI3E,IAAAA,KAAAA,GAAO2E,MAAK,CAAC,CAAA;AAEjB,MAAK,IAAA,CAAA,gBAAA,CAAiB,KAAK,gBAAiB3E,CAAAA,KAAI,EAAE,KAAQ,EAAA,UAAA,GAAaA,QAAO,kBAAmB,CAAA;AAAA;AACnG;AACJ,EAAK,IAAA,CAAA,sBAAA,CAAuBoE,MAAK,IAAI,CAAA;AACrC,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAAA,KAAAA,CAAK,UAAa,GAAA,IAAA,CAAK,OAAQ,CAAA,UAAA;AAC/B,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,SAAS,CAAA;AACxC,CAAA;AAEA,IAAI,SAAA,GAAY,EAAC,IAAA,EAAM,MAAM,EAAA;AAA7B,IAAgC,WAAA,GAAc,EAAC,IAAA,EAAM,QAAQ,EAAA;AAE7D,IAAK,CAAA,KAAA,GAAQ,SAAS,OAAS,EAAA;AAC7B,EAAI,IAAA,IAAA,CAAK,QAAQ,WAAc,GAAA,CAAA,IAAK,CAAC,IAAK,CAAA,YAAA,CAAa,KAAK,CAAG,EAAA;AAAE,IAAO,OAAA,KAAA;AAAA;AACxE,EAAA,cAAA,CAAe,YAAY,IAAK,CAAA,GAAA;AAChC,EAAA,IAAI,IAAO,GAAA,cAAA,CAAe,IAAK,CAAA,IAAA,CAAK,KAAK,CAAA;AACzC,EAAI,IAAA,IAAA,GAAO,IAAK,CAAA,GAAA,GAAM,IAAK,CAAA,CAAC,CAAE,CAAA,MAAA,EAAQ,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,IAAI,CAAA;AAKzE,EAAI,IAAA,MAAA,KAAW,EAAM,IAAA,MAAA,KAAW,EAAI,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AAC7C,EAAA,IAAI,OAAS,EAAA;AAAE,IAAO,OAAA,KAAA;AAAA;AAEtB,EAAA,IAAI,MAAW,KAAA,GAAA,IAAO,MAAS,GAAA,KAAA,IAAU,SAAS,KAAQ,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AACnE,EAAI,IAAA,iBAAA,CAAkB,MAAQ,EAAA,IAAI,CAAG,EAAA;AACnC,IAAA,IAAI,MAAM,IAAO,GAAA,CAAA;AACjB,IAAO,OAAA,gBAAA,CAAiB,SAAS,IAAK,CAAA,KAAA,CAAM,WAAW,GAAG,CAAA,EAAG,IAAI,CAAG,EAAA;AAAE,MAAE,EAAA,GAAA;AAAA;AACxE,IAAA,IAAI,MAAW,KAAA,EAAA,IAAM,MAAS,GAAA,KAAA,IAAU,SAAS,KAAQ,EAAA;AAAE,MAAO,OAAA,IAAA;AAAA;AAClE,IAAA,IAAI,KAAQ,GAAA,IAAA,CAAK,KAAM,CAAA,KAAA,CAAM,MAAM,GAAG,CAAA;AACtC,IAAA,IAAI,CAAC,yBAAA,CAA0B,IAAK,CAAA,KAAK,CAAG,EAAA;AAAE,MAAO,OAAA,IAAA;AAAA;AAAK;AAE5D,EAAO,OAAA,KAAA;AACT,CAAA;AAKA,IAAA,CAAK,kBAAkB,WAAW;AAChC,EAAI,IAAA,IAAA,CAAK,QAAQ,WAAc,GAAA,CAAA,IAAK,CAAC,IAAK,CAAA,YAAA,CAAa,OAAO,CAC5D,EAAA;AAAE,IAAO,OAAA,KAAA;AAAA;AAEX,EAAA,cAAA,CAAe,YAAY,IAAK,CAAA,GAAA;AAChC,EAAA,IAAI,IAAO,GAAA,cAAA,CAAe,IAAK,CAAA,IAAA,CAAK,KAAK,CAAA;AACzC,EAAA,IAAI,OAAO,IAAK,CAAA,GAAA,GAAM,IAAK,CAAA,CAAC,EAAE,MAAQ,EAAA,KAAA;AACtC,EAAA,OAAO,CAAC,SAAU,CAAA,IAAA,CAAK,IAAK,CAAA,KAAA,CAAM,MAAM,IAAK,CAAA,GAAA,EAAK,IAAI,CAAC,KACrD,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,IAAA,EAAM,OAAO,CAAC,CAAA,KAAM,UACpC,KAAA,IAAA,GAAO,MAAM,IAAK,CAAA,KAAA,CAAM,MACxB,IAAA,EAAE,iBAAiB,KAAQ,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,OAAO,CAAC,CAAC,CAAK,IAAA,KAAA,GAAQ,SAAU,KAAQ,GAAA,KAAA,CAAA,CAAA;AAC9F,CAAA;AASA,IAAA,CAAK,cAAiB,GAAA,SAAS,OAAS,EAAA,QAAA,EAAU,OAAS,EAAA;AACzD,EAAA,IAAI,YAAY,IAAK,CAAA,IAAA,EAAMA,KAAO,GAAA,IAAA,CAAK,WAAa,EAAA,IAAA;AAEpD,EAAI,IAAA,IAAA,CAAK,KAAM,CAAA,OAAO,CAAG,EAAA;AACvB,IAAA,SAAA,GAAY,OAAQ,CAAA,IAAA;AACpB,IAAO,IAAA,GAAA,KAAA;AAAA;AAOT,EAAA,QAAQ,SAAW;AAAA,IACnB,KAAK,OAAQ,CAAA,MAAA;AAAA,IAAQ,KAAK,OAAQ,CAAA,SAAA;AAAW,MAAA,OAAO,IAAK,CAAA,2BAAA,CAA4BA,KAAM,EAAA,SAAA,CAAU,OAAO,CAAA;AAAA,IAC5G,KAAK,OAAQ,CAAA,SAAA;AAAW,MAAO,OAAA,IAAA,CAAK,uBAAuBA,KAAI,CAAA;AAAA,IAC/D,KAAK,OAAQ,CAAA,GAAA;AAAK,MAAO,OAAA,IAAA,CAAK,iBAAiBA,KAAI,CAAA;AAAA,IACnD,KAAK,OAAQ,CAAA,IAAA;AAAM,MAAO,OAAA,IAAA,CAAK,kBAAkBA,KAAI,CAAA;AAAA,IACrD,KAAK,OAAQ,CAAA,SAAA;AAIX,MAAK,IAAA,OAAA,KAAY,IAAK,CAAA,MAAA,IAAU,OAAY,KAAA,IAAA,IAAQ,YAAY,OAAa,CAAA,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AAAE,QAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC9H,MAAA,OAAO,IAAK,CAAA,sBAAA,CAAuBA,KAAM,EAAA,KAAA,EAAO,CAAC,OAAO,CAAA;AAAA,IAC1D,KAAK,OAAQ,CAAA,MAAA;AACX,MAAA,IAAI,OAAS,EAAA;AAAE,QAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC/B,MAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,IAAI,CAAA;AAAA,IACnC,KAAK,OAAQ,CAAA,GAAA;AAAK,MAAO,OAAA,IAAA,CAAK,iBAAiBA,KAAI,CAAA;AAAA,IACnD,KAAK,OAAQ,CAAA,OAAA;AAAS,MAAO,OAAA,IAAA,CAAK,qBAAqBA,KAAI,CAAA;AAAA,IAC3D,KAAK,OAAQ,CAAA,OAAA;AAAS,MAAO,OAAA,IAAA,CAAK,qBAAqBA,KAAI,CAAA;AAAA,IAC3D,KAAK,OAAQ,CAAA,MAAA;AAAQ,MAAO,OAAA,IAAA,CAAK,oBAAoBA,KAAI,CAAA;AAAA,IACzD,KAAK,OAAQ,CAAA,IAAA;AAAM,MAAO,OAAA,IAAA,CAAK,kBAAkBA,KAAI,CAAA;AAAA,IACrD,KAAK,OAAQ,CAAA,MAAA;AAAA,IAAQ,KAAK,OAAQ,CAAA,IAAA;AAChC,MAAA,IAAA,GAAO,QAAQ,IAAK,CAAA,KAAA;AACpB,MAAI,IAAA,OAAA,IAAW,SAAS,KAAO,EAAA;AAAE,QAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACjD,MAAO,OAAA,IAAA,CAAK,iBAAkBA,CAAAA,KAAAA,EAAM,IAAI,CAAA;AAAA,IAC1C,KAAK,OAAQ,CAAA,MAAA;AAAQ,MAAO,OAAA,IAAA,CAAK,oBAAoBA,KAAI,CAAA;AAAA,IACzD,KAAK,OAAQ,CAAA,KAAA;AAAO,MAAO,OAAA,IAAA,CAAK,mBAAmBA,KAAI,CAAA;AAAA,IACvD,KAAK,OAAQ,CAAA,MAAA;AAAQ,MAAO,OAAA,IAAA,CAAK,UAAW,CAAA,IAAA,EAAMA,KAAI,CAAA;AAAA,IACtD,KAAK,OAAQ,CAAA,IAAA;AAAM,MAAO,OAAA,IAAA,CAAK,oBAAoBA,KAAI,CAAA;AAAA,IACvD,KAAK,OAAQ,CAAA,OAAA;AAAA,IACb,KAAK,OAAQ,CAAA,OAAA;AACX,MAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,GAAc,EAAM,IAAA,SAAA,KAAc,QAAQ,OAAS,EAAA;AAClE,QAAA,cAAA,CAAe,YAAY,IAAK,CAAA,GAAA;AAChC,QAAA,IAAI,IAAO,GAAA,cAAA,CAAe,IAAK,CAAA,IAAA,CAAK,KAAK,CAAA;AACzC,QAAI,IAAA,IAAA,GAAO,IAAK,CAAA,GAAA,GAAM,IAAK,CAAA,CAAC,CAAE,CAAA,MAAA,EAAQ,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,IAAI,CAAA;AACzE,QAAI,IAAA,MAAA,KAAW,EAAM,IAAA,MAAA,KAAW,EAC9B,EAAA;AAAE,UAAA,OAAO,IAAK,CAAA,wBAAA,CAAyBA,KAAM,EAAA,IAAA,CAAK,iBAAiB,CAAA;AAAA;AAAE;AAGzE,MAAI,IAAA,CAAC,IAAK,CAAA,OAAA,CAAQ,2BAA6B,EAAA;AAC7C,QAAA,IAAI,CAAC,QACH,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,wDAAwD,CAAA;AAAA;AACnF,QAAI,IAAA,CAAC,KAAK,QACR,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,iEAAiE,CAAA;AAAA;AAAG;AAEjG,MAAO,OAAA,SAAA,KAAc,OAAQ,CAAA,OAAA,GAAU,IAAK,CAAA,WAAA,CAAYA,KAAI,CAAI,GAAA,IAAA,CAAK,WAAYA,CAAAA,KAAAA,EAAM,OAAO,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOhG;AACE,MAAI,IAAA,IAAA,CAAK,iBAAmB,EAAA;AAC1B,QAAA,IAAI,OAAS,EAAA;AAAE,UAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC/B,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAA,OAAO,IAAK,CAAA,sBAAA,CAAuBA,KAAM,EAAA,IAAA,EAAM,CAAC,OAAO,CAAA;AAAA;AAGzD,MAAA,IAAI,SAAY,GAAA,IAAA,CAAK,KAAO,EAAA,IAAA,GAAO,KAAK,eAAgB,EAAA;AACxD,MAAI,IAAA,SAAA,KAAc,OAAQ,CAAA,IAAA,IAAQ,IAAK,CAAA,IAAA,KAAS,gBAAgB,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,KAAK,CACpF,EAAA;AAAE,QAAA,OAAO,IAAK,CAAA,qBAAA,CAAsBA,KAAM,EAAA,SAAA,EAAW,MAAM,OAAO,CAAA;AAAA,OAC/D,MAAA;AAAE,QAAO,OAAA,IAAA,CAAK,wBAAyBA,CAAAA,KAAAA,EAAM,IAAI,CAAA;AAAA;AAAE;AAE5D,CAAA;AAEA,IAAK,CAAA,2BAAA,GAA8B,SAASA,KAAAA,EAAM,OAAS,EAAA;AACzD,EAAA,IAAI,UAAU,OAAY,KAAA,OAAA;AAC1B,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAA,IAAI,KAAK,GAAI,CAAA,OAAA,CAAQ,IAAI,CAAK,IAAA,IAAA,CAAK,iBAAmB,EAAA;AAAE,IAAAA,MAAK,KAAQ,GAAA,IAAA;AAAA,GAC5D,MAAA,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,IAAM,EAAA;AAAE,IAAA,IAAA,CAAK,UAAW,EAAA;AAAA,GAClD,MAAA;AACH,IAAAA,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,UAAW,EAAA;AAC7B,IAAA,IAAA,CAAK,SAAU,EAAA;AAAA;AAKjB,EAAA,IAAI,CAAI,GAAA,CAAA;AACR,EAAA,OAAO,CAAI,GAAA,IAAA,CAAK,MAAO,CAAA,MAAA,EAAQ,EAAE,CAAG,EAAA;AAClC,IAAI,IAAA,GAAA,GAAM,IAAK,CAAA,MAAA,CAAO,CAAC,CAAA;AACvB,IAAA,IAAIA,MAAK,KAAS,IAAA,IAAA,IAAQ,IAAI,IAASA,KAAAA,KAAAA,CAAK,MAAM,IAAM,EAAA;AACtD,MAAA,IAAI,IAAI,IAAQ,IAAA,IAAA,KAAS,OAAW,IAAA,GAAA,CAAI,SAAS,MAAS,CAAA,EAAA;AAAE,QAAA;AAAA;AAC5D,MAAIA,IAAAA,KAAAA,CAAK,SAAS,OAAS,EAAA;AAAE,QAAA;AAAA;AAAM;AACrC;AAEF,EAAI,IAAA,CAAA,KAAM,IAAK,CAAA,MAAA,CAAO,MAAQ,EAAA;AAAE,IAAA,IAAA,CAAK,KAAMA,CAAAA,KAAAA,CAAK,KAAO,EAAA,cAAA,GAAiB,OAAO,CAAA;AAAA;AAC/E,EAAA,OAAO,IAAK,CAAA,UAAA,CAAWA,KAAM,EAAA,OAAA,GAAU,mBAAmB,mBAAmB,CAAA;AAC/E,CAAA;AAEA,IAAK,CAAA,sBAAA,GAAyB,SAASA,KAAM,EAAA;AAC3C,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAA,IAAA,CAAK,SAAU,EAAA;AACf,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,mBAAmB,CAAA;AAClD,CAAA;AAEA,IAAK,CAAA,gBAAA,GAAmB,SAASA,KAAM,EAAA;AACrC,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAK,IAAA,CAAA,MAAA,CAAO,KAAK,SAAS,CAAA;AAC1B,EAAAA,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,IAAI,CAAA;AACpC,EAAA,IAAA,CAAK,OAAO,GAAI,EAAA;AAChB,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAC1B,EAAAA,KAAAA,CAAK,IAAO,GAAA,IAAA,CAAK,oBAAqB,EAAA;AACtC,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAC9B,EAAA;AAAE,IAAK,IAAA,CAAA,GAAA,CAAI,QAAQ,IAAI,CAAA;AAAA,GAEvB,MAAA;AAAE,IAAA,IAAA,CAAK,SAAU,EAAA;AAAA;AACnB,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,kBAAkB,CAAA;AACjD,CAAA;AAUA,IAAK,CAAA,iBAAA,GAAoB,SAASA,KAAM,EAAA;AACtC,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAA,IAAI,OAAW,GAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,IAAA,CAAK,QAAY,IAAA,IAAA,CAAK,aAAc,CAAA,OAAO,CAAK,GAAA,IAAA,CAAK,YAAe,GAAA,CAAA,CAAA;AACpH,EAAK,IAAA,CAAA,MAAA,CAAO,KAAK,SAAS,CAAA;AAC1B,EAAA,IAAA,CAAK,WAAW,CAAC,CAAA;AACjB,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAC1B,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,IAAM,EAAA;AAC9B,IAAA,IAAI,UAAU,CAAI,CAAA,EAAA;AAAE,MAAA,IAAA,CAAK,WAAW,OAAO,CAAA;AAAA;AAC3C,IAAO,OAAA,IAAA,CAAK,QAASA,CAAAA,KAAAA,EAAM,IAAI,CAAA;AAAA;AAEjC,EAAI,IAAA,KAAA,GAAQ,KAAK,KAAM,EAAA;AACvB,EAAI,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,IAAA,IAAQ,KAAK,IAAS,KAAA,OAAA,CAAQ,UAAU,KAAO,EAAA;AACvE,IAAA,IAAI,SAAS,IAAK,CAAA,SAAA,IAAa,IAAO,GAAA,KAAA,GAAQ,QAAQ,IAAK,CAAA,KAAA;AAC3D,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAK,IAAA,CAAA,QAAA,CAAS,MAAQ,EAAA,IAAA,EAAM,IAAI,CAAA;AAChC,IAAK,IAAA,CAAA,UAAA,CAAW,QAAQ,qBAAqB,CAAA;AAC7C,IAAA,IAAA,CAAK,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA,GAAA,IAAQ,KAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,IAAA,CAAK,aAAa,IAAI,CAAA,KAAO,MAAO,CAAA,YAAA,CAAa,WAAW,CAAG,EAAA;AACjI,MAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,QAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,GAAK,EAAA;AAC7B,UAAA,IAAI,UAAU,CAAI,CAAA,EAAA;AAAE,YAAA,IAAA,CAAK,WAAW,OAAO,CAAA;AAAA;AAAG,SACzC,MAAA;AAAE,UAAAA,KAAAA,CAAK,QAAQ,OAAU,GAAA,CAAA,CAAA;AAAA;AAAI;AAEtC,MAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,MAAM,CAAA;AAAA;AAErC,IAAA,IAAI,UAAU,CAAI,CAAA,EAAA;AAAE,MAAA,IAAA,CAAK,WAAW,OAAO,CAAA;AAAA;AAC3C,IAAO,OAAA,IAAA,CAAK,QAASA,CAAAA,KAAAA,EAAM,MAAM,CAAA;AAAA;AAEnC,EAAA,IAAI,aAAgB,GAAA,IAAA,CAAK,YAAa,CAAA,KAAK,GAAG,OAAU,GAAA,KAAA;AACxD,EAAA,IAAI,cAAc,IAAK,CAAA,WAAA;AACvB,EAAA,IAAI,yBAAyB,IAAI,mBAAA,EAAA;AACjC,EAAA,IAAI,UAAU,IAAK,CAAA,KAAA;AACnB,EAAI,IAAA,IAAA,GAAO,OAAU,GAAA,CAAA,CAAA,GACjB,IAAK,CAAA,mBAAA,CAAoB,sBAAwB,EAAA,OAAO,CACxD,GAAA,IAAA,CAAK,eAAgB,CAAA,IAAA,EAAM,sBAAsB,CAAA;AACrD,EAAA,IAAI,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA,GAAA,KAAQ,OAAU,GAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,IAAA,CAAK,YAAa,CAAA,IAAI,CAAI,CAAA,EAAA;AACrG,IAAA,IAAI,UAAU,CAAI,CAAA,EAAA;AAChB,MAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,GAAK,EAAA;AAAE,QAAA,IAAA,CAAK,WAAW,OAAO,CAAA;AAAA;AACxD,MAAAA,MAAK,KAAQ,GAAA,IAAA;AAAA,KACJ,MAAA,IAAA,OAAA,IAAW,IAAK,CAAA,OAAA,CAAQ,eAAe,CAAG,EAAA;AACnD,MAAI,IAAA,IAAA,CAAK,KAAU,KAAA,OAAA,IAAW,CAAC,WAAA,IAAe,KAAK,IAAS,KAAA,YAAA,IAAgB,IAAK,CAAA,IAAA,KAAS,OAAS,EAAA;AAAE,QAAA,IAAA,CAAK,UAAW,EAAA;AAAA,OAC5G,MAAA,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AAAE,QAAAA,MAAK,KAAQ,GAAA,KAAA;AAAA;AAAO;AAEhE,IAAA,IAAI,iBAAiB,OAAS,EAAA;AAAE,MAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,+DAA+D,CAAA;AAAA;AACtH,IAAK,IAAA,CAAA,YAAA,CAAa,IAAM,EAAA,KAAA,EAAO,sBAAsB,CAAA;AACrD,IAAA,IAAA,CAAK,iBAAiB,IAAI,CAAA;AAC1B,IAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,IAAI,CAAA;AAAA,GAC5B,MAAA;AACL,IAAK,IAAA,CAAA,qBAAA,CAAsB,wBAAwB,IAAI,CAAA;AAAA;AAEzD,EAAA,IAAI,UAAU,CAAI,CAAA,EAAA;AAAE,IAAA,IAAA,CAAK,WAAW,OAAO,CAAA;AAAA;AAC3C,EAAO,OAAA,IAAA,CAAK,QAASA,CAAAA,KAAAA,EAAM,IAAI,CAAA;AACjC,CAAA;AAEA,IAAA,CAAK,sBAAyB,GAAA,SAASA,KAAM,EAAA,OAAA,EAAS,mBAAqB,EAAA;AACzE,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAO,OAAA,IAAA,CAAK,cAAcA,KAAM,EAAA,cAAA,IAAkB,sBAAsB,CAAI,GAAA,sBAAA,CAAA,EAAyB,OAAO,OAAO,CAAA;AACrH,CAAA;AAEA,IAAK,CAAA,gBAAA,GAAmB,SAASA,KAAM,EAAA;AACrC,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAAA,KAAAA,CAAK,IAAO,GAAA,IAAA,CAAK,oBAAqB,EAAA;AAEtC,EAAAA,KAAK,CAAA,UAAA,GAAa,IAAK,CAAA,cAAA,CAAe,IAAI,CAAA;AAC1C,EAAAA,KAAAA,CAAK,SAAY,GAAA,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,KAAK,CAAI,GAAA,IAAA,CAAK,cAAe,CAAA,IAAI,CAAI,GAAA,IAAA;AACvE,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,aAAa,CAAA;AAC5C,CAAA;AAEA,IAAK,CAAA,oBAAA,GAAuB,SAASA,KAAM,EAAA;AACzC,EAAA,IAAI,CAAC,IAAK,CAAA,UAAA,IAAc,CAAC,IAAA,CAAK,QAAQ,0BACpC,EAAA;AAAE,IAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,8BAA8B,CAAA;AAAA;AACzD,EAAA,IAAA,CAAK,IAAK,EAAA;AAMV,EAAA,IAAI,KAAK,GAAI,CAAA,OAAA,CAAQ,IAAI,CAAK,IAAA,IAAA,CAAK,iBAAmB,EAAA;AAAE,IAAAA,MAAK,QAAW,GAAA,IAAA;AAAA,GACnE,MAAA;AAAE,IAAAA,KAAAA,CAAK,QAAW,GAAA,IAAA,CAAK,eAAgB,EAAA;AAAG,IAAA,IAAA,CAAK,SAAU,EAAA;AAAA;AAC9D,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAChD,CAAA;AAEA,IAAK,CAAA,oBAAA,GAAuB,SAASA,KAAM,EAAA;AACzC,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAAA,KAAAA,CAAK,YAAe,GAAA,IAAA,CAAK,oBAAqB,EAAA;AAC9C,EAAAA,KAAAA,CAAK,QAAQ,EAAC;AACd,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAC1B,EAAK,IAAA,CAAA,MAAA,CAAO,KAAK,WAAW,CAAA;AAC5B,EAAA,IAAA,CAAK,WAAW,CAAC,CAAA;AAMjB,EAAI,IAAA,GAAA;AACJ,EAAA,KAAA,IAAS,UAAa,GAAA,KAAA,EAAO,IAAK,CAAA,IAAA,KAAS,QAAQ,MAAS,IAAA;AAC1D,IAAA,IAAI,KAAK,IAAS,KAAA,OAAA,CAAQ,SAAS,IAAK,CAAA,IAAA,KAAS,QAAQ,QAAU,EAAA;AACjE,MAAI,IAAA,MAAA,GAAS,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA,KAAA;AACnC,MAAA,IAAI,GAAK,EAAA;AAAE,QAAK,IAAA,CAAA,UAAA,CAAW,KAAK,YAAY,CAAA;AAAA;AAC5C,MAAAA,MAAK,KAAM,CAAA,IAAA,CAAK,GAAM,GAAA,IAAA,CAAK,WAAW,CAAA;AACtC,MAAA,GAAA,CAAI,aAAa,EAAC;AAClB,MAAA,IAAA,CAAK,IAAK,EAAA;AACV,MAAA,IAAI,MAAQ,EAAA;AACV,QAAI,GAAA,CAAA,IAAA,GAAO,KAAK,eAAgB,EAAA;AAAA,OAC3B,MAAA;AACL,QAAA,IAAI,UAAY,EAAA;AAAE,UAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,YAAA,EAAc,0BAA0B,CAAA;AAAA;AACrF,QAAa,UAAA,GAAA,IAAA;AACb,QAAA,GAAA,CAAI,IAAO,GAAA,IAAA;AAAA;AAEb,MAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,KAAK,CAAA;AAAA,KACpB,MAAA;AACL,MAAA,IAAI,CAAC,GAAK,EAAA;AAAE,QAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC5B,MAAA,GAAA,CAAI,UAAW,CAAA,IAAA,CAAK,IAAK,CAAA,cAAA,CAAe,IAAI,CAAC,CAAA;AAAA;AAC/C;AAEF,EAAA,IAAA,CAAK,SAAU,EAAA;AACf,EAAA,IAAI,GAAK,EAAA;AAAE,IAAK,IAAA,CAAA,UAAA,CAAW,KAAK,YAAY,CAAA;AAAA;AAC5C,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAA,IAAA,CAAK,OAAO,GAAI,EAAA;AAChB,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAChD,CAAA;AAEA,IAAK,CAAA,mBAAA,GAAsB,SAASA,KAAM,EAAA;AACxC,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAI,IAAA,SAAA,CAAU,IAAK,CAAA,IAAA,CAAK,KAAM,CAAA,KAAA,CAAM,KAAK,UAAY,EAAA,IAAA,CAAK,KAAK,CAAC,CAC9D,EAAA;AAAE,IAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,UAAA,EAAY,6BAA6B,CAAA;AAAA;AAC7D,EAAAA,KAAAA,CAAK,QAAW,GAAA,IAAA,CAAK,eAAgB,EAAA;AACrC,EAAA,IAAA,CAAK,SAAU,EAAA;AACf,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,gBAAgB,CAAA;AAC/C,CAAA;AAIA,IAAI,UAAU,EAAC;AAEf,IAAA,CAAK,wBAAwB,WAAW;AACtC,EAAI,IAAA,KAAA,GAAQ,KAAK,gBAAiB,EAAA;AAClC,EAAI,IAAA,MAAA,GAAS,MAAM,IAAS,KAAA,YAAA;AAC5B,EAAK,IAAA,CAAA,UAAA,CAAW,MAAS,GAAA,kBAAA,GAAqB,CAAC,CAAA;AAC/C,EAAA,IAAA,CAAK,gBAAiB,CAAA,KAAA,EAAO,MAAS,GAAA,iBAAA,GAAoB,YAAY,CAAA;AACtE,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAE1B,EAAO,OAAA,KAAA;AACT,CAAA;AAEA,IAAK,CAAA,iBAAA,GAAoB,SAASA,KAAM,EAAA;AACtC,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAAA,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,UAAW,EAAA;AAC7B,EAAAA,MAAK,OAAU,GAAA,IAAA;AACf,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,MAAQ,EAAA;AAChC,IAAI,IAAA,MAAA,GAAS,KAAK,SAAU,EAAA;AAC5B,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAA,IAAI,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,MAAM,CAAG,EAAA;AAC5B,MAAO,MAAA,CAAA,KAAA,GAAQ,KAAK,qBAAsB,EAAA;AAAA,KACrC,MAAA;AACL,MAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,GAAc,EAAI,EAAA;AAAE,QAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACrD,MAAA,MAAA,CAAO,KAAQ,GAAA,IAAA;AACf,MAAA,IAAA,CAAK,WAAW,CAAC,CAAA;AAAA;AAEnB,IAAO,MAAA,CAAA,IAAA,GAAO,IAAK,CAAA,UAAA,CAAW,KAAK,CAAA;AACnC,IAAA,IAAA,CAAK,SAAU,EAAA;AACf,IAAAA,KAAK,CAAA,OAAA,GAAU,IAAK,CAAA,UAAA,CAAW,QAAQ,aAAa,CAAA;AAAA;AAEtD,EAAAA,KAAAA,CAAK,YAAY,IAAK,CAAA,GAAA,CAAI,QAAQ,QAAQ,CAAA,GAAI,IAAK,CAAA,UAAA,EAAe,GAAA,IAAA;AAClE,EAAA,IAAI,CAACA,KAAAA,CAAK,OAAW,IAAA,CAACA,MAAK,SACzB,EAAA;AAAE,IAAK,IAAA,CAAA,KAAA,CAAMA,KAAK,CAAA,KAAA,EAAO,iCAAiC,CAAA;AAAA;AAC5D,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,cAAc,CAAA;AAC7C,CAAA;AAEA,IAAA,CAAK,iBAAoB,GAAA,SAASA,KAAM,EAAA,IAAA,EAAM,uBAAyB,EAAA;AACrE,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAA,IAAA,CAAK,QAASA,CAAAA,KAAAA,EAAM,KAAO,EAAA,IAAA,EAAM,uBAAuB,CAAA;AACxD,EAAA,IAAA,CAAK,SAAU,EAAA;AACf,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,qBAAqB,CAAA;AACpD,CAAA;AAEA,IAAK,CAAA,mBAAA,GAAsB,SAASA,KAAM,EAAA;AACxC,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAAA,KAAAA,CAAK,IAAO,GAAA,IAAA,CAAK,oBAAqB,EAAA;AACtC,EAAK,IAAA,CAAA,MAAA,CAAO,KAAK,SAAS,CAAA;AAC1B,EAAAA,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,OAAO,CAAA;AACvC,EAAA,IAAA,CAAK,OAAO,GAAI,EAAA;AAChB,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,gBAAgB,CAAA;AAC/C,CAAA;AAEA,IAAK,CAAA,kBAAA,GAAqB,SAASA,KAAM,EAAA;AACvC,EAAA,IAAI,KAAK,MAAQ,EAAA;AAAE,IAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,uBAAuB,CAAA;AAAA;AACjE,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAAA,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,oBAAqB,EAAA;AACxC,EAAAA,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,MAAM,CAAA;AACtC,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,eAAe,CAAA;AAC9C,CAAA;AAEA,IAAK,CAAA,mBAAA,GAAsB,SAASA,KAAM,EAAA;AACxC,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,gBAAgB,CAAA;AAC/C,CAAA;AAEA,IAAA,CAAK,qBAAwB,GAAA,SAASA,KAAM,EAAA,SAAA,EAAW,MAAM,OAAS,EAAA;AACpE,EAAS,KAAA,IAAA,GAAA,GAAM,GAAGO,KAAO,GAAA,IAAA,CAAK,QAAQ,GAAMA,GAAAA,KAAAA,CAAK,MAAQ,EAAA,GAAA,IAAO,CAC9D,EAAA;AACA,IAAI,IAAA,KAAA,GAAQA,MAAK,GAAG,CAAA;AAEpB,IAAI,IAAA,KAAA,CAAM,SAAS,SACjB,EAAA;AAAE,MAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,KAAO,EAAA,SAAA,GAAY,YAAY,uBAAuB,CAAA;AAAA;AAC5E;AACA,EAAI,IAAA,IAAA,GAAO,KAAK,IAAK,CAAA,MAAA,GAAS,SAAS,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA,OAAA,GAAU,QAAW,GAAA,IAAA;AAClF,EAAA,KAAA,IAAS,IAAI,IAAK,CAAA,MAAA,CAAO,SAAS,CAAG,EAAA,CAAA,IAAK,GAAG,CAAK,EAAA,EAAA;AAChD,IAAI,IAAA,OAAA,GAAU,IAAK,CAAA,MAAA,CAAO,CAAC,CAAA;AAC3B,IAAI,IAAA,OAAA,CAAQ,cAAmBP,KAAAA,KAAAA,CAAK,KAAO,EAAA;AAEzC,MAAA,OAAA,CAAQ,iBAAiB,IAAK,CAAA,KAAA;AAC9B,MAAA,OAAA,CAAQ,IAAO,GAAA,IAAA;AAAA,KACV,MAAA;AAAE,MAAA;AAAA;AAAM;AAEjB,EAAK,IAAA,CAAA,MAAA,CAAO,KAAK,EAAC,IAAA,EAAM,WAAW,IAAY,EAAA,cAAA,EAAgB,IAAK,CAAA,KAAA,EAAM,CAAA;AAC1E,EAAAA,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,OAAU,GAAA,OAAA,CAAQ,OAAQ,CAAA,OAAO,CAAM,KAAA,CAAA,CAAA,GAAK,OAAU,GAAA,OAAA,GAAU,UAAU,OAAO,CAAA;AACjH,EAAA,IAAA,CAAK,OAAO,GAAI,EAAA;AAChB,EAAAA,MAAK,KAAQ,GAAA,IAAA;AACb,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,kBAAkB,CAAA;AACjD,CAAA;AAEA,IAAK,CAAA,wBAAA,GAA2B,SAASA,KAAAA,EAAM,IAAM,EAAA;AACnD,EAAAA,MAAK,UAAa,GAAA,IAAA;AAClB,EAAA,IAAA,CAAK,SAAU,EAAA;AACf,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,qBAAqB,CAAA;AACpD,CAAA;AAMA,IAAA,CAAK,UAAa,GAAA,SAAS,qBAAuBA,EAAAA,KAAAA,EAAM,UAAY,EAAA;AAClE,EAAK,IAAA,qBAAA,KAA0B,QAAiC,qBAAA,GAAA,IAAA;AAChE,EAAA,IAAKA,KAAS,KAAA,KAAA,CAAA,EAASA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAE7C,EAAAA,KAAAA,CAAK,OAAO,EAAC;AACb,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAC1B,EAAA,IAAI,qBAAuB,EAAA;AAAE,IAAA,IAAA,CAAK,WAAW,CAAC,CAAA;AAAA;AAC9C,EAAO,OAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,MAAQ,EAAA;AACnC,IAAI,IAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,IAAI,CAAA;AACnC,IAAAA,KAAAA,CAAK,IAAK,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA;AAErB,EAAA,IAAI,UAAY,EAAA;AAAE,IAAA,IAAA,CAAK,MAAS,GAAA,KAAA;AAAA;AAChC,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAA,IAAI,qBAAuB,EAAA;AAAE,IAAA,IAAA,CAAK,SAAU,EAAA;AAAA;AAC5C,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,gBAAgB,CAAA;AAC/C,CAAA;AAMA,IAAK,CAAA,QAAA,GAAW,SAASA,KAAAA,EAAM,IAAM,EAAA;AACnC,EAAAA,MAAK,IAAO,GAAA,IAAA;AACZ,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,IAAI,CAAA;AACxB,EAAAA,KAAAA,CAAK,OAAO,IAAK,CAAA,IAAA,KAAS,QAAQ,IAAO,GAAA,IAAA,GAAO,KAAK,eAAgB,EAAA;AACrE,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,IAAI,CAAA;AACxB,EAAAA,KAAAA,CAAK,SAAS,IAAK,CAAA,IAAA,KAAS,QAAQ,MAAS,GAAA,IAAA,GAAO,KAAK,eAAgB,EAAA;AACzE,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAC1B,EAAAA,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,KAAK,CAAA;AACrC,EAAA,IAAA,CAAK,SAAU,EAAA;AACf,EAAA,IAAA,CAAK,OAAO,GAAI,EAAA;AAChB,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,cAAc,CAAA;AAC7C,CAAA;AAKA,IAAK,CAAA,UAAA,GAAa,SAASA,KAAAA,EAAM,IAAM,EAAA;AACrC,EAAI,IAAA,OAAA,GAAU,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA,GAAA;AACpC,EAAA,IAAA,CAAK,IAAK,EAAA;AAEV,EACE,IAAA,IAAA,CAAK,IAAS,KAAA,qBAAA,IACd,IAAK,CAAA,YAAA,CAAa,CAAC,CAAA,CAAE,IAAQ,IAAA,IAAA,KAE3B,CAAC,OAAA,IACD,IAAK,CAAA,OAAA,CAAQ,cAAc,CAC3B,IAAA,IAAA,CAAK,MACL,IAAA,IAAA,CAAK,IAAS,KAAA,KAAA,IACd,IAAK,CAAA,YAAA,CAAa,CAAC,CAAA,CAAE,EAAG,CAAA,IAAA,KAAS,YAEnC,CAAA,EAAA;AACA,IAAK,IAAA,CAAA,KAAA;AAAA,MACH,IAAK,CAAA,KAAA;AAAA,MACH,CAAA,OAAA,GAAU,WAAW,QAAY,IAAA;AAAA,KACrC;AAAA;AAEF,EAAAA,MAAK,IAAO,GAAA,IAAA;AACZ,EAAAA,MAAK,KAAQ,GAAA,OAAA,GAAU,KAAK,eAAgB,EAAA,GAAI,KAAK,gBAAiB,EAAA;AACtE,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAC1B,EAAAA,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,KAAK,CAAA;AACrC,EAAA,IAAA,CAAK,SAAU,EAAA;AACf,EAAA,IAAA,CAAK,OAAO,GAAI,EAAA;AAChB,EAAA,OAAO,IAAK,CAAA,UAAA,CAAWA,KAAM,EAAA,OAAA,GAAU,mBAAmB,gBAAgB,CAAA;AAC5E,CAAA;AAIA,IAAA,CAAK,QAAW,GAAA,SAASA,KAAM,EAAA,KAAA,EAAO,MAAM,uBAAyB,EAAA;AACnE,EAAAA,KAAAA,CAAK,eAAe,EAAC;AACrB,EAAAA,MAAK,IAAO,GAAA,IAAA;AACZ,EAAS,WAAA;AACP,IAAI,IAAA,IAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,IAAK,IAAA,CAAA,UAAA,CAAW,MAAM,IAAI,CAAA;AAC1B,IAAA,IAAI,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,EAAE,CAAG,EAAA;AACxB,MAAK,IAAA,CAAA,IAAA,GAAO,IAAK,CAAA,gBAAA,CAAiB,KAAK,CAAA;AAAA,eAC9B,CAAC,uBAAA,IAA2B,IAAS,KAAA,OAAA,IAAW,EAAE,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA,GAAA,IAAQ,KAAK,OAAQ,CAAA,WAAA,IAAe,KAAK,IAAK,CAAA,YAAA,CAAa,IAAI,CAAK,CAAA,EAAA;AACrJ,MAAA,IAAA,CAAK,UAAW,EAAA;AAAA,eACP,CAAC,uBAAA,IAA2B,IAAK,CAAA,EAAA,CAAG,SAAS,YAAgB,IAAA,EAAE,KAAU,KAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,GAAA,IAAO,IAAK,CAAA,YAAA,CAAa,IAAI,CAAK,CAAA,CAAA,EAAA;AAC1I,MAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,UAAA,EAAY,0DAA0D,CAAA;AAAA,KACjF,MAAA;AACL,MAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AAAA;AAEd,IAAAA,MAAK,YAAa,CAAA,IAAA,CAAK,KAAK,UAAW,CAAA,IAAA,EAAM,oBAAoB,CAAC,CAAA;AAClE,IAAA,IAAI,CAAC,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAAE,MAAA;AAAA;AAAM;AAExC,EAAOA,OAAAA,KAAAA;AACT,CAAA;AAEA,IAAK,CAAA,UAAA,GAAa,SAAS,IAAA,EAAM,IAAM,EAAA;AACrC,EAAK,IAAA,CAAA,EAAA,GAAK,KAAK,gBAAiB,EAAA;AAChC,EAAA,IAAA,CAAK,iBAAiB,IAAK,CAAA,EAAA,EAAI,SAAS,KAAQ,GAAA,QAAA,GAAW,cAAc,KAAK,CAAA;AAChF,CAAA;AAEA,IAAI,cAAiB,GAAA,CAAA;AAArB,IAAwB,sBAAyB,GAAA,CAAA;AAAjD,IAAoD,gBAAmB,GAAA,CAAA;AAMvE,IAAA,CAAK,gBAAgB,SAASA,KAAAA,EAAM,SAAW,EAAA,mBAAA,EAAqB,SAAS,OAAS,EAAA;AACpF,EAAA,IAAA,CAAK,aAAaA,KAAI,CAAA;AACtB,EAAI,IAAA,IAAA,CAAK,QAAQ,WAAe,IAAA,CAAA,IAAK,KAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,CAAC,OAAS,EAAA;AAC9E,IAAA,IAAI,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA,IAAA,IAAS,YAAY,sBAC7C,EAAA;AAAE,MAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACpB,IAAAA,KAAK,CAAA,SAAA,GAAY,IAAK,CAAA,GAAA,CAAI,QAAQ,IAAI,CAAA;AAAA;AAExC,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAC9B,EAAA;AAAE,IAAAA,KAAAA,CAAK,KAAQ,GAAA,CAAC,CAAC,OAAA;AAAA;AAEnB,EAAA,IAAI,YAAY,cAAgB,EAAA;AAC9B,IAAAA,KAAAA,CAAK,EAAM,GAAA,SAAA,GAAY,gBAAqB,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,IAAA,GAAO,IAAO,GAAA,IAAA,CAAK,UAAW,EAAA;AAChG,IAAA,IAAIA,KAAK,CAAA,EAAA,IAAM,EAAE,SAAA,GAAY,sBAK3B,CAAA,EAAA;AAAE,MAAA,IAAA,CAAK,eAAgBA,CAAAA,KAAAA,CAAK,EAAK,EAAA,IAAA,CAAK,MAAUA,IAAAA,KAAAA,CAAK,SAAaA,IAAAA,KAAAA,CAAK,KAAS,GAAA,IAAA,CAAK,mBAAsB,GAAA,QAAA,GAAW,eAAe,aAAa,CAAA;AAAA;AAAG;AAGzJ,EAAA,IAAI,cAAc,IAAK,CAAA,QAAA,EAAU,cAAc,IAAK,CAAA,QAAA,EAAU,mBAAmB,IAAK,CAAA,aAAA;AACtF,EAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,EAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,EAAA,IAAA,CAAK,aAAgB,GAAA,CAAA;AACrB,EAAA,IAAA,CAAK,WAAW,aAAcA,CAAAA,KAAAA,CAAK,KAAOA,EAAAA,KAAAA,CAAK,SAAS,CAAC,CAAA;AAEzD,EAAI,IAAA,EAAE,YAAY,cAChB,CAAA,EAAA;AAAE,IAAAA,KAAAA,CAAK,KAAK,IAAK,CAAA,IAAA,KAAS,QAAQ,IAAO,GAAA,IAAA,CAAK,YAAe,GAAA,IAAA;AAAA;AAE/D,EAAA,IAAA,CAAK,oBAAoBA,KAAI,CAAA;AAC7B,EAAA,IAAA,CAAK,iBAAkBA,CAAAA,KAAAA,EAAM,mBAAqB,EAAA,KAAA,EAAO,OAAO,CAAA;AAEhE,EAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,EAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,EAAA,IAAA,CAAK,aAAgB,GAAA,gBAAA;AACrB,EAAA,OAAO,KAAK,UAAWA,CAAAA,KAAAA,EAAO,SAAY,GAAA,cAAA,GAAkB,wBAAwB,oBAAoB,CAAA;AAC1G,CAAA;AAEA,IAAK,CAAA,mBAAA,GAAsB,SAASA,KAAM,EAAA;AACxC,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAC1B,EAAAA,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,gBAAiB,CAAA,OAAA,CAAQ,QAAQ,KAAO,EAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAC,CAAA;AACxF,EAAA,IAAA,CAAK,8BAA+B,EAAA;AACtC,CAAA;AAKA,IAAK,CAAA,UAAA,GAAa,SAASA,KAAAA,EAAM,WAAa,EAAA;AAC5C,EAAA,IAAA,CAAK,IAAK,EAAA;AAIV,EAAA,IAAI,YAAY,IAAK,CAAA,MAAA;AACrB,EAAA,IAAA,CAAK,MAAS,GAAA,IAAA;AAEd,EAAK,IAAA,CAAA,YAAA,CAAaA,OAAM,WAAW,CAAA;AACnC,EAAA,IAAA,CAAK,gBAAgBA,KAAI,CAAA;AACzB,EAAI,IAAA,cAAA,GAAiB,KAAK,cAAe,EAAA;AACzC,EAAI,IAAA,SAAA,GAAY,KAAK,SAAU,EAAA;AAC/B,EAAA,IAAI,cAAiB,GAAA,KAAA;AACrB,EAAA,SAAA,CAAU,OAAO,EAAC;AAClB,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAC1B,EAAO,OAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,MAAQ,EAAA;AACnC,IAAA,IAAI,OAAU,GAAA,IAAA,CAAK,iBAAkBA,CAAAA,KAAAA,CAAK,eAAe,IAAI,CAAA;AAC7D,IAAA,IAAI,OAAS,EAAA;AACX,MAAU,SAAA,CAAA,IAAA,CAAK,KAAK,OAAO,CAAA;AAC3B,MAAA,IAAI,OAAQ,CAAA,IAAA,KAAS,kBAAsB,IAAA,OAAA,CAAQ,SAAS,aAAe,EAAA;AACzE,QAAA,IAAI,cAAgB,EAAA;AAAE,UAAK,IAAA,CAAA,gBAAA,CAAiB,OAAQ,CAAA,KAAA,EAAO,yCAAyC,CAAA;AAAA;AACpG,QAAiB,cAAA,GAAA,IAAA;AAAA,OACnB,MAAA,IAAW,OAAQ,CAAA,GAAA,IAAO,OAAQ,CAAA,GAAA,CAAI,SAAS,mBAAuB,IAAA,uBAAA,CAAwB,cAAgB,EAAA,OAAO,CAAG,EAAA;AACtH,QAAK,IAAA,CAAA,gBAAA,CAAiB,QAAQ,GAAI,CAAA,KAAA,EAAQ,kBAAmB,OAAQ,CAAA,GAAA,CAAI,OAAQ,6BAA8B,CAAA;AAAA;AACjH;AACF;AAEF,EAAA,IAAA,CAAK,MAAS,GAAA,SAAA;AACd,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAAA,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,UAAA,CAAW,WAAW,WAAW,CAAA;AAClD,EAAA,IAAA,CAAK,aAAc,EAAA;AACnB,EAAA,OAAO,IAAK,CAAA,UAAA,CAAWA,KAAM,EAAA,WAAA,GAAc,qBAAqB,iBAAiB,CAAA;AACnF,CAAA;AAEA,IAAK,CAAA,iBAAA,GAAoB,SAAS,sBAAwB,EAAA;AACxD,EAAA,IAAI,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,IAAI,CAAG,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AAErC,EAAI,IAAA,WAAA,GAAc,KAAK,OAAQ,CAAA,WAAA;AAC/B,EAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAA,IAAI,OAAU,GAAA,EAAA;AACd,EAAA,IAAI,WAAc,GAAA,KAAA;AAClB,EAAA,IAAI,OAAU,GAAA,KAAA;AACd,EAAA,IAAI,IAAO,GAAA,QAAA;AACX,EAAA,IAAI,QAAW,GAAA,KAAA;AAEf,EAAI,IAAA,IAAA,CAAK,aAAc,CAAA,QAAQ,CAAG,EAAA;AAEhC,IAAA,IAAI,eAAe,EAAM,IAAA,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AACjD,MAAA,IAAA,CAAK,sBAAsBA,KAAI,CAAA;AAC/B,MAAOA,OAAAA,KAAAA;AAAA;AAET,IAAA,IAAI,KAAK,uBAAwB,EAAA,IAAK,IAAK,CAAA,IAAA,KAAS,QAAQ,IAAM,EAAA;AAChE,MAAW,QAAA,GAAA,IAAA;AAAA,KACN,MAAA;AACL,MAAU,OAAA,GAAA,QAAA;AAAA;AACZ;AAEF,EAAAA,MAAK,MAAS,GAAA,QAAA;AACd,EAAA,IAAI,CAAC,OAAW,IAAA,WAAA,IAAe,KAAK,IAAK,CAAA,aAAA,CAAc,OAAO,CAAG,EAAA;AAC/D,IAAK,IAAA,CAAA,IAAA,CAAK,uBAAwB,EAAA,IAAK,IAAK,CAAA,IAAA,KAAS,QAAQ,IAAS,KAAA,CAAC,IAAK,CAAA,kBAAA,EAAsB,EAAA;AAChG,MAAU,OAAA,GAAA,IAAA;AAAA,KACL,MAAA;AACL,MAAU,OAAA,GAAA,OAAA;AAAA;AACZ;AAEF,EAAI,IAAA,CAAC,OAAY,KAAA,WAAA,IAAe,CAAK,IAAA,CAAC,YAAY,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,IAAI,CAAG,EAAA;AACxE,IAAc,WAAA,GAAA,IAAA;AAAA;AAEhB,EAAA,IAAI,CAAC,OAAA,IAAW,CAAC,OAAA,IAAW,CAAC,WAAa,EAAA;AACxC,IAAA,IAAI,YAAY,IAAK,CAAA,KAAA;AACrB,IAAA,IAAI,KAAK,aAAc,CAAA,KAAK,KAAK,IAAK,CAAA,aAAA,CAAc,KAAK,CAAG,EAAA;AAC1D,MAAI,IAAA,IAAA,CAAK,yBAA2B,EAAA;AAClC,QAAO,IAAA,GAAA,SAAA;AAAA,OACF,MAAA;AACL,QAAU,OAAA,GAAA,SAAA;AAAA;AACZ;AACF;AAIF,EAAA,IAAI,OAAS,EAAA;AAGX,IAAAA,MAAK,QAAW,GAAA,KAAA;AAChB,IAAAA,MAAK,GAAM,GAAA,IAAA,CAAK,YAAY,IAAK,CAAA,YAAA,EAAc,KAAK,eAAe,CAAA;AACnE,IAAAA,KAAAA,CAAK,IAAI,IAAO,GAAA,OAAA;AAChB,IAAK,IAAA,CAAA,UAAA,CAAWA,KAAK,CAAA,GAAA,EAAK,YAAY,CAAA;AAAA,GACjC,MAAA;AACL,IAAA,IAAA,CAAK,sBAAsBA,KAAI,CAAA;AAAA;AAIjC,EAAI,IAAA,WAAA,GAAc,MAAM,IAAK,CAAA,IAAA,KAAS,QAAQ,MAAU,IAAA,IAAA,KAAS,QAAY,IAAA,WAAA,IAAe,OAAS,EAAA;AACnG,IAAA,IAAI,gBAAgB,CAACA,KAAAA,CAAK,MAAU,IAAA,YAAA,CAAaA,OAAM,aAAa,CAAA;AACpE,IAAA,IAAI,oBAAoB,aAAiB,IAAA,sBAAA;AAEzC,IAAI,IAAA,aAAA,IAAiB,SAAS,QAAU,EAAA;AAAE,MAAA,IAAA,CAAK,KAAMA,CAAAA,KAAAA,CAAK,GAAI,CAAA,KAAA,EAAO,yCAAyC,CAAA;AAAA;AAC9G,IAAAA,KAAAA,CAAK,IAAO,GAAA,aAAA,GAAgB,aAAgB,GAAA,IAAA;AAC5C,IAAA,IAAA,CAAK,gBAAiBA,CAAAA,KAAAA,EAAM,WAAa,EAAA,OAAA,EAAS,iBAAiB,CAAA;AAAA,GAC9D,MAAA;AACL,IAAA,IAAA,CAAK,gBAAgBA,KAAI,CAAA;AAAA;AAG3B,EAAOA,OAAAA,KAAAA;AACT,CAAA;AAEA,IAAA,CAAK,0BAA0B,WAAW;AACxC,EACE,OAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,IAAA,IACtB,KAAK,IAAS,KAAA,OAAA,CAAQ,aACtB,IAAK,CAAA,IAAA,KAAS,QAAQ,GACtB,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA,IACtB,KAAK,IAAS,KAAA,OAAA,CAAQ,QACtB,IAAA,IAAA,CAAK,IAAK,CAAA,OAAA;AAEd,CAAA;AAEA,IAAK,CAAA,qBAAA,GAAwB,SAAS,OAAS,EAAA;AAC7C,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,SAAW,EAAA;AACnC,IAAI,IAAA,IAAA,CAAK,UAAU,aAAe,EAAA;AAChC,MAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,oDAAoD,CAAA;AAAA;AAE7E,IAAA,OAAA,CAAQ,QAAW,GAAA,KAAA;AACnB,IAAQ,OAAA,CAAA,GAAA,GAAM,KAAK,iBAAkB,EAAA;AAAA,GAChC,MAAA;AACL,IAAA,IAAA,CAAK,kBAAkB,OAAO,CAAA;AAAA;AAElC,CAAA;AAEA,IAAA,CAAK,gBAAmB,GAAA,SAAS,MAAQ,EAAA,WAAA,EAAa,SAAS,iBAAmB,EAAA;AAEhF,EAAA,IAAI,MAAM,MAAO,CAAA,GAAA;AACjB,EAAI,IAAA,MAAA,CAAO,SAAS,aAAe,EAAA;AACjC,IAAA,IAAI,WAAa,EAAA;AAAE,MAAK,IAAA,CAAA,KAAA,CAAM,GAAI,CAAA,KAAA,EAAO,kCAAkC,CAAA;AAAA;AAC3E,IAAA,IAAI,OAAS,EAAA;AAAE,MAAK,IAAA,CAAA,KAAA,CAAM,GAAI,CAAA,KAAA,EAAO,sCAAsC,CAAA;AAAA;AAAG,aACrE,MAAO,CAAA,MAAA,IAAU,YAAa,CAAA,MAAA,EAAQ,WAAW,CAAG,EAAA;AAC7D,IAAK,IAAA,CAAA,KAAA,CAAM,GAAI,CAAA,KAAA,EAAO,wDAAwD,CAAA;AAAA;AAIhF,EAAA,IAAIiB,SAAQ,MAAO,CAAA,KAAA,GAAQ,KAAK,WAAY,CAAA,WAAA,EAAa,SAAS,iBAAiB,CAAA;AAGnF,EAAA,IAAI,OAAO,IAAS,KAAA,KAAA,IAASA,MAAM,CAAA,MAAA,CAAO,WAAW,CACnD,EAAA;AAAE,IAAK,IAAA,CAAA,gBAAA,CAAiBA,MAAM,CAAA,KAAA,EAAO,8BAA8B,CAAA;AAAA;AACrE,EAAA,IAAI,OAAO,IAAS,KAAA,KAAA,IAASA,MAAM,CAAA,MAAA,CAAO,WAAW,CACnD,EAAA;AAAE,IAAK,IAAA,CAAA,gBAAA,CAAiBA,MAAM,CAAA,KAAA,EAAO,sCAAsC,CAAA;AAAA;AAC7E,EAAI,IAAA,MAAA,CAAO,SAAS,KAASA,IAAAA,MAAAA,CAAM,OAAO,CAAC,CAAA,CAAE,SAAS,aACpD,EAAA;AAAE,IAAA,IAAA,CAAK,iBAAiBA,MAAM,CAAA,MAAA,CAAO,CAAC,CAAA,CAAE,OAAO,+BAA+B,CAAA;AAAA;AAEhF,EAAO,OAAA,IAAA,CAAK,UAAW,CAAA,MAAA,EAAQ,kBAAkB,CAAA;AACnD,CAAA;AAEA,IAAK,CAAA,eAAA,GAAkB,SAAS,KAAO,EAAA;AACrC,EAAI,IAAA,YAAA,CAAa,KAAO,EAAA,aAAa,CAAG,EAAA;AACtC,IAAA,IAAA,CAAK,KAAM,CAAA,KAAA,CAAM,GAAI,CAAA,KAAA,EAAO,gDAAgD,CAAA;AAAA,aACnE,KAAM,CAAA,MAAA,IAAU,YAAa,CAAA,KAAA,EAAO,WAAW,CAAG,EAAA;AAC3D,IAAA,IAAA,CAAK,KAAM,CAAA,KAAA,CAAM,GAAI,CAAA,KAAA,EAAO,qDAAqD,CAAA;AAAA;AAGnF,EAAA,IAAI,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,EAAE,CAAG,EAAA;AAExB,IAAI,IAAA,KAAA,GAAQ,KAAK,gBAAiB,EAAA;AAClC,IAAA,IAAI,mBAAmB,KAAM,CAAA,gBAAA;AAC7B,IAAA,KAAA,CAAM,gBAAmB,GAAA,IAAA;AACzB,IAAM,KAAA,CAAA,KAAA,GAAQ,KAAK,gBAAiB,EAAA;AACpC,IAAA,KAAA,CAAM,gBAAmB,GAAA,gBAAA;AAAA,GACpB,MAAA;AACL,IAAA,KAAA,CAAM,KAAQ,GAAA,IAAA;AAAA;AAEhB,EAAA,IAAA,CAAK,SAAU,EAAA;AAEf,EAAO,OAAA,IAAA,CAAK,UAAW,CAAA,KAAA,EAAO,oBAAoB,CAAA;AACpD,CAAA;AAEA,IAAK,CAAA,qBAAA,GAAwB,SAASjB,KAAM,EAAA;AAC1C,EAAAA,KAAAA,CAAK,OAAO,EAAC;AAEb,EAAA,IAAI,YAAY,IAAK,CAAA,MAAA;AACrB,EAAA,IAAA,CAAK,SAAS,EAAC;AACf,EAAK,IAAA,CAAA,UAAA,CAAW,2BAA2B,WAAW,CAAA;AACtD,EAAO,OAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,MAAQ,EAAA;AACnC,IAAI,IAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAe,IAAI,CAAA;AACnC,IAAAA,KAAAA,CAAK,IAAK,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA;AAErB,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAA,IAAA,CAAK,SAAU,EAAA;AACf,EAAA,IAAA,CAAK,MAAS,GAAA,SAAA;AAEd,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,aAAa,CAAA;AAC5C,CAAA;AAEA,IAAK,CAAA,YAAA,GAAe,SAASA,KAAAA,EAAM,WAAa,EAAA;AAC9C,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,IAAM,EAAA;AAC9B,IAAAA,KAAAA,CAAK,EAAK,GAAA,IAAA,CAAK,UAAW,EAAA;AAC1B,IAAA,IAAI,WACF,EAAA;AAAE,MAAA,IAAA,CAAK,eAAgBA,CAAAA,KAAAA,CAAK,EAAI,EAAA,YAAA,EAAc,KAAK,CAAA;AAAA;AAAG,GACnD,MAAA;AACL,IAAA,IAAI,gBAAgB,IAClB,EAAA;AAAE,MAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACpB,IAAAA,MAAK,EAAK,GAAA,IAAA;AAAA;AAEd,CAAA;AAEA,IAAK,CAAA,eAAA,GAAkB,SAASA,KAAM,EAAA;AACpC,EAAAA,KAAAA,CAAK,UAAa,GAAA,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,QAAQ,CAAA,GAAI,IAAK,CAAA,mBAAA,CAAoB,IAAM,EAAA,KAAK,CAAI,GAAA,IAAA;AACzF,CAAA;AAEA,IAAA,CAAK,iBAAiB,WAAW;AAC/B,EAAI,IAAA,OAAA,GAAU,EAAC,QAAU,kBAAA,MAAA,CAAO,OAAO,IAAI,CAAA,EAAG,IAAM,EAAA,EAAE,EAAA;AACtD,EAAK,IAAA,CAAA,gBAAA,CAAiB,KAAK,OAAO,CAAA;AAClC,EAAA,OAAO,OAAQ,CAAA,QAAA;AACjB,CAAA;AAEA,IAAA,CAAK,gBAAgB,WAAW;AAC9B,EAAIrC,IAAAA,IAAAA,GAAM,IAAK,CAAA,gBAAA,CAAiB,GAAI,EAAA;AACpC,EAAA,IAAI,WAAWA,IAAI,CAAA,QAAA;AACnB,EAAA,IAAI,OAAOA,IAAI,CAAA,IAAA;AACf,EAAI,IAAA,CAAC,IAAK,CAAA,OAAA,CAAQ,kBAAoB,EAAA;AAAE,IAAA;AAAA;AACxC,EAAI,IAAA,GAAA,GAAM,KAAK,gBAAiB,CAAA,MAAA;AAChC,EAAA,IAAI,SAAS,GAAQ,KAAA,CAAA,GAAI,OAAO,IAAK,CAAA,gBAAA,CAAiB,MAAM,CAAC,CAAA;AAC7D,EAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,MAAA,EAAQ,EAAE,CAAG,EAAA;AACpC,IAAI,IAAA,EAAA,GAAK,KAAK,CAAC,CAAA;AACf,IAAA,IAAI,CAAC,MAAA,CAAO,QAAU,EAAA,EAAA,CAAG,IAAI,CAAG,EAAA;AAC9B,MAAA,IAAI,MAAQ,EAAA;AACV,QAAO,MAAA,CAAA,IAAA,CAAK,KAAK,EAAE,CAAA;AAAA,OACd,MAAA;AACL,QAAA,IAAA,CAAK,iBAAiB,EAAG,CAAA,KAAA,EAAQ,kBAAsB,GAAA,EAAA,CAAG,OAAQ,0CAA2C,CAAA;AAAA;AAC/G;AACF;AAEJ,CAAA;AAEA,SAAS,uBAAA,CAAwB,gBAAgB,OAAS,EAAA;AACxD,EAAI/B,IAAAA,KAAAA,GAAO,QAAQ,GAAI,CAAA,IAAA;AACvB,EAAI,IAAA,IAAA,GAAO,eAAeA,KAAI,CAAA;AAE9B,EAAA,IAAI,IAAO,GAAA,MAAA;AACX,EAAI,IAAA,OAAA,CAAQ,SAAS,kBAAuB,KAAA,OAAA,CAAQ,SAAS,KAAS,IAAA,OAAA,CAAQ,SAAS,KAAQ,CAAA,EAAA;AAC7F,IAAA,IAAA,GAAA,CAAQ,OAAQ,CAAA,MAAA,GAAS,GAAM,GAAA,GAAA,IAAO,OAAQ,CAAA,IAAA;AAAA;AAIhD,EAAA,IACE,IAAS,KAAA,MAAA,IAAU,IAAS,KAAA,MAAA,IAC5B,SAAS,MAAU,IAAA,IAAA,KAAS,MAC5B,IAAA,IAAA,KAAS,UAAU,IAAS,KAAA,MAAA,IAC5B,IAAS,KAAA,MAAA,IAAU,SAAS,MAC5B,EAAA;AACA,IAAA,cAAA,CAAeA,KAAI,CAAI,GAAA,MAAA;AACvB,IAAO,OAAA,KAAA;AAAA,GACT,MAAA,IAAW,CAAC,IAAM,EAAA;AAChB,IAAA,cAAA,CAAeA,KAAI,CAAI,GAAA,IAAA;AACvB,IAAO,OAAA,KAAA;AAAA,GACF,MAAA;AACL,IAAO,OAAA,IAAA;AAAA;AAEX;AAEA,SAAS,YAAA,CAAaoE,OAAMpE,KAAM,EAAA;AAChC,EAAA,IAAI,WAAWoE,KAAK,CAAA,QAAA;AACpB,EAAA,IAAI,MAAMA,KAAK,CAAA,GAAA;AACf,EAAA,OAAO,CAAC,QAAA,KACN,GAAI,CAAA,IAAA,KAAS,YAAgB,IAAA,GAAA,CAAI,IAASpE,KAAAA,KAAAA,IAC1C,GAAI,CAAA,IAAA,KAAS,SAAa,IAAA,GAAA,CAAI,KAAUA,KAAAA,KAAAA,CAAAA;AAE5C;AAIA,IAAK,CAAA,yBAAA,GAA4B,SAASoE,KAAAA,EAAM,OAAS,EAAA;AACvD,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAAI,EAAA;AAClC,IAAI,IAAA,IAAA,CAAK,aAAc,CAAA,IAAI,CAAG,EAAA;AAC5B,MAAAA,KAAAA,CAAK,QAAW,GAAA,IAAA,CAAK,qBAAsB,EAAA;AAC3C,MAAA,IAAA,CAAK,WAAY,CAAA,OAAA,EAASA,KAAK,CAAA,QAAA,EAAU,KAAK,YAAY,CAAA;AAAA,KACrD,MAAA;AACL,MAAAA,MAAK,QAAW,GAAA,IAAA;AAAA;AAClB;AAEF,EAAA,IAAA,CAAK,iBAAiB,MAAM,CAAA;AAC5B,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,MAAQ,EAAA;AAAE,IAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACpD,EAAAA,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,aAAc,EAAA;AACjC,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAC9B,EAAA;AAAE,IAAAA,KAAAA,CAAK,UAAa,GAAA,IAAA,CAAK,eAAgB,EAAA;AAAA;AAC3C,EAAA,IAAA,CAAK,SAAU,EAAA;AACf,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,sBAAsB,CAAA;AACrD,CAAA;AAEA,IAAK,CAAA,WAAA,GAAc,SAASA,KAAAA,EAAM,OAAS,EAAA;AACzC,EAAA,IAAA,CAAK,IAAK,EAAA;AAEV,EAAA,IAAI,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,IAAI,CAAG,EAAA;AAC1B,IAAO,OAAA,IAAA,CAAK,yBAA0BA,CAAAA,KAAAA,EAAM,OAAO,CAAA;AAAA;AAErD,EAAA,IAAI,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,QAAQ,CAAG,EAAA;AAC9B,IAAA,IAAA,CAAK,WAAY,CAAA,OAAA,EAAS,SAAW,EAAA,IAAA,CAAK,YAAY,CAAA;AACtD,IAAAA,KAAAA,CAAK,WAAc,GAAA,IAAA,CAAK,6BAA8B,EAAA;AACtD,IAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,0BAA0B,CAAA;AAAA;AAGzD,EAAI,IAAA,IAAA,CAAK,4BAA8B,EAAA;AACrC,IAAAA,KAAK,CAAA,WAAA,GAAc,IAAK,CAAA,sBAAA,CAAuBA,KAAI,CAAA;AACnD,IAAIA,IAAAA,KAAAA,CAAK,WAAY,CAAA,IAAA,KAAS,qBAC5B,EAAA;AAAE,MAAA,IAAA,CAAK,mBAAoB,CAAA,OAAA,EAASA,KAAK,CAAA,WAAA,CAAY,YAAY,CAAA;AAAA,KAEjE,MAAA;AAAE,MAAK,IAAA,CAAA,WAAA,CAAY,SAASA,KAAK,CAAA,WAAA,CAAY,IAAIA,KAAK,CAAA,WAAA,CAAY,GAAG,KAAK,CAAA;AAAA;AAC5E,IAAAA,KAAAA,CAAK,aAAa,EAAC;AACnB,IAAAA,MAAK,MAAS,GAAA,IAAA;AAAA,GACT,MAAA;AACL,IAAAA,MAAK,WAAc,GAAA,IAAA;AACnB,IAAAA,KAAK,CAAA,UAAA,GAAa,IAAK,CAAA,qBAAA,CAAsB,OAAO,CAAA;AACpD,IAAI,IAAA,IAAA,CAAK,aAAc,CAAA,MAAM,CAAG,EAAA;AAC9B,MAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,MAAQ,EAAA;AAAE,QAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACpD,MAAAA,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,aAAc,EAAA;AACjC,MAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAC9B,EAAA;AAAE,QAAAA,KAAAA,CAAK,UAAa,GAAA,IAAA,CAAK,eAAgB,EAAA;AAAA;AAAG,KACzC,MAAA;AACL,MAAS,KAAA,IAAA,CAAA,GAAI,GAAGO,KAAOP,GAAAA,KAAAA,CAAK,YAAY,CAAIO,GAAAA,KAAAA,CAAK,MAAQ,EAAA,CAAA,IAAK,CAAG,EAAA;AAE/D,QAAI,IAAA,IAAA,GAAOA,MAAK,CAAC,CAAA;AAEjB,QAAK,IAAA,CAAA,eAAA,CAAgB,KAAK,KAAK,CAAA;AAE/B,QAAK,IAAA,CAAA,gBAAA,CAAiB,KAAK,KAAK,CAAA;AAEhC,QAAI,IAAA,IAAA,CAAK,KAAM,CAAA,IAAA,KAAS,SAAW,EAAA;AACjC,UAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,KAAM,CAAA,KAAA,EAAO,wEAAwE,CAAA;AAAA;AACvG;AAGF,MAAAP,MAAK,MAAS,GAAA,IAAA;AAAA;AAEhB,IAAA,IAAA,CAAK,SAAU,EAAA;AAAA;AAEjB,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,wBAAwB,CAAA;AACvD,CAAA;AAEA,IAAK,CAAA,sBAAA,GAAyB,SAASA,KAAM,EAAA;AAC3C,EAAO,OAAA,IAAA,CAAK,eAAe,IAAI,CAAA;AACjC,CAAA;AAEA,IAAA,CAAK,gCAAgC,WAAW;AAC9C,EAAI,IAAA,OAAA;AACJ,EAAA,IAAI,KAAK,IAAS,KAAA,OAAA,CAAQ,cAAc,OAAU,GAAA,IAAA,CAAK,iBAAoB,CAAA,EAAA;AACzE,IAAI,IAAA,KAAA,GAAQ,KAAK,SAAU,EAAA;AAC3B,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAA,IAAI,OAAS,EAAA;AAAE,MAAA,IAAA,CAAK,IAAK,EAAA;AAAA;AACzB,IAAA,OAAO,KAAK,aAAc,CAAA,KAAA,EAAO,cAAiB,GAAA,gBAAA,EAAkB,OAAO,OAAO,CAAA;AAAA,GACzE,MAAA,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,MAAQ,EAAA;AACvC,IAAI,IAAA,KAAA,GAAQ,KAAK,SAAU,EAAA;AAC3B,IAAO,OAAA,IAAA,CAAK,UAAW,CAAA,KAAA,EAAO,YAAY,CAAA;AAAA,GACrC,MAAA;AACL,IAAI,IAAA,WAAA,GAAc,KAAK,gBAAiB,EAAA;AACxC,IAAA,IAAA,CAAK,SAAU,EAAA;AACf,IAAO,OAAA,WAAA;AAAA;AAEX,CAAA;AAEA,IAAA,CAAK,WAAc,GAAA,SAAS,OAASpE,EAAAA,KAAAA,EAAM,GAAK,EAAA;AAC9C,EAAA,IAAI,CAAC,OAAS,EAAA;AAAE,IAAA;AAAA;AAChB,EAAI,IAAA,OAAOA,UAAS,QAClB,EAAA;AAAE,IAAAA,QAAOA,KAAK,CAAA,IAAA,KAAS,YAAeA,GAAAA,KAAAA,CAAK,OAAOA,KAAK,CAAA,KAAA;AAAA;AACzD,EAAI,IAAA,MAAA,CAAO,OAASA,EAAAA,KAAI,CACtB,EAAA;AAAE,IAAA,IAAA,CAAK,gBAAiB,CAAA,GAAA,EAAK,oBAAuBA,GAAAA,KAAAA,GAAO,GAAG,CAAA;AAAA;AAChE,EAAA,OAAA,CAAQA,KAAI,CAAI,GAAA,IAAA;AAClB,CAAA;AAEA,IAAK,CAAA,kBAAA,GAAqB,SAAS,OAAA,EAAS,GAAK,EAAA;AAC/C,EAAA,IAAI,OAAO,GAAI,CAAA,IAAA;AACf,EAAA,IAAI,SAAS,YACX,EAAA;AAAE,IAAA,IAAA,CAAK,WAAY,CAAA,OAAA,EAAS,GAAK,EAAA,GAAA,CAAI,KAAK,CAAA;AAAA,GAAG,MAAA,IACtC,SAAS,eAChB,EAAA;AAAE,IAAS,KAAA,IAAA,CAAA,GAAI,GAAG2E,KAAO,GAAA,GAAA,CAAI,YAAY,CAAIA,GAAAA,KAAAA,CAAK,MAAQ,EAAA,CAAA,IAAK,CAC7D,EAAA;AACE,MAAI,IAAA,IAAA,GAAOA,MAAK,CAAC,CAAA;AAEjB,MAAK,IAAA,CAAA,kBAAA,CAAmB,SAAS,IAAI,CAAA;AAAA;AACvC,GAAE,MAAA,IACG,SAAS,cAChB,EAAA;AAAE,IAAS,KAAA,IAAA,GAAA,GAAM,GAAG,MAAS,GAAA,GAAA,CAAI,UAAU,GAAM,GAAA,MAAA,CAAO,MAAQ,EAAA,GAAA,IAAO,CAAG,EAAA;AACxE,MAAI,IAAA,GAAA,GAAM,OAAO,GAAG,CAAA;AAElB,MAAA,IAAI,GAAK,EAAA;AAAE,QAAK,IAAA,CAAA,kBAAA,CAAmB,SAAS,GAAG,CAAA;AAAA;AAAG;AACtD,GAAE,MAAA,IACK,SAAS,UAChB,EAAA;AAAE,IAAK,IAAA,CAAA,kBAAA,CAAmB,OAAS,EAAA,GAAA,CAAI,KAAK,CAAA;AAAA,GAAG,MAAA,IACxC,SAAS,mBAChB,EAAA;AAAE,IAAK,IAAA,CAAA,kBAAA,CAAmB,OAAS,EAAA,GAAA,CAAI,IAAI,CAAA;AAAA,GAAG,MAAA,IACvC,SAAS,aAChB,EAAA;AAAE,IAAK,IAAA,CAAA,kBAAA,CAAmB,OAAS,EAAA,GAAA,CAAI,QAAQ,CAAA;AAAA;AACnD,CAAA;AAEA,IAAK,CAAA,mBAAA,GAAsB,SAAS,OAAA,EAAS,KAAO,EAAA;AAClD,EAAA,IAAI,CAAC,OAAS,EAAA;AAAE,IAAA;AAAA;AAChB,EAAS,KAAA,IAAA,CAAA,GAAI,GAAGA,KAAO,GAAA,KAAA,EAAO,IAAIA,KAAK,CAAA,MAAA,EAAQ,KAAK,CAClD,EAAA;AACA,IAAI,IAAA,IAAA,GAAOA,MAAK,CAAC,CAAA;AAEjB,IAAK,IAAA,CAAA,kBAAA,CAAmB,OAAS,EAAA,IAAA,CAAK,EAAE,CAAA;AAAA;AAE5C,CAAA;AAEA,IAAA,CAAK,6BAA6B,WAAW;AAC3C,EAAO,OAAA,IAAA,CAAK,KAAK,OAAY,KAAA,KAAA,IAC3B,KAAK,IAAK,CAAA,OAAA,KAAY,WACtB,IAAK,CAAA,IAAA,CAAK,YAAY,OACtB,IAAA,IAAA,CAAK,KAAK,OAAY,KAAA,UAAA,IACtB,KAAK,KAAM,EAAA,IACX,KAAK,eAAgB,EAAA;AACzB,CAAA;AAIA,IAAK,CAAA,oBAAA,GAAuB,SAAS,OAAS,EAAA;AAC5C,EAAIP,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAAA,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,qBAAsB,EAAA;AAExC,EAAAA,KAAAA,CAAK,WAAW,IAAK,CAAA,aAAA,CAAc,IAAI,CAAI,GAAA,IAAA,CAAK,qBAAsB,EAAA,GAAIA,KAAK,CAAA,KAAA;AAC/E,EAAK,IAAA,CAAA,WAAA;AAAA,IACH,OAAA;AAAA,IACAA,KAAK,CAAA,QAAA;AAAA,IACLA,MAAK,QAAS,CAAA;AAAA,GAChB;AAEA,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAChD,CAAA;AAEA,IAAK,CAAA,qBAAA,GAAwB,SAAS,OAAS,EAAA;AAC7C,EAAI,IAAA,KAAA,GAAQ,EAAC,EAAG,KAAQ,GAAA,IAAA;AAExB,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAC1B,EAAA,OAAO,CAAC,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AAChC,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,KAAK,CAAA;AACzB,MAAA,IAAI,IAAK,CAAA,kBAAA,CAAmB,OAAQ,CAAA,MAAM,CAAG,EAAA;AAAE,QAAA;AAAA;AAAM,KAChD,MAAA;AAAE,MAAQ,KAAA,GAAA,KAAA;AAAA;AAEjB,IAAA,KAAA,CAAM,IAAK,CAAA,IAAA,CAAK,oBAAqB,CAAA,OAAO,CAAC,CAAA;AAAA;AAE/C,EAAO,OAAA,KAAA;AACT,CAAA;AAIA,IAAK,CAAA,WAAA,GAAc,SAASA,KAAM,EAAA;AAChC,EAAA,IAAA,CAAK,IAAK,EAAA;AAGV,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,MAAQ,EAAA;AAChC,IAAAA,MAAK,UAAa,GAAA,OAAA;AAClB,IAAAA,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,aAAc,EAAA;AAAA,GAC5B,MAAA;AACL,IAAAA,KAAAA,CAAK,UAAa,GAAA,IAAA,CAAK,qBAAsB,EAAA;AAC7C,IAAA,IAAA,CAAK,iBAAiB,MAAM,CAAA;AAC5B,IAAAA,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,SAAS,IAAK,CAAA,aAAA,EAAkB,GAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAEtF,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAC9B,EAAA;AAAE,IAAAA,KAAAA,CAAK,UAAa,GAAA,IAAA,CAAK,eAAgB,EAAA;AAAA;AAC3C,EAAA,IAAA,CAAK,SAAU,EAAA;AACf,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,mBAAmB,CAAA;AAClD,CAAA;AAIA,IAAA,CAAK,uBAAuB,WAAW;AACrC,EAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAAA,KAAAA,CAAK,QAAW,GAAA,IAAA,CAAK,qBAAsB,EAAA;AAE3C,EAAI,IAAA,IAAA,CAAK,aAAc,CAAA,IAAI,CAAG,EAAA;AAC5B,IAAAA,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,UAAW,EAAA;AAAA,GACxB,MAAA;AACL,IAAK,IAAA,CAAA,eAAA,CAAgBA,MAAK,QAAQ,CAAA;AAClC,IAAAA,KAAAA,CAAK,QAAQA,KAAK,CAAA,QAAA;AAAA;AAEpB,EAAK,IAAA,CAAA,eAAA,CAAgBA,KAAK,CAAA,KAAA,EAAO,YAAY,CAAA;AAE7C,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAChD,CAAA;AAEA,IAAA,CAAK,8BAA8B,WAAW;AAE5C,EAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAAA,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,UAAW,EAAA;AAC7B,EAAK,IAAA,CAAA,eAAA,CAAgBA,KAAK,CAAA,KAAA,EAAO,YAAY,CAAA;AAC7C,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,wBAAwB,CAAA;AACvD,CAAA;AAEA,IAAA,CAAK,gCAAgC,WAAW;AAC9C,EAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAA,IAAA,CAAK,iBAAiB,IAAI,CAAA;AAC1B,EAAAA,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,UAAW,EAAA;AAC7B,EAAK,IAAA,CAAA,eAAA,CAAgBA,KAAK,CAAA,KAAA,EAAO,YAAY,CAAA;AAC7C,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,0BAA0B,CAAA;AACzD,CAAA;AAEA,IAAA,CAAK,wBAAwB,WAAW;AACtC,EAAI,IAAA,KAAA,GAAQ,EAAC,EAAG,KAAQ,GAAA,IAAA;AACxB,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,IAAM,EAAA;AAC9B,IAAM,KAAA,CAAA,IAAA,CAAK,IAAK,CAAA,2BAAA,EAA6B,CAAA;AAC7C,IAAA,IAAI,CAAC,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAAE,MAAO,OAAA,KAAA;AAAA;AAAM;AAE/C,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,IAAM,EAAA;AAC9B,IAAM,KAAA,CAAA,IAAA,CAAK,IAAK,CAAA,6BAAA,EAA+B,CAAA;AAC/C,IAAO,OAAA,KAAA;AAAA;AAET,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAC1B,EAAA,OAAO,CAAC,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AAChC,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,KAAK,CAAA;AACzB,MAAA,IAAI,IAAK,CAAA,kBAAA,CAAmB,OAAQ,CAAA,MAAM,CAAG,EAAA;AAAE,QAAA;AAAA;AAAM,KAChD,MAAA;AAAE,MAAQ,KAAA,GAAA,KAAA;AAAA;AAEjB,IAAM,KAAA,CAAA,IAAA,CAAK,IAAK,CAAA,oBAAA,EAAsB,CAAA;AAAA;AAExC,EAAO,OAAA,KAAA;AACT,CAAA;AAEA,IAAA,CAAK,kBAAkB,WAAW;AAChC,EAAA,IAAI,QAAQ,EAAC;AACb,EAAA,IAAI,CAAC,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAC5B,IAAO,OAAA,KAAA;AAAA;AAET,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAC1B,EAAA,IAAI,gBAAgB,EAAC;AACrB,EAAA,IAAI,KAAQ,GAAA,IAAA;AACZ,EAAA,OAAO,CAAC,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AAChC,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,KAAK,CAAA;AACzB,MAAA,IAAI,IAAK,CAAA,kBAAA,CAAmB,OAAQ,CAAA,MAAM,CAAG,EAAA;AAAE,QAAA;AAAA;AAAM,KAChD,MAAA;AAAE,MAAQ,KAAA,GAAA,KAAA;AAAA;AAEjB,IAAI,IAAA,IAAA,GAAO,KAAK,oBAAqB,EAAA;AACrC,IAAI,IAAA,OAAA,GAAU,KAAK,GAAI,CAAA,IAAA,KAAS,eAAe,IAAK,CAAA,GAAA,CAAI,IAAO,GAAA,IAAA,CAAK,GAAI,CAAA,KAAA;AACxE,IAAI,IAAA,MAAA,CAAO,aAAe,EAAA,OAAO,CAC/B,EAAA;AAAE,MAAA,IAAA,CAAK,iBAAiB,IAAK,CAAA,GAAA,CAAI,KAAO,EAAA,2BAAA,GAA8B,UAAU,GAAG,CAAA;AAAA;AACrF,IAAA,aAAA,CAAc,OAAO,CAAI,GAAA,IAAA;AACzB,IAAA,KAAA,CAAM,KAAK,IAAI,CAAA;AAAA;AAEjB,EAAO,OAAA,KAAA;AACT,CAAA;AAEA,IAAA,CAAK,uBAAuB,WAAW;AACrC,EAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAAA,KAAK,CAAA,GAAA,GAAM,IAAK,CAAA,IAAA,KAAS,QAAQ,MAAS,GAAA,IAAA,CAAK,aAAc,EAAA,GAAI,IAAK,CAAA,UAAA,CAAW,IAAK,CAAA,OAAA,CAAQ,kBAAkB,OAAO,CAAA;AACvH,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,KAAK,CAAA;AACzB,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,MAAQ,EAAA;AAChC,IAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAElB,EAAAA,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,aAAc,EAAA;AAChC,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAChD,CAAA;AAEA,IAAA,CAAK,wBAAwB,WAAW;AACtC,EAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,IAAe,MAAM,IAAK,CAAA,IAAA,KAAS,QAAQ,MAAQ,EAAA;AAClE,IAAA,IAAI,aAAgB,GAAA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,KAAK,CAAA;AAChD,IAAA,IAAI,aAAc,CAAA,IAAA,CAAK,aAAc,CAAA,KAAK,CAAG,EAAA;AAC3C,MAAK,IAAA,CAAA,KAAA,CAAM,aAAc,CAAA,KAAA,EAAO,iDAAiD,CAAA;AAAA;AAEnF,IAAO,OAAA,aAAA;AAAA;AAET,EAAO,OAAA,IAAA,CAAK,WAAW,IAAI,CAAA;AAC7B,CAAA;AAGA,IAAK,CAAA,sBAAA,GAAyB,SAAS,UAAY,EAAA;AACjD,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,UAAA,CAAW,MAAU,IAAA,IAAA,CAAK,oBAAqB,CAAA,UAAA,CAAW,CAAC,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA;AACtF,IAAW,UAAA,CAAA,CAAC,CAAE,CAAA,SAAA,GAAY,UAAW,CAAA,CAAC,EAAE,UAAW,CAAA,GAAA,CAAI,KAAM,CAAA,CAAA,EAAG,CAAE,CAAA,CAAA;AAAA;AAEtE,CAAA;AACA,IAAK,CAAA,oBAAA,GAAuB,SAAS,SAAW,EAAA;AAC9C,EAAA,OACE,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,IAC5B,UAAU,IAAS,KAAA,qBAAA,IACnB,SAAU,CAAA,UAAA,CAAW,IAAS,KAAA,SAAA,IAC9B,OAAO,SAAA,CAAU,WAAW,KAAU,KAAA,QAAA;AAAA,GAErC,IAAA,CAAK,KAAM,CAAA,SAAA,CAAU,KAAK,CAAA,KAAM,OAAQ,IAAK,CAAA,KAAA,CAAM,SAAU,CAAA,KAAK,CAAM,KAAA,GAAA,CAAA;AAE7E,CAAA;AAEA,IAAI,OAAO,MAAO,CAAA,SAAA;AAKlB,IAAA,CAAK,YAAe,GAAA,SAASA,KAAM,EAAA,SAAA,EAAW,sBAAwB,EAAA;AACpE,EAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,IAAKA,KAAM,EAAA;AACzC,IAAA,QAAQA,MAAK,IAAM;AAAA,MACnB,KAAK,YAAA;AACH,QAAA,IAAI,IAAK,CAAA,OAAA,IAAWA,KAAK,CAAA,IAAA,KAAS,OAChC,EAAA;AAAE,UAAK,IAAA,CAAA,KAAA,CAAMA,KAAK,CAAA,KAAA,EAAO,2DAA2D,CAAA;AAAA;AACtF,QAAA;AAAA,MAEF,KAAK,eAAA;AAAA,MACL,KAAK,cAAA;AAAA,MACL,KAAK,mBAAA;AAAA,MACL,KAAK,aAAA;AACH,QAAA;AAAA,MAEF,KAAK,kBAAA;AACH,QAAAA,MAAK,IAAO,GAAA,eAAA;AACZ,QAAA,IAAI,sBAAwB,EAAA;AAAE,UAAK,IAAA,CAAA,kBAAA,CAAmB,wBAAwB,IAAI,CAAA;AAAA;AAClF,QAAS,KAAA,IAAA,CAAA,GAAI,GAAGO,KAAOP,GAAAA,KAAAA,CAAK,YAAY,CAAIO,GAAAA,KAAAA,CAAK,MAAQ,EAAA,CAAA,IAAK,CAAG,EAAA;AAC/D,UAAI,IAAA,IAAA,GAAOA,MAAK,CAAC,CAAA;AAEnB,UAAK,IAAA,CAAA,YAAA,CAAa,MAAM,SAAS,CAAA;AAM/B,UACE,IAAA,IAAA,CAAK,IAAS,KAAA,aAAA,KACb,IAAK,CAAA,QAAA,CAAS,SAAS,cAAkB,IAAA,IAAA,CAAK,QAAS,CAAA,IAAA,KAAS,eACjE,CAAA,EAAA;AACA,YAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,QAAS,CAAA,KAAA,EAAO,kBAAkB,CAAA;AAAA;AACpD;AAEF,QAAA;AAAA,MAEF,KAAK,UAAA;AAEH,QAAIP,IAAAA,KAAAA,CAAK,SAAS,MAAQ,EAAA;AAAE,UAAA,IAAA,CAAK,KAAMA,CAAAA,KAAAA,CAAK,GAAI,CAAA,KAAA,EAAO,+CAA+C,CAAA;AAAA;AACtG,QAAK,IAAA,CAAA,YAAA,CAAaA,KAAK,CAAA,KAAA,EAAO,SAAS,CAAA;AACvC,QAAA;AAAA,MAEF,KAAK,iBAAA;AACH,QAAAA,MAAK,IAAO,GAAA,cAAA;AACZ,QAAA,IAAI,sBAAwB,EAAA;AAAE,UAAK,IAAA,CAAA,kBAAA,CAAmB,wBAAwB,IAAI,CAAA;AAAA;AAClF,QAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,QAAA,EAAU,SAAS,CAAA;AAC9C,QAAA;AAAA,MAEF,KAAK,eAAA;AACH,QAAAA,MAAK,IAAO,GAAA,aAAA;AACZ,QAAK,IAAA,CAAA,YAAA,CAAaA,KAAK,CAAA,QAAA,EAAU,SAAS,CAAA;AAC1C,QAAIA,IAAAA,KAAAA,CAAK,QAAS,CAAA,IAAA,KAAS,mBACzB,EAAA;AAAE,UAAA,IAAA,CAAK,KAAMA,CAAAA,KAAAA,CAAK,QAAS,CAAA,KAAA,EAAO,2CAA2C,CAAA;AAAA;AAC/E,QAAA;AAAA,MAEF,KAAK,sBAAA;AACH,QAAIA,IAAAA,KAAAA,CAAK,aAAa,GAAK,EAAA;AAAE,UAAA,IAAA,CAAK,KAAMA,CAAAA,KAAAA,CAAK,IAAK,CAAA,GAAA,EAAK,6DAA6D,CAAA;AAAA;AACpH,QAAAA,MAAK,IAAO,GAAA,mBAAA;AACZ,QAAA,OAAOA,KAAK,CAAA,QAAA;AACZ,QAAK,IAAA,CAAA,YAAA,CAAaA,KAAK,CAAA,IAAA,EAAM,SAAS,CAAA;AACtC,QAAA;AAAA,MAEF,KAAK,yBAAA;AACH,QAAA,IAAA,CAAK,YAAaA,CAAAA,KAAAA,CAAK,UAAY,EAAA,SAAA,EAAW,sBAAsB,CAAA;AACpE,QAAA;AAAA,MAEF,KAAK,iBAAA;AACH,QAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,mDAAmD,CAAA;AACrF,QAAA;AAAA,MAEF,KAAK,kBAAA;AACH,QAAA,IAAI,CAAC,SAAW,EAAA;AAAE,UAAA;AAAA;AAAM,MAE1B;AACE,QAAK,IAAA,CAAA,KAAA,CAAMA,KAAK,CAAA,KAAA,EAAO,qBAAqB,CAAA;AAAA;AAC9C,aACS,sBAAwB,EAAA;AAAE,IAAK,IAAA,CAAA,kBAAA,CAAmB,wBAAwB,IAAI,CAAA;AAAA;AACzF,EAAOA,OAAAA,KAAAA;AACT,CAAA;AAIA,IAAK,CAAA,gBAAA,GAAmB,SAAS,QAAA,EAAU,SAAW,EAAA;AACpD,EAAA,IAAI,MAAM,QAAS,CAAA,MAAA;AACnB,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,GAAA,EAAK,CAAK,EAAA,EAAA;AAC5B,IAAI,IAAA,GAAA,GAAM,SAAS,CAAC,CAAA;AACpB,IAAA,IAAI,GAAK,EAAA;AAAE,MAAK,IAAA,CAAA,YAAA,CAAa,KAAK,SAAS,CAAA;AAAA;AAAG;AAEhD,EAAA,IAAI,GAAK,EAAA;AACP,IAAI,IAAA,IAAA,GAAO,QAAS,CAAA,GAAA,GAAM,CAAC,CAAA;AAC3B,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,WAAgB,KAAA,CAAA,IAAK,SAAa,IAAA,IAAA,IAAQ,IAAK,CAAA,IAAA,KAAS,aAAiB,IAAA,IAAA,CAAK,QAAS,CAAA,IAAA,KAAS,YAC/G,EAAA;AAAE,MAAK,IAAA,CAAA,UAAA,CAAW,IAAK,CAAA,QAAA,CAAS,KAAK,CAAA;AAAA;AAAG;AAE5C,EAAO,OAAA,QAAA;AACT,CAAA;AAIA,IAAK,CAAA,WAAA,GAAc,SAAS,sBAAwB,EAAA;AAClD,EAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAAA,KAAK,CAAA,QAAA,GAAW,IAAK,CAAA,gBAAA,CAAiB,OAAO,sBAAsB,CAAA;AACnE,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,eAAe,CAAA;AAC9C,CAAA;AAEA,IAAA,CAAK,mBAAmB,WAAW;AACjC,EAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAA,IAAA,CAAK,IAAK,EAAA;AAGV,EAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,KAAgB,KAAK,IAAK,CAAA,IAAA,KAAS,QAAQ,IAC1D,EAAA;AAAE,IAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAEpB,EAAAA,KAAAA,CAAK,QAAW,GAAA,IAAA,CAAK,gBAAiB,EAAA;AAEtC,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,aAAa,CAAA;AAC5C,CAAA;AAIA,IAAA,CAAK,mBAAmB,WAAW;AACjC,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,IAAA,QAAQ,KAAK,IAAM;AAAA,MACnB,KAAK,OAAQ,CAAA,QAAA;AACX,QAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,QAAA,IAAA,CAAK,IAAK,EAAA;AACV,QAAAA,MAAK,QAAW,GAAA,IAAA,CAAK,iBAAiB,OAAQ,CAAA,QAAA,EAAU,MAAM,IAAI,CAAA;AAClE,QAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,cAAc,CAAA;AAAA,MAE7C,KAAK,OAAQ,CAAA,MAAA;AACX,QAAO,OAAA,IAAA,CAAK,SAAS,IAAI,CAAA;AAAA;AAC3B;AAEF,EAAA,OAAO,KAAK,UAAW,EAAA;AACzB,CAAA;AAEA,IAAA,CAAK,gBAAmB,GAAA,SAASmB,MAAO,EAAA,UAAA,EAAY,oBAAoB,cAAgB,EAAA;AACtF,EAAI,IAAA,IAAA,GAAO,EAAC,EAAG,KAAQ,GAAA,IAAA;AACvB,EAAA,OAAO,CAAC,IAAA,CAAK,GAAIA,CAAAA,MAAK,CAAG,EAAA;AACvB,IAAA,IAAI,KAAO,EAAA;AAAE,MAAQ,KAAA,GAAA,KAAA;AAAA,KAChB,MAAA;AAAE,MAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,KAAK,CAAA;AAAA;AAChC,IAAA,IAAI,UAAc,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,KAAO,EAAA;AAC7C,MAAA,IAAA,CAAK,KAAK,IAAI,CAAA;AAAA,KACL,MAAA,IAAA,kBAAA,IAAsB,IAAK,CAAA,kBAAA,CAAmBA,MAAK,CAAG,EAAA;AAC/D,MAAA;AAAA,KACS,MAAA,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,QAAU,EAAA;AACzC,MAAI,IAAA,IAAA,GAAO,KAAK,gBAAiB,EAAA;AACjC,MAAA,IAAA,CAAK,qBAAqB,IAAI,CAAA;AAC9B,MAAA,IAAA,CAAK,KAAK,IAAI,CAAA;AACd,MAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,KAAO,EAAA;AAAE,QAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,+CAA+C,CAAA;AAAA;AACpH,MAAA,IAAA,CAAK,OAAOA,MAAK,CAAA;AACjB,MAAA;AAAA,KACK,MAAA;AACL,MAAA,IAAA,CAAK,IAAK,CAAA,IAAA,CAAK,uBAAwB,CAAA,cAAc,CAAC,CAAA;AAAA;AACxD;AAEF,EAAO,OAAA,IAAA;AACT,CAAA;AAEA,IAAK,CAAA,uBAAA,GAA0B,SAAS,cAAgB,EAAA;AACtD,EAAA,IAAI,OAAO,IAAK,CAAA,iBAAA,CAAkB,IAAK,CAAA,KAAA,EAAO,KAAK,QAAQ,CAAA;AAC3D,EAAA,IAAA,CAAK,qBAAqB,IAAI,CAAA;AAC9B,EAAO,OAAA,IAAA;AACT,CAAA;AAEA,IAAK,CAAA,oBAAA,GAAuB,SAAS,KAAO,EAAA;AAC1C,EAAO,OAAA,KAAA;AACT,CAAA;AAIA,IAAA,CAAK,iBAAoB,GAAA,SAAS,QAAU,EAAA,QAAA,EAAU,IAAM,EAAA;AAC1D,EAAO,IAAA,GAAA,IAAA,IAAQ,KAAK,gBAAiB,EAAA;AACrC,EAAI,IAAA,IAAA,CAAK,QAAQ,WAAc,GAAA,CAAA,IAAK,CAAC,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,EAAE,CAAG,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AACpE,EAAA,IAAInB,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,EAAAA,MAAK,IAAO,GAAA,IAAA;AACZ,EAAAA,KAAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,gBAAiB,EAAA;AACnC,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,mBAAmB,CAAA;AAClD,CAAA;AAkEA,IAAA,CAAK,eAAkB,GAAA,SAAS,IAAM,EAAA,WAAA,EAAa,YAAc,EAAA;AAC/D,EAAK,IAAA,WAAA,KAAgB,QAAuB,WAAA,GAAA,SAAA;AAE5C,EAAA,IAAI,SAAS,WAAgB,KAAA,SAAA;AAE7B,EAAA,QAAQ,KAAK,IAAM;AAAA,IACnB,KAAK,YAAA;AACH,MAAA,IAAI,KAAK,MAAU,IAAA,IAAA,CAAK,wBAAwB,IAAK,CAAA,IAAA,CAAK,IAAI,CAC5D,EAAA;AAAE,QAAK,IAAA,CAAA,gBAAA,CAAiB,KAAK,KAAQ,EAAA,CAAA,MAAA,GAAS,aAAa,eAAmB,IAAA,IAAA,CAAK,OAAO,iBAAiB,CAAA;AAAA;AAC7G,MAAA,IAAI,MAAQ,EAAA;AACV,QAAA,IAAI,WAAgB,KAAA,YAAA,IAAgB,IAAK,CAAA,IAAA,KAAS,KAChD,EAAA;AAAE,UAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,6CAA6C,CAAA;AAAA;AACnF,QAAA,IAAI,YAAc,EAAA;AAChB,UAAA,IAAI,MAAO,CAAA,YAAA,EAAc,IAAK,CAAA,IAAI,CAChC,EAAA;AAAE,YAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,qBAAqB,CAAA;AAAA;AAC3D,UAAa,YAAA,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,IAAA;AAAA;AAE5B,QAAA,IAAI,gBAAgB,YAAc,EAAA;AAAE,UAAA,IAAA,CAAK,WAAY,CAAA,IAAA,CAAK,IAAM,EAAA,WAAA,EAAa,KAAK,KAAK,CAAA;AAAA;AAAG;AAE5F,MAAA;AAAA,IAEF,KAAK,iBAAA;AACH,MAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,mDAAmD,CAAA;AACrF,MAAA;AAAA,IAEF,KAAK,kBAAA;AACH,MAAA,IAAI,MAAQ,EAAA;AAAE,QAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,2BAA2B,CAAA;AAAA;AAC3E,MAAA;AAAA,IAEF,KAAK,yBAAA;AACH,MAAA,IAAI,MAAQ,EAAA;AAAE,QAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,kCAAkC,CAAA;AAAA;AAClF,MAAA,OAAO,IAAK,CAAA,eAAA,CAAgB,IAAK,CAAA,UAAA,EAAY,aAAa,YAAY,CAAA;AAAA,IAExE;AACE,MAAA,IAAA,CAAK,MAAM,IAAK,CAAA,KAAA,EAAA,CAAQ,MAAS,GAAA,SAAA,GAAY,kBAAkB,SAAS,CAAA;AAAA;AAE5E,CAAA;AAEA,IAAA,CAAK,gBAAmB,GAAA,SAAS,IAAM,EAAA,WAAA,EAAa,YAAc,EAAA;AAChE,EAAK,IAAA,WAAA,KAAgB,QAAuB,WAAA,GAAA,SAAA;AAE5C,EAAA,QAAQ,KAAK,IAAM;AAAA,IACnB,KAAK,eAAA;AACH,MAAS,KAAA,IAAA,CAAA,GAAI,GAAGO,KAAO,GAAA,IAAA,CAAK,YAAY,CAAIA,GAAAA,KAAAA,CAAK,MAAQ,EAAA,CAAA,IAAK,CAAG,EAAA;AAC/D,QAAI,IAAA,IAAA,GAAOA,MAAK,CAAC,CAAA;AAEnB,QAAK,IAAA,CAAA,qBAAA,CAAsB,IAAM,EAAA,WAAA,EAAa,YAAY,CAAA;AAAA;AAE1D,MAAA;AAAA,IAEF,KAAK,cAAA;AACH,MAAS,KAAA,IAAA,GAAA,GAAM,GAAG,MAAS,GAAA,IAAA,CAAK,UAAU,GAAM,GAAA,MAAA,CAAO,MAAQ,EAAA,GAAA,IAAO,CAAG,EAAA;AACvE,QAAI,IAAA,IAAA,GAAO,OAAO,GAAG,CAAA;AAEvB,QAAA,IAAI,IAAM,EAAA;AAAE,UAAK,IAAA,CAAA,qBAAA,CAAsB,IAAM,EAAA,WAAA,EAAa,YAAY,CAAA;AAAA;AAAG;AAEzE,MAAA;AAAA,IAEF;AACE,MAAK,IAAA,CAAA,eAAA,CAAgB,IAAM,EAAA,WAAA,EAAa,YAAY,CAAA;AAAA;AAExD,CAAA;AAEA,IAAA,CAAK,qBAAwB,GAAA,SAAS,IAAM,EAAA,WAAA,EAAa,YAAc,EAAA;AACrE,EAAK,IAAA,WAAA,KAAgB,QAAuB,WAAA,GAAA,SAAA;AAE5C,EAAA,QAAQ,KAAK,IAAM;AAAA,IACnB,KAAK,UAAA;AAEH,MAAA,IAAA,CAAK,qBAAsB,CAAA,IAAA,CAAK,KAAO,EAAA,WAAA,EAAa,YAAY,CAAA;AAChE,MAAA;AAAA,IAEF,KAAK,mBAAA;AACH,MAAA,IAAA,CAAK,gBAAiB,CAAA,IAAA,CAAK,IAAM,EAAA,WAAA,EAAa,YAAY,CAAA;AAC1D,MAAA;AAAA,IAEF,KAAK,aAAA;AACH,MAAA,IAAA,CAAK,gBAAiB,CAAA,IAAA,CAAK,QAAU,EAAA,WAAA,EAAa,YAAY,CAAA;AAC9D,MAAA;AAAA,IAEF;AACE,MAAK,IAAA,CAAA,gBAAA,CAAiB,IAAM,EAAA,WAAA,EAAa,YAAY,CAAA;AAAA;AAEzD,CAAA;AAOA,IAAI,aAAa,SAASa,WAAAA,CAAW,OAAO,MAAQ,EAAA,aAAA,EAAe,UAAU,SAAW,EAAA;AACtF,EAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AACb,EAAK,IAAA,CAAA,MAAA,GAAS,CAAC,CAAC,MAAA;AAChB,EAAK,IAAA,CAAA,aAAA,GAAgB,CAAC,CAAC,aAAA;AACvB,EAAA,IAAA,CAAK,QAAW,GAAA,QAAA;AAChB,EAAK,IAAA,CAAA,SAAA,GAAY,CAAC,CAAC,SAAA;AACrB,CAAA;AAEA,IAAI,KAAQ,GAAA;AAAA,EACV,MAAQ,EAAA,IAAI,UAAW,CAAA,GAAA,EAAK,KAAK,CAAA;AAAA,EACjC,MAAQ,EAAA,IAAI,UAAW,CAAA,GAAA,EAAK,IAAI,CAAA;AAAA,EAChC,MAAQ,EAAA,IAAI,UAAW,CAAA,IAAA,EAAM,KAAK,CAAA;AAAA,EAClC,MAAQ,EAAA,IAAI,UAAW,CAAA,GAAA,EAAK,KAAK,CAAA;AAAA,EACjC,MAAQ,EAAA,IAAI,UAAW,CAAA,GAAA,EAAK,IAAI,CAAA;AAAA,EAChC,QAAQ,IAAI,UAAA,CAAW,KAAK,IAAM,EAAA,IAAA,EAAM,SAAU,CAAG,EAAA;AAAE,IAAA,OAAO,EAAE,oBAAqB,EAAA;AAAA,GAAI,CAAA;AAAA,EACzF,MAAQ,EAAA,IAAI,UAAW,CAAA,UAAA,EAAY,KAAK,CAAA;AAAA,EACxC,MAAQ,EAAA,IAAI,UAAW,CAAA,UAAA,EAAY,IAAI,CAAA;AAAA,EACvC,YAAY,IAAI,UAAA,CAAW,YAAY,IAAM,EAAA,KAAA,EAAO,MAAM,IAAI,CAAA;AAAA,EAC9D,OAAO,IAAI,UAAA,CAAW,YAAY,KAAO,EAAA,KAAA,EAAO,MAAM,IAAI;AAC5D,CAAA;AAEA,IAAI,OAAO,MAAO,CAAA,SAAA;AAElB,IAAA,CAAK,iBAAiB,WAAW;AAC/B,EAAO,OAAA,CAAC,MAAM,MAAM,CAAA;AACtB,CAAA;AAEA,IAAA,CAAK,aAAa,WAAW;AAC3B,EAAA,OAAO,IAAK,CAAA,OAAA,CAAQ,IAAK,CAAA,OAAA,CAAQ,SAAS,CAAC,CAAA;AAC7C,CAAA;AAEA,IAAK,CAAA,YAAA,GAAe,SAAS,QAAU,EAAA;AACrC,EAAI,IAAA,MAAA,GAAS,KAAK,UAAW,EAAA;AAC7B,EAAA,IAAI,MAAW,KAAA,KAAA,CAAM,MAAU,IAAA,MAAA,KAAW,MAAM,MAC9C,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AACX,EAAI,IAAA,QAAA,KAAa,QAAQ,KAAU,KAAA,MAAA,KAAW,MAAM,MAAU,IAAA,MAAA,KAAW,MAAM,MAC7E,CAAA,EAAA;AAAE,IAAA,OAAO,CAAC,MAAO,CAAA,MAAA;AAAA;AAKnB,EAAA,IAAI,aAAa,OAAQ,CAAA,OAAA,IAAW,aAAa,OAAQ,CAAA,IAAA,IAAQ,KAAK,WACpE,EAAA;AAAE,IAAO,OAAA,SAAA,CAAU,KAAK,IAAK,CAAA,KAAA,CAAM,MAAM,IAAK,CAAA,UAAA,EAAY,IAAK,CAAA,KAAK,CAAC,CAAA;AAAA;AACvE,EAAA,IAAI,QAAa,KAAA,OAAA,CAAQ,KAAS,IAAA,QAAA,KAAa,QAAQ,IAAQ,IAAA,QAAA,KAAa,OAAQ,CAAA,GAAA,IAAO,QAAa,KAAA,OAAA,CAAQ,MAAU,IAAA,QAAA,KAAa,QAAQ,KAC7I,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AACX,EAAI,IAAA,QAAA,KAAa,QAAQ,MACvB,EAAA;AAAE,IAAA,OAAO,WAAW,KAAM,CAAA,MAAA;AAAA;AAC5B,EAAI,IAAA,QAAA,KAAa,QAAQ,IAAQ,IAAA,QAAA,KAAa,QAAQ,MAAU,IAAA,QAAA,KAAa,QAAQ,IACnF,EAAA;AAAE,IAAO,OAAA,KAAA;AAAA;AACX,EAAA,OAAO,CAAC,IAAK,CAAA,WAAA;AACf,CAAA;AAEA,IAAA,CAAK,qBAAqB,WAAW;AACnC,EAAA,KAAA,IAAS,IAAI,IAAK,CAAA,OAAA,CAAQ,SAAS,CAAG,EAAA,CAAA,IAAK,GAAG,CAAK,EAAA,EAAA;AACjD,IAAI,IAAA,OAAA,GAAU,IAAK,CAAA,OAAA,CAAQ,CAAC,CAAA;AAC5B,IAAI,IAAA,OAAA,CAAQ,UAAU,UACpB,EAAA;AAAE,MAAA,OAAO,OAAQ,CAAA,SAAA;AAAA;AAAU;AAE/B,EAAO,OAAA,KAAA;AACT,CAAA;AAEA,IAAK,CAAA,aAAA,GAAgB,SAAS,QAAU,EAAA;AACtC,EAAI,IAAA,MAAA,EAAQ,OAAO,IAAK,CAAA,IAAA;AACxB,EAAA,IAAI,IAAK,CAAA,OAAA,IAAW,QAAa,KAAA,OAAA,CAAQ,GACvC,EAAA;AAAE,IAAA,IAAA,CAAK,WAAc,GAAA,KAAA;AAAA,GAAO,MAAA,IACrB,MAAS,GAAA,IAAA,CAAK,aACrB,EAAA;AAAE,IAAO,MAAA,CAAA,IAAA,CAAK,MAAM,QAAQ,CAAA;AAAA,GAE5B,MAAA;AAAE,IAAA,IAAA,CAAK,cAAc,IAAK,CAAA,UAAA;AAAA;AAC9B,CAAA;AAIA,IAAK,CAAA,eAAA,GAAkB,SAAS,QAAU,EAAA;AACxC,EAAI,IAAA,IAAA,CAAK,UAAW,EAAA,KAAM,QAAU,EAAA;AAClC,IAAA,IAAA,CAAK,OAAQ,CAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,GAAS,CAAC,CAAI,GAAA,QAAA;AAAA;AAE5C,CAAA;AAIA,OAAA,CAAQ,MAAO,CAAA,aAAA,GAAgB,OAAQ,CAAA,MAAA,CAAO,gBAAgB,WAAW;AACvE,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,KAAW,CAAG,EAAA;AAC7B,IAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AACnB,IAAA;AAAA;AAEF,EAAI,IAAA,GAAA,GAAM,IAAK,CAAA,OAAA,CAAQ,GAAI,EAAA;AAC3B,EAAA,IAAI,QAAQ,KAAM,CAAA,MAAA,IAAU,KAAK,UAAW,EAAA,CAAE,UAAU,UAAY,EAAA;AAClE,IAAM,GAAA,GAAA,IAAA,CAAK,QAAQ,GAAI,EAAA;AAAA;AAEzB,EAAK,IAAA,CAAA,WAAA,GAAc,CAAC,GAAI,CAAA,MAAA;AAC1B,CAAA;AAEA,OAAQ,CAAA,MAAA,CAAO,aAAgB,GAAA,SAAS,QAAU,EAAA;AAChD,EAAK,IAAA,CAAA,OAAA,CAAQ,KAAK,IAAK,CAAA,YAAA,CAAa,QAAQ,CAAI,GAAA,KAAA,CAAM,MAAS,GAAA,KAAA,CAAM,MAAM,CAAA;AAC3E,EAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AACrB,CAAA;AAEA,OAAQ,CAAA,YAAA,CAAa,gBAAgB,WAAW;AAC9C,EAAK,IAAA,CAAA,OAAA,CAAQ,IAAK,CAAA,KAAA,CAAM,MAAM,CAAA;AAC9B,EAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AACrB,CAAA;AAEA,OAAQ,CAAA,MAAA,CAAO,aAAgB,GAAA,SAAS,QAAU,EAAA;AAChD,EAAI,IAAA,eAAA,GAAkB,QAAa,KAAA,OAAA,CAAQ,GAAO,IAAA,QAAA,KAAa,OAAQ,CAAA,IAAA,IAAQ,QAAa,KAAA,OAAA,CAAQ,KAAS,IAAA,QAAA,KAAa,OAAQ,CAAA,MAAA;AAClI,EAAA,IAAA,CAAK,QAAQ,IAAK,CAAA,eAAA,GAAkB,KAAM,CAAA,MAAA,GAAS,MAAM,MAAM,CAAA;AAC/D,EAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AACrB,CAAA;AAEA,OAAQ,CAAA,MAAA,CAAO,gBAAgB,WAAW;AAE1C,CAAA;AAEA,OAAA,CAAQ,UAAU,aAAgB,GAAA,OAAA,CAAQ,MAAO,CAAA,aAAA,GAAgB,SAAS,QAAU,EAAA;AAClF,EAAA,IAAI,SAAS,UAAc,IAAA,QAAA,KAAa,QAAQ,KAC5C,IAAA,EAAE,aAAa,OAAQ,CAAA,IAAA,IAAQ,IAAK,CAAA,UAAA,OAAiB,KAAM,CAAA,MAAA,CAAA,IAC3D,EAAE,QAAa,KAAA,OAAA,CAAQ,WAAW,SAAU,CAAA,IAAA,CAAK,IAAK,CAAA,KAAA,CAAM,MAAM,IAAK,CAAA,UAAA,EAAY,KAAK,KAAK,CAAC,MAC9F,EAAG,CAAA,QAAA,KAAa,OAAQ,CAAA,KAAA,IAAS,aAAa,OAAQ,CAAA,MAAA,KAAW,KAAK,UAAW,EAAA,KAAM,MAAM,MAC/F,CAAA,EAAA;AAAE,IAAK,IAAA,CAAA,OAAA,CAAQ,IAAK,CAAA,KAAA,CAAM,MAAM,CAAA;AAAA,GAEhC,MAAA;AAAE,IAAK,IAAA,CAAA,OAAA,CAAQ,IAAK,CAAA,KAAA,CAAM,MAAM,CAAA;AAAA;AAClC,EAAA,IAAA,CAAK,WAAc,GAAA,KAAA;AACrB,CAAA;AAEA,OAAQ,CAAA,KAAA,CAAM,gBAAgB,WAAW;AACvC,EAAA,IAAI,IAAK,CAAA,UAAA,EAAa,CAAA,KAAA,KAAU,UAAY,EAAA;AAAE,IAAA,IAAA,CAAK,QAAQ,GAAI,EAAA;AAAA;AAC/D,EAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AACrB,CAAA;AAEA,OAAQ,CAAA,SAAA,CAAU,gBAAgB,WAAW;AAC3C,EAAA,IAAI,IAAK,CAAA,UAAA,EAAiB,KAAA,KAAA,CAAM,MAC9B,EAAA;AAAE,IAAA,IAAA,CAAK,QAAQ,GAAI,EAAA;AAAA,GAEnB,MAAA;AAAE,IAAK,IAAA,CAAA,OAAA,CAAQ,IAAK,CAAA,KAAA,CAAM,MAAM,CAAA;AAAA;AAClC,EAAA,IAAA,CAAK,WAAc,GAAA,KAAA;AACrB,CAAA;AAEA,OAAQ,CAAA,IAAA,CAAK,aAAgB,GAAA,SAAS,QAAU,EAAA;AAC9C,EAAI,IAAA,QAAA,KAAa,QAAQ,SAAW,EAAA;AAClC,IAAIG,IAAAA,MAAAA,GAAQ,IAAK,CAAA,OAAA,CAAQ,MAAS,GAAA,CAAA;AAClC,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQA,MAAK,CAAA,KAAM,MAAM,MAChC,EAAA;AAAE,MAAK,IAAA,CAAA,OAAA,CAAQA,MAAK,CAAA,GAAI,KAAM,CAAA,UAAA;AAAA,KAE9B,MAAA;AAAE,MAAK,IAAA,CAAA,OAAA,CAAQA,MAAK,CAAA,GAAI,KAAM,CAAA,KAAA;AAAA;AAAO;AAEzC,EAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AACrB,CAAA;AAEA,OAAQ,CAAA,IAAA,CAAK,aAAgB,GAAA,SAAS,QAAU,EAAA;AAC9C,EAAA,IAAI,OAAU,GAAA,KAAA;AACd,EAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,QAAA,KAAa,QAAQ,GAAK,EAAA;AAC7D,IAAI,IAAA,IAAA,CAAK,KAAU,KAAA,IAAA,IAAQ,CAAC,IAAA,CAAK,WAC7B,IAAA,IAAA,CAAK,KAAU,KAAA,OAAA,IAAW,IAAK,CAAA,kBAAA,EACjC,EAAA;AAAE,MAAU,OAAA,GAAA,IAAA;AAAA;AAAM;AAEtB,EAAA,IAAA,CAAK,WAAc,GAAA,OAAA;AACrB,CAAA;AAqBA,IAAI,OAAO,MAAO,CAAA,SAAA;AAOlB,IAAA,CAAK,cAAiB,GAAA,SAAS,IAAM,EAAA,QAAA,EAAU,sBAAwB,EAAA;AACrE,EAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,IAAA,CAAK,SAAS,eACjD,EAAA;AAAE,IAAA;AAAA;AACJ,EAAI,IAAA,IAAA,CAAK,QAAQ,WAAe,IAAA,CAAA,KAAM,KAAK,QAAY,IAAA,IAAA,CAAK,MAAU,IAAA,IAAA,CAAK,SACzE,CAAA,EAAA;AAAE,IAAA;AAAA;AACJ,EAAA,IAAI,MAAM,IAAK,CAAA,GAAA;AACf,EAAI3F,IAAAA,KAAAA;AACJ,EAAA,QAAQ,IAAI,IAAM;AAAA,IAClB,KAAK,YAAA;AAAc,MAAAA,QAAO,GAAI,CAAA,IAAA;AAAM,MAAA;AAAA,IACpC,KAAK,SAAA;AAAW,MAAAA,KAAAA,GAAO,MAAO,CAAA,GAAA,CAAI,KAAK,CAAA;AAAG,MAAA;AAAA,IAC1C;AAAS,MAAA;AAAA;AAET,EAAA,IAAI,OAAO,IAAK,CAAA,IAAA;AAChB,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,IAAIA,IAAAA,KAAAA,KAAS,WAAe,IAAA,IAAA,KAAS,MAAQ,EAAA;AAC3C,MAAA,IAAI,SAAS,KAAO,EAAA;AAClB,QAAA,IAAI,sBAAwB,EAAA;AAC1B,UAAI,IAAA,sBAAA,CAAuB,cAAc,CAAG,EAAA;AAC1C,YAAA,sBAAA,CAAuB,cAAc,GAAI,CAAA,KAAA;AAAA;AAC3C,SACK,MAAA;AACL,UAAK,IAAA,CAAA,gBAAA,CAAiB,GAAI,CAAA,KAAA,EAAO,oCAAoC,CAAA;AAAA;AACvE;AAEF,MAAA,QAAA,CAAS,KAAQ,GAAA,IAAA;AAAA;AAEnB,IAAA;AAAA;AAEF,EAAAA,QAAO,GAAMA,GAAAA,KAAAA;AACb,EAAI,IAAA,KAAA,GAAQ,SAASA,KAAI,CAAA;AACzB,EAAA,IAAI,KAAO,EAAA;AACT,IAAI,IAAA,YAAA;AACJ,IAAA,IAAI,SAAS,MAAQ,EAAA;AACnB,MAAA,YAAA,GAAe,KAAK,MAAU,IAAA,KAAA,CAAM,IAAQ,IAAA,KAAA,CAAM,OAAO,KAAM,CAAA,GAAA;AAAA,KAC1D,MAAA;AACL,MAAe,YAAA,GAAA,KAAA,CAAM,IAAQ,IAAA,KAAA,CAAM,IAAI,CAAA;AAAA;AAEzC,IAAA,IAAI,YACF,EAAA;AAAE,MAAK,IAAA,CAAA,gBAAA,CAAiB,GAAI,CAAA,KAAA,EAAO,0BAA0B,CAAA;AAAA;AAAG,GAC7D,MAAA;AACL,IAAQ,KAAA,GAAA,QAAA,CAASA,KAAI,CAAI,GAAA;AAAA,MACvB,IAAM,EAAA,KAAA;AAAA,MACN,GAAK,EAAA,KAAA;AAAA,MACL,GAAK,EAAA;AAAA,KACP;AAAA;AAEF,EAAA,KAAA,CAAM,IAAI,CAAI,GAAA,IAAA;AAChB,CAAA;AAiBA,IAAK,CAAA,eAAA,GAAkB,SAAS,OAAA,EAAS,sBAAwB,EAAA;AAC/D,EAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,EAAA,IAAI,IAAO,GAAA,IAAA,CAAK,gBAAiB,CAAA,OAAA,EAAS,sBAAsB,CAAA;AAChE,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,KAAO,EAAA;AAC/B,IAAA,IAAIoE,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,IAAAA,KAAAA,CAAK,WAAc,GAAA,CAAC,IAAI,CAAA;AACxB,IAAA,OAAO,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,KAAK,CAAG,EAAA;AAAE,MAAAA,MAAK,WAAY,CAAA,IAAA,CAAK,KAAK,gBAAiB,CAAA,OAAA,EAAS,sBAAsB,CAAC,CAAA;AAAA;AAC9G,IAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,oBAAoB,CAAA;AAAA;AAEnD,EAAO,OAAA,IAAA;AACT,CAAA;AAKA,IAAA,CAAK,gBAAmB,GAAA,SAAS,OAAS,EAAA,sBAAA,EAAwB,cAAgB,EAAA;AAChF,EAAI,IAAA,IAAA,CAAK,YAAa,CAAA,OAAO,CAAG,EAAA;AAC9B,IAAA,IAAI,KAAK,WAAa,EAAA;AAAE,MAAO,OAAA,IAAA,CAAK,WAAW,OAAO,CAAA;AAAA,KAGjD,MAAA;AAAE,MAAA,IAAA,CAAK,WAAc,GAAA,KAAA;AAAA;AAAO;AAGnC,EAAA,IAAI,yBAAyB,KAAO,EAAA,cAAA,GAAiB,CAAI,CAAA,EAAA,gBAAA,GAAmB,IAAI,cAAiB,GAAA,CAAA,CAAA;AACjG,EAAA,IAAI,sBAAwB,EAAA;AAC1B,IAAA,cAAA,GAAiB,sBAAuB,CAAA,mBAAA;AACxC,IAAA,gBAAA,GAAmB,sBAAuB,CAAA,aAAA;AAC1C,IAAA,cAAA,GAAiB,sBAAuB,CAAA,WAAA;AACxC,IAAuB,sBAAA,CAAA,mBAAA,GAAsB,uBAAuB,aAAgB,GAAA,CAAA,CAAA;AAAA,GAC/E,MAAA;AACL,IAAA,sBAAA,GAAyB,IAAI,mBAAA,EAAA;AAC7B,IAAyB,sBAAA,GAAA,IAAA;AAAA;AAG3B,EAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,EAAA,IAAI,KAAK,IAAS,KAAA,OAAA,CAAQ,UAAU,IAAK,CAAA,IAAA,KAAS,QAAQ,IAAM,EAAA;AAC9D,IAAA,IAAA,CAAK,mBAAmB,IAAK,CAAA,KAAA;AAC7B,IAAA,IAAA,CAAK,2BAA2B,OAAY,KAAA,OAAA;AAAA;AAE9C,EAAA,IAAI,IAAO,GAAA,IAAA,CAAK,qBAAsB,CAAA,OAAA,EAAS,sBAAsB,CAAA;AACrE,EAAA,IAAI,cAAgB,EAAA;AAAE,IAAA,IAAA,GAAO,cAAe,CAAA,IAAA,CAAK,IAAM,EAAA,IAAA,EAAM,UAAU,QAAQ,CAAA;AAAA;AAC/E,EAAI,IAAA,IAAA,CAAK,KAAK,QAAU,EAAA;AACtB,IAAA,IAAIA,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,IAAAA,KAAAA,CAAK,WAAW,IAAK,CAAA,KAAA;AACrB,IAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,EACxB,EAAA;AAAE,MAAA,IAAA,GAAO,IAAK,CAAA,YAAA,CAAa,IAAM,EAAA,KAAA,EAAO,sBAAsB,CAAA;AAAA;AAChE,IAAA,IAAI,CAAC,sBAAwB,EAAA;AAC3B,MAAA,sBAAA,CAAuB,mBAAsB,GAAA,sBAAA,CAAuB,aAAgB,GAAA,sBAAA,CAAuB,WAAc,GAAA,CAAA,CAAA;AAAA;AAE3H,IAAI,IAAA,sBAAA,CAAuB,eAAmB,IAAA,IAAA,CAAK,KACjD,EAAA;AAAE,MAAA,sBAAA,CAAuB,eAAkB,GAAA,CAAA,CAAA;AAAA;AAC7C,IAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,EACxB,EAAA;AAAE,MAAA,IAAA,CAAK,iBAAiB,IAAI,CAAA;AAAA,KAE5B,MAAA;AAAE,MAAA,IAAA,CAAK,gBAAgB,IAAI,CAAA;AAAA;AAC7B,IAAAA,MAAK,IAAO,GAAA,IAAA;AACZ,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAAA,KAAK,CAAA,KAAA,GAAQ,IAAK,CAAA,gBAAA,CAAiB,OAAO,CAAA;AAC1C,IAAA,IAAI,iBAAiB,CAAI,CAAA,EAAA;AAAE,MAAA,sBAAA,CAAuB,WAAc,GAAA,cAAA;AAAA;AAChE,IAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,sBAAsB,CAAA;AAAA,GAC9C,MAAA;AACL,IAAA,IAAI,sBAAwB,EAAA;AAAE,MAAK,IAAA,CAAA,qBAAA,CAAsB,wBAAwB,IAAI,CAAA;AAAA;AAAG;AAE1F,EAAA,IAAI,iBAAiB,CAAI,CAAA,EAAA;AAAE,IAAA,sBAAA,CAAuB,mBAAsB,GAAA,cAAA;AAAA;AACxE,EAAA,IAAI,mBAAmB,CAAI,CAAA,EAAA;AAAE,IAAA,sBAAA,CAAuB,aAAgB,GAAA,gBAAA;AAAA;AACpE,EAAO,OAAA,IAAA;AACT,CAAA;AAIA,IAAK,CAAA,qBAAA,GAAwB,SAAS,OAAA,EAAS,sBAAwB,EAAA;AACrE,EAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,EAAA,IAAI,IAAO,GAAA,IAAA,CAAK,YAAa,CAAA,OAAA,EAAS,sBAAsB,CAAA;AAC5D,EAAI,IAAA,IAAA,CAAK,qBAAsB,CAAA,sBAAsB,CAAG,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AACjE,EAAA,IAAI,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,QAAQ,CAAG,EAAA;AAC9B,IAAA,IAAIA,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,IAAAA,MAAK,IAAO,GAAA,IAAA;AACZ,IAAAA,KAAAA,CAAK,UAAa,GAAA,IAAA,CAAK,gBAAiB,EAAA;AACxC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,KAAK,CAAA;AACzB,IAAAA,KAAK,CAAA,SAAA,GAAY,IAAK,CAAA,gBAAA,CAAiB,OAAO,CAAA;AAC9C,IAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,uBAAuB,CAAA;AAAA;AAEtD,EAAO,OAAA,IAAA;AACT,CAAA;AAIA,IAAK,CAAA,YAAA,GAAe,SAAS,OAAA,EAAS,sBAAwB,EAAA;AAC5D,EAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,EAAA,IAAI,OAAO,IAAK,CAAA,eAAA,CAAgB,sBAAwB,EAAA,KAAA,EAAO,OAAO,OAAO,CAAA;AAC7E,EAAI,IAAA,IAAA,CAAK,qBAAsB,CAAA,sBAAsB,CAAG,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AACjE,EAAA,OAAO,IAAK,CAAA,KAAA,KAAU,QAAY,IAAA,IAAA,CAAK,IAAS,KAAA,yBAAA,GAA4B,IAAO,GAAA,IAAA,CAAK,WAAY,CAAA,IAAA,EAAM,QAAU,EAAA,QAAA,EAAU,IAAI,OAAO,CAAA;AAC3I,CAAA;AAQA,IAAA,CAAK,cAAc,SAAS,IAAA,EAAM,YAAc,EAAA,YAAA,EAAc,SAAS,OAAS,EAAA;AAC9E,EAAI,IAAA,IAAA,GAAO,KAAK,IAAK,CAAA,KAAA;AACrB,EAAA,IAAI,QAAQ,IAAS,KAAA,CAAC,WAAW,IAAK,CAAA,IAAA,KAAS,QAAQ,GAAM,CAAA,EAAA;AAC3D,IAAA,IAAI,OAAO,OAAS,EAAA;AAClB,MAAA,IAAI,UAAU,IAAK,CAAA,IAAA,KAAS,QAAQ,SAAa,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,UAAA;AACvE,MAAI,IAAA,QAAA,GAAW,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA,QAAA;AACrC,MAAA,IAAI,QAAU,EAAA;AAGZ,QAAA,IAAA,GAAO,QAAQ,UAAW,CAAA,KAAA;AAAA;AAE5B,MAAA,IAAI,KAAK,IAAK,CAAA,KAAA;AACd,MAAA,IAAA,CAAK,IAAK,EAAA;AACV,MAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,MAAA,IAAI,KAAQ,GAAA,IAAA,CAAK,WAAY,CAAA,IAAA,CAAK,eAAgB,CAAA,IAAA,EAAM,KAAO,EAAA,KAAA,EAAO,OAAO,CAAA,EAAG,QAAU,EAAA,QAAA,EAAU,MAAM,OAAO,CAAA;AACjH,MAAIA,IAAAA,KAAAA,GAAO,KAAK,WAAY,CAAA,YAAA,EAAc,cAAc,IAAM,EAAA,KAAA,EAAO,EAAI,EAAA,OAAA,IAAW,QAAQ,CAAA;AAC5F,MAAA,IAAK,OAAW,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,QAAc,IAAA,QAAA,KAAa,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA,SAAA,IAAa,IAAK,CAAA,IAAA,KAAS,QAAQ,UAAc,CAAA,EAAA;AACtI,QAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,0FAA0F,CAAA;AAAA;AAE9H,MAAA,OAAO,KAAK,WAAYA,CAAAA,KAAAA,EAAM,YAAc,EAAA,YAAA,EAAc,SAAS,OAAO,CAAA;AAAA;AAC5E;AAEF,EAAO,OAAA,IAAA;AACT,CAAA;AAEA,IAAA,CAAK,cAAc,SAAS,QAAA,EAAU,UAAU,IAAM,EAAA,KAAA,EAAO,IAAI,OAAS,EAAA;AACxE,EAAI,IAAA,KAAA,CAAM,SAAS,mBAAqB,EAAA;AAAE,IAAK,IAAA,CAAA,KAAA,CAAM,KAAM,CAAA,KAAA,EAAO,+DAA+D,CAAA;AAAA;AACjI,EAAA,IAAIA,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,EAAAA,MAAK,IAAO,GAAA,IAAA;AACZ,EAAAA,MAAK,QAAW,GAAA,EAAA;AAChB,EAAAA,MAAK,KAAQ,GAAA,KAAA;AACb,EAAA,OAAO,IAAK,CAAA,UAAA,CAAWA,KAAM,EAAA,OAAA,GAAU,sBAAsB,kBAAkB,CAAA;AACjF,CAAA;AAIA,IAAA,CAAK,eAAkB,GAAA,SAAS,sBAAwB,EAAA,QAAA,EAAU,QAAQ,OAAS,EAAA;AACjF,EAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,KAAK,QAAU,EAAA,IAAA;AACrD,EAAA,IAAI,IAAK,CAAA,YAAA,CAAa,OAAO,CAAA,IAAK,KAAK,QAAU,EAAA;AAC/C,IAAO,IAAA,GAAA,IAAA,CAAK,WAAW,OAAO,CAAA;AAC9B,IAAW,QAAA,GAAA,IAAA;AAAA,GACb,MAAA,IAAW,IAAK,CAAA,IAAA,CAAK,MAAQ,EAAA;AAC3B,IAAA,IAAIA,QAAO,IAAK,CAAA,SAAA,IAAa,MAAS,GAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA;AAC5D,IAAAA,KAAAA,CAAK,WAAW,IAAK,CAAA,KAAA;AACrB,IAAAA,MAAK,MAAS,GAAA,IAAA;AACd,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAAA,MAAK,QAAW,GAAA,IAAA,CAAK,gBAAgB,IAAM,EAAA,IAAA,EAAM,QAAQ,OAAO,CAAA;AAChE,IAAK,IAAA,CAAA,qBAAA,CAAsB,wBAAwB,IAAI,CAAA;AACvD,IAAA,IAAI,MAAQ,EAAA;AAAE,MAAK,IAAA,CAAA,eAAA,CAAgBA,MAAK,QAAQ,CAAA;AAAA,KAAG,MAAA,IAC1C,KAAK,MAAUA,IAAAA,KAAAA,CAAK,aAAa,QAAY,IAAA,qBAAA,CAAsBA,KAAK,CAAA,QAAQ,CACvF,EAAA;AAAE,MAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,wCAAwC,CAAA;AAAA,eACrEA,KAAK,CAAA,QAAA,KAAa,YAAY,oBAAqBA,CAAAA,KAAAA,CAAK,QAAQ,CACvE,EAAA;AAAE,MAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,mCAAmC,CAAA;AAAA,KACpE,MAAA;AAAE,MAAW,QAAA,GAAA,IAAA;AAAA;AAClB,IAAA,IAAA,GAAO,IAAK,CAAA,UAAA,CAAWA,KAAM,EAAA,MAAA,GAAS,qBAAqB,iBAAiB,CAAA;AAAA,aACnE,CAAC,QAAA,IAAY,IAAK,CAAA,IAAA,KAAS,QAAQ,SAAW,EAAA;AACvD,IAAA,IAAA,CAAK,WAAW,IAAK,CAAA,gBAAA,CAAiB,WAAW,CAAM,KAAA,IAAA,CAAK,QAAQ,kBAAoB,EAAA;AAAE,MAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC1G,IAAA,IAAA,GAAO,KAAK,iBAAkB,EAAA;AAE9B,IAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,GAAK,EAAA;AAAE,MAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAAG,GAC/C,MAAA;AACL,IAAO,IAAA,GAAA,IAAA,CAAK,mBAAoB,CAAA,sBAAA,EAAwB,OAAO,CAAA;AAC/D,IAAI,IAAA,IAAA,CAAK,qBAAsB,CAAA,sBAAsB,CAAG,EAAA;AAAE,MAAO,OAAA,IAAA;AAAA;AACjE,IAAA,OAAO,KAAK,IAAK,CAAA,OAAA,IAAW,CAAC,IAAA,CAAK,oBAAsB,EAAA;AACtD,MAAA,IAAI,MAAS,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAChD,MAAA,MAAA,CAAO,WAAW,IAAK,CAAA,KAAA;AACvB,MAAA,MAAA,CAAO,MAAS,GAAA,KAAA;AAChB,MAAA,MAAA,CAAO,QAAW,GAAA,IAAA;AAClB,MAAA,IAAA,CAAK,gBAAgB,IAAI,CAAA;AACzB,MAAA,IAAA,CAAK,IAAK,EAAA;AACV,MAAO,IAAA,GAAA,IAAA,CAAK,UAAW,CAAA,MAAA,EAAQ,kBAAkB,CAAA;AAAA;AACnD;AAGF,EAAA,IAAI,CAAC,MAAU,IAAA,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,QAAQ,CAAG,EAAA;AACzC,IAAA,IAAI,QACF,EAAA;AAAE,MAAK,IAAA,CAAA,UAAA,CAAW,KAAK,YAAY,CAAA;AAAA,KAEnC,MAAA;AAAE,MAAA,OAAO,IAAK,CAAA,WAAA,CAAY,QAAU,EAAA,QAAA,EAAU,IAAM,EAAA,IAAA,CAAK,eAAgB,CAAA,IAAA,EAAM,KAAO,EAAA,KAAA,EAAO,OAAO,CAAA,EAAG,MAAM,KAAK,CAAA;AAAA;AAAE,GACjH,MAAA;AACL,IAAO,OAAA,IAAA;AAAA;AAEX,CAAA;AAEA,SAAS,sBAAsBA,KAAM,EAAA;AACnC,EACEA,OAAAA,KAAAA,CAAK,SAAS,YACdA,IAAAA,KAAAA,CAAK,SAAS,yBAA6B,IAAA,qBAAA,CAAsBA,MAAK,UAAU,CAAA;AAEpF;AAEA,SAAS,qBAAqBA,KAAM,EAAA;AAClC,EAAA,OACEA,MAAK,IAAS,KAAA,kBAAA,IAAsBA,MAAK,QAAS,CAAA,IAAA,KAAS,uBAC3DA,KAAK,CAAA,IAAA,KAAS,qBAAqB,oBAAqBA,CAAAA,KAAAA,CAAK,UAAU,CACvEA,IAAAA,KAAAA,CAAK,SAAS,yBAA6B,IAAA,oBAAA,CAAqBA,MAAK,UAAU,CAAA;AAEnF;AAIA,IAAK,CAAA,mBAAA,GAAsB,SAAS,sBAAA,EAAwB,OAAS,EAAA;AACnE,EAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,EAAA,IAAI,IAAO,GAAA,IAAA,CAAK,aAAc,CAAA,sBAAA,EAAwB,OAAO,CAAA;AAC7D,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,yBAAA,IAA6B,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,IAAA,CAAK,YAAc,EAAA,IAAA,CAAK,UAAU,CAAA,KAAM,GACtG,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AACX,EAAA,IAAI,SAAS,IAAK,CAAA,eAAA,CAAgB,MAAM,QAAU,EAAA,QAAA,EAAU,OAAO,OAAO,CAAA;AAC1E,EAAI,IAAA,sBAAA,IAA0B,MAAO,CAAA,IAAA,KAAS,kBAAoB,EAAA;AAChE,IAAI,IAAA,sBAAA,CAAuB,mBAAuB,IAAA,MAAA,CAAO,KAAO,EAAA;AAAE,MAAA,sBAAA,CAAuB,mBAAsB,GAAA,CAAA,CAAA;AAAA;AAC/G,IAAI,IAAA,sBAAA,CAAuB,iBAAqB,IAAA,MAAA,CAAO,KAAO,EAAA;AAAE,MAAA,sBAAA,CAAuB,iBAAoB,GAAA,CAAA,CAAA;AAAA;AAC3G,IAAI,IAAA,sBAAA,CAAuB,aAAiB,IAAA,MAAA,CAAO,KAAO,EAAA;AAAE,MAAA,sBAAA,CAAuB,aAAgB,GAAA,CAAA,CAAA;AAAA;AAAI;AAEzG,EAAO,OAAA,MAAA;AACT,CAAA;AAEA,IAAA,CAAK,kBAAkB,SAAS,IAAA,EAAM,QAAU,EAAA,QAAA,EAAU,SAAS,OAAS,EAAA;AAC1E,EAAI,IAAA,eAAA,GAAkB,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,IAAK,IAAK,CAAA,IAAA,KAAS,YAAgB,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,IAC/F,IAAK,CAAA,UAAA,KAAe,KAAK,GAAO,IAAA,CAAC,IAAK,CAAA,kBAAA,EAAwB,IAAA,IAAA,CAAK,GAAM,GAAA,IAAA,CAAK,KAAU,KAAA,CAAA,IACxF,IAAK,CAAA,gBAAA,KAAqB,IAAK,CAAA,KAAA;AACnC,EAAA,IAAI,eAAkB,GAAA,KAAA;AAEtB,EAAA,OAAO,IAAM,EAAA;AACX,IAAI,IAAA,OAAA,GAAU,KAAK,cAAe,CAAA,IAAA,EAAM,UAAU,QAAU,EAAA,OAAA,EAAS,eAAiB,EAAA,eAAA,EAAiB,OAAO,CAAA;AAE9G,IAAA,IAAI,QAAQ,QAAU,EAAA;AAAE,MAAkB,eAAA,GAAA,IAAA;AAAA;AAC1C,IAAA,IAAI,OAAY,KAAA,IAAA,IAAQ,OAAQ,CAAA,IAAA,KAAS,yBAA2B,EAAA;AAClE,MAAA,IAAI,eAAiB,EAAA;AACnB,QAAA,IAAI,SAAY,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AACnD,QAAA,SAAA,CAAU,UAAa,GAAA,OAAA;AACvB,QAAU,OAAA,GAAA,IAAA,CAAK,UAAW,CAAA,SAAA,EAAW,iBAAiB,CAAA;AAAA;AAExD,MAAO,OAAA,OAAA;AAAA;AAGT,IAAO,IAAA,GAAA,OAAA;AAAA;AAEX,CAAA;AAEA,IAAA,CAAK,wBAAwB,WAAW;AACtC,EAAA,OAAO,CAAC,IAAK,CAAA,kBAAA,MAAwB,IAAK,CAAA,GAAA,CAAI,QAAQ,KAAK,CAAA;AAC7D,CAAA;AAEA,IAAA,CAAK,wBAA2B,GAAA,SAAS,QAAU,EAAA,QAAA,EAAU,UAAU,OAAS,EAAA;AAC9E,EAAO,OAAA,IAAA,CAAK,qBAAqB,IAAK,CAAA,WAAA,CAAY,UAAU,QAAQ,CAAA,EAAG,QAAU,EAAA,IAAA,EAAM,OAAO,CAAA;AAChG,CAAA;AAEA,IAAK,CAAA,cAAA,GAAiB,SAAS,IAAM,EAAA,QAAA,EAAU,UAAU,OAAS,EAAA,eAAA,EAAiB,iBAAiB,OAAS,EAAA;AAC3G,EAAI,IAAA,iBAAA,GAAoB,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,EAAA;AACpD,EAAA,IAAI,QAAW,GAAA,iBAAA,IAAqB,IAAK,CAAA,GAAA,CAAI,QAAQ,WAAW,CAAA;AAChE,EAAA,IAAI,WAAW,QAAU,EAAA;AAAE,IAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,YAAA,EAAc,kEAAkE,CAAA;AAAA;AAE3H,EAAA,IAAI,QAAW,GAAA,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,QAAQ,CAAA;AACxC,EAAA,IAAI,QAAa,IAAA,QAAA,IAAY,IAAK,CAAA,IAAA,KAAS,QAAQ,MAAU,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,SAAc,IAAA,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,GAAG,CAAG,EAAA;AACtH,IAAA,IAAIA,KAAO,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC9C,IAAAA,MAAK,MAAS,GAAA,IAAA;AACd,IAAA,IAAI,QAAU,EAAA;AACZ,MAAAA,KAAAA,CAAK,QAAW,GAAA,IAAA,CAAK,eAAgB,EAAA;AACrC,MAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,QAAQ,CAAA;AAAA,eACnB,IAAK,CAAA,IAAA,KAAS,QAAQ,SAAa,IAAA,IAAA,CAAK,SAAS,OAAS,EAAA;AACnE,MAAAA,KAAAA,CAAK,QAAW,GAAA,IAAA,CAAK,iBAAkB,EAAA;AAAA,KAClC,MAAA;AACL,MAAAA,MAAK,QAAW,GAAA,IAAA,CAAK,WAAW,IAAK,CAAA,OAAA,CAAQ,kBAAkB,OAAO,CAAA;AAAA;AAExE,IAAAA,KAAAA,CAAK,QAAW,GAAA,CAAC,CAAC,QAAA;AAClB,IAAA,IAAI,iBAAmB,EAAA;AACrB,MAAAA,MAAK,QAAW,GAAA,QAAA;AAAA;AAElB,IAAO,IAAA,GAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,kBAAkB,CAAA;AAAA,aACtC,CAAC,OAAA,IAAW,KAAK,GAAI,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AAC/C,IAAI,IAAA,sBAAA,GAAyB,IAAI,mBAAA,EAAA,EAAqB,WAAc,GAAA,IAAA,CAAK,UAAU,WAAc,GAAA,IAAA,CAAK,QAAU,EAAA,gBAAA,GAAmB,IAAK,CAAA,aAAA;AACxI,IAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,IAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,IAAA,IAAA,CAAK,aAAgB,GAAA,CAAA;AACrB,IAAI,IAAA,QAAA,GAAW,IAAK,CAAA,aAAA,CAAc,OAAQ,CAAA,MAAA,EAAQ,KAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA,KAAA,EAAO,sBAAsB,CAAA;AAC9G,IAAA,IAAI,eAAmB,IAAA,CAAC,QAAY,IAAA,IAAA,CAAK,uBAAyB,EAAA;AAChE,MAAK,IAAA,CAAA,kBAAA,CAAmB,wBAAwB,KAAK,CAAA;AACrD,MAAA,IAAA,CAAK,8BAA+B,EAAA;AACpC,MAAI,IAAA,IAAA,CAAK,gBAAgB,CACvB,EAAA;AAAE,QAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,aAAA,EAAe,2DAA2D,CAAA;AAAA;AAC9F,MAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,MAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,MAAA,IAAA,CAAK,aAAgB,GAAA,gBAAA;AACrB,MAAA,OAAO,IAAK,CAAA,wBAAA,CAAyB,QAAU,EAAA,QAAA,EAAU,UAAU,OAAO,CAAA;AAAA;AAE5E,IAAK,IAAA,CAAA,qBAAA,CAAsB,wBAAwB,IAAI,CAAA;AACvD,IAAK,IAAA,CAAA,QAAA,GAAW,eAAe,IAAK,CAAA,QAAA;AACpC,IAAK,IAAA,CAAA,QAAA,GAAW,eAAe,IAAK,CAAA,QAAA;AACpC,IAAK,IAAA,CAAA,aAAA,GAAgB,oBAAoB,IAAK,CAAA,aAAA;AAC9C,IAAA,IAAI,MAAS,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAChD,IAAA,MAAA,CAAO,MAAS,GAAA,IAAA;AAChB,IAAA,MAAA,CAAO,SAAY,GAAA,QAAA;AACnB,IAAA,IAAI,iBAAmB,EAAA;AACrB,MAAA,MAAA,CAAO,QAAW,GAAA,QAAA;AAAA;AAEpB,IAAO,IAAA,GAAA,IAAA,CAAK,UAAW,CAAA,MAAA,EAAQ,gBAAgB,CAAA;AAAA,GACtC,MAAA,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,SAAW,EAAA;AAC1C,IAAA,IAAI,YAAY,eAAiB,EAAA;AAC/B,MAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,2EAA2E,CAAA;AAAA;AAEpG,IAAA,IAAI,MAAS,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAChD,IAAA,MAAA,CAAO,GAAM,GAAA,IAAA;AACb,IAAA,MAAA,CAAO,QAAQ,IAAK,CAAA,aAAA,CAAc,EAAC,QAAA,EAAU,MAAK,CAAA;AAClD,IAAO,IAAA,GAAA,IAAA,CAAK,UAAW,CAAA,MAAA,EAAQ,0BAA0B,CAAA;AAAA;AAE3D,EAAO,OAAA,IAAA;AACT,CAAA;AAOA,IAAA,CAAK,aAAgB,GAAA,SAAS,sBAAwB,EAAA,OAAA,EAAS,MAAQ,EAAA;AAGrE,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,KAAO,EAAA;AAAE,IAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAEnD,EAAA,IAAIA,KAAM,EAAA,UAAA,GAAa,IAAK,CAAA,gBAAA,KAAqB,IAAK,CAAA,KAAA;AACtD,EAAA,QAAQ,KAAK,IAAM;AAAA,IACnB,KAAK,OAAQ,CAAA,MAAA;AACX,MAAI,IAAA,CAAC,KAAK,UACR,EAAA;AAAE,QAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,kCAAkC,CAAA;AAAA;AAC7D,MAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AACtB,MAAA,IAAA,CAAK,IAAK,EAAA;AACV,MAAA,IAAI,KAAK,IAAS,KAAA,OAAA,CAAQ,MAAU,IAAA,CAAC,KAAK,gBACxC,EAAA;AAAE,QAAK,IAAA,CAAA,KAAA,CAAMA,KAAK,CAAA,KAAA,EAAO,gDAAgD,CAAA;AAAA;AAO3E,MAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,GAAO,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,QAAY,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,MACvF,EAAA;AAAE,QAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACpB,MAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,OAAO,CAAA;AAAA,IAEtC,KAAK,OAAQ,CAAA,KAAA;AACX,MAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AACtB,MAAA,IAAA,CAAK,IAAK,EAAA;AACV,MAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,gBAAgB,CAAA;AAAA,IAE/C,KAAK,OAAQ,CAAA,IAAA;AACX,MAAA,IAAI,WAAW,IAAK,CAAA,KAAA,EAAO,WAAW,IAAK,CAAA,QAAA,EAAU,cAAc,IAAK,CAAA,WAAA;AACxE,MAAI,IAAA,EAAA,GAAK,IAAK,CAAA,UAAA,CAAW,KAAK,CAAA;AAC9B,MAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,CAAC,eAAe,EAAG,CAAA,IAAA,KAAS,OAAW,IAAA,CAAC,KAAK,kBAAmB,EAAA,IAAK,KAAK,GAAI,CAAA,OAAA,CAAQ,SAAS,CAAG,EAAA;AACrI,QAAK,IAAA,CAAA,eAAA,CAAgB,MAAM,MAAM,CAAA;AACjC,QAAO,OAAA,IAAA,CAAK,aAAc,CAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAG,EAAA,CAAA,EAAG,KAAO,EAAA,IAAA,EAAM,OAAO,CAAA;AAAA;AAEzF,MAAA,IAAI,UAAc,IAAA,CAAC,IAAK,CAAA,kBAAA,EAAsB,EAAA;AAC5C,QAAA,IAAI,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,KAAK,CACxB,EAAA;AAAE,UAAO,OAAA,IAAA,CAAK,oBAAqB,CAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA,EAAG,CAAC,EAAE,CAAG,EAAA,KAAA,EAAO,OAAO,CAAA;AAAA;AAC/F,QAAI,IAAA,IAAA,CAAK,QAAQ,WAAe,IAAA,CAAA,IAAK,GAAG,IAAS,KAAA,OAAA,IAAW,KAAK,IAAS,KAAA,OAAA,CAAQ,QAAQ,CAAC,WAAA,KACtF,CAAC,IAAK,CAAA,wBAAA,IAA4B,KAAK,KAAU,KAAA,IAAA,IAAQ,KAAK,WAAc,CAAA,EAAA;AAC/E,UAAK,EAAA,GAAA,IAAA,CAAK,WAAW,KAAK,CAAA;AAC1B,UAAI,IAAA,IAAA,CAAK,oBAAwB,IAAA,CAAC,KAAK,GAAI,CAAA,OAAA,CAAQ,KAAK,CACtD,EAAA;AAAE,YAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACpB,UAAO,OAAA,IAAA,CAAK,oBAAqB,CAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA,EAAG,CAAC,EAAE,CAAG,EAAA,IAAA,EAAM,OAAO,CAAA;AAAA;AAC5F;AAEF,MAAO,OAAA,EAAA;AAAA,IAET,KAAK,OAAQ,CAAA,MAAA;AACX,MAAA,IAAIiB,SAAQ,IAAK,CAAA,KAAA;AACjB,MAAAjB,KAAO,GAAA,IAAA,CAAK,YAAaiB,CAAAA,MAAAA,CAAM,KAAK,CAAA;AACpC,MAAAjB,KAAAA,CAAK,QAAQ,EAAC,OAAA,EAASiB,OAAM,OAAS,EAAA,KAAA,EAAOA,OAAM,KAAK,EAAA;AACxD,MAAOjB,OAAAA,KAAAA;AAAA,IAET,KAAK,OAAQ,CAAA,GAAA;AAAA,IAAK,KAAK,OAAQ,CAAA,MAAA;AAC7B,MAAO,OAAA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,KAAK,CAAA;AAAA,IAErC,KAAK,OAAQ,CAAA,KAAA;AAAA,IAAO,KAAK,OAAQ,CAAA,KAAA;AAAA,IAAO,KAAK,OAAQ,CAAA,MAAA;AACnD,MAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AACtB,MAAAA,KAAAA,CAAK,QAAQ,IAAK,CAAA,IAAA,KAAS,QAAQ,KAAQ,GAAA,IAAA,GAAO,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA,KAAA;AACxE,MAAAA,KAAAA,CAAK,GAAM,GAAA,IAAA,CAAK,IAAK,CAAA,OAAA;AACrB,MAAA,IAAA,CAAK,IAAK,EAAA;AACV,MAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,SAAS,CAAA;AAAA,IAExC,KAAK,OAAQ,CAAA,MAAA;AACX,MAAA,IAAI3B,SAAQ,IAAK,CAAA,KAAA,EAAO,OAAO,IAAK,CAAA,kCAAA,CAAmC,YAAY,OAAO,CAAA;AAC1F,MAAA,IAAI,sBAAwB,EAAA;AAC1B,QAAA,IAAI,uBAAuB,mBAAsB,GAAA,CAAA,IAAK,CAAC,IAAK,CAAA,oBAAA,CAAqB,IAAI,CACnF,EAAA;AAAE,UAAA,sBAAA,CAAuB,mBAAsBA,GAAAA,MAAAA;AAAA;AACjD,QAAI,IAAA,sBAAA,CAAuB,oBAAoB,CAC7C,EAAA;AAAE,UAAA,sBAAA,CAAuB,iBAAoBA,GAAAA,MAAAA;AAAA;AAAO;AAExD,MAAO,OAAA,IAAA;AAAA,IAET,KAAK,OAAQ,CAAA,QAAA;AACX,MAAA2B,KAAAA,GAAO,KAAK,SAAU,EAAA;AACtB,MAAA,IAAA,CAAK,IAAK,EAAA;AACV,MAAAA,KAAAA,CAAK,WAAW,IAAK,CAAA,aAAA,CAAc,QAAQ,QAAU,EAAA,IAAA,EAAM,MAAM,sBAAsB,CAAA;AACvF,MAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAAA,IAEhD,KAAK,OAAQ,CAAA,MAAA;AACX,MAAK,IAAA,CAAA,eAAA,CAAgB,MAAM,MAAM,CAAA;AACjC,MAAO,OAAA,IAAA,CAAK,QAAS,CAAA,KAAA,EAAO,sBAAsB,CAAA;AAAA,IAEpD,KAAK,OAAQ,CAAA,SAAA;AACX,MAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AACtB,MAAA,IAAA,CAAK,IAAK,EAAA;AACV,MAAO,OAAA,IAAA,CAAK,aAAcA,CAAAA,KAAAA,EAAM,CAAC,CAAA;AAAA,IAEnC,KAAK,OAAQ,CAAA,MAAA;AACX,MAAA,OAAO,IAAK,CAAA,UAAA,CAAW,IAAK,CAAA,SAAA,IAAa,KAAK,CAAA;AAAA,IAEhD,KAAK,OAAQ,CAAA,IAAA;AACX,MAAA,OAAO,KAAK,QAAS,EAAA;AAAA,IAEvB,KAAK,OAAQ,CAAA,SAAA;AACX,MAAA,OAAO,KAAK,aAAc,EAAA;AAAA,IAE5B,KAAK,OAAQ,CAAA,OAAA;AACX,MAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAAI,EAAA;AAClC,QAAO,OAAA,IAAA,CAAK,gBAAgB,MAAM,CAAA;AAAA,OAC7B,MAAA;AACL,QAAA,OAAO,KAAK,UAAW,EAAA;AAAA;AACzB,IAEF;AACE,MAAA,OAAO,KAAK,oBAAqB,EAAA;AAAA;AAErC,CAAA;AAEA,IAAA,CAAK,uBAAuB,WAAW;AACrC,EAAA,IAAA,CAAK,UAAW,EAAA;AAClB,CAAA;AAEA,IAAK,CAAA,eAAA,GAAkB,SAAS,MAAQ,EAAA;AACtC,EAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAI1B,EAAA,IAAI,KAAK,WAAa,EAAA;AAAE,IAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,mCAAmC,CAAA;AAAA;AAC7F,EAAA,IAAA,CAAK,IAAK,EAAA;AAEV,EAAA,IAAI,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA,MAAA,IAAU,CAAC,MAAQ,EAAA;AAC3C,IAAO,OAAA,IAAA,CAAK,mBAAmBA,KAAI,CAAA;AAAA,GAC1B,MAAA,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,GAAK,EAAA;AACpC,IAAI,IAAA,IAAA,GAAO,KAAK,WAAYA,CAAAA,KAAAA,CAAK,OAAOA,KAAK,CAAA,GAAA,IAAOA,KAAK,CAAA,GAAA,CAAI,KAAK,CAAA;AAClE,IAAA,IAAA,CAAK,IAAO,GAAA,QAAA;AACZ,IAAAA,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,UAAA,CAAW,MAAM,YAAY,CAAA;AAC9C,IAAO,OAAA,IAAA,CAAK,gBAAgBA,KAAI,CAAA;AAAA,GAC3B,MAAA;AACL,IAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAEpB,CAAA;AAEA,IAAK,CAAA,kBAAA,GAAqB,SAASA,KAAM,EAAA;AACvC,EAAA,IAAA,CAAK,IAAK,EAAA;AAGV,EAAAA,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,gBAAiB,EAAA;AAEpC,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAAI,EAAA;AAClC,IAAA,IAAI,CAAC,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AAC7B,MAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,KAAK,CAAA;AACzB,MAAA,IAAI,CAAC,IAAA,CAAK,kBAAmB,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AAC5C,QAAAA,KAAAA,CAAK,OAAU,GAAA,IAAA,CAAK,gBAAiB,EAAA;AACrC,QAAA,IAAI,CAAC,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AAC7B,UAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,KAAK,CAAA;AACzB,UAAA,IAAI,CAAC,IAAA,CAAK,kBAAmB,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AAC5C,YAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAClB;AACF,OACK,MAAA;AACL,QAAAA,MAAK,OAAU,GAAA,IAAA;AAAA;AACjB,KACK,MAAA;AACL,MAAAA,MAAK,OAAU,GAAA,IAAA;AAAA;AACjB,GACK,MAAA;AAEL,IAAA,IAAI,CAAC,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AAC7B,MAAA,IAAI,WAAW,IAAK,CAAA,KAAA;AACpB,MAAI,IAAA,IAAA,CAAK,IAAI,OAAQ,CAAA,KAAK,KAAK,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,MAAM,CAAG,EAAA;AACvD,QAAK,IAAA,CAAA,gBAAA,CAAiB,UAAU,2CAA2C,CAAA;AAAA,OACtE,MAAA;AACL,QAAA,IAAA,CAAK,WAAW,QAAQ,CAAA;AAAA;AAC1B;AACF;AAGF,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,kBAAkB,CAAA;AACjD,CAAA;AAEA,IAAK,CAAA,eAAA,GAAkB,SAASA,KAAM,EAAA;AACpC,EAAA,IAAA,CAAK,IAAK,EAAA;AAEV,EAAA,IAAI,cAAc,IAAK,CAAA,WAAA;AACvB,EAAAA,KAAK,CAAA,QAAA,GAAW,IAAK,CAAA,UAAA,CAAW,IAAI,CAAA;AAEpC,EAAIA,IAAAA,KAAAA,CAAK,QAAS,CAAA,IAAA,KAAS,MACzB,EAAA;AAAE,IAAA,IAAA,CAAK,gBAAiBA,CAAAA,KAAAA,CAAK,QAAS,CAAA,KAAA,EAAO,0DAA0D,CAAA;AAAA;AACzG,EAAA,IAAI,WACF,EAAA;AAAE,IAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,mDAAmD,CAAA;AAAA;AACzF,EAAA,IAAI,KAAK,OAAQ,CAAA,UAAA,KAAe,YAAY,CAAC,IAAA,CAAK,QAAQ,2BACxD,EAAA;AAAE,IAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,2CAA2C,CAAA;AAAA;AAEjF,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,cAAc,CAAA;AAC7C,CAAA;AAEA,IAAK,CAAA,YAAA,GAAe,SAASiB,MAAO,EAAA;AAClC,EAAIjB,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAAA,MAAK,KAAQiB,GAAAA,MAAAA;AACb,EAAAjB,KAAAA,CAAK,MAAM,IAAK,CAAA,KAAA,CAAM,MAAM,IAAK,CAAA,KAAA,EAAO,KAAK,GAAG,CAAA;AAChD,EAAIA,IAAAA,KAAAA,CAAK,IAAI,UAAWA,CAAAA,KAAAA,CAAK,IAAI,MAAS,GAAA,CAAC,MAAM,GAAK,EAAA;AAAE,IAAAA,KAAAA,CAAK,MAASA,GAAAA,KAAAA,CAAK,GAAI,CAAA,KAAA,CAAM,GAAG,CAAE,CAAA,CAAA,CAAE,OAAQ,CAAA,IAAA,EAAM,EAAE,CAAA;AAAA;AAC5G,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,SAAS,CAAA;AACxC,CAAA;AAEA,IAAA,CAAK,uBAAuB,WAAW;AACrC,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAC1B,EAAI,IAAA,GAAA,GAAM,KAAK,eAAgB,EAAA;AAC/B,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAC1B,EAAO,OAAA,GAAA;AACT,CAAA;AAEA,IAAK,CAAA,gBAAA,GAAmB,SAAS,QAAU,EAAA;AACzC,EAAO,OAAA,CAAC,KAAK,kBAAmB,EAAA;AAClC,CAAA;AAEA,IAAK,CAAA,kCAAA,GAAqC,SAAS,UAAA,EAAY,OAAS,EAAA;AACtE,EAAI,IAAA,QAAA,GAAW,IAAK,CAAA,KAAA,EAAO,QAAW,GAAA,IAAA,CAAK,UAAU,GAAK,EAAA,kBAAA,GAAqB,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA;AAC3G,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,IAAA,IAAA,CAAK,IAAK,EAAA;AAEV,IAAA,IAAI,aAAgB,GAAA,IAAA,CAAK,KAAO,EAAA,aAAA,GAAgB,IAAK,CAAA,QAAA;AACrD,IAAA,IAAI,QAAW,GAAA,EAAI,EAAA,KAAA,GAAQ,MAAM,WAAc,GAAA,KAAA;AAC/C,IAAI,IAAA,sBAAA,GAAyB,IAAI,mBAAqB,EAAA,EAAA,WAAA,GAAc,KAAK,QAAU,EAAA,WAAA,GAAc,KAAK,QAAU,EAAA,WAAA;AAChH,IAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,IAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAEhB,IAAO,OAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,MAAQ,EAAA;AACnC,MAAA,KAAA,GAAQ,KAAQ,GAAA,KAAA,GAAQ,IAAK,CAAA,MAAA,CAAO,QAAQ,KAAK,CAAA;AACjD,MAAA,IAAI,sBAAsB,IAAK,CAAA,kBAAA,CAAmB,OAAQ,CAAA,MAAA,EAAQ,IAAI,CAAG,EAAA;AACvE,QAAc,WAAA,GAAA,IAAA;AACd,QAAA;AAAA,OACS,MAAA,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,QAAU,EAAA;AACzC,QAAA,WAAA,GAAc,IAAK,CAAA,KAAA;AACnB,QAAA,QAAA,CAAS,KAAK,IAAK,CAAA,cAAA,CAAe,IAAK,CAAA,gBAAA,EAAkB,CAAC,CAAA;AAC1D,QAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,KAAO,EAAA;AAC/B,UAAK,IAAA,CAAA,gBAAA;AAAA,YACH,IAAK,CAAA,KAAA;AAAA,YACL;AAAA,WACF;AAAA;AAEF,QAAA;AAAA,OACK,MAAA;AACL,QAAA,QAAA,CAAS,KAAK,IAAK,CAAA,gBAAA,CAAiB,OAAO,sBAAwB,EAAA,IAAA,CAAK,cAAc,CAAC,CAAA;AAAA;AACzF;AAEF,IAAA,IAAI,WAAc,GAAA,IAAA,CAAK,UAAY,EAAA,WAAA,GAAc,IAAK,CAAA,aAAA;AACtD,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAE1B,IAAI,IAAA,UAAA,IAAc,KAAK,gBAAiB,CAAA,QAAQ,KAAK,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,KAAK,CAAG,EAAA;AAC5E,MAAK,IAAA,CAAA,kBAAA,CAAmB,wBAAwB,KAAK,CAAA;AACrD,MAAA,IAAA,CAAK,8BAA+B,EAAA;AACpC,MAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,MAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,MAAA,OAAO,IAAK,CAAA,mBAAA,CAAoB,QAAU,EAAA,QAAA,EAAU,UAAU,OAAO,CAAA;AAAA;AAGvE,IAAI,IAAA,CAAC,QAAS,CAAA,MAAA,IAAU,WAAa,EAAA;AAAE,MAAK,IAAA,CAAA,UAAA,CAAW,KAAK,YAAY,CAAA;AAAA;AACxE,IAAA,IAAI,WAAa,EAAA;AAAE,MAAA,IAAA,CAAK,WAAW,WAAW,CAAA;AAAA;AAC9C,IAAK,IAAA,CAAA,qBAAA,CAAsB,wBAAwB,IAAI,CAAA;AACvD,IAAK,IAAA,CAAA,QAAA,GAAW,eAAe,IAAK,CAAA,QAAA;AACpC,IAAK,IAAA,CAAA,QAAA,GAAW,eAAe,IAAK,CAAA,QAAA;AAEpC,IAAI,IAAA,QAAA,CAAS,SAAS,CAAG,EAAA;AACvB,MAAM,GAAA,GAAA,IAAA,CAAK,WAAY,CAAA,aAAA,EAAe,aAAa,CAAA;AACnD,MAAA,GAAA,CAAI,WAAc,GAAA,QAAA;AAClB,MAAA,IAAA,CAAK,YAAa,CAAA,GAAA,EAAK,oBAAsB,EAAA,WAAA,EAAa,WAAW,CAAA;AAAA,KAChE,MAAA;AACL,MAAA,GAAA,GAAM,SAAS,CAAC,CAAA;AAAA;AAClB,GACK,MAAA;AACL,IAAA,GAAA,GAAM,KAAK,oBAAqB,EAAA;AAAA;AAGlC,EAAI,IAAA,IAAA,CAAK,QAAQ,cAAgB,EAAA;AAC/B,IAAA,IAAI,GAAM,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,QAAQ,CAAA;AAC7C,IAAA,GAAA,CAAI,UAAa,GAAA,GAAA;AACjB,IAAO,OAAA,IAAA,CAAK,UAAW,CAAA,GAAA,EAAK,yBAAyB,CAAA;AAAA,GAChD,MAAA;AACL,IAAO,OAAA,GAAA;AAAA;AAEX,CAAA;AAEA,IAAK,CAAA,cAAA,GAAiB,SAAS,IAAM,EAAA;AACnC,EAAO,OAAA,IAAA;AACT,CAAA;AAEA,IAAA,CAAK,mBAAsB,GAAA,SAAS,QAAU,EAAA,QAAA,EAAU,UAAU,OAAS,EAAA;AACzE,EAAO,OAAA,IAAA,CAAK,qBAAqB,IAAK,CAAA,WAAA,CAAY,UAAU,QAAQ,CAAA,EAAG,QAAU,EAAA,KAAA,EAAO,OAAO,CAAA;AACjG,CAAA;AAQA,IAAI,QAAQ,EAAC;AAEb,IAAA,CAAK,WAAW,WAAW;AACzB,EAAA,IAAI,KAAK,WAAa,EAAA;AAAE,IAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,gCAAgC,CAAA;AAAA;AAC1F,EAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,IAAe,KAAK,IAAK,CAAA,IAAA,KAAS,QAAQ,GAAK,EAAA;AAC9D,IAAI,IAAA,IAAA,GAAO,KAAK,WAAYA,CAAAA,KAAAA,CAAK,OAAOA,KAAK,CAAA,GAAA,IAAOA,KAAK,CAAA,GAAA,CAAI,KAAK,CAAA;AAClE,IAAA,IAAA,CAAK,IAAO,GAAA,KAAA;AACZ,IAAAA,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,UAAA,CAAW,MAAM,YAAY,CAAA;AAC9C,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAA,IAAI,cAAc,IAAK,CAAA,WAAA;AACvB,IAAAA,KAAK,CAAA,QAAA,GAAW,IAAK,CAAA,UAAA,CAAW,IAAI,CAAA;AACpC,IAAIA,IAAAA,KAAAA,CAAK,QAAS,CAAA,IAAA,KAAS,QACzB,EAAA;AAAE,MAAA,IAAA,CAAK,gBAAiBA,CAAAA,KAAAA,CAAK,QAAS,CAAA,KAAA,EAAO,sDAAsD,CAAA;AAAA;AACrG,IAAA,IAAI,WACF,EAAA;AAAE,MAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,kDAAkD,CAAA;AAAA;AACxF,IAAI,IAAA,CAAC,KAAK,iBACR,EAAA;AAAE,MAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,mEAAmE,CAAA;AAAA;AACzG,IAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,cAAc,CAAA;AAAA;AAE7C,EAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAO,EAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAC3C,EAAAA,KAAK,CAAA,MAAA,GAAS,IAAK,CAAA,eAAA,CAAgB,IAAK,CAAA,aAAA,CAAc,IAAM,EAAA,KAAA,EAAO,IAAI,CAAA,EAAG,QAAU,EAAA,QAAA,EAAU,MAAM,KAAK,CAAA;AACzG,EAAA,IAAI,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,MAAM,CAAG,EAAA;AAAE,IAAAA,KAAAA,CAAK,SAAY,GAAA,IAAA,CAAK,aAAc,CAAA,OAAA,CAAQ,QAAQ,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,EAAG,KAAK,CAAA;AAAA,GACnH,MAAA;AAAE,IAAAA,MAAK,SAAY,GAAA,KAAA;AAAA;AACxB,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,eAAe,CAAA;AAC9C,CAAA;AAIA,IAAK,CAAA,oBAAA,GAAuB,SAASrC,IAAK,EAAA;AACxC,EAAA,IAAI,WAAWA,IAAI,CAAA,QAAA;AAEnB,EAAI,IAAA,IAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,eAAiB,EAAA;AACzC,IAAA,IAAI,CAAC,QAAU,EAAA;AACb,MAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,kDAAkD,CAAA;AAAA;AAEtF,IAAA,IAAA,CAAK,KAAQ,GAAA;AAAA,MACX,GAAK,EAAA,IAAA,CAAK,KAAM,CAAA,OAAA,CAAQ,UAAU,IAAI,CAAA;AAAA,MACtC,MAAQ,EAAA;AAAA,KACV;AAAA,GACK,MAAA;AACL,IAAA,IAAA,CAAK,KAAQ,GAAA;AAAA,MACX,GAAA,EAAK,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,IAAA,CAAK,KAAO,EAAA,IAAA,CAAK,GAAG,CAAA,CAAE,OAAQ,CAAA,QAAA,EAAU,IAAI,CAAA;AAAA,MAClE,QAAQ,IAAK,CAAA;AAAA,KACf;AAAA;AAEF,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAK,IAAA,CAAA,IAAA,GAAO,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA,SAAA;AAClC,EAAO,OAAA,IAAA,CAAK,UAAW,CAAA,IAAA,EAAM,iBAAiB,CAAA;AAChD,CAAA;AAEA,IAAK,CAAA,aAAA,GAAgB,SAASA,IAAK,EAAA;AACjC,EAAA,IAAKA,IAAQ,KAAA,KAAA,CAAA,EAASA,IAAAA,GAAM,EAAC;AAC7B,EAAA,IAAI,WAAWA,IAAI,CAAA,QAAA;AAAU,EAAK,IAAA,QAAA,KAAa,QAAoB,QAAA,GAAA,KAAA;AAEnE,EAAIqC,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAAA,KAAAA,CAAK,cAAc,EAAC;AACpB,EAAA,IAAI,MAAS,GAAA,IAAA,CAAK,oBAAqB,CAAA,EAAC,UAAmB,CAAA;AAC3D,EAAAA,KAAAA,CAAK,MAAS,GAAA,CAAC,MAAM,CAAA;AACrB,EAAO,OAAA,CAAC,OAAO,IAAM,EAAA;AACnB,IAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,GAAK,EAAA;AAAE,MAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,GAAA,EAAK,+BAA+B,CAAA;AAAA;AACrF,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,YAAY,CAAA;AAChC,IAAAA,KAAK,CAAA,WAAA,CAAY,IAAK,CAAA,IAAA,CAAK,iBAAiB,CAAA;AAC5C,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAC1B,IAAAA,KAAAA,CAAK,OAAO,IAAK,CAAA,MAAA,GAAS,KAAK,oBAAqB,CAAA,EAAC,QAAkB,EAAC,CAAC,CAAA;AAAA;AAE3E,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAChD,CAAA;AAEA,IAAK,CAAA,WAAA,GAAc,SAAS,IAAM,EAAA;AAChC,EAAO,OAAA,CAAC,KAAK,QAAY,IAAA,IAAA,CAAK,IAAI,IAAS,KAAA,YAAA,IAAgB,IAAK,CAAA,GAAA,CAAI,IAAS,KAAA,OAAA,KAC1E,KAAK,IAAS,KAAA,OAAA,CAAQ,QAAQ,IAAK,CAAA,IAAA,KAAS,QAAQ,GAAO,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,MAAU,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,QAAA,IAAY,KAAK,IAAK,CAAA,OAAA,IAAY,KAAK,OAAQ,CAAA,WAAA,IAAe,CAAK,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,SAC3M,CAAC,SAAA,CAAU,KAAK,IAAK,CAAA,KAAA,CAAM,MAAM,IAAK,CAAA,UAAA,EAAY,IAAK,CAAA,KAAK,CAAC,CAAA;AACjE,CAAA;AAIA,IAAK,CAAA,QAAA,GAAW,SAAS,SAAA,EAAW,sBAAwB,EAAA;AAC1D,EAAA,IAAIA,QAAO,IAAK,CAAA,SAAA,IAAa,KAAQ,GAAA,IAAA,EAAM,WAAW,EAAC;AACvD,EAAAA,KAAAA,CAAK,aAAa,EAAC;AACnB,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAA,OAAO,CAAC,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AAChC,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,KAAK,CAAA;AACzB,MAAI,IAAA,IAAA,CAAK,QAAQ,WAAe,IAAA,CAAA,IAAK,KAAK,kBAAmB,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AAAE,QAAA;AAAA;AAAM,KACjF,MAAA;AAAE,MAAQ,KAAA,GAAA,KAAA;AAAA;AAEjB,IAAA,IAAI,IAAO,GAAA,IAAA,CAAK,aAAc,CAAA,SAAA,EAAW,sBAAsB,CAAA;AAC/D,IAAA,IAAI,CAAC,SAAW,EAAA;AAAE,MAAK,IAAA,CAAA,cAAA,CAAe,IAAM,EAAA,QAAA,EAAU,sBAAsB,CAAA;AAAA;AAC5E,IAAAA,KAAAA,CAAK,UAAW,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA;AAE3B,EAAA,OAAO,IAAK,CAAA,UAAA,CAAWA,KAAM,EAAA,SAAA,GAAY,kBAAkB,kBAAkB,CAAA;AAC/E,CAAA;AAEA,IAAK,CAAA,aAAA,GAAgB,SAAS,SAAA,EAAW,sBAAwB,EAAA;AAC/D,EAAA,IAAI,OAAO,IAAK,CAAA,SAAA,EAAa,EAAA,WAAA,EAAa,SAAS,QAAU,EAAA,QAAA;AAC7D,EAAI,IAAA,IAAA,CAAK,QAAQ,WAAe,IAAA,CAAA,IAAK,KAAK,GAAI,CAAA,OAAA,CAAQ,QAAQ,CAAG,EAAA;AAC/D,IAAA,IAAI,SAAW,EAAA;AACb,MAAK,IAAA,CAAA,QAAA,GAAW,IAAK,CAAA,UAAA,CAAW,KAAK,CAAA;AACrC,MAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,KAAO,EAAA;AAC/B,QAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,EAAO,+CAA+C,CAAA;AAAA;AAEnF,MAAO,OAAA,IAAA,CAAK,UAAW,CAAA,IAAA,EAAM,aAAa,CAAA;AAAA;AAG5C,IAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAK,gBAAiB,CAAA,KAAA,EAAO,sBAAsB,CAAA;AAEnE,IAAA,IAAI,KAAK,IAAS,KAAA,OAAA,CAAQ,SAAS,sBAA0B,IAAA,sBAAA,CAAuB,gBAAgB,CAAG,EAAA;AACrG,MAAA,sBAAA,CAAuB,gBAAgB,IAAK,CAAA,KAAA;AAAA;AAG9C,IAAO,OAAA,IAAA,CAAK,UAAW,CAAA,IAAA,EAAM,eAAe,CAAA;AAAA;AAE9C,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,IAAA,IAAA,CAAK,MAAS,GAAA,KAAA;AACd,IAAA,IAAA,CAAK,SAAY,GAAA,KAAA;AACjB,IAAA,IAAI,aAAa,sBAAwB,EAAA;AACvC,MAAA,QAAA,GAAW,IAAK,CAAA,KAAA;AAChB,MAAA,QAAA,GAAW,IAAK,CAAA,QAAA;AAAA;AAElB,IAAA,IAAI,CAAC,SACH,EAAA;AAAE,MAAc,WAAA,GAAA,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,IAAI,CAAA;AAAA;AAAG;AAE5C,EAAA,IAAI,cAAc,IAAK,CAAA,WAAA;AACvB,EAAA,IAAA,CAAK,kBAAkB,IAAI,CAAA;AAC3B,EAAA,IAAI,CAAC,SAAA,IAAa,CAAC,WAAA,IAAe,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,IAAK,CAAC,WAAA,IAAe,IAAK,CAAA,WAAA,CAAY,IAAI,CAAG,EAAA;AACzG,IAAU,OAAA,GAAA,IAAA;AACV,IAAA,WAAA,GAAc,KAAK,OAAQ,CAAA,WAAA,IAAe,KAAK,IAAK,CAAA,GAAA,CAAI,QAAQ,IAAI,CAAA;AACpE,IAAA,IAAA,CAAK,kBAAkB,IAAI,CAAA;AAAA,GACtB,MAAA;AACL,IAAU,OAAA,GAAA,KAAA;AAAA;AAEZ,EAAK,IAAA,CAAA,kBAAA,CAAmB,MAAM,SAAW,EAAA,WAAA,EAAa,SAAS,QAAU,EAAA,QAAA,EAAU,wBAAwB,WAAW,CAAA;AACtH,EAAO,OAAA,IAAA,CAAK,UAAW,CAAA,IAAA,EAAM,UAAU,CAAA;AACzC,CAAA;AAEA,IAAK,CAAA,iBAAA,GAAoB,SAAS,IAAM,EAAA;AACtC,EAAK,IAAA,CAAA,IAAA,GAAO,KAAK,GAAI,CAAA,IAAA;AACrB,EAAA,IAAA,CAAK,kBAAkB,IAAI,CAAA;AAC3B,EAAK,IAAA,CAAA,KAAA,GAAQ,IAAK,CAAA,WAAA,CAAY,KAAK,CAAA;AACnC,EAAA,IAAI,UAAa,GAAA,IAAA,CAAK,IAAS,KAAA,KAAA,GAAQ,CAAI,GAAA,CAAA;AAC3C,EAAA,IAAI,IAAK,CAAA,KAAA,CAAM,MAAO,CAAA,MAAA,KAAW,UAAY,EAAA;AAC3C,IAAI3B,IAAAA,MAAAA,GAAQ,KAAK,KAAM,CAAA,KAAA;AACvB,IAAI,IAAA,IAAA,CAAK,SAAS,KAChB,EAAA;AAAE,MAAK,IAAA,CAAA,gBAAA,CAAiBA,QAAO,8BAA8B,CAAA;AAAA,KAE7D,MAAA;AAAE,MAAK,IAAA,CAAA,gBAAA,CAAiBA,QAAO,sCAAsC,CAAA;AAAA;AAAG,GACrE,MAAA;AACL,IAAI,IAAA,IAAA,CAAK,SAAS,KAAS,IAAA,IAAA,CAAK,MAAM,MAAO,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,aACvD,EAAA;AAAE,MAAA,IAAA,CAAK,iBAAiB,IAAK,CAAA,KAAA,CAAM,OAAO,CAAC,CAAA,CAAE,OAAO,+BAA+B,CAAA;AAAA;AAAG;AAE5F,CAAA;AAEA,IAAK,CAAA,kBAAA,GAAqB,SAAS,IAAM,EAAA,SAAA,EAAW,aAAa,OAAS,EAAA,QAAA,EAAU,QAAU,EAAA,sBAAA,EAAwB,WAAa,EAAA;AACjI,EAAA,IAAA,CAAK,WAAe,IAAA,OAAA,KAAY,IAAK,CAAA,IAAA,KAAS,QAAQ,KACpD,EAAA;AAAE,IAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAEpB,EAAA,IAAI,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,KAAK,CAAG,EAAA;AAC3B,IAAA,IAAA,CAAK,KAAQ,GAAA,SAAA,GAAY,IAAK,CAAA,iBAAA,CAAkB,IAAK,CAAA,KAAA,EAAO,IAAK,CAAA,QAAQ,CAAI,GAAA,IAAA,CAAK,gBAAiB,CAAA,KAAA,EAAO,sBAAsB,CAAA;AAChI,IAAA,IAAA,CAAK,IAAO,GAAA,MAAA;AAAA,GACd,MAAA,IAAW,KAAK,OAAQ,CAAA,WAAA,IAAe,KAAK,IAAK,CAAA,IAAA,KAAS,QAAQ,MAAQ,EAAA;AACxE,IAAA,IAAI,SAAW,EAAA;AAAE,MAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACjC,IAAA,IAAA,CAAK,IAAO,GAAA,MAAA;AACZ,IAAA,IAAA,CAAK,MAAS,GAAA,IAAA;AACd,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,WAAY,CAAA,WAAA,EAAa,OAAO,CAAA;AAAA,GACzC,MAAA,IAAA,CAAC,SAAa,IAAA,CAAC,eACf,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,IAAK,CAAC,IAAK,CAAA,QAAA,IAAY,IAAK,CAAA,GAAA,CAAI,SAAS,YACpE,KAAA,IAAA,CAAK,GAAI,CAAA,IAAA,KAAS,SAAS,IAAK,CAAA,GAAA,CAAI,IAAS,KAAA,KAAA,CAAA,KAC7C,KAAK,IAAS,KAAA,OAAA,CAAQ,KAAS,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA,IAAU,IAAK,CAAA,IAAA,KAAS,QAAQ,EAAK,CAAA,EAAA;AACpG,IAAA,IAAI,eAAe,OAAS,EAAA;AAAE,MAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC9C,IAAA,IAAA,CAAK,kBAAkB,IAAI,CAAA;AAAA,GAC7B,MAAA,IAAW,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,IAAK,CAAC,IAAA,CAAK,QAAY,IAAA,IAAA,CAAK,GAAI,CAAA,IAAA,KAAS,YAAc,EAAA;AAC5F,IAAA,IAAI,eAAe,OAAS,EAAA;AAAE,MAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC9C,IAAK,IAAA,CAAA,eAAA,CAAgB,KAAK,GAAG,CAAA;AAC7B,IAAA,IAAI,KAAK,GAAI,CAAA,IAAA,KAAS,OAAW,IAAA,CAAC,KAAK,aACrC,EAAA;AAAE,MAAA,IAAA,CAAK,aAAgB,GAAA,QAAA;AAAA;AACzB,IAAA,IAAA,CAAK,IAAO,GAAA,MAAA;AACZ,IAAA,IAAI,SAAW,EAAA;AACb,MAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,iBAAkB,CAAA,QAAA,EAAU,UAAU,IAAK,CAAA,QAAA,CAAS,IAAK,CAAA,GAAG,CAAC,CAAA;AAAA,KACtE,MAAA,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,MAAM,sBAAwB,EAAA;AAC7D,MAAI,IAAA,sBAAA,CAAuB,kBAAkB,CAC3C,EAAA;AAAE,QAAA,sBAAA,CAAuB,kBAAkB,IAAK,CAAA,KAAA;AAAA;AAClD,MAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,iBAAkB,CAAA,QAAA,EAAU,UAAU,IAAK,CAAA,QAAA,CAAS,IAAK,CAAA,GAAG,CAAC,CAAA;AAAA,KAC1E,MAAA;AACL,MAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,QAAS,CAAA,IAAA,CAAK,GAAG,CAAA;AAAA;AAErC,IAAA,IAAA,CAAK,SAAY,GAAA,IAAA;AAAA,GACZ,MAAA;AAAE,IAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAC3B,CAAA;AAEA,IAAK,CAAA,iBAAA,GAAoB,SAAS,IAAM,EAAA;AACtC,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,IAAA,IAAI,IAAK,CAAA,GAAA,CAAI,OAAQ,CAAA,QAAQ,CAAG,EAAA;AAC9B,MAAA,IAAA,CAAK,QAAW,GAAA,IAAA;AAChB,MAAK,IAAA,CAAA,GAAA,GAAM,KAAK,gBAAiB,EAAA;AACjC,MAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,QAAQ,CAAA;AAC5B,MAAA,OAAO,IAAK,CAAA,GAAA;AAAA,KACP,MAAA;AACL,MAAA,IAAA,CAAK,QAAW,GAAA,KAAA;AAAA;AAClB;AAEF,EAAA,OAAO,KAAK,GAAM,GAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,GAAA,IAAO,KAAK,IAAS,KAAA,OAAA,CAAQ,MAAS,GAAA,IAAA,CAAK,eAAkB,GAAA,IAAA,CAAK,WAAW,IAAK,CAAA,OAAA,CAAQ,kBAAkB,OAAO,CAAA;AAC7J,CAAA;AAIA,IAAK,CAAA,YAAA,GAAe,SAAS2B,KAAM,EAAA;AACjC,EAAAA,MAAK,EAAK,GAAA,IAAA;AACV,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AAAE,IAAAA,KAAAA,CAAK,SAAYA,GAAAA,KAAAA,CAAK,UAAa,GAAA,KAAA;AAAA;AACxE,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AAAE,IAAAA,MAAK,KAAQ,GAAA,KAAA;AAAA;AACpD,CAAA;AAIA,IAAA,CAAK,WAAc,GAAA,SAAS,WAAa,EAAA,OAAA,EAAS,gBAAkB,EAAA;AAClE,EAAIA,IAAAA,KAAAA,GAAO,IAAK,CAAA,SAAA,EAAa,EAAA,WAAA,GAAc,IAAK,CAAA,QAAA,EAAU,WAAc,GAAA,IAAA,CAAK,QAAU,EAAA,gBAAA,GAAmB,IAAK,CAAA,aAAA;AAE/G,EAAA,IAAA,CAAK,aAAaA,KAAI,CAAA;AACtB,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAC9B,EAAA;AAAE,IAAAA,MAAK,SAAY,GAAA,WAAA;AAAA;AACrB,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAC9B,EAAA;AAAE,IAAAA,KAAAA,CAAK,KAAQ,GAAA,CAAC,CAAC,OAAA;AAAA;AAEnB,EAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,EAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,EAAA,IAAA,CAAK,aAAgB,GAAA,CAAA;AACrB,EAAK,IAAA,CAAA,UAAA,CAAW,cAAc,OAASA,EAAAA,KAAAA,CAAK,SAAS,CAAI,GAAA,WAAA,IAAe,gBAAmB,GAAA,kBAAA,GAAqB,CAAE,CAAA,CAAA;AAElH,EAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA;AAC1B,EAAAA,KAAAA,CAAK,MAAS,GAAA,IAAA,CAAK,gBAAiB,CAAA,OAAA,CAAQ,QAAQ,KAAO,EAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAC,CAAA;AACxF,EAAA,IAAA,CAAK,8BAA+B,EAAA;AACpC,EAAA,IAAA,CAAK,iBAAkBA,CAAAA,KAAAA,EAAM,KAAO,EAAA,IAAA,EAAM,KAAK,CAAA;AAE/C,EAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,EAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,EAAA,IAAA,CAAK,aAAgB,GAAA,gBAAA;AACrB,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,oBAAoB,CAAA;AACnD,CAAA;AAIA,IAAA,CAAK,oBAAuB,GAAA,SAASA,KAAM,EAAA,MAAA,EAAQ,SAAS,OAAS,EAAA;AACnE,EAAA,IAAI,cAAc,IAAK,CAAA,QAAA,EAAU,cAAc,IAAK,CAAA,QAAA,EAAU,mBAAmB,IAAK,CAAA,aAAA;AAEtF,EAAA,IAAA,CAAK,UAAW,CAAA,aAAA,CAAc,OAAS,EAAA,KAAK,IAAI,WAAW,CAAA;AAC3D,EAAA,IAAA,CAAK,aAAaA,KAAI,CAAA;AACtB,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AAAE,IAAAA,KAAAA,CAAK,KAAQ,GAAA,CAAC,CAAC,OAAA;AAAA;AAEpD,EAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,EAAA,IAAA,CAAK,QAAW,GAAA,CAAA;AAChB,EAAA,IAAA,CAAK,aAAgB,GAAA,CAAA;AAErB,EAAAA,KAAK,CAAA,MAAA,GAAS,IAAK,CAAA,gBAAA,CAAiB,QAAQ,IAAI,CAAA;AAChD,EAAA,IAAA,CAAK,iBAAkBA,CAAAA,KAAAA,EAAM,IAAM,EAAA,KAAA,EAAO,OAAO,CAAA;AAEjD,EAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,EAAA,IAAA,CAAK,QAAW,GAAA,WAAA;AAChB,EAAA,IAAA,CAAK,aAAgB,GAAA,gBAAA;AACrB,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,yBAAyB,CAAA;AACxD,CAAA;AAIA,IAAA,CAAK,iBAAoB,GAAA,SAASA,KAAM,EAAA,eAAA,EAAiB,UAAU,OAAS,EAAA;AAC1E,EAAA,IAAI,YAAe,GAAA,eAAA,IAAmB,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA,MAAA;AAC5D,EAAI,IAAA,SAAA,GAAY,IAAK,CAAA,MAAA,EAAQ,SAAY,GAAA,KAAA;AAEzC,EAAA,IAAI,YAAc,EAAA;AAChB,IAAAA,KAAK,CAAA,IAAA,GAAO,IAAK,CAAA,gBAAA,CAAiB,OAAO,CAAA;AACzC,IAAAA,MAAK,UAAa,GAAA,IAAA;AAClB,IAAK,IAAA,CAAA,WAAA,CAAYA,OAAM,KAAK,CAAA;AAAA,GACvB,MAAA;AACL,IAAI,IAAA,SAAA,GAAY,KAAK,OAAQ,CAAA,WAAA,IAAe,KAAK,CAAC,IAAA,CAAK,iBAAkBA,CAAAA,KAAAA,CAAK,MAAM,CAAA;AACpF,IAAI,IAAA,CAAC,aAAa,SAAW,EAAA;AAC3B,MAAY,SAAA,GAAA,IAAA,CAAK,eAAgB,CAAA,IAAA,CAAK,GAAG,CAAA;AAIzC,MAAA,IAAI,aAAa,SACf,EAAA;AAAE,QAAK,IAAA,CAAA,gBAAA,CAAiBA,KAAK,CAAA,KAAA,EAAO,2EAA2E,CAAA;AAAA;AAAG;AAItH,IAAA,IAAI,YAAY,IAAK,CAAA,MAAA;AACrB,IAAA,IAAA,CAAK,SAAS,EAAC;AACf,IAAA,IAAI,SAAW,EAAA;AAAE,MAAA,IAAA,CAAK,MAAS,GAAA,IAAA;AAAA;AAI/B,IAAA,IAAA,CAAK,WAAYA,CAAAA,KAAAA,EAAM,CAAC,SAAA,IAAa,CAAC,SAAa,IAAA,CAAC,eAAmB,IAAA,CAAC,QAAY,IAAA,IAAA,CAAK,iBAAkBA,CAAAA,KAAAA,CAAK,MAAM,CAAC,CAAA;AAEvH,IAAI,IAAA,IAAA,CAAK,MAAUA,IAAAA,KAAAA,CAAK,EAAI,EAAA;AAAE,MAAK,IAAA,CAAA,eAAA,CAAgBA,KAAK,CAAA,EAAA,EAAI,YAAY,CAAA;AAAA;AACxE,IAAAA,KAAAA,CAAK,OAAO,IAAK,CAAA,UAAA,CAAW,OAAO,KAAW,CAAA,EAAA,SAAA,IAAa,CAAC,SAAS,CAAA;AACrE,IAAAA,MAAK,UAAa,GAAA,KAAA;AAClB,IAAK,IAAA,CAAA,sBAAA,CAAuBA,KAAK,CAAA,IAAA,CAAK,IAAI,CAAA;AAC1C,IAAA,IAAA,CAAK,MAAS,GAAA,SAAA;AAAA;AAEhB,EAAA,IAAA,CAAK,SAAU,EAAA;AACjB,CAAA;AAEA,IAAK,CAAA,iBAAA,GAAoB,SAAS,MAAQ,EAAA;AACxC,EAAS,KAAA,IAAA,CAAA,GAAI,GAAGO,KAAO,GAAA,MAAA,EAAQ,IAAIA,KAAK,CAAA,MAAA,EAAQ,KAAK,CACnD,EAAA;AACA,IAAI,IAAA,KAAA,GAAQA,MAAK,CAAC,CAAA;AAElB,IAAI,IAAA,KAAA,CAAM,SAAS,YAAc,EAAA;AAAE,MAAO,OAAA,KAAA;AAAA;AAC5C;AACA,EAAO,OAAA,IAAA;AACT,CAAA;AAKA,IAAK,CAAA,WAAA,GAAc,SAASP,KAAAA,EAAM,eAAiB,EAAA;AACjD,EAAI,IAAA,QAAA,mBAAkB,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA;AACjC,EAAS,KAAA,IAAA,CAAA,GAAI,GAAGO,KAAOP,GAAAA,KAAAA,CAAK,QAAQ,CAAIO,GAAAA,KAAAA,CAAK,MAAQ,EAAA,CAAA,IAAK,CACxD,EAAA;AACA,IAAI,IAAA,KAAA,GAAQA,MAAK,CAAC,CAAA;AAElB,IAAA,IAAA,CAAK,qBAAsB,CAAA,KAAA,EAAO,QAAU,EAAA,eAAA,GAAkB,OAAO,QAAQ,CAAA;AAAA;AAEjF,CAAA;AAQA,IAAA,CAAK,aAAgB,GAAA,SAASY,MAAO,EAAA,kBAAA,EAAoB,YAAY,sBAAwB,EAAA;AAC3F,EAAI,IAAA,IAAA,GAAO,EAAC,EAAG,KAAQ,GAAA,IAAA;AACvB,EAAA,OAAO,CAAC,IAAA,CAAK,GAAIA,CAAAA,MAAK,CAAG,EAAA;AACvB,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,KAAK,CAAA;AACzB,MAAA,IAAI,kBAAsB,IAAA,IAAA,CAAK,kBAAmBA,CAAAA,MAAK,CAAG,EAAA;AAAE,QAAA;AAAA;AAAM,KAC7D,MAAA;AAAE,MAAQ,KAAA,GAAA,KAAA;AAAA;AAEjB,IAAA,IAAI,GAAO,GAAA,KAAA,CAAA;AACX,IAAA,IAAI,UAAc,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,KACtC,EAAA;AAAE,MAAM,GAAA,GAAA,IAAA;AAAA,KACD,MAAA,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,QAAU,EAAA;AACvC,MAAM,GAAA,GAAA,IAAA,CAAK,YAAY,sBAAsB,CAAA;AAC7C,MAAA,IAAI,0BAA0B,IAAK,CAAA,IAAA,KAAS,QAAQ,KAAS,IAAA,sBAAA,CAAuB,gBAAgB,CAClG,EAAA;AAAE,QAAA,sBAAA,CAAuB,gBAAgB,IAAK,CAAA,KAAA;AAAA;AAAO,KAClD,MAAA;AACL,MAAM,GAAA,GAAA,IAAA,CAAK,gBAAiB,CAAA,KAAA,EAAO,sBAAsB,CAAA;AAAA;AAE3D,IAAA,IAAA,CAAK,KAAK,GAAG,CAAA;AAAA;AAEf,EAAO,OAAA,IAAA;AACT,CAAA;AAEA,IAAK,CAAA,eAAA,GAAkB,SAASxD,IAAK,EAAA;AACnC,EAAA,IAAIU,SAAQV,IAAI,CAAA,KAAA;AAChB,EAAA,IAAI,MAAMA,IAAI,CAAA,GAAA;AACd,EAAA,IAAI/B,QAAO+B,IAAI,CAAA,IAAA;AAEf,EAAI,IAAA,IAAA,CAAK,WAAe/B,IAAAA,KAAAA,KAAS,OAC/B,EAAA;AAAE,IAAK,IAAA,CAAA,gBAAA,CAAiByC,QAAO,qDAAqD,CAAA;AAAA;AACtF,EAAI,IAAA,IAAA,CAAK,OAAWzC,IAAAA,KAAAA,KAAS,OAC3B,EAAA;AAAE,IAAK,IAAA,CAAA,gBAAA,CAAiByC,QAAO,2DAA2D,CAAA;AAAA;AAC5F,EAAA,IAAI,IAAK,CAAA,gBAAA,EAAmB,CAAA,gBAAA,IAAoBzC,UAAS,WACvD,EAAA;AAAE,IAAK,IAAA,CAAA,gBAAA,CAAiByC,QAAO,mDAAmD,CAAA;AAAA;AACpF,EAAA,IAAI,IAAK,CAAA,kBAAA,KAAuBzC,KAAS,KAAA,WAAA,IAAeA,UAAS,OAC/D,CAAA,EAAA;AAAE,IAAA,IAAA,CAAK,KAAMyC,CAAAA,MAAAA,EAAQ,aAAgBzC,GAAAA,KAAAA,GAAO,uCAAwC,CAAA;AAAA;AACtF,EAAA,IAAI,IAAK,CAAA,QAAA,CAAS,IAAKA,CAAAA,KAAI,CACzB,EAAA;AAAE,IAAA,IAAA,CAAK,KAAMyC,CAAAA,MAAAA,EAAQ,sBAAyBzC,GAAAA,KAAAA,GAAO,GAAI,CAAA;AAAA;AAC3D,EAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,WAAc,GAAA,CAAA,IAC7B,IAAK,CAAA,KAAA,CAAM,KAAMyC,CAAAA,MAAAA,EAAO,GAAG,CAAA,CAAE,OAAQ,CAAA,IAAI,MAAM,CAAI,CAAA,EAAA;AAAE,IAAA;AAAA;AACvD,EAAA,IAAI,EAAK,GAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAK,sBAAsB,IAAK,CAAA,aAAA;AACvD,EAAI,IAAA,EAAA,CAAG,IAAKzC,CAAAA,KAAI,CAAG,EAAA;AACjB,IAAA,IAAI,CAAC,IAAA,CAAK,OAAWA,IAAAA,KAAAA,KAAS,OAC5B,EAAA;AAAE,MAAK,IAAA,CAAA,gBAAA,CAAiByC,QAAO,sDAAsD,CAAA;AAAA;AACvF,IAAA,IAAA,CAAK,gBAAiBA,CAAAA,MAAAA,EAAQ,eAAkBzC,GAAAA,KAAAA,GAAO,eAAgB,CAAA;AAAA;AAE3E,CAAA;AAMA,IAAK,CAAA,UAAA,GAAa,SAAS,OAAS,EAAA;AAClC,EAAIoE,IAAAA,KAAAA,GAAO,KAAK,cAAe,EAAA;AAC/B,EAAK,IAAA,CAAA,IAAA,CAAK,CAAC,CAAC,OAAO,CAAA;AACnB,EAAK,IAAA,CAAA,UAAA,CAAWA,OAAM,YAAY,CAAA;AAClC,EAAA,IAAI,CAAC,OAAS,EAAA;AACZ,IAAA,IAAA,CAAK,gBAAgBA,KAAI,CAAA;AACzB,IAAA,IAAIA,KAAK,CAAA,IAAA,KAAS,OAAW,IAAA,CAAC,KAAK,aACjC,EAAA;AAAE,MAAA,IAAA,CAAK,gBAAgBA,KAAK,CAAA,KAAA;AAAA;AAAO;AAEvC,EAAOA,OAAAA,KAAAA;AACT,CAAA;AAEA,IAAA,CAAK,iBAAiB,WAAW;AAC/B,EAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,IAAM,EAAA;AAC9B,IAAAA,KAAAA,CAAK,OAAO,IAAK,CAAA,KAAA;AAAA,GACnB,MAAA,IAAW,IAAK,CAAA,IAAA,CAAK,OAAS,EAAA;AAC5B,IAAAA,KAAAA,CAAK,IAAO,GAAA,IAAA,CAAK,IAAK,CAAA,OAAA;AAMtB,IAAA,IAAA,CAAKA,MAAK,IAAS,KAAA,OAAA,IAAWA,KAAK,CAAA,IAAA,KAAS,gBACzC,IAAK,CAAA,UAAA,KAAe,IAAK,CAAA,YAAA,GAAe,KAAK,IAAK,CAAA,KAAA,CAAM,WAAW,IAAK,CAAA,YAAY,MAAM,EAAK,CAAA,EAAA;AAChG,MAAA,IAAA,CAAK,QAAQ,GAAI,EAAA;AAAA;AAEnB,IAAA,IAAA,CAAK,OAAO,OAAQ,CAAA,IAAA;AAAA,GACf,MAAA;AACL,IAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAElB,EAAOA,OAAAA,KAAAA;AACT,CAAA;AAEA,IAAA,CAAK,oBAAoB,WAAW;AAClC,EAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,SAAW,EAAA;AACnC,IAAAA,KAAAA,CAAK,OAAO,IAAK,CAAA,KAAA;AAAA,GACZ,MAAA;AACL,IAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AAElB,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAK,IAAA,CAAA,UAAA,CAAWA,OAAM,mBAAmB,CAAA;AAGzC,EAAI,IAAA,IAAA,CAAK,QAAQ,kBAAoB,EAAA;AACnC,IAAI,IAAA,IAAA,CAAK,gBAAiB,CAAA,MAAA,KAAW,CAAG,EAAA;AACtC,MAAA,IAAA,CAAK,MAAMA,KAAK,CAAA,KAAA,EAAQ,kBAAsBA,GAAAA,KAAAA,CAAK,OAAQ,0CAA2C,CAAA;AAAA,KACjG,MAAA;AACL,MAAK,IAAA,CAAA,gBAAA,CAAiB,KAAK,gBAAiB,CAAA,MAAA,GAAS,CAAC,CAAE,CAAA,IAAA,CAAK,KAAKA,KAAI,CAAA;AAAA;AACxE;AAGF,EAAOA,OAAAA,KAAAA;AACT,CAAA;AAIA,IAAK,CAAA,UAAA,GAAa,SAAS,OAAS,EAAA;AAClC,EAAI,IAAA,CAAC,KAAK,QAAU,EAAA;AAAE,IAAA,IAAA,CAAK,WAAW,IAAK,CAAA,KAAA;AAAA;AAE3C,EAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAA,IAAI,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA,IAAA,IAAQ,KAAK,kBAAmB,EAAA,IAAM,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA,IAAA,IAAQ,CAAC,IAAA,CAAK,KAAK,UAAa,EAAA;AACpH,IAAAA,MAAK,QAAW,GAAA,KAAA;AAChB,IAAAA,MAAK,QAAW,GAAA,IAAA;AAAA,GACX,MAAA;AACL,IAAAA,KAAK,CAAA,QAAA,GAAW,IAAK,CAAA,GAAA,CAAI,QAAQ,IAAI,CAAA;AACrC,IAAAA,KAAK,CAAA,QAAA,GAAW,IAAK,CAAA,gBAAA,CAAiB,OAAO,CAAA;AAAA;AAE/C,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAChD,CAAA;AAEA,IAAK,CAAA,UAAA,GAAa,SAAS,OAAS,EAAA;AAClC,EAAI,IAAA,CAAC,KAAK,QAAU,EAAA;AAAE,IAAA,IAAA,CAAK,WAAW,IAAK,CAAA,KAAA;AAAA;AAE3C,EAAIA,IAAAA,KAAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAAA,MAAK,QAAW,GAAA,IAAA,CAAK,gBAAgB,IAAM,EAAA,IAAA,EAAM,OAAO,OAAO,CAAA;AAC/D,EAAO,OAAA,IAAA,CAAK,UAAWA,CAAAA,KAAAA,EAAM,iBAAiB,CAAA;AAChD,CAAA;AAEA,IAAI,OAAO,MAAO,CAAA,SAAA;AAQlB,IAAK,CAAA,KAAA,GAAQ,SAAS,GAAA,EAAK,OAAS,EAAA;AAClC,EAAA,IAAI,GAAM,GAAA,WAAA,CAAY,IAAK,CAAA,KAAA,EAAO,GAAG,CAAA;AACrC,EAAA,OAAA,IAAW,IAAO,GAAA,GAAA,CAAI,IAAO,GAAA,GAAA,GAAM,IAAI,MAAS,GAAA,GAAA;AAChD,EAAI,IAAA,GAAA,GAAM,IAAI,WAAA,CAAY,OAAO,CAAA;AACjC,EAAA,GAAA,CAAI,GAAM,GAAA,GAAA;AAAK,EAAA,GAAA,CAAI,GAAM,GAAA,GAAA;AAAK,EAAA,GAAA,CAAI,WAAW,IAAK,CAAA,GAAA;AAClD,EAAM,MAAA,GAAA;AACR,CAAA;AAEA,IAAA,CAAK,mBAAmB,IAAK,CAAA,KAAA;AAE7B,IAAA,CAAK,cAAc,WAAW;AAC5B,EAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAC1B,IAAA,OAAO,IAAI,QAAS,CAAA,IAAA,CAAK,SAAS,IAAK,CAAA,GAAA,GAAM,KAAK,SAAS,CAAA;AAAA;AAE/D,CAAA;AAEA,IAAI,OAAO,MAAO,CAAA,SAAA;AAElB,IAAI,KAAA,GAAQ,SAAS8B,MAAAA,CAAM,KAAO,EAAA;AAChC,EAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AAEb,EAAA,IAAA,CAAK,MAAM,EAAC;AAEZ,EAAA,IAAA,CAAK,UAAU,EAAC;AAEhB,EAAA,IAAA,CAAK,YAAY,EAAC;AAElB,EAAA,IAAA,CAAK,gBAAmB,GAAA,KAAA;AAC1B,CAAA;AAIA,IAAK,CAAA,UAAA,GAAa,SAAS,KAAO,EAAA;AAChC,EAAA,IAAA,CAAK,UAAW,CAAA,IAAA,CAAK,IAAI,KAAA,CAAM,KAAK,CAAC,CAAA;AACvC,CAAA;AAEA,IAAA,CAAK,YAAY,WAAW;AAC1B,EAAA,IAAA,CAAK,WAAW,GAAI,EAAA;AACtB,CAAA;AAKA,IAAK,CAAA,0BAAA,GAA6B,SAAS,KAAO,EAAA;AAChD,EAAA,OAAQ,MAAM,KAAQ,GAAA,cAAA,IAAmB,CAAC,IAAK,CAAA,QAAA,IAAa,MAAM,KAAQ,GAAA,SAAA;AAC5E,CAAA;AAEA,IAAA,CAAK,WAAc,GAAA,SAASlG,KAAM,EAAA,WAAA,EAAa,GAAK,EAAA;AAClD,EAAA,IAAI,UAAa,GAAA,KAAA;AACjB,EAAA,IAAI,gBAAgB,YAAc,EAAA;AAChC,IAAI,IAAA,KAAA,GAAQ,KAAK,YAAa,EAAA;AAC9B,IAAA,UAAA,GAAa,MAAM,OAAQ,CAAA,OAAA,CAAQA,KAAI,CAAA,GAAI,MAAM,KAAM,CAAA,SAAA,CAAU,OAAQA,CAAAA,KAAI,IAAI,CAAM,CAAA,IAAA,KAAA,CAAM,GAAI,CAAA,OAAA,CAAQA,KAAI,CAAI,GAAA,CAAA,CAAA;AACjH,IAAM,KAAA,CAAA,OAAA,CAAQ,KAAKA,KAAI,CAAA;AACvB,IAAA,IAAI,IAAK,CAAA,QAAA,IAAa,KAAM,CAAA,KAAA,GAAQ,SAClC,EAAA;AAAE,MAAO,OAAA,IAAA,CAAK,iBAAiBA,KAAI,CAAA;AAAA;AAAG,GAC1C,MAAA,IAAW,gBAAgB,iBAAmB,EAAA;AAC5C,IAAI,IAAA,OAAA,GAAU,KAAK,YAAa,EAAA;AAChC,IAAQ,OAAA,CAAA,OAAA,CAAQ,KAAKA,KAAI,CAAA;AAAA,GAC3B,MAAA,IAAW,gBAAgB,aAAe,EAAA;AACxC,IAAI,IAAA,OAAA,GAAU,KAAK,YAAa,EAAA;AAChC,IAAA,IAAI,KAAK,mBACP,EAAA;AAAE,MAAA,UAAA,GAAa,OAAQ,CAAA,OAAA,CAAQ,OAAQA,CAAAA,KAAI,CAAI,GAAA,CAAA,CAAA;AAAA,KAE/C,MAAA;AAAE,MAAa,UAAA,GAAA,OAAA,CAAQ,OAAQ,CAAA,OAAA,CAAQA,KAAI,CAAA,GAAI,MAAM,OAAQ,CAAA,GAAA,CAAI,OAAQA,CAAAA,KAAI,CAAI,GAAA,CAAA,CAAA;AAAA;AACnF,IAAQ,OAAA,CAAA,SAAA,CAAU,KAAKA,KAAI,CAAA;AAAA,GACtB,MAAA;AACL,IAAS,KAAA,IAAA,CAAA,GAAI,KAAK,UAAW,CAAA,MAAA,GAAS,GAAG,CAAK,IAAA,CAAA,EAAG,EAAE,CAAG,EAAA;AACpD,MAAI,IAAA,OAAA,GAAU,IAAK,CAAA,UAAA,CAAW,CAAC,CAAA;AAC/B,MAAI,IAAA,OAAA,CAAQ,OAAQ,CAAA,OAAA,CAAQA,KAAI,CAAA,GAAI,MAAM,EAAG,OAAA,CAAQ,KAAQ,GAAA,kBAAA,IAAuB,OAAQ,CAAA,OAAA,CAAQ,CAAC,CAAMA,KAAAA,KAAAA,CAAAA,IACvG,CAAC,IAAA,CAAK,0BAA2B,CAAA,OAAO,CAAK,IAAA,OAAA,CAAQ,SAAU,CAAA,OAAA,CAAQA,KAAI,CAAA,GAAI,CAAI,CAAA,EAAA;AACrF,QAAa,UAAA,GAAA,IAAA;AACb,QAAA;AAAA;AAEF,MAAQ,OAAA,CAAA,GAAA,CAAI,KAAKA,KAAI,CAAA;AACrB,MAAA,IAAI,IAAK,CAAA,QAAA,IAAa,OAAQ,CAAA,KAAA,GAAQ,SACpC,EAAA;AAAE,QAAO,OAAA,IAAA,CAAK,iBAAiBA,KAAI,CAAA;AAAA;AACrC,MAAI,IAAA,OAAA,CAAQ,QAAQ,SAAW,EAAA;AAAE,QAAA;AAAA;AAAM;AACzC;AAEF,EAAA,IAAI,UAAY,EAAA;AAAE,IAAA,IAAA,CAAK,gBAAiB,CAAA,GAAA,EAAM,cAAiBA,GAAAA,KAAAA,GAAO,6BAA8B,CAAA;AAAA;AACtG,CAAA;AAEA,IAAK,CAAA,gBAAA,GAAmB,SAAS,EAAI,EAAA;AAEnC,EAAA,IAAI,KAAK,UAAW,CAAA,CAAC,EAAE,OAAQ,CAAA,OAAA,CAAQ,GAAG,IAAI,CAAA,KAAM,MAChD,IAAK,CAAA,UAAA,CAAW,CAAC,CAAE,CAAA,GAAA,CAAI,QAAQ,EAAG,CAAA,IAAI,MAAM,CAAI,CAAA,EAAA;AAClD,IAAK,IAAA,CAAA,gBAAA,CAAiB,EAAG,CAAA,IAAI,CAAI,GAAA,EAAA;AAAA;AAErC,CAAA;AAEA,IAAA,CAAK,eAAe,WAAW;AAC7B,EAAA,OAAO,IAAK,CAAA,UAAA,CAAW,IAAK,CAAA,UAAA,CAAW,SAAS,CAAC,CAAA;AACnD,CAAA;AAEA,IAAA,CAAK,kBAAkB,WAAW;AAChC,EAAA,KAAA,IAAS,CAAI,GAAA,IAAA,CAAK,UAAW,CAAA,MAAA,GAAS,KAAI,CAAK,EAAA,EAAA;AAC7C,IAAI,IAAA,KAAA,GAAQ,IAAK,CAAA,UAAA,CAAW,CAAC,CAAA;AAC7B,IAAI,IAAA,KAAA,CAAM,QAAQ,SAAW,EAAA;AAAE,MAAO,OAAA,KAAA;AAAA;AAAM;AAEhD,CAAA;AAGA,IAAA,CAAK,mBAAmB,WAAW;AACjC,EAAA,KAAA,IAAS,CAAI,GAAA,IAAA,CAAK,UAAW,CAAA,MAAA,GAAS,KAAI,CAAK,EAAA,EAAA;AAC7C,IAAI,IAAA,KAAA,GAAQ,IAAK,CAAA,UAAA,CAAW,CAAC,CAAA;AAC7B,IAAA,IAAI,MAAM,KAAQ,GAAA,SAAA,IAAa,EAAE,KAAA,CAAM,QAAQ,WAAc,CAAA,EAAA;AAAE,MAAO,OAAA,KAAA;AAAA;AAAM;AAEhF,CAAA;AAEA,IAAI,IAAO,GAAA,SAASmG,KAAK,CAAA,MAAA,EAAQ,KAAK,GAAK,EAAA;AACzC,EAAA,IAAA,CAAK,IAAO,GAAA,EAAA;AACZ,EAAA,IAAA,CAAK,KAAQ,GAAA,GAAA;AACb,EAAA,IAAA,CAAK,GAAM,GAAA,CAAA;AACX,EAAI,IAAA,MAAA,CAAO,QAAQ,SACjB,EAAA;AAAE,IAAA,IAAA,CAAK,GAAM,GAAA,IAAI,cAAe,CAAA,MAAA,EAAQ,GAAG,CAAA;AAAA;AAC7C,EAAI,IAAA,MAAA,CAAO,QAAQ,gBACjB,EAAA;AAAE,IAAK,IAAA,CAAA,UAAA,GAAa,OAAO,OAAQ,CAAA,gBAAA;AAAA;AACrC,EAAI,IAAA,MAAA,CAAO,QAAQ,MACjB,EAAA;AAAE,IAAK,IAAA,CAAA,KAAA,GAAQ,CAAC,GAAA,EAAK,CAAC,CAAA;AAAA;AAC1B,CAAA;AAIA,IAAI,OAAO,MAAO,CAAA,SAAA;AAElB,IAAA,CAAK,YAAY,WAAW;AAC1B,EAAA,OAAO,IAAI,IAAK,CAAA,IAAA,EAAM,IAAK,CAAA,KAAA,EAAO,KAAK,QAAQ,CAAA;AACjD,CAAA;AAEA,IAAK,CAAA,WAAA,GAAc,SAAS,GAAA,EAAK,GAAK,EAAA;AACpC,EAAA,OAAO,IAAI,IAAA,CAAK,IAAM,EAAA,GAAA,EAAK,GAAG,CAAA;AAChC,CAAA;AAIA,SAAS,YAAa/B,CAAAA,KAAAA,EAAM,IAAM,EAAA,GAAA,EAAK,GAAK,EAAA;AAC1C,EAAAA,MAAK,IAAO,GAAA,IAAA;AACZ,EAAAA,MAAK,GAAM,GAAA,GAAA;AACX,EAAI,IAAA,IAAA,CAAK,QAAQ,SACf,EAAA;AAAE,IAAAA,KAAAA,CAAK,IAAI,GAAM,GAAA,GAAA;AAAA;AACnB,EAAI,IAAA,IAAA,CAAK,QAAQ,MACf,EAAA;AAAE,IAAAA,KAAAA,CAAK,KAAM,CAAA,CAAC,CAAI,GAAA,GAAA;AAAA;AACpB,EAAOA,OAAAA,KAAAA;AACT;AAEA,IAAK,CAAA,UAAA,GAAa,SAASA,KAAAA,EAAM,IAAM,EAAA;AACrC,EAAO,OAAA,YAAA,CAAa,KAAK,IAAMA,EAAAA,KAAAA,EAAM,MAAM,IAAK,CAAA,UAAA,EAAY,KAAK,aAAa,CAAA;AAChF,CAAA;AAIA,IAAA,CAAK,YAAe,GAAA,SAASA,KAAM,EAAA,IAAA,EAAM,KAAK,GAAK,EAAA;AACjD,EAAA,OAAO,aAAa,IAAK,CAAA,IAAA,EAAMA,KAAM,EAAA,IAAA,EAAM,KAAK,GAAG,CAAA;AACrD,CAAA;AAEA,IAAK,CAAA,QAAA,GAAW,SAASA,KAAM,EAAA;AAC7B,EAAA,IAAI,UAAU,IAAI,IAAA,CAAK,MAAMA,KAAK,CAAA,KAAA,EAAO,KAAK,QAAQ,CAAA;AACtD,EAAA,KAAA,IAAS,QAAQA,KAAM,EAAA;AAAE,IAAQ,OAAA,CAAA,IAAI,CAAIA,GAAAA,KAAAA,CAAK,IAAI,CAAA;AAAA;AAClD,EAAO,OAAA,OAAA;AACT,CAAA;AAGA,IAAI,0BAA6B,GAAA,mKAAA;AAOjC,IAAI,qBAAwB,GAAA,69BAAA;AAC5B,IAAI,yBAAyB,qBAAwB,GAAA,wBAAA;AACrD,IAAI,sBAAyB,GAAA,sBAAA;AAC7B,IAAI,yBAAyB,sBAAyB,GAAA,iCAAA;AACtD,IAAI,sBAAyB,GAAA,sBAAA;AAC7B,IAAI,sBAAyB,GAAA,sBAAA;AAE7B,IAAI,uBAA0B,GAAA;AAAA,EAC5B,CAAG,EAAA,qBAAA;AAAA,EACH,EAAI,EAAA,sBAAA;AAAA,EACJ,EAAI,EAAA,sBAAA;AAAA,EACJ,EAAI,EAAA,sBAAA;AAAA,EACJ,EAAI,EAAA,sBAAA;AAAA,EACJ,EAAI,EAAA;AACN,CAAA;AAGA,IAAI,+BAAkC,GAAA,+IAAA;AAEtC,IAAI,gCAAmC,GAAA;AAAA,EACrC,CAAG,EAAA,EAAA;AAAA,EACH,EAAI,EAAA,EAAA;AAAA,EACJ,EAAI,EAAA,EAAA;AAAA,EACJ,EAAI,EAAA,EAAA;AAAA,EACJ,EAAI,EAAA,EAAA;AAAA,EACJ,EAAI,EAAA;AACN,CAAA;AAGA,IAAI,4BAA+B,GAAA,opBAAA;AAGnC,IAAI,iBAAoB,GAAA,g+DAAA;AACxB,IAAI,qBAAqB,iBAAoB,GAAA,iHAAA;AAC7C,IAAI,qBAAqB,kBAAqB,GAAA,wEAAA;AAC9C,IAAI,qBAAqB,kBAAqB,GAAA,wEAAA;AAC9C,IAAI,qBAAqB,kBAAqB,GAAA,mEAAA;AAC9C,IAAI,kBAAA,GAAqB,qBAAqB,GAAM,GAAA,0BAAA;AAEpD,IAAI,mBAAsB,GAAA;AAAA,EACxB,CAAG,EAAA,iBAAA;AAAA,EACH,EAAI,EAAA,kBAAA;AAAA,EACJ,EAAI,EAAA,kBAAA;AAAA,EACJ,EAAI,EAAA,kBAAA;AAAA,EACJ,EAAI,EAAA,kBAAA;AAAA,EACJ,EAAI,EAAA;AACN,CAAA;AAEA,IAAI,OAAO,EAAC;AACZ,SAAS,iBAAiB,WAAa,EAAA;AACrC,EAAI,IAAA,CAAA,GAAI,IAAK,CAAA,WAAW,CAAI,GAAA;AAAA,IAC1B,QAAQ,WAAY,CAAA,uBAAA,CAAwB,WAAW,CAAA,GAAI,MAAM,4BAA4B,CAAA;AAAA,IAC7F,eAAiB,EAAA,WAAA,CAAY,gCAAiC,CAAA,WAAW,CAAC,CAAA;AAAA,IAC1E,SAAW,EAAA;AAAA,MACT,gBAAA,EAAkB,YAAY,4BAA4B,CAAA;AAAA,MAC1D,MAAQ,EAAA,WAAA,CAAY,mBAAoB,CAAA,WAAW,CAAC;AAAA;AACtD,GACF;AACA,EAAE,CAAA,CAAA,SAAA,CAAU,iBAAoB,GAAA,CAAA,CAAE,SAAU,CAAA,MAAA;AAE5C,EAAE,CAAA,CAAA,SAAA,CAAU,EAAK,GAAA,CAAA,CAAE,SAAU,CAAA,gBAAA;AAC7B,EAAE,CAAA,CAAA,SAAA,CAAU,EAAK,GAAA,CAAA,CAAE,SAAU,CAAA,MAAA;AAC7B,EAAE,CAAA,CAAA,SAAA,CAAU,GAAM,GAAA,CAAA,CAAE,SAAU,CAAA,iBAAA;AAChC;AAEA,KAAS,CAAI,GAAA,CAAA,EAAGO,KAAO,GAAA,CAAC,GAAG,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAE,CAAG,EAAA,CAAA,GAAIA,KAAK,CAAA,MAAA,EAAQ,KAAK,CAAG,EAAA;AACnE,EAAA,WAAA,GAAcA,MAAK,CAAC,CAAA;AAExB,EAAA,gBAAA,CAAiB,WAAW,CAAA;AAC9B;AAHM,IAAA,WAAA;AADG,IAAA,CAAA;AAAO,IAAAA,KAAAA;AAMhB,IAAI,OAAO,MAAO,CAAA,SAAA;AAIlB,IAAI,QAAW,GAAA,SAASgD,SAAS,CAAA,MAAA,EAAQ,IAAM,EAAA;AAE7C,EAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AAEd,EAAA,IAAA,CAAK,OAAO,IAAQ,IAAA,IAAA;AACtB,CAAA;AAEA,QAAA,CAAS,SAAU,CAAA,aAAA,GAAgB,SAAS,aAAA,CAAe,GAAK,EAAA;AAG9D,EAAA,KAAA,IAASE,KAAO,GAAA,IAAA,EAAMA,KAAMA,EAAAA,KAAAA,GAAOA,MAAK,MAAQ,EAAA;AAC9C,IAAA,KAAA,IAAS,KAAQ,GAAA,GAAA,EAAK,KAAO,EAAA,KAAA,GAAQ,MAAM,MAAQ,EAAA;AACjD,MAAA,IAAIA,KAAK,CAAA,IAAA,KAAS,KAAM,CAAA,IAAA,IAAQA,UAAS,KAAO,EAAA;AAAE,QAAO,OAAA,IAAA;AAAA;AAAK;AAChE;AAEF,EAAO,OAAA,KAAA;AACT,CAAA;AAEA,QAAS,CAAA,SAAA,CAAU,OAAU,GAAA,SAAS,OAAW,GAAA;AAC/C,EAAA,OAAO,IAAI,QAAA,CAAS,IAAK,CAAA,MAAA,EAAQ,KAAK,IAAI,CAAA;AAC5C,CAAA;AAEA,IAAI,qBAAA,GAAwB,SAASE,sBAAAA,CAAsB,MAAQ,EAAA;AACjE,EAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AACd,EAAK,IAAA,CAAA,UAAA,GAAa,KAAS,IAAA,MAAA,CAAO,OAAQ,CAAA,WAAA,IAAe,IAAI,IAAO,GAAA,EAAA,CAAA,IAAO,MAAO,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA,GAAI,MAAM,EAAO,CAAA,IAAA,MAAA,CAAO,OAAQ,CAAA,WAAA,IAAe,EAAK,GAAA,GAAA,GAAM,OAAO,MAAO,CAAA,OAAA,CAAQ,WAAe,IAAA,EAAA,GAAK,GAAM,GAAA,EAAA,CAAA;AACnN,EAAK,IAAA,CAAA,iBAAA,GAAoB,KAAK,MAAO,CAAA,OAAA,CAAQ,eAAe,EAAK,GAAA,EAAA,GAAK,MAAO,CAAA,OAAA,CAAQ,WAAW,CAAA;AAChG,EAAA,IAAA,CAAK,MAAS,GAAA,EAAA;AACd,EAAA,IAAA,CAAK,KAAQ,GAAA,EAAA;AACb,EAAA,IAAA,CAAK,KAAQ,GAAA,CAAA;AACb,EAAA,IAAA,CAAK,OAAU,GAAA,KAAA;AACf,EAAA,IAAA,CAAK,OAAU,GAAA,KAAA;AACf,EAAA,IAAA,CAAK,OAAU,GAAA,KAAA;AACf,EAAA,IAAA,CAAK,GAAM,GAAA,CAAA;AACX,EAAA,IAAA,CAAK,YAAe,GAAA,CAAA;AACpB,EAAA,IAAA,CAAK,eAAkB,GAAA,EAAA;AACvB,EAAA,IAAA,CAAK,2BAA8B,GAAA,KAAA;AACnC,EAAA,IAAA,CAAK,kBAAqB,GAAA,CAAA;AAC1B,EAAA,IAAA,CAAK,gBAAmB,GAAA,CAAA;AACxB,EAAK,IAAA,CAAA,UAAA,mBAAoB,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA;AACpC,EAAA,IAAA,CAAK,qBAAqB,EAAC;AAC3B,EAAA,IAAA,CAAK,QAAW,GAAA,IAAA;AAClB,CAAA;AAEA,qBAAA,CAAsB,UAAU,KAAQ,GAAA,SAAS,KAAOtF,CAAAA,MAAAA,EAAO,SAAS,KAAO,EAAA;AAC7E,EAAA,IAAI,WAAc,GAAA,KAAA,CAAM,OAAQ,CAAA,GAAG,CAAM,KAAA,CAAA,CAAA;AACzC,EAAA,IAAI,OAAU,GAAA,KAAA,CAAM,OAAQ,CAAA,GAAG,CAAM,KAAA,CAAA,CAAA;AACrC,EAAA,IAAA,CAAK,QAAQA,MAAQ,GAAA,CAAA;AACrB,EAAA,IAAA,CAAK,SAAS,OAAU,GAAA,EAAA;AACxB,EAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AACb,EAAA,IAAI,WAAe,IAAA,IAAA,CAAK,MAAO,CAAA,OAAA,CAAQ,eAAe,EAAI,EAAA;AACxD,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA;AACf,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA;AACf,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA;AAAA,GACV,MAAA;AACL,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA,IAAW,IAAK,CAAA,MAAA,CAAO,QAAQ,WAAe,IAAA,CAAA;AAC7D,IAAA,IAAA,CAAK,OAAU,GAAA,KAAA;AACf,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA,IAAW,IAAK,CAAA,MAAA,CAAO,QAAQ,WAAe,IAAA,CAAA;AAAA;AAEjE,CAAA;AAEA,qBAAA,CAAsB,SAAU,CAAA,KAAA,GAAQ,SAAS,KAAA,CAAO,OAAS,EAAA;AAC/D,EAAK,IAAA,CAAA,MAAA,CAAO,iBAAiB,IAAK,CAAA,KAAA,EAAQ,kCAAmC,IAAK,CAAA,MAAA,GAAU,QAAQ,OAAQ,CAAA;AAC9G,CAAA;AAIA,qBAAA,CAAsB,SAAU,CAAA,EAAA,GAAK,SAAS,EAAA,CAAI,GAAG,MAAQ,EAAA;AACzD,EAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAEpC,EAAA,IAAI,IAAI,IAAK,CAAA,MAAA;AACb,EAAA,IAAI,IAAI,CAAE,CAAA,MAAA;AACV,EAAA,IAAI,KAAK,CAAG,EAAA;AACV,IAAO,OAAA,CAAA,CAAA;AAAA;AAET,EAAI,IAAA,CAAA,GAAI,CAAE,CAAA,UAAA,CAAW,CAAC,CAAA;AACtB,EAAI,IAAA,EAAE,MAAU,IAAA,IAAA,CAAK,OAAY,CAAA,IAAA,CAAA,IAAK,SAAU,CAAK,IAAA,KAAA,IAAU,CAAI,GAAA,CAAA,IAAK,CAAG,EAAA;AACzE,IAAO,OAAA,CAAA;AAAA;AAET,EAAA,IAAI,IAAO,GAAA,CAAA,CAAE,UAAW,CAAA,CAAA,GAAI,CAAC,CAAA;AAC7B,EAAA,OAAO,QAAQ,KAAU,IAAA,IAAA,IAAQ,SAAU,CAAK,IAAA,EAAA,IAAM,OAAO,QAAY,GAAA,CAAA;AAC3E,CAAA;AAEA,qBAAA,CAAsB,SAAU,CAAA,SAAA,GAAY,SAAS,SAAA,CAAW,GAAG,MAAQ,EAAA;AACvE,EAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAEpC,EAAA,IAAI,IAAI,IAAK,CAAA,MAAA;AACb,EAAA,IAAI,IAAI,CAAE,CAAA,MAAA;AACV,EAAA,IAAI,KAAK,CAAG,EAAA;AACV,IAAO,OAAA,CAAA;AAAA;AAET,EAAA,IAAI,CAAI,GAAA,CAAA,CAAE,UAAW,CAAA,CAAC,CAAG,EAAA,IAAA;AACzB,EAAA,IAAI,EAAE,MAAU,IAAA,IAAA,CAAK,YAAY,CAAK,IAAA,KAAA,IAAU,KAAK,KAAU,IAAA,CAAA,GAAI,KAAK,CACnE,IAAA,CAAA,IAAA,GAAO,EAAE,UAAW,CAAA,CAAA,GAAI,CAAC,CAAK,IAAA,KAAA,IAAU,OAAO,KAAQ,EAAA;AAC1D,IAAA,OAAO,CAAI,GAAA,CAAA;AAAA;AAEb,EAAA,OAAO,CAAI,GAAA,CAAA;AACb,CAAA;AAEA,qBAAA,CAAsB,SAAU,CAAA,OAAA,GAAU,SAAS,OAAA,CAAS,MAAQ,EAAA;AAChE,EAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAEpC,EAAA,OAAO,IAAK,CAAA,EAAA,CAAG,IAAK,CAAA,GAAA,EAAK,MAAM,CAAA;AACjC,CAAA;AAEA,qBAAA,CAAsB,SAAU,CAAA,SAAA,GAAY,SAAS,SAAA,CAAW,MAAQ,EAAA;AACpE,EAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAEpC,EAAO,OAAA,IAAA,CAAK,GAAG,IAAK,CAAA,SAAA,CAAU,KAAK,GAAK,EAAA,MAAM,GAAG,MAAM,CAAA;AACzD,CAAA;AAEA,qBAAA,CAAsB,SAAU,CAAA,OAAA,GAAU,SAAS,OAAA,CAAS,MAAQ,EAAA;AAChE,EAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAEpC,EAAA,IAAA,CAAK,GAAM,GAAA,IAAA,CAAK,SAAU,CAAA,IAAA,CAAK,KAAK,MAAM,CAAA;AAC5C,CAAA;AAEA,qBAAA,CAAsB,SAAU,CAAA,GAAA,GAAM,SAAS,GAAA,CAAK,IAAI,MAAQ,EAAA;AAC5D,EAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAEpC,EAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,MAAM,CAAA,KAAM,EAAI,EAAA;AAC/B,IAAA,IAAA,CAAK,QAAQ,MAAM,CAAA;AACnB,IAAO,OAAA,IAAA;AAAA;AAET,EAAO,OAAA,KAAA;AACT,CAAA;AAEA,qBAAA,CAAsB,SAAU,CAAA,QAAA,GAAW,SAAS,QAAA,CAAU,KAAK,MAAQ,EAAA;AACvE,EAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAEpC,EAAA,IAAI,MAAM,IAAK,CAAA,GAAA;AACf,EAAS,KAAA,IAAA,CAAA,GAAI,GAAGkC,KAAO,GAAA,GAAA,EAAK,IAAIA,KAAK,CAAA,MAAA,EAAQ,KAAK,CAAG,EAAA;AACnD,IAAI,IAAA,EAAA,GAAKA,MAAK,CAAC,CAAA;AAEb,IAAA,IAAIyD,QAAU,GAAA,IAAA,CAAK,EAAG,CAAA,GAAA,EAAK,MAAM,CAAA;AACnC,IAAIA,IAAAA,QAAAA,KAAY,CAAMA,CAAAA,IAAAA,QAAAA,KAAY,EAAI,EAAA;AACpC,MAAO,OAAA,KAAA;AAAA;AAET,IAAM,GAAA,GAAA,IAAA,CAAK,SAAU,CAAA,GAAA,EAAK,MAAM,CAAA;AAAA;AAElC,EAAA,IAAA,CAAK,GAAM,GAAA,GAAA;AACX,EAAO,OAAA,IAAA;AACT,CAAA;AAQA,IAAK,CAAA,mBAAA,GAAsB,SAAS,KAAO,EAAA;AACzC,EAAA,IAAI,aAAa,KAAM,CAAA,UAAA;AACvB,EAAA,IAAI,QAAQ,KAAM,CAAA,KAAA;AAElB,EAAA,IAAI,CAAI,GAAA,KAAA;AACR,EAAA,IAAI,CAAI,GAAA,KAAA;AAER,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,CAAM,QAAQ,CAAK,EAAA,EAAA;AACrC,IAAI,IAAA,IAAA,GAAO,KAAM,CAAA,MAAA,CAAO,CAAC,CAAA;AACzB,IAAA,IAAI,UAAW,CAAA,OAAA,CAAQ,IAAI,CAAA,KAAM,CAAI,CAAA,EAAA;AACnC,MAAK,IAAA,CAAA,KAAA,CAAM,KAAM,CAAA,KAAA,EAAO,iCAAiC,CAAA;AAAA;AAE3D,IAAA,IAAI,MAAM,OAAQ,CAAA,IAAA,EAAM,CAAI,GAAA,CAAC,IAAI,CAAI,CAAA,EAAA;AACnC,MAAK,IAAA,CAAA,KAAA,CAAM,KAAM,CAAA,KAAA,EAAO,mCAAmC,CAAA;AAAA;AAE7D,IAAA,IAAI,SAAS,GAAK,EAAA;AAAE,MAAI,CAAA,GAAA,IAAA;AAAA;AACxB,IAAA,IAAI,SAAS,GAAK,EAAA;AAAE,MAAI,CAAA,GAAA,IAAA;AAAA;AAAM;AAEhC,EAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,EAAA,IAAM,KAAK,CAAG,EAAA;AAC5C,IAAK,IAAA,CAAA,KAAA,CAAM,KAAM,CAAA,KAAA,EAAO,iCAAiC,CAAA;AAAA;AAE7D,CAAA;AAEA,SAAS,QAAQ,GAAK,EAAA;AACpB,EAAA,KAAA,IAAS,KAAK,GAAK,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AAC5B,EAAO,OAAA,KAAA;AACT;AAQA,IAAK,CAAA,qBAAA,GAAwB,SAAS,KAAO,EAAA;AAC3C,EAAA,IAAA,CAAK,eAAe,KAAK,CAAA;AAOzB,EAAI,IAAA,CAAC,KAAM,CAAA,OAAA,IAAW,IAAK,CAAA,OAAA,CAAQ,eAAe,CAAK,IAAA,OAAA,CAAQ,KAAM,CAAA,UAAU,CAAG,EAAA;AAChF,IAAA,KAAA,CAAM,OAAU,GAAA,IAAA;AAChB,IAAA,IAAA,CAAK,eAAe,KAAK,CAAA;AAAA;AAE7B,CAAA;AAGA,IAAK,CAAA,cAAA,GAAiB,SAAS,KAAO,EAAA;AACpC,EAAA,KAAA,CAAM,GAAM,GAAA,CAAA;AACZ,EAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,EAAA,KAAA,CAAM,eAAkB,GAAA,EAAA;AACxB,EAAA,KAAA,CAAM,2BAA8B,GAAA,KAAA;AACpC,EAAA,KAAA,CAAM,kBAAqB,GAAA,CAAA;AAC3B,EAAA,KAAA,CAAM,gBAAmB,GAAA,CAAA;AACzB,EAAM,KAAA,CAAA,UAAA,mBAAoB,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA;AACrC,EAAA,KAAA,CAAM,mBAAmB,MAAS,GAAA,CAAA;AAClC,EAAA,KAAA,CAAM,QAAW,GAAA,IAAA;AAEjB,EAAA,IAAA,CAAK,mBAAmB,KAAK,CAAA;AAE7B,EAAA,IAAI,KAAM,CAAA,GAAA,KAAQ,KAAM,CAAA,MAAA,CAAO,MAAQ,EAAA;AAErC,IAAA,IAAI,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAe,EAAA;AAC3B,MAAA,KAAA,CAAM,MAAM,eAAe,CAAA;AAAA;AAE7B,IAAA,IAAI,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,SAAiB,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAe,EAAA;AACtD,MAAA,KAAA,CAAM,MAAM,0BAA0B,CAAA;AAAA;AACxC;AAEF,EAAI,IAAA,KAAA,CAAM,gBAAmB,GAAA,KAAA,CAAM,kBAAoB,EAAA;AACrD,IAAA,KAAA,CAAM,MAAM,gBAAgB,CAAA;AAAA;AAE9B,EAAS,KAAA,IAAA,CAAA,GAAI,GAAGzD,KAAO,GAAA,KAAA,CAAM,oBAAoB,CAAIA,GAAAA,KAAAA,CAAK,MAAQ,EAAA,CAAA,IAAK,CAAG,EAAA;AACxE,IAAI3E,IAAAA,KAAAA,GAAO2E,MAAK,CAAC,CAAA;AAEjB,IAAA,IAAI,CAAC,KAAA,CAAM,UAAW3E,CAAAA,KAAI,CAAG,EAAA;AAC3B,MAAA,KAAA,CAAM,MAAM,kCAAkC,CAAA;AAAA;AAChD;AAEJ,CAAA;AAGA,IAAK,CAAA,kBAAA,GAAqB,SAAS,KAAO,EAAA;AACxC,EAAI,IAAA,gBAAA,GAAmB,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,EAAA;AACnD,EAAA,IAAI,gBAAkB,EAAA;AAAE,IAAA,KAAA,CAAM,QAAW,GAAA,IAAI,QAAS,CAAA,KAAA,CAAM,UAAU,IAAI,CAAA;AAAA;AAC1E,EAAA,IAAA,CAAK,mBAAmB,KAAK,CAAA;AAC7B,EAAA,OAAO,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC9B,IAAA,IAAI,gBAAkB,EAAA;AAAE,MAAM,KAAA,CAAA,QAAA,GAAW,KAAM,CAAA,QAAA,CAAS,OAAQ,EAAA;AAAA;AAChE,IAAA,IAAA,CAAK,mBAAmB,KAAK,CAAA;AAAA;AAE/B,EAAA,IAAI,gBAAkB,EAAA;AAAE,IAAM,KAAA,CAAA,QAAA,GAAW,MAAM,QAAS,CAAA,MAAA;AAAA;AAGxD,EAAA,IAAI,IAAK,CAAA,oBAAA,CAAqB,KAAO,EAAA,IAAI,CAAG,EAAA;AAC1C,IAAA,KAAA,CAAM,MAAM,mBAAmB,CAAA;AAAA;AAEjC,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAA,KAAA,CAAM,MAAM,0BAA0B,CAAA;AAAA;AAE1C,CAAA;AAGA,IAAK,CAAA,kBAAA,GAAqB,SAAS,KAAO,EAAA;AACxC,EAAO,OAAA,KAAA,CAAM,MAAM,KAAM,CAAA,MAAA,CAAO,UAAU,IAAK,CAAA,cAAA,CAAe,KAAK,CAAG,EAAA;AAAA;AACxE,CAAA;AAGA,IAAK,CAAA,cAAA,GAAiB,SAAS,KAAO,EAAA;AACpC,EAAI,IAAA,IAAA,CAAK,mBAAoB,CAAA,KAAK,CAAG,EAAA;AAInC,IAAA,IAAI,KAAM,CAAA,2BAAA,IAA+B,IAAK,CAAA,oBAAA,CAAqB,KAAK,CAAG,EAAA;AAEzE,MAAA,IAAI,MAAM,OAAS,EAAA;AACjB,QAAA,KAAA,CAAM,MAAM,oBAAoB,CAAA;AAAA;AAClC;AAEF,IAAO,OAAA,IAAA;AAAA;AAGT,EAAI,IAAA,KAAA,CAAM,UAAU,IAAK,CAAA,cAAA,CAAe,KAAK,CAAI,GAAA,IAAA,CAAK,sBAAuB,CAAA,KAAK,CAAG,EAAA;AACnF,IAAA,IAAA,CAAK,qBAAqB,KAAK,CAAA;AAC/B,IAAO,OAAA,IAAA;AAAA;AAGT,EAAO,OAAA,KAAA;AACT,CAAA;AAGA,IAAK,CAAA,mBAAA,GAAsB,SAAS,KAAO,EAAA;AACzC,EAAA,IAAIyC,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAA,KAAA,CAAM,2BAA8B,GAAA,KAAA;AAGpC,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,OAAiB,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AACtD,IAAO,OAAA,IAAA;AAAA;AAIT,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAA,IAAI,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,SAAiB,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAe,EAAA;AACtD,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAId,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,OAAiB,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AACtD,IAAA,IAAI,UAAa,GAAA,KAAA;AACjB,IAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,MAAA,UAAA,GAAa,KAAM,CAAA,GAAA;AAAA,QAAI;AAAA;AAAA,OAAY;AAAA;AAErC,IAAA,IAAI,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,SAAiB,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAe,EAAA;AACtD,MAAA,IAAA,CAAK,mBAAmB,KAAK,CAAA;AAC7B,MAAA,IAAI,CAAC,KAAM,CAAA,GAAA;AAAA,QAAI;AAAA;AAAA,OAAe,EAAA;AAC5B,QAAA,KAAA,CAAM,MAAM,oBAAoB,CAAA;AAAA;AAElC,MAAA,KAAA,CAAM,8BAA8B,CAAC,UAAA;AACrC,MAAO,OAAA,IAAA;AAAA;AACT;AAGF,EAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AACZ,EAAO,OAAA,KAAA;AACT,CAAA;AAGA,IAAK,CAAA,oBAAA,GAAuB,SAAS,KAAA,EAAO,OAAS,EAAA;AACnD,EAAK,IAAA,OAAA,KAAY,QAAmB,OAAA,GAAA,KAAA;AAEpC,EAAA,IAAI,IAAK,CAAA,0BAAA,CAA2B,KAAO,EAAA,OAAO,CAAG,EAAA;AACnD,IAAM,KAAA,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAY;AACtB,IAAO,OAAA,IAAA;AAAA;AAET,EAAO,OAAA,KAAA;AACT,CAAA;AAGA,IAAK,CAAA,0BAAA,GAA6B,SAAS,KAAA,EAAO,OAAS,EAAA;AACzD,EAAA,OACE,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,OACV,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,OACV,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GACV,IAAA,IAAA,CAAK,0BAA2B,CAAA,KAAA,EAAO,OAAO,CAAA;AAElD,CAAA;AACA,IAAK,CAAA,0BAAA,GAA6B,SAAS,KAAA,EAAO,OAAS,EAAA;AACzD,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAI,IAAA,GAAA,GAAM,GAAG,GAAM,GAAA,CAAA,CAAA;AACnB,IAAI,IAAA,IAAA,CAAK,uBAAwB,CAAA,KAAK,CAAG,EAAA;AACvC,MAAA,GAAA,GAAM,KAAM,CAAA,YAAA;AACZ,MAAA,IAAI,KAAM,CAAA,GAAA;AAAA,QAAI;AAAA;AAAA,OAAiB,IAAA,IAAA,CAAK,uBAAwB,CAAA,KAAK,CAAG,EAAA;AAClE,QAAA,GAAA,GAAM,KAAM,CAAA,YAAA;AAAA;AAEd,MAAA,IAAI,KAAM,CAAA,GAAA;AAAA,QAAI;AAAA;AAAA,OAAe,EAAA;AAE3B,QAAA,IAAI,GAAQ,KAAA,CAAA,CAAA,IAAM,GAAM,GAAA,GAAA,IAAO,CAAC,OAAS,EAAA;AACvC,UAAA,KAAA,CAAM,MAAM,uCAAuC,CAAA;AAAA;AAErD,QAAO,OAAA,IAAA;AAAA;AACT;AAEF,IAAI,IAAA,KAAA,CAAM,OAAW,IAAA,CAAC,OAAS,EAAA;AAC7B,MAAA,KAAA,CAAM,MAAM,uBAAuB,CAAA;AAAA;AAErC,IAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,EAAO,OAAA,KAAA;AACT,CAAA;AAGA,IAAK,CAAA,cAAA,GAAiB,SAAS,KAAO,EAAA;AACpC,EAAA,OACE,IAAK,CAAA,2BAAA,CAA4B,KAAK,CAAA,IACtC,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GACV,IAAA,IAAA,CAAK,kCAAmC,CAAA,KAAK,KAC7C,IAAK,CAAA,wBAAA,CAAyB,KAAK,CAAA,IACnC,KAAK,0BAA2B,CAAA,KAAK,CACrC,IAAA,IAAA,CAAK,yBAAyB,KAAK,CAAA;AAEvC,CAAA;AACA,IAAK,CAAA,kCAAA,GAAqC,SAAS,KAAO,EAAA;AACxD,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAI,IAAA,IAAA,CAAK,oBAAqB,CAAA,KAAK,CAAG,EAAA;AACpC,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,EAAO,OAAA,KAAA;AACT,CAAA;AACA,IAAK,CAAA,0BAAA,GAA6B,SAAS,KAAO,EAAA;AAChD,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAA,IAAI,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAe,EAAA;AAC3B,MAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAAI,EAAA;AAClC,QAAI,IAAA,YAAA,GAAe,IAAK,CAAA,mBAAA,CAAoB,KAAK,CAAA;AACjD,QAAA,IAAI,YAAY,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAY;AACtC,QAAA,IAAI,gBAAgB,SAAW,EAAA;AAC7B,UAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,YAAA,CAAa,QAAQ,CAAK,EAAA,EAAA;AAC5C,YAAI,IAAA,QAAA,GAAW,YAAa,CAAA,MAAA,CAAO,CAAC,CAAA;AACpC,YAAA,IAAI,aAAa,OAAQ,CAAA,QAAA,EAAU,CAAI,GAAA,CAAC,IAAI,CAAI,CAAA,EAAA;AAC9C,cAAA,KAAA,CAAM,MAAM,wCAAwC,CAAA;AAAA;AACtD;AAEF,UAAA,IAAI,SAAW,EAAA;AACb,YAAI,IAAA,eAAA,GAAkB,IAAK,CAAA,mBAAA,CAAoB,KAAK,CAAA;AACpD,YAAA,IAAI,CAAC,YAAgB,IAAA,CAAC,mBAAmB,KAAM,CAAA,OAAA,OAAc,EAAc,EAAA;AACzE,cAAA,KAAA,CAAM,MAAM,sCAAsC,CAAA;AAAA;AAEpD,YAAA,KAAA,IAAS,GAAM,GAAA,CAAA,EAAG,GAAM,GAAA,eAAA,CAAgB,QAAQ,GAAO,EAAA,EAAA;AACrD,cAAI,IAAA,UAAA,GAAa,eAAgB,CAAA,MAAA,CAAO,GAAG,CAAA;AAC3C,cACE,IAAA,eAAA,CAAgB,OAAQ,CAAA,UAAA,EAAY,GAAM,GAAA,CAAC,CAAI,GAAA,CAAA,CAAA,IAC/C,YAAa,CAAA,OAAA,CAAQ,UAAU,CAAA,GAAI,CACnC,CAAA,EAAA;AACA,gBAAA,KAAA,CAAM,MAAM,wCAAwC,CAAA;AAAA;AACtD;AACF;AACF;AACF;AAEF,MAAA,IAAI,KAAM,CAAA,GAAA;AAAA,QAAI;AAAA;AAAA,OAAe,EAAA;AAC3B,QAAA,IAAA,CAAK,mBAAmB,KAAK,CAAA;AAC7B,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAe,EAAA;AAC3B,UAAO,OAAA,IAAA;AAAA;AAET,QAAA,KAAA,CAAM,MAAM,oBAAoB,CAAA;AAAA;AAClC;AAEF,IAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,EAAO,OAAA,KAAA;AACT,CAAA;AACA,IAAK,CAAA,wBAAA,GAA2B,SAAS,KAAO,EAAA;AAC9C,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,MAAA,IAAA,CAAK,sBAAsB,KAAK,CAAA;AAAA,KACvB,MAAA,IAAA,KAAA,CAAM,OAAQ,EAAA,KAAM,EAAc,EAAA;AAC3C,MAAA,KAAA,CAAM,MAAM,eAAe,CAAA;AAAA;AAE7B,IAAA,IAAA,CAAK,mBAAmB,KAAK,CAAA;AAC7B,IAAA,IAAI,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAe,EAAA;AAC3B,MAAA,KAAA,CAAM,kBAAsB,IAAA,CAAA;AAC5B,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,KAAA,CAAM,MAAM,oBAAoB,CAAA;AAAA;AAElC,EAAO,OAAA,KAAA;AACT,CAAA;AAIA,IAAK,CAAA,mBAAA,GAAsB,SAAS,KAAO,EAAA;AACzC,EAAA,IAAI,SAAY,GAAA,EAAA;AAChB,EAAA,IAAI,EAAK,GAAA,CAAA;AACT,EAAA,OAAA,CAAQ,KAAK,KAAM,CAAA,OAAA,QAAe,CAAM,CAAA,IAAA,2BAAA,CAA4B,EAAE,CAAG,EAAA;AACvE,IAAA,SAAA,IAAa,kBAAkB,EAAE,CAAA;AACjC,IAAA,KAAA,CAAM,OAAQ,EAAA;AAAA;AAEhB,EAAO,OAAA,SAAA;AACT,CAAA;AAGA,SAAS,4BAA4B,EAAI,EAAA;AACvC,EAAA,OAAO,EAAO,KAAA,GAAA,IAAgB,EAAO,KAAA,GAAA,IAAgB,EAAO,KAAA,GAAA;AAC9D;AAGA,IAAK,CAAA,sBAAA,GAAyB,SAAS,KAAO,EAAA;AAC5C,EAAA,OACE,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAY,IACtB,KAAK,kCAAmC,CAAA,KAAK,KAC7C,IAAK,CAAA,wBAAA,CAAyB,KAAK,CAAA,IACnC,IAAK,CAAA,0BAAA,CAA2B,KAAK,CACrC,IAAA,IAAA,CAAK,wBAAyB,CAAA,KAAK,CACnC,IAAA,IAAA,CAAK,kCAAkC,KAAK,CAAA,IAC5C,IAAK,CAAA,kCAAA,CAAmC,KAAK,CAAA;AAEjD,CAAA;AAGA,IAAK,CAAA,iCAAA,GAAoC,SAAS,KAAO,EAAA;AACvD,EAAA,IAAI,IAAK,CAAA,0BAAA,CAA2B,KAAO,EAAA,IAAI,CAAG,EAAA;AAChD,IAAA,KAAA,CAAM,MAAM,mBAAmB,CAAA;AAAA;AAEjC,EAAO,OAAA,KAAA;AACT,CAAA;AAGA,IAAK,CAAA,yBAAA,GAA4B,SAAS,KAAO,EAAA;AAC/C,EAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,EAAI,IAAA,iBAAA,CAAkB,EAAE,CAAG,EAAA;AACzB,IAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAO,OAAA,IAAA;AAAA;AAET,EAAO,OAAA,KAAA;AACT,CAAA;AACA,SAAS,kBAAkB,EAAI,EAAA;AAC7B,EAAA,OACE,OAAO,EACP,IAAA,EAAA,IAAM,EAAgB,IAAA,EAAA,IAAM,MAC5B,EAAO,KAAA,EAAA,IACP,EAAO,KAAA,EAAA,IACP,MAAM,EAAgB,IAAA,EAAA,IAAM,EAC5B,IAAA,EAAA,IAAM,OAAgB,EAAM,IAAA,GAAA;AAEhC;AAIA,IAAK,CAAA,2BAAA,GAA8B,SAAS,KAAO,EAAA;AACjD,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAA,IAAI,EAAK,GAAA,CAAA;AACT,EAAQ,OAAA,CAAA,EAAA,GAAK,MAAM,OAAQ,EAAA,MAAO,MAAM,CAAC,iBAAA,CAAkB,EAAE,CAAG,EAAA;AAC9D,IAAA,KAAA,CAAM,OAAQ,EAAA;AAAA;AAEhB,EAAA,OAAO,MAAM,GAAQA,KAAAA,MAAAA;AACvB,CAAA;AAGA,IAAK,CAAA,kCAAA,GAAqC,SAAS,KAAO,EAAA;AACxD,EAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,EAAA,IACE,OAAO,CACP,CAAA,IAAA,EAAA,KAAO,MACP,EAAE,EAAA,IAAM,MAAgB,EAAM,IAAA,EAAA,CAAA,IAC9B,EAAO,KAAA,EAAA,IACP,OAAO,EACP,IAAA,EAAA,KAAO,MACP,EAAO,KAAA,EAAA,IACP,OAAO,GACP,EAAA;AACA,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAO,OAAA,IAAA;AAAA;AAET,EAAO,OAAA,KAAA;AACT,CAAA;AAKA,IAAK,CAAA,qBAAA,GAAwB,SAAS,KAAO,EAAA;AAC3C,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAA,IAAI,CAAC,IAAA,CAAK,mBAAoB,CAAA,KAAK,CAAG,EAAA;AAAE,MAAA,KAAA,CAAM,MAAM,eAAe,CAAA;AAAA;AACnE,IAAI,IAAA,gBAAA,GAAmB,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,EAAA;AACnD,IAAA,IAAI,KAAQ,GAAA,KAAA,CAAM,UAAW,CAAA,KAAA,CAAM,eAAe,CAAA;AAClD,IAAA,IAAI,KAAO,EAAA;AACT,MAAA,IAAI,gBAAkB,EAAA;AACpB,QAAS,KAAA,IAAA,CAAA,GAAI,GAAGkC,KAAO,GAAA,KAAA,EAAO,IAAIA,KAAK,CAAA,MAAA,EAAQ,KAAK,CAAG,EAAA;AACrD,UAAI,IAAA,KAAA,GAAQA,MAAK,CAAC,CAAA;AAElB,UAAA,IAAI,CAAC,KAAA,CAAM,aAAc,CAAA,KAAA,CAAM,QAAQ,CACrC,EAAA;AAAE,YAAA,KAAA,CAAM,MAAM,8BAA8B,CAAA;AAAA;AAAG;AACnD,OACK,MAAA;AACL,QAAA,KAAA,CAAM,MAAM,8BAA8B,CAAA;AAAA;AAC5C;AAEF,IAAA,IAAI,gBAAkB,EAAA;AACpB,MAAC,CAAA,KAAA,KAAU,KAAM,CAAA,UAAA,CAAW,KAAM,CAAA,eAAe,IAAI,EAAC,CAAA,EAAI,IAAK,CAAA,KAAA,CAAM,QAAQ,CAAA;AAAA,KACxE,MAAA;AACL,MAAM,KAAA,CAAA,UAAA,CAAW,KAAM,CAAA,eAAe,CAAI,GAAA,IAAA;AAAA;AAC5C;AAEJ,CAAA;AAKA,IAAK,CAAA,mBAAA,GAAsB,SAAS,KAAO,EAAA;AACzC,EAAA,KAAA,CAAM,eAAkB,GAAA,EAAA;AACxB,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAA,IAAI,IAAK,CAAA,8BAAA,CAA+B,KAAK,CAAA,IAAK,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAe,EAAA;AACzE,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,KAAA,CAAM,MAAM,4BAA4B,CAAA;AAAA;AAE1C,EAAO,OAAA,KAAA;AACT,CAAA;AAMA,IAAK,CAAA,8BAAA,GAAiC,SAAS,KAAO,EAAA;AACpD,EAAA,KAAA,CAAM,eAAkB,GAAA,EAAA;AACxB,EAAI,IAAA,IAAA,CAAK,+BAAgC,CAAA,KAAK,CAAG,EAAA;AAC/C,IAAM,KAAA,CAAA,eAAA,IAAmB,iBAAkB,CAAA,KAAA,CAAM,YAAY,CAAA;AAC7D,IAAO,OAAA,IAAA,CAAK,8BAA+B,CAAA,KAAK,CAAG,EAAA;AACjD,MAAM,KAAA,CAAA,eAAA,IAAmB,iBAAkB,CAAA,KAAA,CAAM,YAAY,CAAA;AAAA;AAE/D,IAAO,OAAA,IAAA;AAAA;AAET,EAAO,OAAA,KAAA;AACT,CAAA;AAOA,IAAK,CAAA,+BAAA,GAAkC,SAAS,KAAO,EAAA;AACrD,EAAA,IAAIlC,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAI,IAAA,MAAA,GAAS,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,EAAA;AACzC,EAAI,IAAA,EAAA,GAAK,KAAM,CAAA,OAAA,CAAQ,MAAM,CAAA;AAC7B,EAAA,KAAA,CAAM,QAAQ,MAAM,CAAA;AAEpB,EAAA,IAAI,OAAO,EAAgB,IAAA,IAAA,CAAK,qCAAsC,CAAA,KAAA,EAAO,MAAM,CAAG,EAAA;AACpF,IAAA,EAAA,GAAK,KAAM,CAAA,YAAA;AAAA;AAEb,EAAI,IAAA,uBAAA,CAAwB,EAAE,CAAG,EAAA;AAC/B,IAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,IAAO,OAAA,IAAA;AAAA;AAGT,EAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AACZ,EAAO,OAAA,KAAA;AACT,CAAA;AACA,SAAS,wBAAwB,EAAI,EAAA;AACnC,EAAA,OAAO,kBAAkB,EAAI,EAAA,IAAI,CAAK,IAAA,EAAA,KAAO,MAAgB,EAAO,KAAA,EAAA;AACtE;AASA,IAAK,CAAA,8BAAA,GAAiC,SAAS,KAAO,EAAA;AACpD,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAI,IAAA,MAAA,GAAS,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,EAAA;AACzC,EAAI,IAAA,EAAA,GAAK,KAAM,CAAA,OAAA,CAAQ,MAAM,CAAA;AAC7B,EAAA,KAAA,CAAM,QAAQ,MAAM,CAAA;AAEpB,EAAA,IAAI,OAAO,EAAgB,IAAA,IAAA,CAAK,qCAAsC,CAAA,KAAA,EAAO,MAAM,CAAG,EAAA;AACpF,IAAA,EAAA,GAAK,KAAM,CAAA,YAAA;AAAA;AAEb,EAAI,IAAA,sBAAA,CAAuB,EAAE,CAAG,EAAA;AAC9B,IAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,IAAO,OAAA,IAAA;AAAA;AAGT,EAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AACZ,EAAO,OAAA,KAAA;AACT,CAAA;AACA,SAAS,uBAAuB,EAAI,EAAA;AAClC,EAAO,OAAA,gBAAA,CAAiB,EAAI,EAAA,IAAI,CAAK,IAAA,EAAA,KAAO,MAAgB,EAAO,KAAA,EAAA,IAAgB,EAAO,KAAA,IAAA,IAAuB,EAAO,KAAA,IAAA;AAC1H;AAGA,IAAK,CAAA,oBAAA,GAAuB,SAAS,KAAO,EAAA;AAC1C,EAAA,IACE,KAAK,uBAAwB,CAAA,KAAK,CAClC,IAAA,IAAA,CAAK,+BAA+B,KAAK,CAAA,IACzC,IAAK,CAAA,yBAAA,CAA0B,KAAK,CACnC,IAAA,KAAA,CAAM,WAAW,IAAK,CAAA,oBAAA,CAAqB,KAAK,CACjD,EAAA;AACA,IAAO,OAAA,IAAA;AAAA;AAET,EAAA,IAAI,MAAM,OAAS,EAAA;AAEjB,IAAI,IAAA,KAAA,CAAM,OAAQ,EAAA,KAAM,EAAc,EAAA;AACpC,MAAA,KAAA,CAAM,MAAM,wBAAwB,CAAA;AAAA;AAEtC,IAAA,KAAA,CAAM,MAAM,gBAAgB,CAAA;AAAA;AAE9B,EAAO,OAAA,KAAA;AACT,CAAA;AACA,IAAK,CAAA,uBAAA,GAA0B,SAAS,KAAO,EAAA;AAC7C,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAI,IAAA,IAAA,CAAK,uBAAwB,CAAA,KAAK,CAAG,EAAA;AACvC,IAAA,IAAI,IAAI,KAAM,CAAA,YAAA;AACd,IAAA,IAAI,MAAM,OAAS,EAAA;AAEjB,MAAI,IAAA,CAAA,GAAI,MAAM,gBAAkB,EAAA;AAC9B,QAAA,KAAA,CAAM,gBAAmB,GAAA,CAAA;AAAA;AAE3B,MAAO,OAAA,IAAA;AAAA;AAET,IAAI,IAAA,CAAA,IAAK,MAAM,kBAAoB,EAAA;AACjC,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,EAAO,OAAA,KAAA;AACT,CAAA;AACA,IAAK,CAAA,oBAAA,GAAuB,SAAS,KAAO,EAAA;AAC1C,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAI,IAAA,IAAA,CAAK,mBAAoB,CAAA,KAAK,CAAG,EAAA;AACnC,MAAM,KAAA,CAAA,kBAAA,CAAmB,IAAK,CAAA,KAAA,CAAM,eAAe,CAAA;AACnD,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,KAAA,CAAM,MAAM,yBAAyB,CAAA;AAAA;AAEvC,EAAO,OAAA,KAAA;AACT,CAAA;AAGA,IAAK,CAAA,yBAAA,GAA4B,SAAS,KAAO,EAAA;AAC/C,EAAA,OACE,IAAK,CAAA,uBAAA,CAAwB,KAAK,CAAA,IAClC,IAAK,CAAA,wBAAA,CAAyB,KAAK,CAAA,IACnC,IAAK,CAAA,cAAA,CAAe,KAAK,CAAA,IACzB,KAAK,2BAA4B,CAAA,KAAK,CACtC,IAAA,IAAA,CAAK,qCAAsC,CAAA,KAAA,EAAO,KAAK,CAAA,IACtD,CAAC,KAAA,CAAM,OAAW,IAAA,IAAA,CAAK,mCAAoC,CAAA,KAAK,CACjE,IAAA,IAAA,CAAK,yBAAyB,KAAK,CAAA;AAEvC,CAAA;AACA,IAAK,CAAA,wBAAA,GAA2B,SAAS,KAAO,EAAA;AAC9C,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAI,IAAA,IAAA,CAAK,uBAAwB,CAAA,KAAK,CAAG,EAAA;AACvC,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,EAAO,OAAA,KAAA;AACT,CAAA;AACA,IAAK,CAAA,cAAA,GAAiB,SAAS,KAAO,EAAA;AACpC,EAAI,IAAA,KAAA,CAAM,SAAc,KAAA,EAAA,IAAgB,CAAC,cAAe,CAAA,KAAA,CAAM,SAAU,EAAC,CAAG,EAAA;AAC1E,IAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAO,OAAA,IAAA;AAAA;AAET,EAAO,OAAA,KAAA;AACT,CAAA;AAGA,IAAK,CAAA,uBAAA,GAA0B,SAAS,KAAO,EAAA;AAC7C,EAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,EAAA,IAAI,OAAO,GAAc,EAAA;AACvB,IAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAO,OAAA,IAAA;AAAA;AAET,EAAA,IAAI,OAAO,GAAc,EAAA;AACvB,IAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAO,OAAA,IAAA;AAAA;AAET,EAAA,IAAI,OAAO,GAAc,EAAA;AACvB,IAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAO,OAAA,IAAA;AAAA;AAET,EAAA,IAAI,OAAO,GAAc,EAAA;AACvB,IAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAO,OAAA,IAAA;AAAA;AAET,EAAA,IAAI,OAAO,GAAc,EAAA;AACvB,IAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAO,OAAA,IAAA;AAAA;AAET,EAAO,OAAA,KAAA;AACT,CAAA;AAGA,IAAK,CAAA,uBAAA,GAA0B,SAAS,KAAO,EAAA;AAC7C,EAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,EAAI,IAAA,eAAA,CAAgB,EAAE,CAAG,EAAA;AACvB,IAAA,KAAA,CAAM,eAAe,EAAK,GAAA,EAAA;AAC1B,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAO,OAAA,IAAA;AAAA;AAET,EAAO,OAAA,KAAA;AACT,CAAA;AACA,SAAS,gBAAgB,EAAI,EAAA;AAC3B,EAAA,OACG,MAAM,EAAgB,IAAA,EAAA,IAAM,EAC5B,IAAA,EAAA,IAAM,MAAgB,EAAM,IAAA,GAAA;AAEjC;AAGA,IAAK,CAAA,qCAAA,GAAwC,SAAS,KAAA,EAAO,MAAQ,EAAA;AACnE,EAAK,IAAA,MAAA,KAAW,QAAkB,MAAA,GAAA,KAAA;AAElC,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAI,IAAA,OAAA,GAAU,UAAU,KAAM,CAAA,OAAA;AAE9B,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAA,IAAI,IAAK,CAAA,wBAAA,CAAyB,KAAO,EAAA,CAAC,CAAG,EAAA;AAC3C,MAAA,IAAI,OAAO,KAAM,CAAA,YAAA;AACjB,MAAA,IAAI,OAAW,IAAA,IAAA,IAAQ,KAAU,IAAA,IAAA,IAAQ,KAAQ,EAAA;AAC/C,QAAA,IAAI,mBAAmB,KAAM,CAAA,GAAA;AAC7B,QAAA,IAAI,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,aAAiB,KAAM,CAAA,GAAA;AAAA,UAAI;AAAA;AAAA,SAAiB,IAAA,IAAA,CAAK,wBAAyB,CAAA,KAAA,EAAO,CAAC,CAAG,EAAA;AACjG,UAAA,IAAI,QAAQ,KAAM,CAAA,YAAA;AAClB,UAAI,IAAA,KAAA,IAAS,KAAU,IAAA,KAAA,IAAS,KAAQ,EAAA;AACtC,YAAA,KAAA,CAAM,YAAgB,GAAA,CAAA,IAAA,GAAO,KAAU,IAAA,IAAA,IAAS,QAAQ,KAAU,CAAA,GAAA,KAAA;AAClE,YAAO,OAAA,IAAA;AAAA;AACT;AAEF,QAAA,KAAA,CAAM,GAAM,GAAA,gBAAA;AACZ,QAAA,KAAA,CAAM,YAAe,GAAA,IAAA;AAAA;AAEvB,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,IACE,WACA,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KACV,IAAA,IAAA,CAAK,mBAAoB,CAAA,KAAK,KAC9B,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KACV,IAAA,cAAA,CAAe,KAAM,CAAA,YAAY,CACjC,EAAA;AACA,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,IAAI,OAAS,EAAA;AACX,MAAA,KAAA,CAAM,MAAM,wBAAwB,CAAA;AAAA;AAEtC,IAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAGd,EAAO,OAAA,KAAA;AACT,CAAA;AACA,SAAS,eAAe,EAAI,EAAA;AAC1B,EAAO,OAAA,EAAA,IAAM,KAAK,EAAM,IAAA,OAAA;AAC1B;AAGA,IAAK,CAAA,wBAAA,GAA2B,SAAS,KAAO,EAAA;AAC9C,EAAA,IAAI,MAAM,OAAS,EAAA;AACjB,IAAI,IAAA,IAAA,CAAK,yBAA0B,CAAA,KAAK,CAAG,EAAA;AACzC,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,IAAI,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAe,EAAA;AAC3B,MAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,MAAO,OAAA,IAAA;AAAA;AAET,IAAO,OAAA,KAAA;AAAA;AAGT,EAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,EAAA,IAAI,OAAO,EAAiB,KAAA,CAAC,KAAM,CAAA,OAAA,IAAW,OAAO,GAAe,CAAA,EAAA;AAClE,IAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAO,OAAA,IAAA;AAAA;AAGT,EAAO,OAAA,KAAA;AACT,CAAA;AAGA,IAAK,CAAA,uBAAA,GAA0B,SAAS,KAAO,EAAA;AAC7C,EAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,EAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,EAAI,IAAA,EAAA,IAAM,EAAgB,IAAA,EAAA,IAAM,EAAc,EAAA;AAC5C,IAAG,GAAA;AACD,MAAA,KAAA,CAAM,YAAe,GAAA,EAAA,GAAK,KAAM,CAAA,YAAA,IAAgB,EAAK,GAAA,EAAA,CAAA;AACrD,MAAA,KAAA,CAAM,OAAQ,EAAA;AAAA,cACN,EAAK,GAAA,KAAA,CAAM,OAAQ,EAAA,KAAM,MAAgB,EAAM,IAAA,EAAA;AACzD,IAAO,OAAA,IAAA;AAAA;AAET,EAAO,OAAA,KAAA;AACT,CAAA;AAIA,IAAI,WAAc,GAAA,CAAA;AAClB,IAAI,SAAY,GAAA,CAAA;AAChB,IAAI,aAAgB,GAAA,CAAA;AAGpB,IAAK,CAAA,8BAAA,GAAiC,SAAS,KAAO,EAAA;AACpD,EAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AAEvB,EAAI,IAAA,sBAAA,CAAuB,EAAE,CAAG,EAAA;AAC9B,IAAA,KAAA,CAAM,YAAe,GAAA,CAAA,CAAA;AACrB,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAO,OAAA,SAAA;AAAA;AAGT,EAAA,IAAI,MAAS,GAAA,KAAA;AACb,EACE,IAAA,KAAA,CAAM,OACN,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,OAC1B,MAAS,GAAA,EAAA,KAAO,EAAiB,KAAA,EAAA,KAAO,GAC1C,CAAA,EAAA;AACA,IAAA,KAAA,CAAM,YAAe,GAAA,CAAA,CAAA;AACrB,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAI,IAAA,MAAA;AACJ,IAAA,IACE,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,UACT,MAAS,GAAA,IAAA,CAAK,wCAAyC,CAAA,KAAK,MAC7D,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KACV,EAAA;AACA,MAAI,IAAA,MAAA,IAAU,WAAW,aAAe,EAAA;AAAE,QAAA,KAAA,CAAM,MAAM,uBAAuB,CAAA;AAAA;AAC7E,MAAO,OAAA,MAAA;AAAA;AAET,IAAA,KAAA,CAAM,MAAM,uBAAuB,CAAA;AAAA;AAGrC,EAAO,OAAA,WAAA;AACT,CAAA;AAEA,SAAS,uBAAuB,EAAI,EAAA;AAClC,EACE,OAAA,EAAA,KAAO,GACP,IAAA,EAAA,KAAO,EACP,IAAA,EAAA,KAAO,OACP,EAAO,KAAA,EAAA,IACP,EAAO,KAAA,GAAA,IACP,EAAO,KAAA,EAAA;AAEX;AAKA,IAAK,CAAA,wCAAA,GAA2C,SAAS,KAAO,EAAA;AAC9D,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAGlB,EAAA,IAAI,IAAK,CAAA,6BAAA,CAA8B,KAAK,CAAA,IAAK,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AACxE,IAAA,IAAIzC,QAAO,KAAM,CAAA,eAAA;AACjB,IAAI,IAAA,IAAA,CAAK,8BAA+B,CAAA,KAAK,CAAG,EAAA;AAC9C,MAAA,IAAIqF,SAAQ,KAAM,CAAA,eAAA;AAClB,MAAK,IAAA,CAAA,0CAAA,CAA2C,KAAOrF,EAAAA,KAAAA,EAAMqF,MAAK,CAAA;AAClE,MAAO,OAAA,SAAA;AAAA;AACT;AAEF,EAAA,KAAA,CAAM,GAAM5C,GAAAA,MAAAA;AAGZ,EAAI,IAAA,IAAA,CAAK,wCAAyC,CAAA,KAAK,CAAG,EAAA;AACxD,IAAA,IAAI,cAAc,KAAM,CAAA,eAAA;AACxB,IAAO,OAAA,IAAA,CAAK,yCAA0C,CAAA,KAAA,EAAO,WAAW,CAAA;AAAA;AAE1E,EAAO,OAAA,WAAA;AACT,CAAA;AAEA,IAAA,CAAK,0CAA6C,GAAA,SAAS,KAAOzC,EAAAA,KAAAA,EAAMqF,MAAO,EAAA;AAC7E,EAAA,IAAI,CAAC,MAAO,CAAA,KAAA,CAAM,iBAAkB,CAAA,SAAA,EAAWrF,KAAI,CACjD,EAAA;AAAE,IAAA,KAAA,CAAM,MAAM,uBAAuB,CAAA;AAAA;AACvC,EAAI,IAAA,CAAC,MAAM,iBAAkB,CAAA,SAAA,CAAUA,KAAI,CAAE,CAAA,IAAA,CAAKqF,MAAK,CACrD,EAAA;AAAE,IAAA,KAAA,CAAM,MAAM,wBAAwB,CAAA;AAAA;AAC1C,CAAA;AAEA,IAAK,CAAA,yCAAA,GAA4C,SAAS,KAAA,EAAO,WAAa,EAAA;AAC5E,EAAA,IAAI,KAAM,CAAA,iBAAA,CAAkB,MAAO,CAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AAAE,IAAO,OAAA,SAAA;AAAA;AAC/D,EAAA,IAAI,MAAM,OAAW,IAAA,KAAA,CAAM,kBAAkB,eAAgB,CAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AAAE,IAAO,OAAA,aAAA;AAAA;AACzF,EAAA,KAAA,CAAM,MAAM,uBAAuB,CAAA;AACrC,CAAA;AAIA,IAAK,CAAA,6BAAA,GAAgC,SAAS,KAAO,EAAA;AACnD,EAAA,IAAI,EAAK,GAAA,CAAA;AACT,EAAA,KAAA,CAAM,eAAkB,GAAA,EAAA;AACxB,EAAA,OAAO,8BAA+B,CAAA,EAAA,GAAK,KAAM,CAAA,OAAA,EAAS,CAAG,EAAA;AAC3D,IAAM,KAAA,CAAA,eAAA,IAAmB,kBAAkB,EAAE,CAAA;AAC7C,IAAA,KAAA,CAAM,OAAQ,EAAA;AAAA;AAEhB,EAAA,OAAO,MAAM,eAAoB,KAAA,EAAA;AACnC,CAAA;AAEA,SAAS,+BAA+B,EAAI,EAAA;AAC1C,EAAO,OAAA,eAAA,CAAgB,EAAE,CAAA,IAAK,EAAO,KAAA,EAAA;AACvC;AAIA,IAAK,CAAA,8BAAA,GAAiC,SAAS,KAAO,EAAA;AACpD,EAAA,IAAI,EAAK,GAAA,CAAA;AACT,EAAA,KAAA,CAAM,eAAkB,GAAA,EAAA;AACxB,EAAA,OAAO,+BAAgC,CAAA,EAAA,GAAK,KAAM,CAAA,OAAA,EAAS,CAAG,EAAA;AAC5D,IAAM,KAAA,CAAA,eAAA,IAAmB,kBAAkB,EAAE,CAAA;AAC7C,IAAA,KAAA,CAAM,OAAQ,EAAA;AAAA;AAEhB,EAAA,OAAO,MAAM,eAAoB,KAAA,EAAA;AACnC,CAAA;AACA,SAAS,gCAAgC,EAAI,EAAA;AAC3C,EAAA,OAAO,8BAA+B,CAAA,EAAE,CAAK,IAAA,cAAA,CAAe,EAAE,CAAA;AAChE;AAIA,IAAK,CAAA,wCAAA,GAA2C,SAAS,KAAO,EAAA;AAC9D,EAAO,OAAA,IAAA,CAAK,+BAA+B,KAAK,CAAA;AAClD,CAAA;AAGA,IAAK,CAAA,wBAAA,GAA2B,SAAS,KAAO,EAAA;AAC9C,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAA,IAAI,SAAS,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAY;AACnC,IAAI,IAAA,MAAA,GAAS,IAAK,CAAA,oBAAA,CAAqB,KAAK,CAAA;AAC5C,IAAA,IAAI,CAAC,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KACb,EAAA;AAAE,MAAA,KAAA,CAAM,MAAM,8BAA8B,CAAA;AAAA;AAC9C,IAAI,IAAA,MAAA,IAAU,WAAW,aACvB,EAAA;AAAE,MAAA,KAAA,CAAM,MAAM,6CAA6C,CAAA;AAAA;AAC7D,IAAO,OAAA,IAAA;AAAA;AAET,EAAO,OAAA,KAAA;AACT,CAAA;AAIA,IAAK,CAAA,oBAAA,GAAuB,SAAS,KAAO,EAAA;AAC1C,EAAI,IAAA,KAAA,CAAM,OAAQ,EAAA,KAAM,EAAc,EAAA;AAAE,IAAO,OAAA,SAAA;AAAA;AAC/C,EAAA,IAAI,MAAM,OAAS,EAAA;AAAE,IAAO,OAAA,IAAA,CAAK,0BAA0B,KAAK,CAAA;AAAA;AAChE,EAAA,IAAA,CAAK,2BAA2B,KAAK,CAAA;AACrC,EAAO,OAAA,SAAA;AACT,CAAA;AAIA,IAAK,CAAA,0BAAA,GAA6B,SAAS,KAAO,EAAA;AAChD,EAAO,OAAA,IAAA,CAAK,mBAAoB,CAAA,KAAK,CAAG,EAAA;AACtC,IAAA,IAAI,OAAO,KAAM,CAAA,YAAA;AACjB,IAAA,IAAI,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAiB,IAAA,IAAA,CAAK,mBAAoB,CAAA,KAAK,CAAG,EAAA;AAC9D,MAAA,IAAI,QAAQ,KAAM,CAAA,YAAA;AAClB,MAAA,IAAI,KAAM,CAAA,OAAA,KAAY,IAAS,KAAA,CAAA,CAAA,IAAM,UAAU,CAAK,CAAA,CAAA,EAAA;AAClD,QAAA,KAAA,CAAM,MAAM,yBAAyB,CAAA;AAAA;AAEvC,MAAA,IAAI,IAAS,KAAA,CAAA,CAAA,IAAM,KAAU,KAAA,CAAA,CAAA,IAAM,OAAO,KAAO,EAAA;AAC/C,QAAA,KAAA,CAAM,MAAM,uCAAuC,CAAA;AAAA;AACrD;AACF;AAEJ,CAAA;AAIA,IAAK,CAAA,mBAAA,GAAsB,SAAS,KAAO,EAAA;AACzC,EAAA,IAAI5C,SAAQ,KAAM,CAAA,GAAA;AAElB,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAI,IAAA,IAAA,CAAK,qBAAsB,CAAA,KAAK,CAAG,EAAA;AACrC,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,IAAI,MAAM,OAAS,EAAA;AAEjB,MAAI,IAAA,IAAA,GAAO,MAAM,OAAQ,EAAA;AACzB,MAAA,IAAI,IAAS,KAAA,EAAA,IAAgB,YAAa,CAAA,IAAI,CAAG,EAAA;AAC/C,QAAA,KAAA,CAAM,MAAM,sBAAsB,CAAA;AAAA;AAEpC,MAAA,KAAA,CAAM,MAAM,gBAAgB,CAAA;AAAA;AAE9B,IAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAGd,EAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,EAAA,IAAI,OAAO,EAAc,EAAA;AACvB,IAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAO,OAAA,IAAA;AAAA;AAGT,EAAO,OAAA,KAAA;AACT,CAAA;AAGA,IAAK,CAAA,qBAAA,GAAwB,SAAS,KAAO,EAAA;AAC3C,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAElB,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,IAAO,OAAA,IAAA;AAAA;AAGT,EAAI,IAAA,KAAA,CAAM,WAAW,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC5C,IAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,IAAO,OAAA,IAAA;AAAA;AAGT,EAAI,IAAA,CAAC,KAAM,CAAA,OAAA,IAAW,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC7C,IAAI,IAAA,IAAA,CAAK,4BAA6B,CAAA,KAAK,CAAG,EAAA;AAC5C,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAGd,EAAA,OACE,KAAK,8BAA+B,CAAA,KAAK,CACzC,IAAA,IAAA,CAAK,0BAA0B,KAAK,CAAA;AAExC,CAAA;AAMA,IAAK,CAAA,yBAAA,GAA4B,SAAS,KAAO,EAAA;AAC/C,EAAA,IAAI,SAAS,SAAW,EAAA,SAAA;AACxB,EAAI,IAAA,IAAA,CAAK,uBAAwB,CAAA,KAAK,CAAG,EAAA;AAAA,OAAA,IAAW,SAAY,GAAA,IAAA,CAAK,yBAA0B,CAAA,KAAK,CAAG,EAAA;AACrG,IAAA,IAAI,cAAc,aAAe,EAAA;AAAE,MAAS,MAAA,GAAA,aAAA;AAAA;AAE5C,IAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,IAAA,OAAO,KAAM,CAAA,QAAA;AAAA,MAAS,CAAC,IAAM,EAAI;AAAA;AAAA,KAAa,EAAA;AAC5C,MACE,IAAA,KAAA,CAAM,SAAc,KAAA,EAAA,KACnB,YAAY,IAAK,CAAA,yBAAA,CAA0B,KAAK,CACjD,CAAA,EAAA;AACA,QAAA,IAAI,cAAc,aAAe,EAAA;AAAE,UAAS,MAAA,GAAA,SAAA;AAAA;AAC5C,QAAA;AAAA;AAEF,MAAA,KAAA,CAAM,MAAM,sCAAsC,CAAA;AAAA;AAEpD,IAAIA,IAAAA,MAAAA,KAAU,MAAM,GAAK,EAAA;AAAE,MAAO,OAAA,MAAA;AAAA;AAElC,IAAA,OAAO,KAAM,CAAA,QAAA;AAAA,MAAS,CAAC,IAAM,EAAI;AAAA;AAAA,KAAa,EAAA;AAC5C,MAAI,IAAA,IAAA,CAAK,yBAA0B,CAAA,KAAK,CAAG,EAAA;AAAE,QAAA;AAAA;AAC7C,MAAA,KAAA,CAAM,MAAM,sCAAsC,CAAA;AAAA;AAEpD,IAAIA,IAAAA,MAAAA,KAAU,MAAM,GAAK,EAAA;AAAE,MAAO,OAAA,MAAA;AAAA;AAAO,GACpC,MAAA;AACL,IAAA,KAAA,CAAM,MAAM,sCAAsC,CAAA;AAAA;AAGpD,EAAS,WAAA;AACP,IAAI,IAAA,IAAA,CAAK,uBAAwB,CAAA,KAAK,CAAG,EAAA;AAAE,MAAA;AAAA;AAC3C,IAAY,SAAA,GAAA,IAAA,CAAK,0BAA0B,KAAK,CAAA;AAChD,IAAA,IAAI,CAAC,SAAW,EAAA;AAAE,MAAO,OAAA,MAAA;AAAA;AACzB,IAAA,IAAI,cAAc,aAAe,EAAA;AAAE,MAAS,MAAA,GAAA,aAAA;AAAA;AAAe;AAE/D,CAAA;AAGA,IAAK,CAAA,uBAAA,GAA0B,SAAS,KAAO,EAAA;AAC7C,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAI,IAAA,IAAA,CAAK,2BAA4B,CAAA,KAAK,CAAG,EAAA;AAC3C,IAAA,IAAI,OAAO,KAAM,CAAA,YAAA;AACjB,IAAA,IAAI,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAiB,IAAA,IAAA,CAAK,2BAA4B,CAAA,KAAK,CAAG,EAAA;AACtE,MAAA,IAAI,QAAQ,KAAM,CAAA,YAAA;AAClB,MAAA,IAAI,IAAS,KAAA,CAAA,CAAA,IAAM,KAAU,KAAA,CAAA,CAAA,IAAM,OAAO,KAAO,EAAA;AAC/C,QAAA,KAAA,CAAM,MAAM,uCAAuC,CAAA;AAAA;AAErD,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,EAAO,OAAA,KAAA;AACT,CAAA;AAGA,IAAK,CAAA,yBAAA,GAA4B,SAAS,KAAO,EAAA;AAC/C,EAAI,IAAA,IAAA,CAAK,2BAA4B,CAAA,KAAK,CAAG,EAAA;AAAE,IAAO,OAAA,SAAA;AAAA;AACtD,EAAA,OAAO,KAAK,gCAAiC,CAAA,KAAK,CAAK,IAAA,IAAA,CAAK,sBAAsB,KAAK,CAAA;AACzF,CAAA;AAGA,IAAK,CAAA,qBAAA,GAAwB,SAAS,KAAO,EAAA;AAC3C,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAA,IAAI,SAAS,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAY;AACnC,IAAI,IAAA,MAAA,GAAS,IAAK,CAAA,oBAAA,CAAqB,KAAK,CAAA;AAC5C,IAAA,IAAI,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAe,EAAA;AAC3B,MAAI,IAAA,MAAA,IAAU,WAAW,aAAe,EAAA;AACtC,QAAA,KAAA,CAAM,MAAM,6CAA6C,CAAA;AAAA;AAE3D,MAAO,OAAA,MAAA;AAAA;AAET,IAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAI,IAAA,QAAA,GAAW,IAAK,CAAA,8BAAA,CAA+B,KAAK,CAAA;AACxD,IAAA,IAAI,QAAU,EAAA;AACZ,MAAO,OAAA,QAAA;AAAA;AAET,IAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,EAAO,OAAA,IAAA;AACT,CAAA;AAGA,IAAK,CAAA,gCAAA,GAAmC,SAAS,KAAO,EAAA;AACtD,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAA,IAAI,KAAM,CAAA,QAAA;AAAA,IAAS,CAAC,IAAM,GAAI;AAAA;AAAA,GAAa,EAAA;AACzC,IAAA,IAAI,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAe,EAAA;AAC3B,MAAI,IAAA,MAAA,GAAS,IAAK,CAAA,qCAAA,CAAsC,KAAK,CAAA;AAC7D,MAAA,IAAI,KAAM,CAAA,GAAA;AAAA,QAAI;AAAA;AAAA,OAAe,EAAA;AAC3B,QAAO,OAAA,MAAA;AAAA;AACT,KACK,MAAA;AAEL,MAAA,KAAA,CAAM,MAAM,gBAAgB,CAAA;AAAA;AAE9B,IAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,EAAO,OAAA,IAAA;AACT,CAAA;AAGA,IAAK,CAAA,qCAAA,GAAwC,SAAS,KAAO,EAAA;AAC3D,EAAI,IAAA,MAAA,GAAS,IAAK,CAAA,kBAAA,CAAmB,KAAK,CAAA;AAC1C,EAAA,OAAO,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC9B,IAAA,IAAI,IAAK,CAAA,kBAAA,CAAmB,KAAK,CAAA,KAAM,aAAe,EAAA;AAAE,MAAS,MAAA,GAAA,aAAA;AAAA;AAAe;AAElF,EAAO,OAAA,MAAA;AACT,CAAA;AAIA,IAAK,CAAA,kBAAA,GAAqB,SAAS,KAAO,EAAA;AACxC,EAAA,IAAI,KAAQ,GAAA,CAAA;AACZ,EAAO,OAAA,IAAA,CAAK,2BAA4B,CAAA,KAAK,CAAG,EAAA;AAAE,IAAA,KAAA,EAAA;AAAA;AAClD,EAAO,OAAA,KAAA,KAAU,IAAI,SAAY,GAAA,aAAA;AACnC,CAAA;AAGA,IAAK,CAAA,2BAAA,GAA8B,SAAS,KAAO,EAAA;AACjD,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAA,IACE,KAAK,yBAA0B,CAAA,KAAK,KACpC,IAAK,CAAA,oCAAA,CAAqC,KAAK,CAC/C,EAAA;AACA,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,IAAI,KAAM,CAAA,GAAA;AAAA,MAAI;AAAA;AAAA,KAAe,EAAA;AAC3B,MAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AACZ,IAAO,OAAA,KAAA;AAAA;AAET,EAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,EAAI,IAAA,EAAA,GAAK,KAAK,EAAO,KAAA,KAAA,CAAM,WAAe,IAAA,2CAAA,CAA4C,EAAE,CAAG,EAAA;AAAE,IAAO,OAAA,KAAA;AAAA;AACpG,EAAI,IAAA,yBAAA,CAA0B,EAAE,CAAG,EAAA;AAAE,IAAO,OAAA,KAAA;AAAA;AAC5C,EAAA,KAAA,CAAM,OAAQ,EAAA;AACd,EAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,EAAO,OAAA,IAAA;AACT,CAAA;AAGA,SAAS,4CAA4C,EAAI,EAAA;AACvD,EACE,OAAA,EAAA,KAAO,MACP,EAAM,IAAA,EAAA,IAAgB,MAAM,EAC5B,IAAA,EAAA,IAAM,MAAgB,EAAM,IAAA,EAAA,IAC5B,OAAO,EACP,IAAA,EAAA,IAAM,MAAgB,EAAM,IAAA,EAAA,IAC5B,OAAO,EACP,IAAA,EAAA,KAAO,MACP,EAAO,KAAA,GAAA;AAEX;AAGA,SAAS,0BAA0B,EAAI,EAAA;AACrC,EAAA,OACE,EAAO,KAAA,EAAA,IACP,EAAO,KAAA,EAAA,IACP,OAAO,EACP,IAAA,EAAA,KAAO,EACP,IAAA,EAAA,IAAM,EAAgB,IAAA,EAAA,IAAM,EAC5B,IAAA,EAAA,IAAM,OAAgB,EAAM,IAAA,GAAA;AAEhC;AAGA,IAAK,CAAA,oCAAA,GAAuC,SAAS,KAAO,EAAA;AAC1D,EAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,EAAI,IAAA,4BAAA,CAA6B,EAAE,CAAG,EAAA;AACpC,IAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AACrB,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAO,OAAA,IAAA;AAAA;AAET,EAAO,OAAA,KAAA;AACT,CAAA;AAGA,SAAS,6BAA6B,EAAI,EAAA;AACxC,EACE,OAAA,EAAA,KAAO,MACP,EAAO,KAAA,EAAA,IACP,OAAO,EACP,IAAA,EAAA,KAAO,MACP,EAAO,KAAA,EAAA,IACP,OAAO,EACP,IAAA,EAAA,IAAM,MAAgB,EAAM,IAAA,EAAA,IAC5B,OAAO,EACP,IAAA,EAAA,KAAO,MACP,EAAO,KAAA,GAAA;AAEX;AAGA,IAAK,CAAA,4BAAA,GAA+B,SAAS,KAAO,EAAA;AAClD,EAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,EAAA,IAAI,cAAe,CAAA,EAAE,CAAK,IAAA,EAAA,KAAO,EAAc,EAAA;AAC7C,IAAA,KAAA,CAAM,eAAe,EAAK,GAAA,EAAA;AAC1B,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAO,OAAA,IAAA;AAAA;AAET,EAAO,OAAA,KAAA;AACT,CAAA;AAGA,IAAK,CAAA,2BAAA,GAA8B,SAAS,KAAO,EAAA;AACjD,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAA,IAAI,KAAM,CAAA,GAAA;AAAA,IAAI;AAAA;AAAA,GAAe,EAAA;AAC3B,IAAA,IAAI,IAAK,CAAA,wBAAA,CAAyB,KAAO,EAAA,CAAC,CAAG,EAAA;AAC3C,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,IAAI,MAAM,OAAS,EAAA;AACjB,MAAA,KAAA,CAAM,MAAM,gBAAgB,CAAA;AAAA;AAE9B,IAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AAAA;AAEd,EAAO,OAAA,KAAA;AACT,CAAA;AAGA,IAAK,CAAA,uBAAA,GAA0B,SAAS,KAAO,EAAA;AAC7C,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAA,IAAI,EAAK,GAAA,CAAA;AACT,EAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,EAAA,OAAO,cAAe,CAAA,EAAA,GAAK,KAAM,CAAA,OAAA,EAAS,CAAG,EAAA;AAC3C,IAAA,KAAA,CAAM,YAAe,GAAA,EAAA,GAAK,KAAM,CAAA,YAAA,IAAgB,EAAK,GAAA,EAAA,CAAA;AACrD,IAAA,KAAA,CAAM,OAAQ,EAAA;AAAA;AAEhB,EAAA,OAAO,MAAM,GAAQA,KAAAA,MAAAA;AACvB,CAAA;AACA,SAAS,eAAe,EAAI,EAAA;AAC1B,EAAO,OAAA,EAAA,IAAM,MAAgB,EAAM,IAAA,EAAA;AACrC;AAGA,IAAK,CAAA,mBAAA,GAAsB,SAAS,KAAO,EAAA;AACzC,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAA,IAAI,EAAK,GAAA,CAAA;AACT,EAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,EAAA,OAAO,UAAW,CAAA,EAAA,GAAK,KAAM,CAAA,OAAA,EAAS,CAAG,EAAA;AACvC,IAAA,KAAA,CAAM,YAAe,GAAA,EAAA,GAAK,KAAM,CAAA,YAAA,GAAe,SAAS,EAAE,CAAA;AAC1D,IAAA,KAAA,CAAM,OAAQ,EAAA;AAAA;AAEhB,EAAA,OAAO,MAAM,GAAQA,KAAAA,MAAAA;AACvB,CAAA;AACA,SAAS,WAAW,EAAI,EAAA;AACtB,EACG,OAAA,EAAA,IAAM,EAAgB,IAAA,EAAA,IAAM,EAC5B,IAAA,EAAA,IAAM,MAAgB,EAAM,IAAA,EAAA,IAC5B,EAAM,IAAA,EAAA,IAAgB,EAAM,IAAA,GAAA;AAEjC;AACA,SAAS,SAAS,EAAI,EAAA;AACpB,EAAI,IAAA,EAAA,IAAM,EAAgB,IAAA,EAAA,IAAM,EAAc,EAAA;AAC5C,IAAA,OAAO,MAAM,EAAK,GAAA,EAAA,CAAA;AAAA;AAEpB,EAAI,IAAA,EAAA,IAAM,EAAgB,IAAA,EAAA,IAAM,GAAc,EAAA;AAC5C,IAAA,OAAO,MAAM,EAAK,GAAA,EAAA,CAAA;AAAA;AAEpB,EAAA,OAAO,EAAK,GAAA,EAAA;AACd;AAIA,IAAK,CAAA,mCAAA,GAAsC,SAAS,KAAO,EAAA;AACzD,EAAI,IAAA,IAAA,CAAK,oBAAqB,CAAA,KAAK,CAAG,EAAA;AACpC,IAAA,IAAI,KAAK,KAAM,CAAA,YAAA;AACf,IAAI,IAAA,IAAA,CAAK,oBAAqB,CAAA,KAAK,CAAG,EAAA;AACpC,MAAA,IAAI,KAAK,KAAM,CAAA,YAAA;AACf,MAAA,IAAI,EAAM,IAAA,CAAA,IAAK,IAAK,CAAA,oBAAA,CAAqB,KAAK,CAAG,EAAA;AAC/C,QAAA,KAAA,CAAM,YAAe,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,GAAK,IAAI,KAAM,CAAA,YAAA;AAAA,OACzC,MAAA;AACL,QAAM,KAAA,CAAA,YAAA,GAAe,KAAK,CAAI,GAAA,EAAA;AAAA;AAChC,KACK,MAAA;AACL,MAAA,KAAA,CAAM,YAAe,GAAA,EAAA;AAAA;AAEvB,IAAO,OAAA,IAAA;AAAA;AAET,EAAO,OAAA,KAAA;AACT,CAAA;AAGA,IAAK,CAAA,oBAAA,GAAuB,SAAS,KAAO,EAAA;AAC1C,EAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,EAAI,IAAA,YAAA,CAAa,EAAE,CAAG,EAAA;AACpB,IAAA,KAAA,CAAM,eAAe,EAAK,GAAA,EAAA;AAC1B,IAAA,KAAA,CAAM,OAAQ,EAAA;AACd,IAAO,OAAA,IAAA;AAAA;AAET,EAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,EAAO,OAAA,KAAA;AACT,CAAA;AACA,SAAS,aAAa,EAAI,EAAA;AACxB,EAAO,OAAA,EAAA,IAAM,MAAgB,EAAM,IAAA,EAAA;AACrC;AAKA,IAAK,CAAA,wBAAA,GAA2B,SAAS,KAAA,EAAO,MAAQ,EAAA;AACtD,EAAA,IAAIA,SAAQ,KAAM,CAAA,GAAA;AAClB,EAAA,KAAA,CAAM,YAAe,GAAA,CAAA;AACrB,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,EAAQ,EAAE,CAAG,EAAA;AAC/B,IAAI,IAAA,EAAA,GAAK,MAAM,OAAQ,EAAA;AACvB,IAAI,IAAA,CAAC,UAAW,CAAA,EAAE,CAAG,EAAA;AACnB,MAAA,KAAA,CAAM,GAAMA,GAAAA,MAAAA;AACZ,MAAO,OAAA,KAAA;AAAA;AAET,IAAA,KAAA,CAAM,YAAe,GAAA,EAAA,GAAK,KAAM,CAAA,YAAA,GAAe,SAAS,EAAE,CAAA;AAC1D,IAAA,KAAA,CAAM,OAAQ,EAAA;AAAA;AAEhB,EAAO,OAAA,IAAA;AACT,CAAA;AAMA,IAAI,KAAA,GAAQ,SAASoH,MAAAA,CAAM,CAAG,EAAA;AAC5B,EAAA,IAAA,CAAK,OAAO,CAAE,CAAA,IAAA;AACd,EAAA,IAAA,CAAK,QAAQ,CAAE,CAAA,KAAA;AACf,EAAA,IAAA,CAAK,QAAQ,CAAE,CAAA,KAAA;AACf,EAAA,IAAA,CAAK,MAAM,CAAE,CAAA,GAAA;AACb,EAAI,IAAA,CAAA,CAAE,QAAQ,SACZ,EAAA;AAAE,IAAA,IAAA,CAAK,MAAM,IAAI,cAAA,CAAe,GAAG,CAAE,CAAA,QAAA,EAAU,EAAE,MAAM,CAAA;AAAA;AACzD,EAAI,IAAA,CAAA,CAAE,QAAQ,MACZ,EAAA;AAAE,IAAA,IAAA,CAAK,KAAQ,GAAA,CAAC,CAAE,CAAA,KAAA,EAAO,EAAE,GAAG,CAAA;AAAA;AAClC,CAAA;AAIA,IAAI,KAAK,MAAO,CAAA,SAAA;AAIhB,EAAG,CAAA,IAAA,GAAO,SAAS,6BAA+B,EAAA;AAChD,EAAA,IAAI,CAAC,6BAAiC,IAAA,IAAA,CAAK,IAAK,CAAA,OAAA,IAAW,KAAK,WAC9D,EAAA;AAAE,IAAA,IAAA,CAAK,iBAAiB,IAAK,CAAA,KAAA,EAAO,6BAAgC,GAAA,IAAA,CAAK,KAAK,OAAO,CAAA;AAAA;AACvF,EAAI,IAAA,IAAA,CAAK,QAAQ,OACf,EAAA;AAAE,IAAA,IAAA,CAAK,OAAQ,CAAA,OAAA,CAAQ,IAAI,KAAA,CAAM,IAAI,CAAC,CAAA;AAAA;AAExC,EAAA,IAAA,CAAK,aAAa,IAAK,CAAA,GAAA;AACvB,EAAA,IAAA,CAAK,eAAe,IAAK,CAAA,KAAA;AACzB,EAAA,IAAA,CAAK,gBAAgB,IAAK,CAAA,MAAA;AAC1B,EAAA,IAAA,CAAK,kBAAkB,IAAK,CAAA,QAAA;AAC5B,EAAA,IAAA,CAAK,SAAU,EAAA;AACjB,CAAA;AAEA,EAAA,CAAG,WAAW,WAAW;AACvB,EAAA,IAAA,CAAK,IAAK,EAAA;AACV,EAAO,OAAA,IAAI,MAAM,IAAI,CAAA;AACvB,CAAA;AAGA,IAAI,OAAO,WAAW,WACpB,EAAA;AAAE,EAAG,EAAA,CAAA,MAAA,CAAO,QAAQ,CAAA,GAAI,WAAW;AACjC,IAAA,IAAI,QAAW,GAAA,IAAA;AAEf,IAAO,OAAA;AAAA,MACL,MAAM,WAAY;AAChB,QAAI,IAAA,KAAA,GAAQ,SAAS,QAAS,EAAA;AAC9B,QAAO,OAAA;AAAA,UACL,IAAA,EAAM,KAAM,CAAA,IAAA,KAAS,OAAQ,CAAA,GAAA;AAAA,UAC7B,KAAO,EAAA;AAAA,SACT;AAAA;AACF,KACF;AAAA,GACF;AAAG;AAQL,EAAA,CAAG,YAAY,WAAW;AACxB,EAAI,IAAA,UAAA,GAAa,KAAK,UAAW,EAAA;AACjC,EAAA,IAAI,CAAC,UAAA,IAAc,CAAC,UAAA,CAAW,aAAe,EAAA;AAAE,IAAA,IAAA,CAAK,SAAU,EAAA;AAAA;AAE/D,EAAA,IAAA,CAAK,QAAQ,IAAK,CAAA,GAAA;AAClB,EAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAAE,IAAK,IAAA,CAAA,QAAA,GAAW,KAAK,WAAY,EAAA;AAAA;AAC/D,EAAA,IAAI,IAAK,CAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,MAAQ,EAAA;AAAE,IAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,GAAG,CAAA;AAAA;AAExE,EAAA,IAAI,WAAW,QAAU,EAAA;AAAE,IAAO,OAAA,UAAA,CAAW,SAAS,IAAI,CAAA;AAAA,GACrD,MAAA;AAAE,IAAK,IAAA,CAAA,SAAA,CAAU,IAAK,CAAA,iBAAA,EAAmB,CAAA;AAAA;AAChD,CAAA;AAEA,EAAG,CAAA,SAAA,GAAY,SAAS/I,KAAM,EAAA;AAG5B,EAAI,IAAA,iBAAA,CAAkBA,OAAM,IAAK,CAAA,OAAA,CAAQ,eAAe,CAAC,CAAA,IAAKA,UAAS,EACrE,EAAA;AAAE,IAAA,OAAO,KAAK,QAAS,EAAA;AAAA;AAEzB,EAAO,OAAA,IAAA,CAAK,iBAAiBA,KAAI,CAAA;AACnC,CAAA;AAEA,EAAA,CAAG,oBAAoB,WAAW;AAChC,EAAA,IAAIA,KAAO,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AACzC,EAAIA,IAAAA,KAAAA,IAAQ,KAAUA,IAAAA,KAAAA,IAAQ,KAAQ,EAAA;AAAE,IAAOA,OAAAA,KAAAA;AAAA;AAC/C,EAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,EAAA,OAAO,QAAQ,KAAU,IAAA,IAAA,IAAQ,QAASA,KAAQA,GAAAA,CAAAA,KAAAA,IAAQ,MAAM,IAAO,GAAA,QAAA;AACzE,CAAA;AAEA,EAAA,CAAG,mBAAmB,WAAW;AAC/B,EAAA,IAAI,QAAW,GAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,IAAa,KAAK,WAAY,EAAA;AAC1D,EAAI2B,IAAAA,MAAAA,GAAQ,IAAK,CAAA,GAAA,EAAK,GAAM,GAAA,IAAA,CAAK,MAAM,OAAQ,CAAA,IAAA,EAAM,IAAK,CAAA,GAAA,IAAO,CAAC,CAAA;AAClE,EAAA,IAAI,QAAQ,CAAI,CAAA,EAAA;AAAE,IAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,GAAM,GAAA,CAAA,EAAG,sBAAsB,CAAA;AAAA;AACjE,EAAA,IAAA,CAAK,MAAM,GAAM,GAAA,CAAA;AACjB,EAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAC1B,IAAA,KAAA,IAAS,SAAa,GAAA,KAAA,CAAA,EAAS,GAAMA,GAAAA,MAAAA,EAAAA,CAAQ,SAAY,GAAA,aAAA,CAAc,IAAK,CAAA,KAAA,EAAO,GAAK,EAAA,IAAA,CAAK,GAAG,CAAA,IAAK,CAAK,CAAA,IAAA;AACxG,MAAA,EAAE,IAAK,CAAA,OAAA;AACP,MAAA,GAAA,GAAM,KAAK,SAAY,GAAA,SAAA;AAAA;AACzB;AAEF,EAAI,IAAA,IAAA,CAAK,QAAQ,SACf,EAAA;AAAE,IAAA,IAAA,CAAK,OAAQ,CAAA,SAAA;AAAA,MAAU,IAAA;AAAA,MAAM,IAAK,CAAA,KAAA,CAAM,KAAMA,CAAAA,MAAAA,GAAQ,GAAG,GAAG,CAAA;AAAA,MAAGA,MAAAA;AAAA,MAAO,IAAK,CAAA,GAAA;AAAA,MACtD,QAAA;AAAA,MAAU,KAAK,WAAY;AAAA,KAAC;AAAA;AACvD,CAAA;AAEA,EAAG,CAAA,eAAA,GAAkB,SAAS,SAAW,EAAA;AACvC,EAAA,IAAIA,SAAQ,IAAK,CAAA,GAAA;AACjB,EAAA,IAAI,QAAW,GAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,IAAa,KAAK,WAAY,EAAA;AAC1D,EAAA,IAAI,KAAK,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,OAAO,SAAS,CAAA;AACpD,EAAO,OAAA,IAAA,CAAK,MAAM,IAAK,CAAA,KAAA,CAAM,UAAU,CAAC,SAAA,CAAU,EAAE,CAAG,EAAA;AACrD,IAAA,EAAA,GAAK,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,EAAE,KAAK,GAAG,CAAA;AAAA;AAEvC,EAAI,IAAA,IAAA,CAAK,QAAQ,SACf,EAAA;AAAE,IAAA,IAAA,CAAK,OAAQ,CAAA,SAAA;AAAA,MAAU,KAAA;AAAA,MAAO,KAAK,KAAM,CAAA,KAAA,CAAMA,MAAQ,GAAA,SAAA,EAAW,KAAK,GAAG,CAAA;AAAA,MAAGA,MAAAA;AAAA,MAAO,IAAK,CAAA,GAAA;AAAA,MACpE,QAAA;AAAA,MAAU,KAAK,WAAY;AAAA,KAAC;AAAA;AACvD,CAAA;AAKA,EAAA,CAAG,YAAY,WAAW;AACxB,EAAA,IAAA,EAAa,OAAA,IAAA,CAAK,GAAM,GAAA,IAAA,CAAK,MAAM,MAAQ,EAAA;AACzC,IAAA,IAAI,EAAK,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AACvC,IAAA,QAAQ,EAAI;AAAA,MACZ,KAAK,EAAA;AAAA,MAAI,KAAK,GAAA;AACZ,QAAA,EAAE,IAAK,CAAA,GAAA;AACP,QAAA;AAAA,MACF,KAAK,EAAA;AACH,QAAA,IAAI,KAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAM,GAAA,CAAC,MAAM,EAAI,EAAA;AAC9C,UAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AACT,MACF,KAAK,EAAA;AAAA,MAAI,KAAK,IAAA;AAAA,MAAM,KAAK,IAAA;AACvB,QAAA,EAAE,IAAK,CAAA,GAAA;AACP,QAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAC1B,UAAA,EAAE,IAAK,CAAA,OAAA;AACP,UAAA,IAAA,CAAK,YAAY,IAAK,CAAA,GAAA;AAAA;AAExB,QAAA;AAAA,MACF,KAAK,EAAA;AACH,QAAA,QAAQ,KAAK,KAAM,CAAA,UAAA,CAAW,IAAK,CAAA,GAAA,GAAM,CAAC,CAAG;AAAA,UAC7C,KAAK,EAAA;AACH,YAAA,IAAA,CAAK,gBAAiB,EAAA;AACtB,YAAA;AAAA,UACF,KAAK,EAAA;AACH,YAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA;AACtB,YAAA;AAAA,UACF;AACE,YAAM,MAAA,IAAA;AAAA;AAER,QAAA;AAAA,MACF;AACE,QAAA,IAAI,EAAK,GAAA,CAAA,IAAK,EAAK,GAAA,EAAA,IAAM,EAAM,IAAA,IAAA,IAAQ,kBAAmB,CAAA,IAAA,CAAK,MAAO,CAAA,YAAA,CAAa,EAAE,CAAC,CAAG,EAAA;AACvF,UAAA,EAAE,IAAK,CAAA,GAAA;AAAA,SACF,MAAA;AACL,UAAM,MAAA,IAAA;AAAA;AACR;AACF;AAEJ,CAAA;AAOA,EAAG,CAAA,WAAA,GAAc,SAAS,IAAA,EAAM,GAAK,EAAA;AACnC,EAAA,IAAA,CAAK,MAAM,IAAK,CAAA,GAAA;AAChB,EAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAAE,IAAK,IAAA,CAAA,MAAA,GAAS,KAAK,WAAY,EAAA;AAAA;AAC7D,EAAA,IAAI,WAAW,IAAK,CAAA,IAAA;AACpB,EAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AACZ,EAAA,IAAA,CAAK,KAAQ,GAAA,GAAA;AAEb,EAAA,IAAA,CAAK,cAAc,QAAQ,CAAA;AAC7B,CAAA;AAWA,EAAA,CAAG,gBAAgB,WAAW;AAC5B,EAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,EAAI,IAAA,IAAA,IAAQ,EAAM,IAAA,IAAA,IAAQ,EAAI,EAAA;AAAE,IAAO,OAAA,IAAA,CAAK,WAAW,IAAI,CAAA;AAAA;AAC3D,EAAA,IAAI,QAAQ,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC9C,EAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,IAAe,KAAK,IAAS,KAAA,EAAA,IAAM,UAAU,EAAI,EAAA;AAChE,IAAA,IAAA,CAAK,GAAO,IAAA,CAAA;AACZ,IAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,QAAQ,CAAA;AAAA,GACnC,MAAA;AACL,IAAA,EAAE,IAAK,CAAA,GAAA;AACP,IAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,GAAG,CAAA;AAAA;AAEvC,CAAA;AAEA,EAAA,CAAG,kBAAkB,WAAW;AAC9B,EAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,EAAA,IAAI,KAAK,WAAa,EAAA;AAAE,IAAA,EAAE,IAAK,CAAA,GAAA;AAAK,IAAA,OAAO,KAAK,UAAW,EAAA;AAAA;AAC3D,EAAA,IAAI,SAAS,EAAI,EAAA;AAAE,IAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA;AACzD,EAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,KAAA,EAAO,CAAC,CAAA;AACvC,CAAA;AAEA,EAAG,CAAA,yBAAA,GAA4B,SAAS3B,KAAM,EAAA;AAC5C,EAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,EAAA,IAAI,IAAO,GAAA,CAAA;AACX,EAAA,IAAI,SAAYA,GAAAA,KAAAA,KAAS,EAAK,GAAA,OAAA,CAAQ,OAAO,OAAQ,CAAA,MAAA;AAGrD,EAAA,IAAI,KAAK,OAAQ,CAAA,WAAA,IAAe,KAAKA,KAAS,KAAA,EAAA,IAAM,SAAS,EAAI,EAAA;AAC/D,IAAE,EAAA,IAAA;AACF,IAAA,SAAA,GAAY,OAAQ,CAAA,QAAA;AACpB,IAAA,IAAA,GAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAAA;AAG3C,EAAA,IAAI,SAAS,EAAI,EAAA;AAAE,IAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,MAAA,EAAQ,OAAO,CAAC,CAAA;AAAA;AAChE,EAAO,OAAA,IAAA,CAAK,QAAS,CAAA,SAAA,EAAW,IAAI,CAAA;AACtC,CAAA;AAEA,EAAG,CAAA,kBAAA,GAAqB,SAASA,KAAM,EAAA;AACrC,EAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,EAAA,IAAI,SAASA,KAAM,EAAA;AACjB,IAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAAI,EAAA;AAClC,MAAA,IAAI,QAAQ,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC9C,MAAA,IAAI,UAAU,EAAI,EAAA;AAAE,QAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA;AAAE;AAE9D,IAAO,OAAA,IAAA,CAAK,SAASA,KAAS,KAAA,GAAA,GAAM,QAAQ,SAAY,GAAA,OAAA,CAAQ,YAAY,CAAC,CAAA;AAAA;AAE/E,EAAA,IAAI,SAAS,EAAI,EAAA;AAAE,IAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA;AACzD,EAAO,OAAA,IAAA,CAAK,SAASA,KAAS,KAAA,GAAA,GAAM,QAAQ,SAAY,GAAA,OAAA,CAAQ,YAAY,CAAC,CAAA;AAC/E,CAAA;AAEA,EAAA,CAAG,kBAAkB,WAAW;AAC9B,EAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,EAAA,IAAI,SAAS,EAAI,EAAA;AAAE,IAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA;AACzD,EAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,UAAA,EAAY,CAAC,CAAA;AAC5C,CAAA;AAEA,EAAG,CAAA,kBAAA,GAAqB,SAASA,KAAM,EAAA;AACrC,EAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,EAAA,IAAI,SAASA,KAAM,EAAA;AACjB,IAAI,IAAA,IAAA,KAAS,EAAM,IAAA,CAAC,IAAK,CAAA,QAAA,IAAY,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,GAAM,GAAA,CAAC,CAAM,KAAA,EAAA,KACxE,KAAK,UAAe,KAAA,CAAA,IAAK,SAAU,CAAA,IAAA,CAAK,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,IAAA,CAAK,UAAY,EAAA,IAAA,CAAK,GAAG,CAAC,CAAI,CAAA,EAAA;AAE1F,MAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA;AACtB,MAAA,IAAA,CAAK,SAAU,EAAA;AACf,MAAA,OAAO,KAAK,SAAU,EAAA;AAAA;AAExB,IAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA;AAExC,EAAA,IAAI,SAAS,EAAI,EAAA;AAAE,IAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA;AACzD,EAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,OAAA,EAAS,CAAC,CAAA;AACzC,CAAA;AAEA,EAAG,CAAA,eAAA,GAAkB,SAASA,KAAM,EAAA;AAClC,EAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,EAAA,IAAI,IAAO,GAAA,CAAA;AACX,EAAA,IAAI,SAASA,KAAM,EAAA;AACjB,IAAOA,IAAAA,GAAAA,KAAAA,KAAS,EAAM,IAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAM,GAAA,CAAC,CAAM,KAAA,EAAA,GAAK,CAAI,GAAA,CAAA;AACvE,IAAA,IAAI,KAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAM,GAAA,IAAI,MAAM,EAAI,EAAA;AAAE,MAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,MAAA,EAAQ,OAAO,CAAC,CAAA;AAAA;AAClG,IAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,QAAA,EAAU,IAAI,CAAA;AAAA;AAE7C,EAAI,IAAA,IAAA,KAAS,MAAMA,KAAS,KAAA,EAAA,IAAM,CAAC,IAAK,CAAA,QAAA,IAAY,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA,KAAM,MACxF,IAAK,CAAA,KAAA,CAAM,WAAW,IAAK,CAAA,GAAA,GAAM,CAAC,CAAA,KAAM,EAAI,EAAA;AAE9C,IAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA;AACtB,IAAA,IAAA,CAAK,SAAU,EAAA;AACf,IAAA,OAAO,KAAK,SAAU,EAAA;AAAA;AAExB,EAAA,IAAI,SAAS,EAAI,EAAA;AAAE,IAAO,IAAA,GAAA,CAAA;AAAA;AAC1B,EAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,UAAA,EAAY,IAAI,CAAA;AAC/C,CAAA;AAEA,EAAG,CAAA,iBAAA,GAAoB,SAASA,KAAM,EAAA;AACpC,EAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,EAAA,IAAI,SAAS,EAAI,EAAA;AAAE,IAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,QAAA,EAAU,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,GAAM,GAAA,CAAC,CAAM,KAAA,EAAA,GAAK,IAAI,CAAC,CAAA;AAAA;AAC5G,EAAA,IAAIA,UAAS,EAAM,IAAA,IAAA,KAAS,MAAM,IAAK,CAAA,OAAA,CAAQ,eAAe,CAAG,EAAA;AAC/D,IAAA,IAAA,CAAK,GAAO,IAAA,CAAA;AACZ,IAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,KAAK,CAAA;AAAA;AAEvC,EAAO,OAAA,IAAA,CAAK,SAASA,KAAS,KAAA,EAAA,GAAK,QAAQ,EAAK,GAAA,OAAA,CAAQ,QAAQ,CAAC,CAAA;AACnE,CAAA;AAEA,EAAA,CAAG,qBAAqB,WAAW;AACjC,EAAI,IAAA,WAAA,GAAc,KAAK,OAAQ,CAAA,WAAA;AAC/B,EAAA,IAAI,eAAe,EAAI,EAAA;AACrB,IAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,IAAA,IAAI,SAAS,EAAI,EAAA;AACf,MAAA,IAAI,QAAQ,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC9C,MAAI,IAAA,KAAA,GAAQ,EAAM,IAAA,KAAA,GAAQ,EAAI,EAAA;AAAE,QAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,WAAA,EAAa,CAAC,CAAA;AAAA;AAAE;AAE/E,IAAA,IAAI,SAAS,EAAI,EAAA;AACf,MAAA,IAAI,eAAe,EAAI,EAAA;AACrB,QAAA,IAAI,UAAU,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAChD,QAAA,IAAI,YAAY,EAAI,EAAA;AAAE,UAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA;AAAE;AAEhE,MAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,QAAA,EAAU,CAAC,CAAA;AAAA;AAC1C;AAEF,EAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,QAAA,EAAU,CAAC,CAAA;AAC1C,CAAA;AAEA,EAAA,CAAG,uBAAuB,WAAW;AACnC,EAAI,IAAA,WAAA,GAAc,KAAK,OAAQ,CAAA,WAAA;AAC/B,EAAA,IAAIA,KAAO,GAAA,EAAA;AACX,EAAA,IAAI,eAAe,EAAI,EAAA;AACrB,IAAA,EAAE,IAAK,CAAA,GAAA;AACP,IAAAA,KAAAA,GAAO,KAAK,iBAAkB,EAAA;AAC9B,IAAA,IAAI,iBAAkBA,CAAAA,KAAAA,EAAM,IAAI,CAAA,IAAKA,UAAS,EAAc,EAAA;AAC1D,MAAA,OAAO,KAAK,WAAY,CAAA,OAAA,CAAQ,SAAW,EAAA,IAAA,CAAK,WAAW,CAAA;AAAA;AAC7D;AAGF,EAAA,IAAA,CAAK,MAAM,IAAK,CAAA,GAAA,EAAK,2BAA2B,iBAAkBA,CAAAA,KAAI,IAAI,GAAG,CAAA;AAC/E,CAAA;AAEA,EAAG,CAAA,gBAAA,GAAmB,SAASA,KAAM,EAAA;AACnC,EAAA,QAAQA,KAAM;AAAA;AAAA;AAAA,IAGd,KAAK,EAAA;AACH,MAAA,OAAO,KAAK,aAAc,EAAA;AAAA;AAAA,IAG5B,KAAK,EAAA;AAAI,MAAA,EAAE,IAAK,CAAA,GAAA;AAAK,MAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,MAAM,CAAA;AAAA,IAC3D,KAAK,EAAA;AAAI,MAAA,EAAE,IAAK,CAAA,GAAA;AAAK,MAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,MAAM,CAAA;AAAA,IAC3D,KAAK,EAAA;AAAI,MAAA,EAAE,IAAK,CAAA,GAAA;AAAK,MAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,IAAI,CAAA;AAAA,IACzD,KAAK,EAAA;AAAI,MAAA,EAAE,IAAK,CAAA,GAAA;AAAK,MAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,KAAK,CAAA;AAAA,IAC1D,KAAK,EAAA;AAAI,MAAA,EAAE,IAAK,CAAA,GAAA;AAAK,MAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,QAAQ,CAAA;AAAA,IAC7D,KAAK,EAAA;AAAI,MAAA,EAAE,IAAK,CAAA,GAAA;AAAK,MAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,QAAQ,CAAA;AAAA,IAC7D,KAAK,GAAA;AAAK,MAAA,EAAE,IAAK,CAAA,GAAA;AAAK,MAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,MAAM,CAAA;AAAA,IAC5D,KAAK,GAAA;AAAK,MAAA,EAAE,IAAK,CAAA,GAAA;AAAK,MAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,MAAM,CAAA;AAAA,IAC5D,KAAK,EAAA;AAAI,MAAA,EAAE,IAAK,CAAA,GAAA;AAAK,MAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,KAAK,CAAA;AAAA,IAE1D,KAAK,EAAA;AACH,MAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,GAAc,CAAG,EAAA;AAAE,QAAA;AAAA;AACpC,MAAA,EAAE,IAAK,CAAA,GAAA;AACP,MAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,SAAS,CAAA;AAAA,IAE3C,KAAK,EAAA;AACH,MAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7C,MAAI,IAAA,IAAA,KAAS,GAAO,IAAA,IAAA,KAAS,EAAI,EAAA;AAAE,QAAO,OAAA,IAAA,CAAK,gBAAgB,EAAE,CAAA;AAAA;AACjE,MAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,CAAG,EAAA;AACjC,QAAI,IAAA,IAAA,KAAS,GAAO,IAAA,IAAA,KAAS,EAAI,EAAA;AAAE,UAAO,OAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA;AAAA;AAChE,QAAI,IAAA,IAAA,KAAS,EAAM,IAAA,IAAA,KAAS,EAAI,EAAA;AAAE,UAAO,OAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA;AAAA;AAAE;AACnE;AAAA;AAAA,IAIF,KAAK,EAAA;AAAA,IAAI,KAAK,EAAA;AAAA,IAAI,KAAK,EAAA;AAAA,IAAI,KAAK,EAAA;AAAA,IAAI,KAAK,EAAA;AAAA,IAAI,KAAK,EAAA;AAAA,IAAI,KAAK,EAAA;AAAA,IAAI,KAAK,EAAA;AAAA,IAAI,KAAK,EAAA;AAC3E,MAAO,OAAA,IAAA,CAAK,WAAW,KAAK,CAAA;AAAA;AAAA,IAG9B,KAAK,EAAA;AAAA,IAAI,KAAK,EAAA;AACZ,MAAO,OAAA,IAAA,CAAK,WAAWA,KAAI,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAM7B,KAAK,EAAA;AACH,MAAA,OAAO,KAAK,eAAgB,EAAA;AAAA,IAE9B,KAAK,EAAA;AAAA,IAAI,KAAK,EAAA;AACZ,MAAO,OAAA,IAAA,CAAK,0BAA0BA,KAAI,CAAA;AAAA,IAE5C,KAAK,GAAA;AAAA,IAAK,KAAK,EAAA;AACb,MAAO,OAAA,IAAA,CAAK,mBAAmBA,KAAI,CAAA;AAAA,IAErC,KAAK,EAAA;AACH,MAAA,OAAO,KAAK,eAAgB,EAAA;AAAA,IAE9B,KAAK,EAAA;AAAA,IAAI,KAAK,EAAA;AACZ,MAAO,OAAA,IAAA,CAAK,mBAAmBA,KAAI,CAAA;AAAA,IAErC,KAAK,EAAA;AAAA,IAAI,KAAK,EAAA;AACZ,MAAO,OAAA,IAAA,CAAK,gBAAgBA,KAAI,CAAA;AAAA,IAElC,KAAK,EAAA;AAAA,IAAI,KAAK,EAAA;AACZ,MAAO,OAAA,IAAA,CAAK,kBAAkBA,KAAI,CAAA;AAAA,IAEpC,KAAK,EAAA;AACH,MAAA,OAAO,KAAK,kBAAmB,EAAA;AAAA,IAEjC,KAAK,GAAA;AACH,MAAA,OAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA,IAExC,KAAK,EAAA;AACH,MAAA,OAAO,KAAK,oBAAqB,EAAA;AAAA;AAGnC,EAAA,IAAA,CAAK,MAAM,IAAK,CAAA,GAAA,EAAK,2BAA2B,iBAAkBA,CAAAA,KAAI,IAAI,GAAG,CAAA;AAC/E,CAAA;AAEA,EAAG,CAAA,QAAA,GAAW,SAAS,IAAA,EAAM,IAAM,EAAA;AACjC,EAAI,IAAA,GAAA,GAAM,KAAK,KAAM,CAAA,KAAA,CAAM,KAAK,GAAK,EAAA,IAAA,CAAK,MAAM,IAAI,CAAA;AACpD,EAAA,IAAA,CAAK,GAAO,IAAA,IAAA;AACZ,EAAO,OAAA,IAAA,CAAK,WAAY,CAAA,IAAA,EAAM,GAAG,CAAA;AACnC,CAAA;AAEA,EAAA,CAAG,aAAa,WAAW;AACzB,EAAI,IAAA,OAAA,EAAS,OAAS2B,EAAAA,MAAAA,GAAQ,IAAK,CAAA,GAAA;AACnC,EAAS,WAAA;AACP,IAAA,IAAI,IAAK,CAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,MAAQ,EAAA;AAAE,MAAK,IAAA,CAAA,KAAA,CAAMA,QAAO,iCAAiC,CAAA;AAAA;AACxF,IAAA,IAAI,EAAK,GAAA,IAAA,CAAK,KAAM,CAAA,MAAA,CAAO,KAAK,GAAG,CAAA;AACnC,IAAI,IAAA,SAAA,CAAU,IAAK,CAAA,EAAE,CAAG,EAAA;AAAE,MAAK,IAAA,CAAA,KAAA,CAAMA,QAAO,iCAAiC,CAAA;AAAA;AAC7E,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAA,IAAI,OAAO,GAAK,EAAA;AAAE,QAAU,OAAA,GAAA,IAAA;AAAA,OAAM,MAAA,IACzB,EAAO,KAAA,GAAA,IAAO,OAAS,EAAA;AAAE,QAAU,OAAA,GAAA,KAAA;AAAA,OACnC,MAAA,IAAA,EAAA,KAAO,GAAO,IAAA,CAAC,OAAS,EAAA;AAAE,QAAA;AAAA;AACnC,MAAA,OAAA,GAAU,EAAO,KAAA,IAAA;AAAA,KACZ,MAAA;AAAE,MAAU,OAAA,GAAA,KAAA;AAAA;AACnB,IAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AAET,EAAA,IAAI,UAAU,IAAK,CAAA,KAAA,CAAM,KAAMA,CAAAA,MAAAA,EAAO,KAAK,GAAG,CAAA;AAC9C,EAAA,EAAE,IAAK,CAAA,GAAA;AACP,EAAA,IAAI,aAAa,IAAK,CAAA,GAAA;AACtB,EAAI,IAAA,KAAA,GAAQ,KAAK,SAAU,EAAA;AAC3B,EAAA,IAAI,KAAK,WAAa,EAAA;AAAE,IAAA,IAAA,CAAK,WAAW,UAAU,CAAA;AAAA;AAGlD,EAAA,IAAI,QAAQ,IAAK,CAAA,WAAA,KAAgB,KAAK,WAAc,GAAA,IAAI,sBAAsB,IAAI,CAAA,CAAA;AAClF,EAAM,KAAA,CAAA,KAAA,CAAMA,MAAO,EAAA,OAAA,EAAS,KAAK,CAAA;AACjC,EAAA,IAAA,CAAK,oBAAoB,KAAK,CAAA;AAC9B,EAAA,IAAA,CAAK,sBAAsB,KAAK,CAAA;AAGhC,EAAA,IAAI4C,MAAQ,GAAA,IAAA;AACZ,EAAI,IAAA;AACF,IAAAA,MAAQ,GAAA,IAAI,MAAO,CAAA,OAAA,EAAS,KAAK,CAAA;AAAA,WAC1B,CAAG,EAAA;AAAA;AAKZ,EAAO,OAAA,IAAA,CAAK,YAAY,OAAQ,CAAA,MAAA,EAAQ,EAAC,OAAkB,EAAA,KAAA,EAAc,KAAOA,EAAAA,MAAAA,EAAM,CAAA;AACxF,CAAA;AAMA,EAAA,CAAG,OAAU,GAAA,SAAS,KAAO,EAAA,GAAA,EAAK,8BAAgC,EAAA;AAEhE,EAAA,IAAI,eAAkB,GAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,MAAM,GAAQ,KAAA,KAAA,CAAA;AAKhE,EAAA,IAAI,8BAA8B,8BAAkC,IAAA,IAAA,CAAK,MAAM,UAAW,CAAA,IAAA,CAAK,GAAG,CAAM,KAAA,EAAA;AAExG,EAAA,IAAI5C,MAAQ,GAAA,IAAA,CAAK,GAAK,EAAA,KAAA,GAAQ,GAAG,QAAW,GAAA,CAAA;AAC5C,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,GAAA,IAAO,IAAO,GAAA,QAAA,GAAW,GAAK,EAAA,CAAA,GAAI,CAAG,EAAA,EAAE,CAAG,EAAA,EAAE,KAAK,GAAK,EAAA;AACxE,IAAA,IAAI3B,QAAO,IAAK,CAAA,KAAA,CAAM,WAAW,IAAK,CAAA,GAAG,GAAG,GAAO,GAAA,KAAA,CAAA;AAEnD,IAAI,IAAA,eAAA,IAAmBA,UAAS,EAAI,EAAA;AAClC,MAAA,IAAI,2BAA6B,EAAA;AAAE,QAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,GAAA,EAAK,mEAAmE,CAAA;AAAA;AACtI,MAAA,IAAI,aAAa,EAAI,EAAA;AAAE,QAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,GAAA,EAAK,kDAAkD,CAAA;AAAA;AACzG,MAAA,IAAI,MAAM,CAAG,EAAA;AAAE,QAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,GAAA,EAAK,yDAAyD,CAAA;AAAA;AACxG,MAAWA,QAAAA,GAAAA,KAAAA;AACX,MAAA;AAAA;AAGF,IAAA,IAAIA,SAAQ,EAAI,EAAA;AAAE,MAAA,GAAA,GAAMA,QAAO,EAAK,GAAA,EAAA;AAAA,KAAI,MAAA,IAC/BA,SAAQ,EAAI,EAAA;AAAE,MAAA,GAAA,GAAMA,QAAO,EAAK,GAAA,EAAA;AAAA,KAChCA,MAAAA,IAAAA,KAAAA,IAAQ,EAAMA,IAAAA,KAAAA,IAAQ,EAAI,EAAA;AAAE,MAAA,GAAA,GAAMA,KAAO,GAAA,EAAA;AAAA,KAC7C,MAAA;AAAE,MAAM,GAAA,GAAA,QAAA;AAAA;AACb,IAAA,IAAI,OAAO,KAAO,EAAA;AAAE,MAAA;AAAA;AACpB,IAAWA,QAAAA,GAAAA,KAAAA;AACX,IAAA,KAAA,GAAQ,QAAQ,KAAQ,GAAA,GAAA;AAAA;AAG1B,EAAI,IAAA,eAAA,IAAmB,aAAa,EAAI,EAAA;AAAE,IAAA,IAAA,CAAK,gBAAiB,CAAA,IAAA,CAAK,GAAM,GAAA,CAAA,EAAG,wDAAwD,CAAA;AAAA;AACtI,EAAI,IAAA,IAAA,CAAK,QAAQ2B,MAAS,IAAA,GAAA,IAAO,QAAQ,IAAK,CAAA,GAAA,GAAMA,WAAU,GAAK,EAAA;AAAE,IAAO,OAAA,IAAA;AAAA;AAE5E,EAAO,OAAA,KAAA;AACT,CAAA;AAEA,SAAS,cAAA,CAAe,KAAK,2BAA6B,EAAA;AACxD,EAAA,IAAI,2BAA6B,EAAA;AAC/B,IAAO,OAAA,QAAA,CAAS,KAAK,CAAC,CAAA;AAAA;AAIxB,EAAA,OAAO,UAAW,CAAA,GAAA,CAAI,OAAQ,CAAA,IAAA,EAAM,EAAE,CAAC,CAAA;AACzC;AAEA,SAAS,eAAe,GAAK,EAAA;AAC3B,EAAI,IAAA,OAAO,WAAW,UAAY,EAAA;AAChC,IAAO,OAAA,IAAA;AAAA;AAIT,EAAA,OAAO,MAAO,CAAA,GAAA,CAAI,OAAQ,CAAA,IAAA,EAAM,EAAE,CAAC,CAAA;AACrC;AAEA,EAAG,CAAA,eAAA,GAAkB,SAAS,KAAO,EAAA;AACnC,EAAA,IAAIA,SAAQ,IAAK,CAAA,GAAA;AACjB,EAAA,IAAA,CAAK,GAAO,IAAA,CAAA;AACZ,EAAI,IAAA,GAAA,GAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,CAAA;AAC5B,EAAA,IAAI,OAAO,IAAM,EAAA;AAAE,IAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,KAAQ,GAAA,CAAA,EAAG,8BAA8B,KAAK,CAAA;AAAA;AACjF,EAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAAM,IAAA,IAAA,CAAK,MAAM,UAAW,CAAA,IAAA,CAAK,GAAG,CAAA,KAAM,GAAK,EAAA;AAC7E,IAAA,GAAA,GAAM,eAAe,IAAK,CAAA,KAAA,CAAM,MAAMA,MAAO,EAAA,IAAA,CAAK,GAAG,CAAC,CAAA;AACtD,IAAA,EAAE,IAAK,CAAA,GAAA;AAAA,GACE,MAAA,IAAA,iBAAA,CAAkB,IAAK,CAAA,iBAAA,EAAmB,CAAG,EAAA;AAAE,IAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,GAAA,EAAK,kCAAkC,CAAA;AAAA;AACjH,EAAA,OAAO,IAAK,CAAA,WAAA,CAAY,OAAQ,CAAA,GAAA,EAAK,GAAG,CAAA;AAC1C,CAAA;AAIA,EAAG,CAAA,UAAA,GAAa,SAAS,aAAe,EAAA;AACtC,EAAA,IAAIA,SAAQ,IAAK,CAAA,GAAA;AACjB,EAAI,IAAA,CAAC,iBAAiB,IAAK,CAAA,OAAA,CAAQ,IAAI,KAAW,CAAA,EAAA,IAAI,MAAM,IAAM,EAAA;AAAE,IAAK,IAAA,CAAA,KAAA,CAAMA,QAAO,gBAAgB,CAAA;AAAA;AACtG,EAAI,IAAA,KAAA,GAAQ,KAAK,GAAMA,GAAAA,MAAAA,IAAS,KAAK,IAAK,CAAA,KAAA,CAAM,UAAWA,CAAAA,MAAK,CAAM,KAAA,EAAA;AACtE,EAAI,IAAA,KAAA,IAAS,KAAK,MAAQ,EAAA;AAAE,IAAK,IAAA,CAAA,KAAA,CAAMA,QAAO,gBAAgB,CAAA;AAAA;AAC9D,EAAA,IAAI,IAAO,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AACzC,EAAI,IAAA,CAAC,SAAS,CAAC,aAAA,IAAiB,KAAK,OAAQ,CAAA,WAAA,IAAe,EAAM,IAAA,IAAA,KAAS,GAAK,EAAA;AAC9E,IAAI,IAAA,KAAA,GAAQ,eAAe,IAAK,CAAA,KAAA,CAAM,MAAMA,MAAO,EAAA,IAAA,CAAK,GAAG,CAAC,CAAA;AAC5D,IAAA,EAAE,IAAK,CAAA,GAAA;AACP,IAAA,IAAI,iBAAkB,CAAA,IAAA,CAAK,iBAAkB,EAAC,CAAG,EAAA;AAAE,MAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,GAAA,EAAK,kCAAkC,CAAA;AAAA;AAC1G,IAAA,OAAO,IAAK,CAAA,WAAA,CAAY,OAAQ,CAAA,GAAA,EAAK,KAAK,CAAA;AAAA;AAE5C,EAAI,IAAA,KAAA,IAAS,MAAO,CAAA,IAAA,CAAK,IAAK,CAAA,KAAA,CAAM,MAAMA,MAAO,EAAA,IAAA,CAAK,GAAG,CAAC,CAAG,EAAA;AAAE,IAAQ,KAAA,GAAA,KAAA;AAAA;AACvE,EAAI,IAAA,IAAA,KAAS,EAAM,IAAA,CAAC,KAAO,EAAA;AACzB,IAAA,EAAE,IAAK,CAAA,GAAA;AACP,IAAA,IAAA,CAAK,QAAQ,EAAE,CAAA;AACf,IAAA,IAAA,GAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,GAAG,CAAA;AAAA;AAEvC,EAAA,IAAA,CAAK,IAAS,KAAA,EAAA,IAAM,IAAS,KAAA,GAAA,KAAQ,CAAC,KAAO,EAAA;AAC3C,IAAA,IAAA,GAAO,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,EAAE,KAAK,GAAG,CAAA;AACvC,IAAI,IAAA,IAAA,KAAS,EAAM,IAAA,IAAA,KAAS,EAAI,EAAA;AAAE,MAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AACzC,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,EAAE,CAAA,KAAM,IAAM,EAAA;AAAE,MAAK,IAAA,CAAA,KAAA,CAAMA,QAAO,gBAAgB,CAAA;AAAA;AAAG;AAExE,EAAA,IAAI,iBAAkB,CAAA,IAAA,CAAK,iBAAkB,EAAC,CAAG,EAAA;AAAE,IAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,GAAA,EAAK,kCAAkC,CAAA;AAAA;AAE1G,EAAI,IAAA,GAAA,GAAM,eAAe,IAAK,CAAA,KAAA,CAAM,MAAMA,MAAO,EAAA,IAAA,CAAK,GAAG,CAAA,EAAG,KAAK,CAAA;AACjE,EAAA,OAAO,IAAK,CAAA,WAAA,CAAY,OAAQ,CAAA,GAAA,EAAK,GAAG,CAAA;AAC1C,CAAA;AAIA,EAAA,CAAG,gBAAgB,WAAW;AAC5B,EAAA,IAAI,KAAK,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,GAAG,CAAG3B,EAAAA,KAAAA;AAE1C,EAAA,IAAI,OAAO,GAAK,EAAA;AACd,IAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,GAAc,CAAG,EAAA;AAAE,MAAA,IAAA,CAAK,UAAW,EAAA;AAAA;AACpD,IAAI,IAAA,OAAA,GAAU,EAAE,IAAK,CAAA,GAAA;AACrB,IAAAA,KAAAA,GAAO,IAAK,CAAA,WAAA,CAAY,IAAK,CAAA,KAAA,CAAM,OAAQ,CAAA,GAAA,EAAK,IAAK,CAAA,GAAG,CAAI,GAAA,IAAA,CAAK,GAAG,CAAA;AACpE,IAAA,EAAE,IAAK,CAAA,GAAA;AACP,IAAA,IAAIA,QAAO,OAAU,EAAA;AAAE,MAAK,IAAA,CAAA,kBAAA,CAAmB,SAAS,0BAA0B,CAAA;AAAA;AAAG,GAChF,MAAA;AACL,IAAAA,KAAAA,GAAO,IAAK,CAAA,WAAA,CAAY,CAAC,CAAA;AAAA;AAE3B,EAAOA,OAAAA,KAAAA;AACT,CAAA;AAEA,EAAG,CAAA,UAAA,GAAa,SAAS,KAAO,EAAA;AAC9B,EAAA,IAAI,GAAM,GAAA,EAAA,EAAI,UAAa,GAAA,EAAE,IAAK,CAAA,GAAA;AAClC,EAAS,WAAA;AACP,IAAA,IAAI,IAAK,CAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,MAAQ,EAAA;AAAE,MAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,8BAA8B,CAAA;AAAA;AAC1F,IAAA,IAAI,EAAK,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AACvC,IAAA,IAAI,OAAO,KAAO,EAAA;AAAE,MAAA;AAAA;AACpB,IAAA,IAAI,OAAO,EAAI,EAAA;AACb,MAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAC5C,MAAO,GAAA,IAAA,IAAA,CAAK,gBAAgB,KAAK,CAAA;AACjC,MAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAAA,KACT,MAAA,IAAA,EAAA,KAAO,IAAU,IAAA,EAAA,KAAO,IAAQ,EAAA;AACzC,MAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,GAAc,EAAI,EAAA;AAAE,QAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,8BAA8B,CAAA;AAAA;AAC1F,MAAA,EAAE,IAAK,CAAA,GAAA;AACP,MAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAC1B,QAAK,IAAA,CAAA,OAAA,EAAA;AACL,QAAA,IAAA,CAAK,YAAY,IAAK,CAAA,GAAA;AAAA;AACxB,KACK,MAAA;AACL,MAAI,IAAA,SAAA,CAAU,EAAE,CAAG,EAAA;AAAE,QAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,8BAA8B,CAAA;AAAA;AAC1E,MAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AACT;AAEF,EAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAK,EAAA,CAAA;AAC9C,EAAA,OAAO,IAAK,CAAA,WAAA,CAAY,OAAQ,CAAA,MAAA,EAAQ,GAAG,CAAA;AAC7C,CAAA;AAIA,IAAI,gCAAgC,EAAC;AAErC,EAAA,CAAG,uBAAuB,WAAW;AACnC,EAAA,IAAA,CAAK,iBAAoB,GAAA,IAAA;AACzB,EAAI,IAAA;AACF,IAAA,IAAA,CAAK,aAAc,EAAA;AAAA,WACZ,GAAK,EAAA;AACZ,IAAA,IAAI,QAAQ,6BAA+B,EAAA;AACzC,MAAA,IAAA,CAAK,wBAAyB,EAAA;AAAA,KACzB,MAAA;AACL,MAAM,MAAA,GAAA;AAAA;AACR;AAGF,EAAA,IAAA,CAAK,iBAAoB,GAAA,KAAA;AAC3B,CAAA;AAEA,EAAG,CAAA,kBAAA,GAAqB,SAASoJ,SAAAA,EAAU,OAAS,EAAA;AAClD,EAAA,IAAI,IAAK,CAAA,iBAAA,IAAqB,IAAK,CAAA,OAAA,CAAQ,eAAe,CAAG,EAAA;AAC3D,IAAM,MAAA,6BAAA;AAAA,GACD,MAAA;AACL,IAAK,IAAA,CAAA,KAAA,CAAMA,WAAU,OAAO,CAAA;AAAA;AAEhC,CAAA;AAEA,EAAA,CAAG,gBAAgB,WAAW;AAC5B,EAAI,IAAA,GAAA,GAAM,EAAI,EAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAChC,EAAS,WAAA;AACP,IAAA,IAAI,IAAK,CAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,MAAQ,EAAA;AAAE,MAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,uBAAuB,CAAA;AAAA;AACnF,IAAA,IAAI,EAAK,GAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AACvC,IAAI,IAAA,EAAA,KAAO,EAAM,IAAA,EAAA,KAAO,EAAM,IAAA,IAAA,CAAK,KAAM,CAAA,UAAA,CAAW,IAAK,CAAA,GAAA,GAAM,CAAC,CAAA,KAAM,GAAK,EAAA;AACzE,MAAI,IAAA,IAAA,CAAK,GAAQ,KAAA,IAAA,CAAK,KAAU,KAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,QAAY,IAAA,IAAA,CAAK,IAAS,KAAA,OAAA,CAAQ,eAAkB,CAAA,EAAA;AACxG,QAAA,IAAI,OAAO,EAAI,EAAA;AACb,UAAA,IAAA,CAAK,GAAO,IAAA,CAAA;AACZ,UAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,YAAY,CAAA;AAAA,SACvC,MAAA;AACL,UAAA,EAAE,IAAK,CAAA,GAAA;AACP,UAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,SAAS,CAAA;AAAA;AAC3C;AAEF,MAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAC5C,MAAA,OAAO,IAAK,CAAA,WAAA,CAAY,OAAQ,CAAA,QAAA,EAAU,GAAG,CAAA;AAAA;AAE/C,IAAA,IAAI,OAAO,EAAI,EAAA;AACb,MAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAC5C,MAAO,GAAA,IAAA,IAAA,CAAK,gBAAgB,IAAI,CAAA;AAChC,MAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAAA,KACpB,MAAA,IAAW,SAAU,CAAA,EAAE,CAAG,EAAA;AACxB,MAAA,GAAA,IAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAC5C,MAAA,EAAE,IAAK,CAAA,GAAA;AACP,MAAA,QAAQ,EAAI;AAAA,QACZ,KAAK,EAAA;AACH,UAAA,IAAI,KAAK,KAAM,CAAA,UAAA,CAAW,IAAK,CAAA,GAAG,MAAM,EAAI,EAAA;AAAE,YAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AAAK,QAC5D,KAAK,EAAA;AACH,UAAO,GAAA,IAAA,IAAA;AACP,UAAA;AAAA,QACF;AACE,UAAO,GAAA,IAAA,MAAA,CAAO,aAAa,EAAE,CAAA;AAC7B,UAAA;AAAA;AAEF,MAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAC1B,QAAA,EAAE,IAAK,CAAA,OAAA;AACP,QAAA,IAAA,CAAK,YAAY,IAAK,CAAA,GAAA;AAAA;AAExB,MAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAAA,KACb,MAAA;AACL,MAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AACT;AAEJ,CAAA;AAGA,EAAA,CAAG,2BAA2B,WAAW;AACvC,EAAA,OAAO,KAAK,GAAM,GAAA,IAAA,CAAK,KAAM,CAAA,MAAA,EAAQ,KAAK,GAAO,EAAA,EAAA;AAC/C,IAAA,QAAQ,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,GAAG,CAAG;AAAA,MAC9B,KAAK,IAAA;AACH,QAAA,EAAE,IAAK,CAAA,GAAA;AACP,QAAA;AAAA,MAEF,KAAK,GAAA;AACH,QAAA,IAAI,KAAK,KAAM,CAAA,IAAA,CAAK,GAAM,GAAA,CAAC,MAAM,GAAK,EAAA;AAAE,UAAA;AAAA;AAAM;AAAA,MAEhD,KAAK,GAAA;AACH,QAAO,OAAA,IAAA,CAAK,WAAY,CAAA,OAAA,CAAQ,eAAiB,EAAA,IAAA,CAAK,KAAM,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,IAAK,CAAA,GAAG,CAAC,CAAA;AAAA,MAEzF,KAAK,IAAA;AACH,QAAA,IAAI,KAAK,KAAM,CAAA,IAAA,CAAK,GAAM,GAAA,CAAC,MAAM,IAAM,EAAA;AAAE,UAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AAAK;AAAA,MAEvD,KAAK,IAAA;AAAA,MAAM,KAAK,QAAA;AAAA,MAAU,KAAK,QAAA;AAC7B,QAAA,EAAE,IAAK,CAAA,OAAA;AACP,QAAK,IAAA,CAAA,SAAA,GAAY,KAAK,GAAM,GAAA,CAAA;AAC5B,QAAA;AAAA;AACF;AAEF,EAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,EAAO,uBAAuB,CAAA;AAChD,CAAA;AAIA,EAAG,CAAA,eAAA,GAAkB,SAAS,UAAY,EAAA;AACxC,EAAA,IAAI,KAAK,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,EAAE,KAAK,GAAG,CAAA;AACzC,EAAA,EAAE,IAAK,CAAA,GAAA;AACP,EAAA,QAAQ,EAAI;AAAA,IACZ,KAAK,GAAA;AAAK,MAAO,OAAA,IAAA;AAAA;AAAA,IACjB,KAAK,GAAA;AAAK,MAAO,OAAA,IAAA;AAAA;AAAA,IACjB,KAAK,GAAA;AAAK,MAAA,OAAO,MAAO,CAAA,YAAA,CAAa,IAAK,CAAA,WAAA,CAAY,CAAC,CAAC,CAAA;AAAA;AAAA,IACxD,KAAK,GAAA;AAAK,MAAO,OAAA,iBAAA,CAAkB,IAAK,CAAA,aAAA,EAAe,CAAA;AAAA;AAAA,IACvD,KAAK,GAAA;AAAK,MAAO,OAAA,GAAA;AAAA;AAAA,IACjB,KAAK,EAAA;AAAI,MAAO,OAAA,IAAA;AAAA;AAAA,IAChB,KAAK,GAAA;AAAK,MAAO,OAAA,IAAA;AAAA;AAAA,IACjB,KAAK,GAAA;AAAK,MAAO,OAAA,IAAA;AAAA;AAAA,IACjB,KAAK,EAAA;AAAI,MAAA,IAAI,KAAK,KAAM,CAAA,UAAA,CAAW,IAAK,CAAA,GAAG,MAAM,EAAI,EAAA;AAAE,QAAA,EAAE,IAAK,CAAA,GAAA;AAAA;AAAK;AAAA,IACnE,KAAK,EAAA;AACH,MAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAAE,QAAA,IAAA,CAAK,YAAY,IAAK,CAAA,GAAA;AAAK,QAAA,EAAE,IAAK,CAAA,OAAA;AAAA;AAChE,MAAO,OAAA,EAAA;AAAA,IACT,KAAK,EAAA;AAAA,IACL,KAAK,EAAA;AACH,MAAA,IAAI,KAAK,MAAQ,EAAA;AACf,QAAK,IAAA,CAAA,kBAAA;AAAA,UACH,KAAK,GAAM,GAAA,CAAA;AAAA,UACX;AAAA,SACF;AAAA;AAEF,MAAA,IAAI,UAAY,EAAA;AACd,QAAI,IAAA,OAAA,GAAU,KAAK,GAAM,GAAA,CAAA;AAEzB,QAAK,IAAA,CAAA,kBAAA;AAAA,UACH,OAAA;AAAA,UACA;AAAA,SACF;AAAA;AACF,IACF;AACE,MAAI,IAAA,EAAA,IAAM,EAAM,IAAA,EAAA,IAAM,EAAI,EAAA;AACxB,QAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAM,CAAA,MAAA,CAAO,IAAK,CAAA,GAAA,GAAM,CAAG,EAAA,CAAC,CAAE,CAAA,KAAA,CAAM,SAAS,CAAA,CAAE,CAAC,CAAA;AACpE,QAAI,IAAA,KAAA,GAAQ,QAAS,CAAA,QAAA,EAAU,CAAC,CAAA;AAChC,QAAA,IAAI,QAAQ,GAAK,EAAA;AACf,UAAW,QAAA,GAAA,QAAA,CAAS,KAAM,CAAA,CAAA,EAAG,CAAE,CAAA,CAAA;AAC/B,UAAQ,KAAA,GAAA,QAAA,CAAS,UAAU,CAAC,CAAA;AAAA;AAE9B,QAAK,IAAA,CAAA,GAAA,IAAO,SAAS,MAAS,GAAA,CAAA;AAC9B,QAAA,EAAA,GAAK,IAAK,CAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,GAAG,CAAA;AACnC,QAAK,IAAA,CAAA,QAAA,KAAa,OAAO,EAAO,KAAA,EAAA,IAAM,OAAO,EAAQ,MAAA,IAAA,CAAK,UAAU,UAAa,CAAA,EAAA;AAC/E,UAAK,IAAA,CAAA,kBAAA;AAAA,YACH,IAAA,CAAK,GAAM,GAAA,CAAA,GAAI,QAAS,CAAA,MAAA;AAAA,YACxB,aACI,kCACA,GAAA;AAAA,WACN;AAAA;AAEF,QAAO,OAAA,MAAA,CAAO,aAAa,KAAK,CAAA;AAAA;AAElC,MAAI,IAAA,SAAA,CAAU,EAAE,CAAG,EAAA;AAGjB,QAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAAE,UAAA,IAAA,CAAK,YAAY,IAAK,CAAA,GAAA;AAAK,UAAA,EAAE,IAAK,CAAA,OAAA;AAAA;AAChE,QAAO,OAAA,EAAA;AAAA;AAET,MAAO,OAAA,MAAA,CAAO,aAAa,EAAE,CAAA;AAAA;AAEjC,CAAA;AAIA,EAAG,CAAA,WAAA,GAAc,SAAS,GAAK,EAAA;AAC7B,EAAA,IAAI,UAAU,IAAK,CAAA,GAAA;AACnB,EAAA,IAAI,CAAI,GAAA,IAAA,CAAK,OAAQ,CAAA,EAAA,EAAI,GAAG,CAAA;AAC5B,EAAA,IAAI,MAAM,IAAM,EAAA;AAAE,IAAK,IAAA,CAAA,kBAAA,CAAmB,SAAS,+BAA+B,CAAA;AAAA;AAClF,EAAO,OAAA,CAAA;AACT,CAAA;AAQA,EAAA,CAAG,YAAY,WAAW;AACxB,EAAA,IAAA,CAAK,WAAc,GAAA,KAAA;AACnB,EAAA,IAAI,IAAO,GAAA,EAAA,EAAI,KAAQ,GAAA,IAAA,EAAM,aAAa,IAAK,CAAA,GAAA;AAC/C,EAAI,IAAA,MAAA,GAAS,IAAK,CAAA,OAAA,CAAQ,WAAe,IAAA,CAAA;AACzC,EAAA,OAAO,IAAK,CAAA,GAAA,GAAM,IAAK,CAAA,KAAA,CAAM,MAAQ,EAAA;AACnC,IAAI,IAAA,EAAA,GAAK,KAAK,iBAAkB,EAAA;AAChC,IAAI,IAAA,gBAAA,CAAiB,EAAI,EAAA,MAAM,CAAG,EAAA;AAChC,MAAK,IAAA,CAAA,GAAA,IAAO,EAAM,IAAA,KAAA,GAAS,CAAI,GAAA,CAAA;AAAA,KACjC,MAAA,IAAW,OAAO,EAAI,EAAA;AACpB,MAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AACnB,MAAA,IAAA,IAAQ,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AAC7C,MAAA,IAAI,WAAW,IAAK,CAAA,GAAA;AACpB,MAAA,IAAI,KAAK,KAAM,CAAA,UAAA,CAAW,EAAE,IAAK,CAAA,GAAG,MAAM,GACxC,EAAA;AAAE,QAAK,IAAA,CAAA,kBAAA,CAAmB,IAAK,CAAA,GAAA,EAAK,2CAA2C,CAAA;AAAA;AACjF,MAAA,EAAE,IAAK,CAAA,GAAA;AACP,MAAI,IAAA,GAAA,GAAM,KAAK,aAAc,EAAA;AAC7B,MAAA,IAAI,EAAE,KAAQ,GAAA,iBAAA,GAAoB,gBAAkB,EAAA,GAAA,EAAK,MAAM,CAC7D,EAAA;AAAE,QAAK,IAAA,CAAA,kBAAA,CAAmB,UAAU,wBAAwB,CAAA;AAAA;AAC9D,MAAA,IAAA,IAAQ,kBAAkB,GAAG,CAAA;AAC7B,MAAA,UAAA,GAAa,IAAK,CAAA,GAAA;AAAA,KACb,MAAA;AACL,MAAA;AAAA;AAEF,IAAQ,KAAA,GAAA,KAAA;AAAA;AAEV,EAAA,OAAO,OAAO,IAAK,CAAA,KAAA,CAAM,KAAM,CAAA,UAAA,EAAY,KAAK,GAAG,CAAA;AACrD,CAAA;AAKA,EAAA,CAAG,WAAW,WAAW;AACvB,EAAI,IAAA,IAAA,GAAO,KAAK,SAAU,EAAA;AAC1B,EAAA,IAAI,OAAO,OAAQ,CAAA,IAAA;AACnB,EAAA,IAAI,IAAK,CAAA,QAAA,CAAS,IAAK,CAAA,IAAI,CAAG,EAAA;AAC5B,IAAA,IAAA,GAAO,SAAS,IAAI,CAAA;AAAA;AAEtB,EAAO,OAAA,IAAA,CAAK,WAAY,CAAA,IAAA,EAAM,IAAI,CAAA;AACpC,CAAA;AAmBA,IAAI,OAAU,GAAA,QAAA;AAEd,MAAA,CAAO,KAAQ,GAAA;AAAA,EACb,MAAA;AAAA,EACA,OAAA;AAAA,EACA,cAAA;AAAA,EACA,QAAA;AAAA,EACA,cAAA;AAAA,EACA,WAAA;AAAA,EACA,IAAA;AAAA,EACA,SAAA;AAAA,EACA,QAAU,EAAA,OAAA;AAAA,EACV,YAAc,EAAA,QAAA;AAAA,EACd,UAAA;AAAA,EACA,WAAa,EAAA,KAAA;AAAA,EACb,gBAAA;AAAA,EACA,iBAAA;AAAA,EACA,KAAA;AAAA,EACA,SAAA;AAAA,EACA,SAAA;AAAA,EACA,UAAA;AAAA,EACA;AACF,CAAA;;;AC/9LA,IAAqB,gBAAA,GAAA,OAAA,CAAA,iBAAA,EAAA,CAAA;;;ACFd,SAAS,MAAM,CAAG,EAAA;AACvB,EAAA,OAAO,aAAe,CAAI,GAAA,UAAA;AAC5B;;;AC4DA,IAAMc,IAAAA,GAAM,EAAG,CAAA,cAAA;AAKR,IAAM,QAAA,GAAW,OAAO,UAAU,CAAA;AAKlC,IAAM,IAAA,GAAO,OAAO,MAAM,CAAA;AAK1B,IAAM,IAAA,GAAO,OAAO,MAAM,CAAA;AAoB1B,SAAS,KAAA,CAAM,MAAM,OAAS,EAAA;AAEnC,EAAI,IAAA,KAAA;AAEJ,EAAI,IAAA,KAAA;AAEJ,EAAI,IAAA,OAAO,YAAY,UAAY,EAAA;AACjC,IAAQ,KAAA,GAAA,OAAA;AAAA,GACC,MAAA,IAAA,OAAA,IAAW,OAAO,OAAA,KAAY,QAAU,EAAA;AACjD,IAAI,IAAA,OAAA,CAAQ,KAAO,EAAA,KAAA,GAAQ,OAAQ,CAAA,KAAA;AACnC,IAAI,IAAA,OAAA,CAAQ,KAAO,EAAA,KAAA,GAAQ,OAAQ,CAAA,KAAA;AAAA;AAGrC,EAAA,KAAA,CAAM,IAAM,EAAA,KAAA,CAAA,EAAW,KAAW,CAAA,EAAA,EAAE,CAAE,EAAA;AAQtC,EAAA,SAAS,KAAM5G,CAAAA,KAAAA,EAAM,GAAKuB,EAAAA,MAAAA,EAAO,OAAS,EAAA;AACxC,IAAI,IAAA,QAAA,CAASvB,KAAI,CAAG,EAAA;AAClB,MAAAmJ,OAAM,WAAc,GAAA,QAAA,GAAW,KAAMnJ,CAAAA,KAAAA,CAAK,IAAI,CAAI,GAAA,GAAA;AAAA;AAGpD,IAAOmJ,OAAAA,MAAAA;AAKP,IAAA,SAASA,MAAQ,GAAA;AAEf,MAAM,MAAA,MAAA,GAAS,KAAQ,GAAA,QAAA,CAAS,KAAMnJ,CAAAA,KAAAA,EAAM,KAAKuB,MAAO,EAAA,OAAO,CAAC,CAAA,GAAI,EAAC;AAErE,MAAI,IAAA,MAAA,CAAO,CAAC,CAAA,KAAM,IAAM,EAAA;AACtB,QAAO,OAAA,MAAA;AAAA;AAGT,MAAI,IAAA,MAAA,CAAO,CAAC,CAAA,KAAM,IAAM,EAAA;AAEtB,QAAI,IAAA,IAAA;AAEJ,QAAA,KAAK,QAAQvB,KAAM,EAAA;AACjB,UACE4G,IAAAA,IAAAA,CAAI,IAAK5G,CAAAA,KAAAA,EAAM,IAAI,CAAA,IACnBA,KAAK,CAAA,IAAI,CACT,IAAA,OAAOA,KAAK,CAAA,IAAI,CAAM,KAAA,QAAA;AAAA,UAEtB,IAAS,KAAA,MAAA;AAAA,UAET,SAAS,UACT,EAAA;AACA,YAAM,MAAA,YAAA,GAAe,OAAQ,CAAA,MAAA,CAAOA,KAAI,CAAA;AAExC,YAAMiB,MAAAA,MAAAA,GAAQjB,MAAK,IAAI,CAAA;AAEvB,YAAI,IAAA,KAAA,CAAM,OAAQiB,CAAAA,MAAK,CAAG,EAAA;AACxB,cAAM,MAAA,KAAA;AAAA;AAAA,gBAAuCA;AAAA,eAAA;AAC7C,cAAA,IAAI,MAAS,GAAA,CAAA;AAEb,cAAA,OAAO,MAAS,GAAA,CAAA,CAAA,IAAM,MAAS,GAAA,KAAA,CAAM,MAAQ,EAAA;AAC3C,gBAAM,MAAA,QAAA,GAAW,MAAM,MAAM,CAAA;AAE7B,gBAAI,IAAA,QAAA,CAAS,QAAQ,CAAG,EAAA;AACtB,kBAAA,MAAM,SAAY,GAAA,KAAA;AAAA,oBAChB,QAAA;AAAA,oBACA,IAAA;AAAA,oBACA,MAAA;AAAA,oBACA;AAAA,mBACA,EAAA;AACF,kBAAA,IAAI,SAAU,CAAA,CAAC,CAAM,KAAA,IAAA,EAAa,OAAA,SAAA;AAClC,kBACE,MAAA,GAAA,OAAO,UAAU,CAAC,CAAA,KAAM,WAAW,SAAU,CAAA,CAAC,IAAI,MAAS,GAAA,CAAA;AAAA,iBACxD,MAAA;AACL,kBAAA,MAAA,EAAA;AAAA;AACF;AACF,aACF,MAAA,IAAW,QAASA,CAAAA,MAAK,CAAG,EAAA;AAC1B,cAAA,MAAM,YAAY,KAAMA,CAAAA,MAAAA,EAAO,IAAM,EAAA,KAAA,CAAA,EAAW,YAAY,CAAE,EAAA;AAC9D,cAAA,IAAI,SAAU,CAAA,CAAC,CAAM,KAAA,IAAA,EAAa,OAAA,SAAA;AAAA;AACpC;AACF;AACF;AAGF,MAAO,OAAA,KAAA,GAAQ,SAAS,KAAMjB,CAAAA,KAAAA,EAAM,KAAKuB,MAAO,EAAA,OAAO,CAAC,CAAI,GAAA,MAAA;AAAA;AAC9D;AAEJ;AAUA,SAAS,SAASN,MAAO,EAAA;AACvB,EAAI,IAAA,KAAA,CAAM,OAAQA,CAAAA,MAAK,CAAG,EAAA;AACxB,IAAOA,OAAAA,MAAAA;AAAA;AAGT,EAAI,IAAA,OAAOA,WAAU,QAAU,EAAA;AAC7B,IAAO,OAAA,CAAC,UAAUA,MAAK,CAAA;AAAA;AAGzB,EAAA,OAAO,CAACA,MAAK,CAAA;AACf;AAUA,SAAS,SAASA,MAAO,EAAA;AACvB,EAAO,OAAA,OAAA;AAAA,IACLA,MACE,IAAA,OAAOA,MAAU,KAAA,QAAA,IACjB,MAAUA,IAAAA,MAAAA,IACV,OAAOA,MAAAA,CAAM,IAAS,KAAA,QAAA,IACtBA,MAAM,CAAA,IAAA,CAAK,MAAS,GAAA;AAAA,GACxB;AACF;;;AC/IO,SAAS,aAAA,CAAc,QAAQvF,QAAS,EAAA;AAC7C,EAAM,MAAA,MAAA,GAASA,SAAQ,MAAU,IAAA,EAAA;AACjC,EAAM,MAAA,MAAA,GAASA,SAAQ,MAAU,IAAA,EAAA;AACjC,EAAA,MAAM,eAAe,MAAO,CAAA,MAAA,CAAO,EAAC,EAAGA,SAAQ,YAAY,CAAA;AAE3D,EAAA,MAAM,WAAW,EAAC;AAElB,EAAA,MAAM,SAAS,EAAC;AAChB,EAAA,MAAM,YAAY,YAAa,CAAA,SAAA;AAC/B,EAAA,MAAM,UAAU,YAAa,CAAA,OAAA;AAC7B,EAAA,IAAI,OAAU,GAAA,KAAA;AAEd,EAAI,IAAA,MAAA;AAEJ,EAAI,IAAA,SAAA;AAEJ,EAAA,MAAM,WAAc,GAAA,MAAA,CAAO,MAAO,CAAA,IAAI,YAAc,EAAA;AAAA,IAClD,SAAW,EAAA,QAAA;AAAA,IACX,cAAgB,EAAA;AAAA,GACjB,CAAA;AACD,EAAA,IAAI,OAAS,EAAA;AACX,IAAA,WAAA,CAAY,OAAU,GAAA,MAAA;AAAA;AAExB,EAAA,MAAM,UAAa,GAAA,OAAA,CAAQ,MAAQA,EAAAA,QAAAA,CAAQ,UAAU,CAAA;AACrD,EAAA,MAAM,SAAS,UAAW,CAAA,KAAA;AAC1B,EAAMuF,MAAAA,MAAAA,GAAQ,SAAS,MAAS,GAAA,MAAA;AAChC,EAAA,MAAM,iBAAoBvF,GAAAA,QAAAA,CAAQ,UAAciG,IAAAA,MAAAA,CAAM,MAAM,CAAA;AAC5D,EAAI,IAAA,iBAAA,IAAqB,CAACjG,QAAAA,CAAQ,UAAY,EAAA;AAC5C,IAAM,MAAA,IAAI,aAAa,6BAA+B,EAAA;AAAA,MACpD,KAAA,EAAO,wBAAwB,CAAC,CAAA;AAAA,MAChC,MAAQ,EAAA,6BAAA;AAAA,MACR,MAAQ,EAAA;AAAA,KACT,CAAA;AAAA;AAEH,EAAI,IAAA;AACF,IAAA,MAAA,GAASA,QAAQ,CAAA,UAAA,IAAc,CAAC,iBAAA,GAAoBA,SAAQ,KAAM,CAAA,iBAAA,CAAkBuF,MAAO,EAAA,CAAA,EAAG,WAAW,CAAIvF,GAAAA,QAAAA,CAAQ,KAAM,CAAA,KAAA,CAAMuF,QAAO,WAAW,CAAA;AAAA,WAC5I,MAAQ,EAAA;AACf,IAAM,MAAA,KAAA;AAAA;AAAA,MAAiC;AAAA,KAAA;AACvC,IAAMiF,MAAAA,MAAAA,GAAQ,uBAAwB,CAAA,KAAA,CAAM,GAAG,CAAA;AAC/C,IAAA,KAAA,CAAM,UAAU,MAAO,CAAA,KAAA,CAAM,OAAO,CAAE,CAAA,OAAA,CAAQ,iBAAiB,EAAE,CAAA;AAGjE,IAAA,KAAA,CAAM,MAAMA,MAAM,CAAA,MAAA;AAClB,IAAA,KAAA,CAAM,GAAM,GAAA;AAAA,MACV,MAAMA,MAAM,CAAA,IAAA;AAAA,MACZ,MAAA,EAAQA,OAAM,MAAS,GAAA;AAAA,KACzB;AACA,IAAY,SAAA,GAAA,KAAA;AACZ,IAAA,OAAA,GAAU,KAAM,CAAA,QAAA,IAAY,MAAO,CAAA,MAAA,GAAS,MAAO,CAAA,MAAA;AAAA,IAEnD,MAAM,OAAY,KAAA,sBAAA;AAAA;AAEpB,EAAA,IAAI,MAAUxK,IAAAA,QAAAA,CAAQ,UAAc,IAAA,CAAC,iBAAmB,EAAA;AACtD,IAAIiG,IAAAA,MAAAA,CAAMV,MAAM,CAAA,KAAA,CAAM,MAAO,CAAA,GAAA,EAAKA,OAAM,MAAS,GAAA,MAAA,CAAO,MAAM,CAAC,CAAG,EAAA;AAChE,MAAS,MAAA,GAAA;AAAA,QACP,IAAM,EAAA,SAAA;AAAA,QACN,KAAO,EAAA,CAAA;AAAA,QACP,GAAA,EAAK,MAAO,CAAA,MAAA,GAAS,MAAO,CAAA,MAAA;AAAA;AAAA,QAE5B,MAAM,CAAC;AAAA,UACL,IAAM,EAAA,qBAAA;AAAA,UACN,UAAY,EAAA,MAAA;AAAA,UACZ,KAAO,EAAA,CAAA;AAAA,UACP,GAAA,EAAK,MAAO,CAAA,MAAA,GAAS,MAAO,CAAA;AAAA,SAC7B,CAAA;AAAA,QACD,UAAY,EAAA,QAAA;AAAA,QACZ,UAAU;AAAC,OACb;AAAA,KACK,MAAA;AACL,MAAMiF,MAAAA,MAAAA,GAAQ,uBAAwB,CAAA,MAAA,CAAO,GAAG,CAAA;AAChD,MAAM,MAAA,KAAA;AAAA;AAAA,QACN,IAAI,MAAM,qCAAqC;AAAA,OAAA;AAG/C,MAAA,KAAA,CAAM,MAAMA,MAAM,CAAA,MAAA;AAClB,MAAA,KAAA,CAAM,GAAM,GAAA;AAAA,QACV,MAAMA,MAAM,CAAA,IAAA;AAAA,QACZ,MAAA,EAAQA,OAAM,MAAS,GAAA;AAAA,OACzB;AACA,MAAY,SAAA,GAAA,KAAA;AACZ,MAAS,MAAA,GAAA,KAAA,CAAA;AAAA;AACX;AAEF,EAAA,IAAI,MAAQ,EAAA;AAEV,IAAA,MAAA,CAAO,QAAW,GAAA,QAAA;AAGlB,IAAA,KAAA,CAAM,MAAQ,EAAA,SAAU,MAAQ,EAAA,KAAA,EAAO3E,QAAO,OAAS,EAAA;AACrD,MAAI,IAAA,OAAA;AAAA;AAAA,QACJ,OAAA,CAAQ,OAAQ,CAAA,MAAA,GAAS,CAAC;AAAA,OAAA;AAE1B,MAAA,IAAI,IAAO,GAAA,KAAA;AAIX,MAAA,IAAI,MAAO,CAAA,IAAA,KAAS,yBAA6B,IAAA,OAAA,IAAW,IAAM,EAAA;AAEhE,QAAI,IAAA,OAAOA,WAAU,QAAU,EAAA;AAE7B,UAAA,OAAA,GAAU,QAAQ,IAAI,CAAA;AACtB,UAAOA,IAAAA,GAAAA,MAAAA;AAAA;AAIT,QAAQ,OAAA,CAAA,IAAI,IAAI,MAAO,CAAA,UAAA;AAAA;AAEzB,MAAA,WAAA,CAAY,MAAM,CAAA;AAAA,KACnB,CAAA;AAGD,IAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,SAAS,CAAG,EAAA;AAC5B,MAAU,SAAA,CAAA,IAAA,CAAK,GAAG,QAAQ,CAAA;AAAA,KAC5B,MAAA,IAAW,OAAO,SAAA,KAAc,UAAY,EAAA;AAC1C,MAAA,KAAA,MAAW,WAAW,QAAU,EAAA;AAC9B,QAAA,SAAA,CAAU,OAAQ,CAAA,IAAA,KAAS,OAAS,EAAA,OAAA,CAAQ,OAAO,OAAQ,CAAA,KAAA,EAAO,OAAQ,CAAA,GAAA,EAAK,OAAQ,CAAA,GAAA,CAAI,KAAO,EAAA,OAAA,CAAQ,IAAI,GAAG,CAAA;AAAA;AACnH;AAEF,IAAA,KAAA,MAAW,SAAS,MAAQ,EAAA;AAE1B,MAAI,IAAA,KAAA,CAAM,OAAO,MAAO,CAAA,MAAA,IAAU,MAAM,KAAQ,GAAA,MAAA,CAAO,MAAU,IAAA,MAAA,CAAO,MAAQ,EAAA;AAC9E,QAAA;AAAA;AAEF,MAAA,WAAA,CAAY,KAAK,CAAA;AACjB,MAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,OAAO,CAAG,EAAA;AAC1B,QAAA,OAAA,CAAQ,KAAK,KAAK,CAAA;AAAA,OACb,MAAA;AAIL,QAAA,OAAA,CAAQ,KAAK,CAAA;AAAA;AACf;AACF;AAIF,EAAO,OAAA;AAAA,IACL,MAAA;AAAA,IACA,KAAO,EAAA,SAAA;AAAA,IACP;AAAA,GACF;AAQA,EAAA,SAAS,YAAY,WAAa,EAAA;AAChC,IAAM,MAAA,UAAA,GAAa,uBAAwB,CAAA,WAAA,CAAY,KAAK,CAAA;AAC5D,IAAM,MAAA,QAAA,GAAW,uBAAwB,CAAA,WAAA,CAAY,GAAG,CAAA;AAGxD,IAAA,WAAA,CAAY,QAAQ,UAAW,CAAA,MAAA;AAC/B,IAAA,WAAA,CAAY,MAAM,QAAS,CAAA,MAAA;AAC3B,IAAA,WAAA,CAAY,GAAM,GAAA;AAAA,MAChB,KAAO,EAAA;AAAA,QACL,MAAM,UAAW,CAAA,IAAA;AAAA,QACjB,MAAA,EAAQ,WAAW,MAAS,GAAA,CAAA;AAAA,QAC5B,QAAQ,UAAW,CAAA;AAAA,OACrB;AAAA,MACA,GAAK,EAAA;AAAA,QACH,MAAM,QAAS,CAAA,IAAA;AAAA,QACf,MAAA,EAAQ,SAAS,MAAS,GAAA,CAAA;AAAA,QAC1B,QAAQ,QAAS,CAAA;AAAA;AACnB,KACF;AACA,IAAA,WAAA,CAAY,KAAQ,GAAA,CAAC,WAAY,CAAA,KAAA,EAAO,YAAY,GAAG,CAAA;AAAA;AAUzD,EAAA,SAAS,wBAAwB,WAAa,EAAA;AAC5C,IAAI,IAAA,YAAA,GAAe,cAAc,MAAO,CAAA,MAAA;AACxC,IAAA,IAAI,eAAe,CAAG,EAAA;AACpB,MAAe,YAAA,GAAA,CAAA;AAAA,KACjB,MAAA,IAAW,YAAe,GAAA,MAAA,CAAO,MAAQ,EAAA;AACvC,MAAA,YAAA,GAAe,MAAO,CAAA,MAAA;AAAA;AAExB,IAAA,IAAI2E,MAAQ,GAAA,eAAA,CAAgB,UAAW,CAAA,KAAA,EAAO,YAAY,CAAA;AAC1D,IAAA,IAAI,CAACA,MAAO,EAAA;AACV,MAAAA,MAAQ,GAAA;AAAA,QACN,IAAA,EAAMxK,SAAQ,KAAM,CAAA,IAAA;AAAA,QACpB,MAAA,EAAQA,SAAQ,KAAM,CAAA,MAAA;AAAA,QACtB,MAAA,EAAQA,SAAQ,KAAM,CAAA;AAAA,OACxB;AAAA;AAEF,IAAOwK,OAAAA,MAAAA;AAAA;AAEX;AAMA,SAASvE,OAAMV,MAAO,EAAA;AACpB,EAAO,OAAA,OAAA,CAAQ,IAAKA,CAAAA,MAAAA,CAEnB,OAAQ,CAAA,mBAAA,EAAqB,EAAE,CAI/B,CAAA,OAAA,CAAQ,2BAA6B,EAAA,EAAE,CAAC,CAAA;AAC3C;AAQA,SAAS,OAAA,CAAQ,QAAQ,UAAY,EAAA;AAEnC,EAAA,MAAM,MAAS,GAAA;AAAA,IACb,KAAO,EAAA,EAAA;AAAA,IACP,OAAO;AAAC,GACV;AACA,EAAA,IAAIM,MAAQ,GAAA,CAAA,CAAA;AACZ,EAAO,OAAA,EAAEA,MAAQ,GAAA,MAAA,CAAO,MAAQ,EAAA;AAC9B,IAAM,MAAA,KAAA,GAAQ,OAAOA,MAAK,CAAA;AAG1B,IAAI,IAAA,KAAA,CAAM,CAAC,CAAA,KAAM,OAAS,EAAA;AACxB,MAAM,MAAA,IAAA,GAAO,KAAM,CAAA,CAAC,CAAE,CAAA,IAAA;AACtB,MAAA,IAAI,IAAS,KAAA,YAAA,IAAgB,UAAW,CAAA,QAAA,CAAS,IAAI,CAAG,EAAA;AACtD,QAAA,MAAM,SAAS,KAAM,CAAA,CAAC,EAAE,WAAY,CAAA,KAAA,CAAM,CAAC,CAAC,CAAA;AAG5C,QAAA,OAAO,OAAO,MAAS,GAAA,CAAA,IAAK,MAAO,CAAA,CAAC,MAAM,CAAI,CAAA,EAAA;AAC5C,UAAA,MAAA,CAAO,KAAM,EAAA;AAAA;AAEf,QAAMN,MAAAA,MAAAA,GAAQmI,iBAAgB,MAAM,CAAA;AACpC,QAAO,MAAA,CAAA,KAAA,CAAM,IAAK,CAAA,CAAC,MAAO,CAAA,KAAA,CAAM,QAAQ,KAAM,CAAA,CAAC,CAAE,CAAA,KAAK,CAAC,CAAA;AACvD,QAAA,MAAA,CAAO,KAASnI,IAAAA,MAAAA;AAChB,QAAO,MAAA,CAAA,KAAA,CAAM,IAAK,CAAA,CAAC,MAAO,CAAA,KAAA,CAAM,QAAQ,KAAM,CAAA,CAAC,CAAE,CAAA,GAAG,CAAC,CAAA;AAAA;AACvD;AACF;AAEF,EAAO,OAAA,MAAA;AACT;AAUA,SAAS,eAAA,CAAgB,OAAO,QAAU,EAAA;AACxC,EAAA,IAAIM,MAAQ,GAAA,CAAA;AACZ,EAAOA,OAAAA,MAAAA,GAAQ,MAAM,MAAU,IAAA,KAAA,CAAMA,MAAK,CAAE,CAAA,CAAC,KAAK,QAAU,EAAA;AAC1D,IAAAA,MAAS,IAAA,CAAA;AAAA;AAIX,EAAA,IAAIA,WAAU,CAAG,EAAA;AACf,IAAO,OAAA,KAAA,CAAA;AAAA;AAET,EAAA,MAAM,CAAC,YAAc,EAAA,YAAY,CAAI,GAAA,KAAA,CAAMA,SAAQ,CAAC,CAAA;AACpD,EAAA,MAAM,OAAO,QAAW,GAAA,YAAA;AACxB,EAAO,OAAA;AAAA,IACL,MAAM,YAAa,CAAA,IAAA;AAAA,IACnB,MAAA,EAAQ,aAAa,MAAS,GAAA,IAAA;AAAA,IAC9B,MAAA,EAAQ,aAAa,MAAS,GAAA;AAAA,GAChC;AACF;AAUA,SAAS6H,iBAAgB,MAAQ,EAAA;AAC/B,EAAA,IAAI7H,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAA,MAAM,SAAS,EAAC;AAEhB,EAAI,IAAA,KAAA;AACJ,EAAO,OAAA,EAAEA,MAAQ,GAAA,MAAA,CAAO,MAAQ,EAAA;AAC9B,IAAM,MAAA,KAAA,GAAQ,OAAOA,MAAK,CAAA;AAE1B,IAAIN,IAAAA,MAAAA;AACJ,IAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,MAAAA,MAAQ,GAAA,KAAA;AAAA,KACV,cAAe,KAAO;AAAA,MACpB,KAAK,CACH,CAAA,EAAA;AACE,QAAAA,MAAQ,GAAA,IAAA;AACR,QAAA;AAAA;AACF,MACF,KAAK,CACH,CAAA,EAAA;AACE,QAAAA,MAAQ,GAAA,IAAA;AACR,QAAA;AAAA;AACF,MACF,KAAK,CACH,CAAA,EAAA;AACE,QAAAA,MAAQ,GAAA,MAAA;AACR,QAAA;AAAA;AACF,MACF,KAAK,CACH,CAAA,EAAA;AACE,QAAAA,MAAQ,GAAA,GAAA;AACR,QAAA;AAAA;AACF;AAAA,MAGF,KAAK,CACH,CAAA,EAAA;AACE,QAAA,IAAI,KAAO,EAAA;AACX,QAAAA,MAAQ,GAAA,GAAA;AACR,QAAA;AAAA;AACF,MACF,SACE;AAGE,QAAAA,MAAAA,GAAQ,MAAO,CAAA,YAAA,CAAa,KAAK,CAAA;AAAA;AACnC;AAEJ,IAAA,KAAA,GAAQ,KAAU,KAAA,CAAA,CAAA;AAClB,IAAA,MAAA,CAAO,KAAKA,MAAK,CAAA;AAAA;AAEnB,EAAO,OAAA,MAAA,CAAO,KAAK,EAAE,CAAA;AACvB;;;ACnYO,SAAS,mBAAmBjB,KAAM,EAAA;AACvC,EAAM,MAAA,QAAA,GAAWA,SAAQ,EAAC;AAC1B,EAAM,MAAA,GAAA,GAAM,QAAS,CAAA,GAAA,IAAO,EAAC;AAC7B,EAAA,MAAM,KAAQ,GAAA,QAAA,CAAS,KAAS,IAAA,CAAC,QAAW,KAAS,CAAA,CAAA;AACrD,EAAM3B,MAAAA,MAAAA,GAAQ,iBAAiB,GAAI,CAAA,KAAA,EAAO,MAAM,CAAC,CAAA,IAAK,SAAS,KAAK,CAAA;AACpE,EAAM,MAAA,GAAA,GAAM,iBAAiB,GAAI,CAAA,GAAA,EAAK,MAAM,CAAC,CAAA,IAAK,SAAS,GAAG,CAAA;AAE9D,EAAA,IAAIA,UAAS,GAAK,EAAA;AAChB,IAAO,OAAA,EAAC,KAAAA,EAAAA,MAAAA,EAAO,GAAG,EAAA;AAAA;AAEtB;AAUA,SAAS,gBAAA,CAAiB,aAAa,YAAc,EAAA;AACnD,EAAI,IAAA,WAAA,IAAe,OAAO,WAAA,KAAgB,QAAU,EAAA;AAClD,IAAA,MAAM,OACJ,MAAU,IAAA,WAAA,GAAc,iBAAkB,CAAA,WAAA,CAAY,IAAI,CAAI,GAAA,KAAA,CAAA;AAChE,IAAA,MAAM,SACJ,QAAY,IAAA,WAAA,GACR,iBAAkB,CAAA,WAAA,CAAY,MAAM,CACpC,GAAA,KAAA,CAAA;AAEN,IAAI,IAAA,IAAA,IAAQ,WAAW,KAAW,CAAA,EAAA;AAChC,MAAO,OAAA;AAAA,QACL,IAAA;AAAA,QACA,QAAQ,MAAS,GAAA,CAAA;AAAA,QACjB,MAAA,EAAQ,kBAAkB,YAAY;AAAA,OACxC;AAAA;AACF;AAEJ;AAMA,SAAS,kBAAkB4C,MAAO,EAAA;AAChC,EAAA,OAAO,OAAOA,MAAAA,KAAU,QAAYA,IAAAA,MAAAA,GAAQ,KAAKA,MAAQ,GAAA,KAAA,CAAA;AAC3D;;;AC1CA,IAAM,UAAa,GAAA,CAAA;AACnB,IAAM,OAAU,GAAA,uHAAA;AAChB,IAAM,uBAA0B,GAAA,mFAAA;AAChC,IAAM,kBAAqB,GAAA,+EAAA;AAC3B,IAAM,aAAgB,GAAA,2DAAA;AACtB,IAAM,eAAkB,GAAA,uEAAA;AACxB,IAAM,SAAY,GAAA,wCAAA;AA8BX,SAAS,oBAAA,CAAqB,OAAS8F,EAAAA,GAAAA,EAAI,IAAM,EAAA,UAAA,EAAY,SAAW,EAAA,KAAA,EAAO,YAAc,EAAA,SAAA,EAAW,MAAQ,EAAA,UAAA,EAAY,SAAW,EAAA;AAC5I,EAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,EAAM,MAAA,UAAA,GAAa,IAAK,CAAA,MAAA,CAAO,MAAS,GAAA,CAAA;AACxC,EAAA,IAAI,IAAO,GAAA,CAAA;AAEX,EAAI,IAAA,UAAA;AAEJ,EAAI,IAAA,SAAA;AACJ,EAAOpF,OAAAA,MAAAA;AAYP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,MAAM,IAAI,CAAA;AAClB,IAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,IAAA,UAAA,GAAa+G,MAAK,GAAI,EAAA;AACtB,IAAO,OAAA,MAAA;AAAA;AAaT,EAAA,SAAS,OAAO/G,KAAM,EAAA;AACpB,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,IAAI,WAAiB,MAAA,SAAA;AACrB,MAAM,MAAA,KAAA,GAAQ,IAAI,YAAA,CAAa,sFAAwF,EAAA;AAAA,QACrH,KAAA,EAAO+G,MAAK,GAAI,EAAA;AAAA,QAChB,MAAQ,EAAA,gBAAA;AAAA,QACR,MAAQ,EAAA;AAAA,OACT,CAAA;AACD,MAAA,KAAA,CAAM,MAAM,OAAU,GAAA,uBAAA;AACtB,MAAM,MAAA,KAAA;AAAA;AAER,IAAI,IAAA,kBAAA,CAAmB/G,KAAI,CAAG,EAAA;AAC5B,MAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,MAAO,OAAA,QAAA;AAAA;AAET,IAAIA,IAAAA,KAAAA,KAAS,GAAO,IAAA,IAAA,KAAS,CAAG,EAAA;AAE9B,MAAA,MAAM,IAAO,GAAA,KAAA,GAAQ,kBAAmB,CAAA,IAAA,CAAK+G,OAAM,KAAO,EAAA,YAAA,EAAc,SAAW,EAAA,UAAA,EAAY,UAAY,EAAA,UAAA,IAAc,KAAO,EAAA,MAAA,IAAU,KAAK,CAAI,GAAA;AAAA,QACjJ,IAAM,EAAA,IAAA;AAAA,QACN,MAAQ,EAAA,KAAA;AAAA,OACV;AACA,MAAI,IAAA,IAAA,CAAK,SAAS,IAAM,EAAA;AACtB,QAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,QAAA,OAAA,CAAQ,QAAQ/G,KAAI,CAAA;AACpB,QAAA,OAAA,CAAQ,KAAK,UAAU,CAAA;AACvB,QAAM,MAAA,KAAA,GAAQ,OAAQ,CAAA,IAAA,CAAK,IAAI,CAAA;AAC/B,QAAI,IAAA,SAAA,IAAa,KAAK,MAAQ,EAAA;AAC5B,UAAA,MAAA,CAAO,OAAO,KAAO,EAAA;AAAA,YACnB,QAAQ,IAAK,CAAA;AAAA,WACd,CAAA;AAAA;AAEH,QAAOqK,OAAAA,GAAAA;AAAA;AAET,MAAA,SAAA,GAAY,IAAK,CAAA,OAAA;AACjB,MAAA,OAAA,CAAQ,MAAM,SAAS,CAAA;AACvB,MAAA,OAAA,CAAQ,QAAQrK,KAAI,CAAA;AACpB,MAAO,OAAA,MAAA;AAAA;AAET,IAAA,OAAA,CAAQ,MAAM,SAAS,CAAA;AACvB,IAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAapB,EAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,IAAIA,IAAAA,KAAAA,KAAS,OAAO,IAAS,KAAA,CAAA,IAAKA,UAAS,IAAQ,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC3E,MAAA,OAAA,CAAQ,KAAK,SAAS,CAAA;AACtB,MAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAIpB,IAAIA,IAAAA,KAAAA,KAAS,GAAO,IAAA,CAAC,KAAO,EAAA;AAC1B,MAAQ,IAAA,IAAA,CAAA;AAAA,KACV,MAAA,IAAWA,UAAS,GAAK,EAAA;AACvB,MAAQ,IAAA,IAAA,CAAA;AAAA;AAEV,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,MAAA;AAAA;AAcT,EAAA,SAAS,SAASA,KAAM,EAAA;AACtB,IAAM,MAAA,GAAA,GAAM+G,MAAK,GAAI,EAAA;AAGrB,IAAI,IAAA,GAAA,CAAI,IAAS,KAAA,UAAA,CAAW,IAAQ,IAAA,CAAC,SAAaA,IAAAA,KAAAA,CAAK,MAAO,CAAA,IAAA,CAAK,GAAI,CAAA,IAAI,CAAG,EAAA;AAC5E,MAAM,MAAA,KAAA,GAAQ,IAAI,YAAA,CAAa,8IAAgJ,EAAA;AAAA,QAC7K,KAAA,EAAOA,MAAK,GAAI,EAAA;AAAA,QAChB,MAAQ,EAAA,iBAAA;AAAA,QACR,MAAQ,EAAA;AAAA,OACT,CAAA;AACD,MAAA,KAAA,CAAM,MAAM,OAAU,GAAA,kBAAA;AACtB,MAAM,MAAA,KAAA;AAAA;AAiBR,IAAI,IAAA,aAAA,CAAc/G,KAAI,CAAG,EAAA;AACvB,MAAA,OAAO,aAAa,OAAS,EAAA,MAAA,EAAQ,cAAc,UAAa,GAAA,CAAC,EAAEA,KAAI,CAAA;AAAA;AAEzE,IAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAEtB;AAoBA,SAAS,mBAAmB,KAAO,EAAA,YAAA,EAAc,WAAW,UAAY,EAAA,UAAA,EAAY,YAAY,MAAQ,EAAA;AAEtG,EAAA,MAAM,SAAS,aAAc,CAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,UAAU,CAAG,EAAA;AAAA,IAC1D,KAAA;AAAA,IACA,UAAA,EAAY,CAAC,SAAS,CAAA;AAAA,IACtB,YAAA;AAAA,IACA,KAAO,EAAA,UAAA;AAAA,IACP,UAAY,EAAA,IAAA;AAAA,IACZ,UAAA;AAAA,IACA,MAAA,EAAQ,SAAS,IAAO,GAAA,EAAA;AAAA,IACxB,MAAA,EAAQ,SAAS,IAAO,GAAA;AAAA,GACzB,CAAA;AACD,EAAA,MAAM,SAAS,MAAO,CAAA,MAAA;AAGtB,EAAA,IAAI,UAAU,MAAQ,EAAA;AAGpB,IAAM,MAAA,IAAA,GAAO,MAAO,CAAA,IAAA,CAAK,CAAC,CAAA;AAC1B,IAAA,IAAI,KAAK,IAAS,KAAA,qBAAA,IAAyB,IAAK,CAAA,UAAA,CAAW,SAAS,kBAAoB,EAAA;AACtF,MAAM,MAAA,KAAA,GAAQ,mBAAmB,IAAI,CAAA;AACrC,MAAA,MAAM,QAAQ,IAAI,YAAA,CAAa,cAAiB,GAAA,IAAA,CAAK,OAAO,sDAAwD,EAAA;AAAA,QAClH,OAAO,KAAM,CAAA,KAAA;AAAA,QACb,MAAQ,EAAA,YAAA;AAAA,QACR,MAAQ,EAAA;AAAA,OACT,CAAA;AACD,MAAA,KAAA,CAAM,MAAM,OAAU,GAAA,aAAA;AACtB,MAAM,MAAA,KAAA;AAAA;AAER,IAAA,IAAI,IAAK,CAAA,UAAA,CAAW,UAAW,CAAA,CAAC,CAAG,EAAA;AACjC,MAAA,MAAM,QAAQ,kBAAmB,CAAA,IAAA,CAAK,UAAW,CAAA,UAAA,CAAW,CAAC,CAAC,CAAA;AAC9D,MAAM,MAAA,KAAA,GAAQ,IAAI,YAAA,CAAa,uEAAyE,EAAA;AAAA,QACtG,OAAO,KAAM,CAAA,KAAA;AAAA,QACb,MAAQ,EAAA,cAAA;AAAA,QACR,MAAQ,EAAA;AAAA,OACT,CAAA;AACD,MAAA,KAAA,CAAM,MAAM,OAAU,GAAA,eAAA;AACtB,MAAM,MAAA,KAAA;AAAA;AAER,IAAI,IAAA,IAAA,CAAK,UAAW,CAAA,UAAA,CAAW,CAAC,CAAA,IAAK,IAAK,CAAA,UAAA,CAAW,UAAW,CAAA,CAAC,CAAE,CAAA,IAAA,KAAS,eAAiB,EAAA;AAC3F,MAAA,MAAM,QAAQ,kBAAmB,CAAA,IAAA,CAAK,UAAW,CAAA,UAAA,CAAW,CAAC,CAAC,CAAA;AAC9D,MAAM,MAAA,KAAA,GAAQ,IAAI,YAAA,CAAa,cAAiB,GAAA,IAAA,CAAK,WAAW,UAAW,CAAA,CAAC,CAAE,CAAA,IAAA,GAAO,+CAAiD,EAAA;AAAA,QACpI,OAAO,KAAM,CAAA,KAAA;AAAA,QACb,MAAQ,EAAA,YAAA;AAAA,QACR,MAAQ,EAAA;AAAA,OACT,CAAA;AACD,MAAA,KAAA,CAAM,MAAM,OAAU,GAAA,aAAA;AACtB,MAAM,MAAA,KAAA;AAAA;AACR;AAEF,EAAA,IAAI,OAAO,KAAO,EAAA;AAChB,IAAM,MAAA,KAAA,GAAQ,IAAI,YAAA,CAAa,uCAAyC,EAAA;AAAA,MACtE,OAAO,MAAO,CAAA,KAAA;AAAA,MACd,KAAO,EAAA;AAAA,QACL,IAAA,EAAM,MAAO,CAAA,KAAA,CAAM,GAAI,CAAA,IAAA;AAAA,QACvB,MAAQ,EAAA,MAAA,CAAO,KAAM,CAAA,GAAA,CAAI,MAAS,GAAA,CAAA;AAAA,QAClC,MAAA,EAAQ,OAAO,KAAM,CAAA;AAAA,OACvB;AAAA,MACA,MAAQ,EAAA,OAAA;AAAA,MACR,MAAQ,EAAA;AAAA,KACT,CAAA;AACD,IAAA,KAAA,CAAM,MAAM,OAAU,GAAA,SAAA;AACtB,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,KAAA;AAAA,MACN,OAAS,EAAA;AAAA,KACX;AAAA;AAEF,EAAO,OAAA;AAAA,IACL,IAAM,EAAA,IAAA;AAAA,IACN;AAAA,GACF;AACF;;;AC9QO,SAAS,cAAchB,QAAS,EAAA;AACrC,EAAM,MAAA,QAAA,GAAWA,YAAW,EAAC;AAC7B,EAAA,MAAM,YAAY,QAAS,CAAA,SAAA;AAC3B,EAAA,MAAM,QAAQ,QAAS,CAAA,KAAA;AAMvB,EAAA,MAAM,SAAS,QAAS,CAAA,MAAA;AACxB,EAAA,IAAI,aAAa,QAAS,CAAA,UAAA;AAE1B,EAAI,IAAA,YAAA;AACJ,EAAI,IAAA,UAAA,KAAe,IAAQ,IAAA,UAAA,KAAe,KAAW,CAAA,EAAA;AACnD,IAAa,UAAA,GAAA,IAAA;AAAA;AAEf,EAAA,IAAI,KAAO,EAAA;AACT,IAAI,IAAA,CAAC,MAAM,iBAAmB,EAAA;AAC5B,MAAM,MAAA,IAAI,MAAM,iEAAiE,CAAA;AAAA;AAEnF,IAAA,YAAA,GAAe,OAAO,MAAO,CAAA;AAAA,MAC3B,WAAa,EAAA,IAAA;AAAA,MACb,UAAY,EAAA;AAAA,KACd,EAAG,SAAS,YAAY,CAAA;AAAA,GACf,MAAA,IAAA,QAAA,CAAS,YAAgB,IAAA,QAAA,CAAS,SAAW,EAAA;AACtD,IAAM,MAAA,IAAI,MAAM,2DAA2D,CAAA;AAAA;AAE7E,EAAO,OAAA;AAAA,IACL,IAAM,EAAA;AAAA,MACJ,CAAC,GAAG,GAAG;AAAA,QACL,IAAM,EAAA,mBAAA;AAAA,QACN,QAAU,EAAA,sBAAA;AAAA,QACV,QAAU,EAAA;AAAA;AACZ,KACF;AAAA,IACA,IAAM,EAAA;AAAA,MACJ,CAAC,GAAG,GAAG;AAAA,QACL,IAAM,EAAA,mBAAA;AAAA,QACN,QAAU,EAAA;AAAA;AACZ;AACF,GACF;AAaA,EAAS,SAAA,sBAAA,CAAuB,OAASqL,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAChD,IAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,IAAOpF,OAAAA,MAAAA;AAYP,IAAA,SAASA,OAAM3B,KAAM,EAAA;AAInB,MAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAapB,IAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,MAAA,OAAO,oBAAqB,CAAA,IAAA,CAAK+G,KAAM,EAAA,OAAA,EAAS,OAAO,mBAAqB,EAAA,yBAAA,EAA2B,wBAA0B,EAAA,KAAA,EAAO,YAAc,EAAA,SAAA,EAAW,MAAQ,EAAA,UAAU,EAAE/G,KAAI,CAAA;AAAA;AAa3L,IAAA,SAAS,MAAMA,KAAM,EAAA;AACnB,MAAO,OAAA,aAAA,CAAcA,KAAI,CAAA,GAAI,YAAa,CAAA,OAAA,EAAS,GAAK,EAAA,YAAY,CAAEA,CAAAA,KAAI,CAAI,GAAA,GAAA,CAAIA,KAAI,CAAA;AAAA;AAaxF,IAAA,SAAS,IAAIA,KAAM,EAAA;AAwBjB,MAAA,MAAM,aAAgB+G,GAAAA,KAAAA,CAAK,MAAO,CAAA,UAAA,CAAW,KAAK,EAAE,CAAA;AACpD,MAAA,MAAMwD,WAAa,GAAA,KAAA,CAAM,OAAQ,CAAA,aAAa,CAAI,GAAA,aAAA;AAAA;AAAA,QAClD,aAAgB,GAAA,CAAC,aAAa,CAAA,GAAI;AAAC,OAAA;AACnC,MAAA,MAAM,MAASA,GAAAA,WAAAA,CAAW,IAAK,CAAA,SAAU,CAAG,EAAA;AAC1C,QAAA,OAAO,EAAE,IAAS,KAAA,eAAA;AAAA,OACnB,CAAA;AAGD,MAAIvK,IAAAA,KAAAA,KAAS,MAAM,MAAQ,EAAA;AACzB,QAAA,OAAO,QAAQ,OAAQ,CAAA,MAAA,EAAQ,GAAK,EAAA,GAAG,EAAEA,KAAI,CAAA;AAAA;AAE/C,MAAOA,OAAAA,KAAAA,KAAS,QAAQ,kBAAmBA,CAAAA,KAAI,IAAIqK,GAAGrK,CAAAA,KAAI,CAAI,GAAA,GAAA,CAAIA,KAAI,CAAA;AAAA;AACxE;AAcF,EAAS,SAAA,sBAAA,CAAuB,SAASqK,GAAI,EAAA;AAC3C,IAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,IAAOpF,OAAAA,MAAAA;AAaP,IAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,MAAA,OAAO,oBAAqB,CAAA,IAAA,CAAK+G,KAAM,EAAA,OAAA,EAASsD,KAAI,mBAAqB,EAAA,yBAAA,EAA2B,wBAA0B,EAAA,KAAA,EAAO,cAAc,SAAW,EAAA,MAAA,EAAQ,UAAY,EAAA,IAAI,EAAErK,KAAI,CAAA;AAAA;AAC9L;AAEJ;;;AC3NA,IAAM,OAAU,GAAA,mBAAA;AAChB,IAAM,MAAS,GAAA,sCAAA;AACf,IAAM,SAAY,GAAA,uCAAA;AAKlB,IAAM2M,gBAAe,EAAC;AAWf,SAAS,MAAM3M,KAAM,EAAA;AAC1B,EAAA,OAAOA,QAAO,OAAQ,CAAA,IAAA,CAAK,OAAO,aAAcA,CAAAA,KAAI,CAAC,CAAI,GAAA,KAAA;AAC3D;AAaO,SAAS,IAAA,CAAKA,OAAMhB,QAAS,EAAA;AAClC,EAAA,MAAM,WAAWA,QAAW2N,IAAAA,aAAAA;AAC5B,EAAM,MAAA,EAAA,GAAK,QAAS,CAAA,GAAA,GAAM,SAAY,GAAA,MAAA;AACtC,EAAA,OAAO3M,QAAO,EAAG,CAAA,IAAA,CAAK,OAAO,aAAcA,CAAAA,KAAI,CAAC,CAAI,GAAA,KAAA;AACtD;;;ACnCA,IAAM4M,QAAU,GAAA,0DAAA;AAsCT,SAAS,UAAW,CAAA,OAAA,EAASvC,GAAI,EAAA,GAAA,EAAK,OAAO,YAAc,EAAA,SAAA,EAAW,SAAW,EAAA,OAAA,EAAS,aAAe,EAAA,oBAAA,EAAsB,oBAAsB,EAAA,WAAA,EAAa,oBAAoB,uBAAyB,EAAA,iBAAA,EAAmB,uBAAyB,EAAA,gBAAA,EAAkB,0BAA4B,EAAA,gCAAA,EAAkC,+BAAiC,EAAA,gBAAA,EAAkB,sBAAsB,2BAA6B,EAAA,gCAAA,EAAkC,yBAA2B,EAAA,iCAAA,EAAmC,4BAA8B,EAAA,kCAAA,EAAoC,iCAAmC,EAAA,+BAAA,EAAiC,uCAAuC,oCAAsC,EAAA;AACzuB,EAAA,MAAMtD,KAAO,GAAA,IAAA;AAEb,EAAI,IAAA,WAAA;AAEJ,EAAI,IAAA,MAAA;AACJ,EAAOpF,OAAAA,MAAAA;AAYP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,MAAM,OAAO,CAAA;AACrB,IAAA,OAAA,CAAQ,MAAM,aAAa,CAAA;AAC3B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,aAAa,CAAA;AAC1B,IAAO,OAAA,UAAA;AAAA;AAaT,EAAA,SAAS,WAAWA,KAAM,EAAA;AAGxB,IAAI,IAAA,yBAAA,CAA0BA,KAAI,CAAG,EAAA;AACnC,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAIjB,IAAc,WAAA,GAAA,UAAA;AACd,IAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAiB/B,EAAA,SAAS,WAAWA,KAAM,EAAA;AAExB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,oBAAoB,CAAA;AAClC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,oBAAoB,CAAA;AACjC,MAAc,WAAA,GAAA,oBAAA;AACd,MAAO,OAAA,iBAAA;AAAA;AAIT,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAIpB,IAAA,IAAIA,UAAS,IAAQA,IAAAA,KAAAA,IAAQ,CAAK,IAAA,KAAA,CAAQA,KAAI,CAAG,EAAA;AAC/C,MAAA,OAAA,CAAQ,MAAM,WAAW,CAAA;AACzB,MAAA,OAAA,CAAQ,MAAM,kBAAkB,CAAA;AAChC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,WAAA;AAAA;AAET,IAAA,KAAA,CAAMA,OAAM,aAAe,EAAA,kEAAA,IAAsEA,KAAS,KAAA,EAAA,GAAK,4DAA4D,EAAG,CAAA,CAAA;AAAA;AAehL,EAAA,SAAS,qBAAqBA,KAAM,EAAA;AAElC,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAIpB,IAAA,IAAIA,UAAS,IAAQA,IAAAA,KAAAA,IAAQ,CAAK,IAAA,KAAA,CAAQA,KAAI,CAAG,EAAA;AAC/C,MAAA,OAAA,CAAQ,MAAM,WAAW,CAAA;AACzB,MAAA,OAAA,CAAQ,MAAM,kBAAkB,CAAA;AAChC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,WAAA;AAAA;AAET,IAAMA,KAAAA,CAAAA,KAAAA,EAAM,eAAe,kEAAsEA,IAAAA,KAAAA,KAAS,MAAMA,KAAS,KAAA,EAAA,GAAK,8DAA8D,EAAG,CAAA,CAAA;AAAA;AAajM,EAAA,SAAS,YAAYA,KAAM,EAAA;AAEzB,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQA,KAAQ,IAAA,CAAA,IAAK,KAAOA,KAAM,EAAA;AAAA,MAC7C,GAAK,EAAA;AAAA,KACN,CAAG,EAAA;AACF,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,WAAA;AAAA;AAIT,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,OAAO,yBAA0BA,CAAAA,KAAI,CAAK,IAAA,iBAAA,CAAkBA,KAAI,CAAG,EAAA;AAC1I,MAAA,OAAA,CAAQ,KAAK,kBAAkB,CAAA;AAC/B,MAAc,WAAA,GAAA,gBAAA;AACd,MAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAE/B,IAAA,KAAA,CAAMA,OAAM,SAAW,EAAA,4GAAA,IAAgHA,KAAS,KAAA,EAAA,GAAK,wDAAwD,EAAG,CAAA,CAAA;AAAA;AAelN,EAAA,SAAS,iBAAiBA,KAAM,EAAA;AAE9B,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,uBAAuB,CAAA;AACrC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,uBAAuB,CAAA;AACpC,MAAc,WAAA,GAAA,gBAAA;AACd,MAAO,OAAA,iBAAA;AAAA;AAIT,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,uBAAuB,CAAA;AACrC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,uBAAuB,CAAA;AACpC,MAAc,WAAA,GAAA,eAAA;AACd,MAAO,OAAA,iBAAA;AAAA;AAIT,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,GAAA,IAAOA,KAAS,KAAA,IAAA,IAAQA,KAAQ,IAAA,CAAA,IAAK,KAAQA,CAAAA,KAAI,CAAG,EAAA;AAC7F,MAAA,OAAA,CAAQ,KAAK,WAAW,CAAA;AACxB,MAAA,OAAO,gBAAgBA,KAAI,CAAA;AAAA;AAE7B,IAAMA,KAAAA,CAAAA,KAAAA,EAAM,cAAc,kIAAkI,CAAA;AAAA;AAa9J,EAAA,SAAS,iBAAiBA,KAAM,EAAA;AAE9B,IAAA,IAAIA,UAAS,IAAQA,IAAAA,KAAAA,IAAQ,CAAK,IAAA,KAAA,CAAQA,KAAI,CAAG,EAAA;AAC/C,MAAA,OAAA,CAAQ,MAAM,iBAAiB,CAAA;AAC/B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,UAAA;AAAA;AAET,IAAMA,KAAAA,CAAAA,KAAAA,EAAM,sBAAsB,kIAAkI,CAAA;AAAA;AAatK,EAAA,SAAS,WAAWA,KAAM,EAAA;AAExB,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQA,KAAQ,IAAA,CAAA,IAAK,KAAOA,KAAM,EAAA;AAAA,MAC7C,GAAK,EAAA;AAAA,KACN,CAAG,EAAA;AACF,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,UAAA;AAAA;AAKT,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,GAAA,IAAO,yBAA0BA,CAAAA,KAAI,CAAK,IAAA,iBAAA,CAAkBA,KAAI,CAAG,EAAA;AAC3H,MAAA,OAAA,CAAQ,KAAK,iBAAiB,CAAA;AAC9B,MAAc,WAAA,GAAA,eAAA;AACd,MAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAE/B,IAAA,KAAA,CAAMA,OAAM,gBAAkB,EAAA,4GAAA,IAAgHA,KAAS,KAAA,EAAA,GAAK,wDAAwD,EAAG,CAAA,CAAA;AAAA;AAezN,EAAA,SAAS,gBAAgBA,KAAM,EAAA;AAE7B,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,uBAAuB,CAAA;AACrC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,uBAAuB,CAAA;AACpC,MAAc,WAAA,GAAA,gBAAA;AACd,MAAO,OAAA,iBAAA;AAAA;AAIT,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,GAAA,IAAOA,KAAS,KAAA,IAAA,IAAQA,KAAQ,IAAA,CAAA,IAAK,KAAQA,CAAAA,KAAI,CAAG,EAAA;AAC7F,MAAA,OAAA,CAAQ,KAAK,WAAW,CAAA;AACxB,MAAA,OAAO,gBAAgBA,KAAI,CAAA;AAAA;AAE7B,IAAMA,KAAAA,CAAAA,KAAAA,EAAM,qBAAqB,kIAAkI,CAAA;AAAA;AAarK,EAAA,SAAS,gBAAgBA,KAAM,EAAA;AAE7B,IAAA,IAAIA,UAAS,IAAQA,IAAAA,KAAAA,IAAQ,CAAK,IAAA,KAAA,CAAQA,KAAI,CAAG,EAAA;AAC/C,MAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA;AAC9B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,SAAA;AAAA;AAET,IAAA,KAAA,CAAMA,KAAM,EAAA,mBAAA,EAAqB,kEAAsEA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,IAAQA,IAAAA,KAAAA,GAAO,EAAMA,IAAAA,KAAAA,GAAO,EAAqB,GAAA,qDAAA,GAAwD,EAAG,CAAA,CAAA;AAAA;AAa7O,EAAA,SAAS,UAAUA,KAAM,EAAA;AAEvB,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQA,KAAQ,IAAA,CAAA,IAAK,KAAOA,KAAM,EAAA;AAAA,MAC7C,GAAK,EAAA;AAAA,KACN,CAAG,EAAA;AACF,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,SAAA;AAAA;AAIT,IAAIA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,GAAO,IAAA,yBAAA,CAA0BA,KAAI,CAAA,IAAK,iBAAkBA,CAAAA,KAAI,CAAG,EAAA;AAC5G,MAAA,OAAA,CAAQ,KAAK,gBAAgB,CAAA;AAC7B,MAAc,WAAA,GAAA,cAAA;AACd,MAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAE/B,IAAMA,KAAAA,CAAAA,KAAAA,EAAM,iBAAiB,4GAA4G,CAAA;AAAA;AAkB3I,EAAA,SAAS,eAAeA,KAAM,EAAA;AAE5B,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,GAAA,IAAOA,KAAS,KAAA,IAAA,IAAQA,KAAQ,IAAA,CAAA,IAAK,KAAQA,CAAAA,KAAI,CAAG,EAAA;AAC7F,MAAA,OAAA,CAAQ,KAAK,WAAW,CAAA;AACxB,MAAA,OAAO,gBAAgBA,KAAI,CAAA;AAAA;AAE7B,IAAMA,KAAAA,CAAAA,KAAAA,EAAM,oBAAoB,kIAAkI,CAAA;AAAA;AAmBpK,EAAA,SAAS,gBAAgBA,KAAM,EAAA;AAE7B,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,oBAAoB,CAAA;AAClC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,oBAAoB,CAAA;AACjC,MAAc,WAAA,GAAA,WAAA;AACd,MAAO,OAAA,iBAAA;AAAA;AAIT,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAIpB,IAAA,IAAIA,UAAS,GAAK,EAAA;AAChB,MAAA,OAAO,oBAAqB,CAAA,IAAA,CAAK+G,KAAM,EAAA,OAAA,EAAS,0BAA0B,0BAA4B,EAAA,gCAAA,EAAkC,+BAAiC,EAAA,KAAA,EAAO,cAAc,SAAW,EAAA,IAAA,EAAM,KAAO,EAAA,SAAS,EAAE/G,KAAI,CAAA;AAAA;AAIvO,IAAA,IAAIA,UAAS,IAAQA,IAAAA,KAAAA,IAAQ,CAAK,IAAA,KAAA,CAAQA,KAAI,CAAG,EAAA;AAC/C,MAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA;AAC9B,MAAA,OAAA,CAAQ,MAAM,oBAAoB,CAAA;AAClC,MAAA,OAAA,CAAQ,MAAM,2BAA2B,CAAA;AACzC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,oBAAA;AAAA;AAET,IAAMA,KAAAA,CAAAA,KAAAA,EAAM,yBAAyB,kIAAkI,CAAA;AAAA;AAazK,EAAA,SAAS,yBAAyBA,KAAM,EAAA;AACtC,IAAc,WAAA,GAAA,eAAA;AACd,IAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAiB/B,EAAA,SAAS,qBAAqBA,KAAM,EAAA;AAElC,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQA,KAAQ,IAAA,CAAA,IAAK,KAAOA,KAAM,EAAA;AAAA,MAC7C,GAAK,EAAA;AAAA,KACN,CAAG,EAAA;AACF,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,oBAAA;AAAA;AAIT,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,IAAMA,UAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,OAAO,yBAA0BA,CAAAA,KAAI,CAAK,IAAA,iBAAA,CAAkBA,KAAI,CAAG,EAAA;AAC1I,MAAA,OAAA,CAAQ,KAAK,2BAA2B,CAAA;AACxC,MAAc,WAAA,GAAA,yBAAA;AACd,MAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAE/B,IAAMA,KAAAA,CAAAA,KAAAA,EAAM,qBAAqB,kJAAkJ,CAAA;AAAA;AAiBrL,EAAA,SAAS,0BAA0BA,KAAM,EAAA;AAEvC,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,gCAAgC,CAAA;AAC9C,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,gCAAgC,CAAA;AAC7C,MAAc,WAAA,GAAA,wBAAA;AACd,MAAO,OAAA,iBAAA;AAAA;AAIT,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,KAAK,oBAAoB,CAAA;AACjC,MAAA,OAAA,CAAQ,MAAM,iCAAiC,CAAA;AAC/C,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,iCAAiC,CAAA;AAC9C,MAAc,WAAA,GAAA,oBAAA;AACd,MAAO,OAAA,iBAAA;AAAA;AAIT,IAAA,IAAIA,UAAS,EAAMA,IAAAA,KAAAA,KAAS,MAAMA,KAAS,KAAA,GAAA,IAAO,0BAA0BA,KAAI,CAAA,IAAK,iBAAkBA,CAAAA,KAAI,KAAKA,KAAS,KAAA,IAAA,IAAQA,SAAQ,CAAK,IAAA,KAAA,CAAQA,KAAI,CAAG,EAAA;AAC3J,MAAA,OAAA,CAAQ,KAAK,oBAAoB,CAAA;AACjC,MAAA,OAAA,CAAQ,KAAK,gBAAgB,CAAA;AAC7B,MAAc,WAAA,GAAA,eAAA;AACd,MAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAE/B,IAAMA,KAAAA,CAAAA,KAAAA,EAAM,wBAAwB,+HAA+H,CAAA;AAAA;AAarK,EAAA,SAAS,yBAAyBA,KAAM,EAAA;AAEtC,IAAA,IAAIA,UAAS,IAAQA,IAAAA,KAAAA,IAAQ,CAAK,IAAA,KAAA,CAAQA,KAAI,CAAG,EAAA;AAC/C,MAAA,OAAA,CAAQ,MAAM,yBAAyB,CAAA;AACvC,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,kBAAA;AAAA;AAET,IAAMA,KAAAA,CAAAA,KAAAA,EAAM,+BAA+B,+HAA+H,CAAA;AAAA;AAe5K,EAAA,SAAS,mBAAmBA,KAAM,EAAA;AAEhC,IAAA,IAAIA,KAAS,KAAA,IAAA,IAAQA,KAAQ,IAAA,CAAA,IAAK,KAAOA,KAAM,EAAA;AAAA,MAC7C,GAAK,EAAA;AAAA,KACN,CAAG,EAAA;AACF,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,kBAAA;AAAA;AAIT,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,GAAA,IAAO,yBAA0BA,CAAAA,KAAI,CAAK,IAAA,iBAAA,CAAkBA,KAAI,CAAG,EAAA;AAC3H,MAAA,OAAA,CAAQ,KAAK,yBAAyB,CAAA;AACtC,MAAA,OAAA,CAAQ,KAAK,oBAAoB,CAAA;AACjC,MAAc,WAAA,GAAA,uBAAA;AACd,MAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAE/B,IAAMA,KAAAA,CAAAA,KAAAA,EAAM,2BAA2B,kJAAkJ,CAAA;AAAA;AAe3L,EAAA,SAAS,wBAAwBA,KAAM,EAAA;AAErC,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,iCAAiC,CAAA;AAC/C,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,iCAAiC,CAAA;AAC9C,MAAc,WAAA,GAAA,oBAAA;AACd,MAAO,OAAA,iBAAA;AAAA;AAIT,IAAA,IAAIA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,EAAA,IAAMA,KAAS,KAAA,GAAA,IAAOA,KAAS,KAAA,IAAA,IAAQA,KAAQ,IAAA,CAAA,IAAK,KAAQA,CAAAA,KAAI,CAAG,EAAA;AAC7F,MAAA,OAAA,CAAQ,KAAK,gBAAgB,CAAA;AAC7B,MAAA,OAAO,gBAAgBA,KAAI,CAAA;AAAA;AAE7B,IAAMA,KAAAA,CAAAA,KAAAA,EAAM,8BAA8B,+HAA+H,CAAA;AAAA;AAe3K,EAAA,SAAS,qBAAqBA,KAAM,EAAA;AAElC,IAAIA,IAAAA,KAAAA,KAAS,EAAMA,IAAAA,KAAAA,KAAS,EAAI,EAAA;AAC9B,MAAA,OAAA,CAAQ,MAAM,4BAA4B,CAAA;AAC1C,MAAA,OAAA,CAAQ,MAAM,kCAAkC,CAAA;AAChD,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,kCAAkC,CAAA;AAC/C,MAASA,MAAAA,GAAAA,KAAAA;AACT,MAAO,OAAA,yBAAA;AAAA;AAIT,IAAA,IAAIA,UAAS,GAAK,EAAA;AAChB,MAAA,OAAO,oBAAqB,CAAA,IAAA,CAAK+G,KAAM,EAAA,OAAA,EAAS,+BAA+B,+BAAiC,EAAA,qCAAA,EAAuC,oCAAsC,EAAA,KAAA,EAAO,cAAc,SAAW,EAAA,KAAA,EAAO,KAAO,EAAA,SAAS,EAAE/G,KAAI,CAAA;AAAA;AAE5P,IAAA,KAAA,CAAMA,OAAM,wBAA0B,EAAA,0EAAA,IAA8EA,KAAS,KAAA,EAAA,GAAK,uFAAuF,EAAG,CAAA,CAAA;AAAA;AAa9N,EAAA,SAAS,8BAA8BA,KAAM,EAAA;AAC3C,IAAA,OAAA,CAAQ,KAAK,gBAAgB,CAAA;AAC7B,IAAc,WAAA,GAAA,eAAA;AACd,IAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAa/B,EAAA,SAAS,0BAA0BA,KAAM,EAAA;AACvC,IAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,MAAA,KAAA,CAAMA,OAAM,oBAAsB,EAAA,iCAAA,GAAoC,OAAO,aAAc,CAAA,MAAM,IAAI,GAAG,CAAA;AAAA;AAE1G,IAAA,IAAIA,UAAS,MAAQ,EAAA;AACnB,MAAA,OAAA,CAAQ,MAAM,kCAAkC,CAAA;AAChD,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,kCAAkC,CAAA;AAC/C,MAAA,OAAA,CAAQ,KAAK,4BAA4B,CAAA;AACzC,MAAA,OAAA,CAAQ,KAAK,gBAAgB,CAAA;AAC7B,MAAS,MAAA,GAAA,KAAA,CAAA;AACT,MAAc,WAAA,GAAA,eAAA;AACd,MAAO,OAAA,iBAAA;AAAA;AAET,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAc,WAAA,GAAA,yBAAA;AACd,MAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAE/B,IAAA,OAAA,CAAQ,MAAM,iCAAiC,CAAA;AAC/C,IAAA,OAAO,qBAAqBA,KAAI,CAAA;AAAA;AAalC,EAAA,SAAS,qBAAqBA,KAAM,EAAA;AAClC,IAAA,IAAIA,UAAS,IAAQA,IAAAA,KAAAA,KAAS,MAAU,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAChE,MAAA,OAAA,CAAQ,KAAK,iCAAiC,CAAA;AAC9C,MAAA,OAAO,0BAA0BA,KAAI,CAAA;AAAA;AAEvC,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAO,OAAA,oBAAA;AAAA;AAaT,EAAA,SAAS,YAAYA,KAAM,EAAA;AACzB,IAAA,IAAIA,UAAS,EAAI,EAAA;AACf,MAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAEpB,IAAMA,KAAAA,CAAAA,KAAAA,EAAM,4BAA4B,oBAAwBA,IAAAA,KAAAA,KAAS,MAAMA,KAAS,KAAA,EAAA,GAAK,8DAA8D,EAAG,CAAA,CAAA;AAAA;AAahK,EAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,IAAA,OAAA,CAAQ,MAAM,aAAa,CAAA;AAC3B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,aAAa,CAAA;AAC1B,IAAA,OAAA,CAAQ,KAAK,OAAO,CAAA;AACpB,IAAOqK,OAAAA,GAAAA;AAAA;AAaT,EAAA,SAAS,kBAAkBrK,KAAM,EAAA;AAC/B,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,MAAO,OAAA,oBAAA;AAAA;AAET,IAAA,IAAI,aAAcA,CAAAA,KAAI,CAAK,IAAA,iBAAA,CAAkBA,KAAI,CAAG,EAAA;AAClD,MAAA,OAAA,CAAQ,MAAM,cAAc,CAAA;AAC5B,MAAA,OAAO,mBAAmBA,KAAI,CAAA;AAAA;AAEhC,IAAA,OAAO,YAAYA,KAAI,CAAA;AAAA;AAazB,EAAA,SAAS,mBAAmBA,KAAM,EAAA;AAChC,IAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,MAAA,OAAA,CAAQ,KAAK,cAAc,CAAA;AAC3B,MAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAE/B,IAAA,IAAI,aAAcA,CAAAA,KAAI,CAAK,IAAA,iBAAA,CAAkBA,KAAI,CAAG,EAAA;AAClD,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,kBAAA;AAAA;AAET,IAAA,OAAA,CAAQ,KAAK,cAAc,CAAA;AAC3B,IAAA,OAAO,YAAYA,KAAI,CAAA;AAAA;AAazB,EAAA,SAAS,qBAAqBA,KAAM,EAAA;AAElC,IAAI,IAAA,CAAC,aAAa+G,KAAK,CAAA,MAAA,CAAO,KAAKA,KAAK,CAAA,GAAA,EAAM,CAAA,IAAI,CAAG,EAAA;AACnD,MAAA,MAAM,QAAQ,IAAI,YAAA,CAAa,kIAAkIA,KAAK,CAAA,GAAA,IAAO,6CAA6C,CAAA;AAC1N,MAAA,KAAA,CAAM,MAAM6F,QAAU,GAAA,wDAAA;AACtB,MAAM,MAAA,KAAA;AAAA;AAER,IAAA,OAAO,kBAAkB5M,KAAI,CAAA;AAAA;AAU/B,EAAS,SAAA,KAAA,CAAMA,KAAMoH,EAAAA,GAAAA,EAAI,MAAQ,EAAA;AAC/B,IAAA,MAAM,KAAQ,GAAA,IAAI,YAAa,CAAA,aAAA,IAAiBpH,KAAS,KAAA,IAAA,GAAO,aAAgB,GAAA,aAAA,IAAiBA,KAAS,KAAA,EAAA,GAAK,OAAU,GAAA,MAAA,CAAO,cAAcA,KAAI,CAAA,CAAA,GAAK,KAAQ,GAAA,iBAAA,CAAkBA,KAAI,CAAA,GAAI,GAAO,CAAA,GAAA,GAAA,GAAMoH,MAAK,aAAgB,GAAA,MAAA,EAAQL,KAAK,CAAA,GAAA,EAAO,EAAA,yCAAA,IAA6C/G,KAAS,KAAA,IAAA,GAAO,QAAQ,WAAY,CAAA,CAAA;AAChU,IAAA,KAAA,CAAM,GAAM4M,GAAAA,QAAAA,IAAW5M,KAAS,KAAA,IAAA,GAAO,4CAA+C,GAAA,0CAAA,CAAA;AACtF,IAAM,MAAA,KAAA;AAAA;AAEV;AAMA,SAAS,kBAAkBA,KAAM,EAAA;AAC/B,EAAO,OAAA,IAAA,GAAOA,MAAK,QAAS,CAAA,EAAE,EAAE,WAAY,EAAA,CAAE,QAAS,CAAA,CAAA,EAAG,GAAG,CAAA;AAC/D;;;AChyBO,SAAS,OAAA,CAAQ,OAAOhB,QAAS,EAAA;AACtC,EAAO,OAAA;AAAA,IACL,IAAM,EAAA,eAAA;AAAA,IACN,QAAU,EAAA;AAAA,GACZ;AAaA,EAAS,SAAA,eAAA,CAAgB,OAASqL,EAAAA,GAAAA,EAAI,GAAK,EAAA;AACzC,IAAA,OAAO,WAAW,IAAK,CAAA,IAAA,EAAM,OAASA,EAAAA,GAAAA,EAAI,KAAK,KAAOrL,EAAAA,QAAAA,CAAQ,YAAcA,EAAAA,QAAAA,CAAQ,WAAW,IAAM,EAAA,eAAA,EAAiB,qBAAuB,EAAA,4BAAA,EAA8B,kCAAkC,mBAAqB,EAAA,0BAAA,EAA4B,+BAAiC,EAAA,yBAAA,EAA2B,iCAAiC,wBAA0B,EAAA,kCAAA,EAAoC,wCAA0C,EAAA,uCAAA,EAAyC,0BAA0B,4BAA8B,EAAA,mCAAA,EAAqC,wCAA0C,EAAA,iCAAA,EAAmC,2CAA2C,oCAAsC,EAAA,0CAAA,EAA4C,yCAA2C,EAAA,uCAAA,EAAyC,+CAA+C,4CAA4C,CAAA;AAAA;AAEt8B;;;AClBO,SAAS,OAAA,CAAQ,OAAOA,QAAS,EAAA;AACtC,EAAO,OAAA;AAAA,IACL,IAAM,EAAA,eAAA;AAAA,IACN,QAAU,EAAA,eAAA;AAAA,IACV,QAAU,EAAA;AAAA,GACZ;AAaA,EAAS,SAAA,eAAA,CAAgB,OAASqL,EAAAA,GAAAA,EAAI,GAAK,EAAA;AACzC,IAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,IAAOpF,OAAAA,MAAAA;AAYP,IAAA,SAASA,OAAM3B,KAAM,EAAA;AAInB,MAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAapB,IAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,MAAA,OAAO,WAAW,IAAK+G,CAAAA,KAAAA,EAAM,OAAS,EAAA,KAAA,EAAO,KAAK,KAAO/H,EAAAA,QAAAA,CAAQ,YAAcA,EAAAA,QAAAA,CAAQ,WAAW,KAAO,EAAA,eAAA,EAAiB,uBAAuB,4BAA8B,EAAA,gCAAA,EAAkC,qBAAqB,0BAA4B,EAAA,+BAAA,EAAiC,yBAA2B,EAAA,+BAAA,EAAiC,0BAA0B,kCAAoC,EAAA,wCAAA,EAA0C,uCAAyC,EAAA,wBAAA,EAA0B,8BAA8B,mCAAqC,EAAA,wCAAA,EAA0C,iCAAmC,EAAA,yCAAA,EAA2C,sCAAsC,0CAA4C,EAAA,yCAAA,EAA2C,yCAAyC,6CAA+C,EAAA,4CAA4C,EAAEgB,KAAI,CAAA;AAAA;AAa98B,IAAA,SAAS,MAAMA,KAAM,EAAA;AACnB,MAAO,OAAA,aAAA,CAAcA,KAAI,CAAA,GAAI,YAAa,CAAA,OAAA,EAAS,GAAK,EAAA,YAAY,CAAEA,CAAAA,KAAI,CAAI,GAAA,GAAA,CAAIA,KAAI,CAAA;AAAA;AAaxF,IAAA,SAAS,IAAIA,KAAM,EAAA;AAIjB,MAAA,MAAM,cAAiB+G,GAAAA,KAAAA,CAAK,MAAO,CAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AAEtD,MAAMwD,MAAAA,WAAAA,GAAa,KAAM,CAAA,OAAA,CAAQ,cAAc,CAAA,GAAI,iBAAiB,cAAiB,GAAA,CAAC,cAAc,CAAA,GAAI,EAAC;AACzG,MAAA,MAAM,aAAaA,WAAW,CAAA,IAAA,CAAK,CAAK,CAAA,KAAA,CAAA,CAAE,SAAS,mBAAmB,CAAA;AAGtE,MAAA,OAAOvK,KAAS,KAAA,EAAA;AAAA;AAAA,QAEhB2B,OAAM3B,KAAI;AAAA,UAAIA,KAAAA,KAAS,OAAO,UAAa,GAAA,OAAA,CAAQ,QAAQ,UAAY,EAAA,GAAA,EAAK,GAAG,CAAEA,CAAAA,KAAI,IAAIA,KAAS,KAAA,IAAA,IAAQ,mBAAmBA,KAAI,CAAA,GAAIqK,IAAGrK,KAAI,CAAA,GAAI,IAAIA,KAAI,CAAA;AAAA;AAC1J;AAEJ;;;AC9FO,SAAS,OAAOhB,QAAS,EAAA;AAC9B,EAAM,MAAA,QAAA,GAAWA,YAAW,EAAC;AAC7B,EAAA,MAAM,QAAQ,QAAS,CAAA,KAAA;AAEvB,EAAI,IAAA,YAAA;AACJ,EAAA,IAAI,KAAO,EAAA;AACT,IAAA,IAAI,CAAC,KAAA,CAAM,KAAS,IAAA,CAAC,MAAM,iBAAmB,EAAA;AAC5C,MAAM,MAAA,IAAI,MAAM,iEAAiE,CAAA;AAAA;AAEnF,IAAA,YAAA,GAAe,OAAO,MAAO,CAAA;AAAA,MAC3B,WAAa,EAAA,IAAA;AAAA,MACb,UAAY,EAAA;AAAA,KACd,EAAG,SAAS,YAAc,EAAA;AAAA,MACxB,SAAW,EAAA;AAAA,KACZ,CAAA;AAAA,GACQ,MAAA,IAAA,QAAA,CAAS,YAAgB,IAAA,QAAA,CAAS,SAAW,EAAA;AACtD,IAAM,MAAA,IAAI,MAAM,2DAA2D,CAAA;AAAA;AAE7E,EAAO,OAAA;AAAA,IACL,IAAM,EAAA;AAAA,MACJ,CAAC,EAAE,GAAG,OAAA,CAAQ,SAAS,KAAW,CAAA,EAAA;AAAA,QAChC,YAAA;AAAA,QACA,SAAA,EAAW,SAAS,SAAa,IAAA,KAAA;AAAA,OAClC;AAAA,KACH;AAAA,IACA,IAAM,EAAA;AAAA,MACJ,CAAC,EAAE,GAAG,OAAA,CAAQ,SAAS,KAAW,CAAA,EAAA;AAAA,QAChC,YAAA;AAAA,QACA,SAAA,EAAW,SAAS,SAAa,IAAA,KAAA;AAAA,OAClC;AAAA;AACH,GACF;AACF;;;ACtCO,SAAS,KAAQ,GAAA;AACtB,EAAO,OAAA;AAAA,IACL,OAAA,EAAS,EAAC,IAAM,EAAA,CAAC,YAAY,cAAgB,EAAA,UAAA,EAAY,UAAU,CAAC;AAAA,GACtE;AACF;;;ACWA,IAAM6N,gBAAkB,GAAA;AAAA,EACtB,QAAU,EAAA,iBAAA;AAAA,EACV,OAAS,EAAA;AACX,CAAA;AACA,IAAMD,QAAU,GAAA,4DAAA;AAChB,IAAM,iBAAA,uBAAwB,GAAI,CAAA,CAAC,wBAAwB,0BAA4B,EAAA,wBAAA,EAA0B,mBAAmB,CAAC,CAAA;AAW9H,SAAS,SAAS5N,QAAS,EAAA;AAChC,EAAA,MAAM,qBAAwB,GAAA;AAAA,IAC5B,QAAU,EAAA,oBAAA;AAAA,IACV,QAAU,EAAA;AAAA,GACZ;AACA,EAAI,IAAA,CAACA,YAAW,CAACA,QAAAA,CAAQ,SAAS,CAACA,QAAAA,CAAQ,MAAM,KAAO,EAAA;AACtD,IAAM,MAAA,IAAI,MAAM,2DAA2D,CAAA;AAAA;AAE7E,EAAA,MAAM,QAAQA,QAAQ,CAAA,KAAA;AACtB,EAAM,MAAA,YAAA,GAAe,OAAO,MAAO,CAAA;AAAA,IACjC,WAAa,EAAA,IAAA;AAAA,IACb,UAAY,EAAA;AAAA,GACd,EAAGA,SAAQ,YAAc,EAAA;AAAA,IACvB,SAAW,EAAA;AAAA,GACZ,CAAA;AACD,EAAO,OAAA;AAAA,IACL,IAAM,EAAA;AAAA,MACJ,CAAC,GAAG,GAAG,qBAAA;AAAA,MACP,CAAC,GAAG,GAAG;AAAA;AACT,GACF;AAMA,EAAS,SAAA,oBAAA,CAAqB,OAASqL,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC9C,IAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,IAAA,MAAM,0BAA0BA,KAAK,CAAA,MAAA,CAAO,4BAA4BA,KAAK,CAAA,MAAA,CAAO,0BAA0B,EAAC,CAAA;AAC/G,IAAM,MAAA,UAAA,GAAa,IAAK,CAAA,MAAA,CAAO,MAAS,GAAA,CAAA;AACxC,IAAA,IAAI,MAAS,GAAA,EAAA;AACb,IAAOA,OAAAA,KAAAA,CAAK,YAAY,GAAMpF,GAAAA,MAAAA;AAY9B,IAAA,SAASA,OAAM3B,KAAM,EAAA;AAEnB,MAAA,IAAI+G,MAAK,GAAI,EAAA,CAAE,SAAS,CAAG,EAAA,OAAO,IAAI/G,KAAI,CAAA;AAC1C,MAAA,OAAA,CAAQ,MAAM,UAAU,CAAA;AACxB,MAAA,OAAA,CAAQ,MAAM,cAAc,CAAA;AAC5B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AAEpB,MAAU,MAAA,IAAA,MAAA,CAAO,aAAaA,KAAI,CAAA;AAClC,MAAO,OAAA,IAAA;AAAA;AAaT,IAAA,SAAS,KAAKA,KAAM,EAAA;AAClB,MAAI,IAAA,UAAA,CAAWA,KAAI,CAAG,EAAA;AACpB,QAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AAGpB,QAAU,MAAA,IAAA,MAAA,CAAO,aAAaA,KAAI,CAAA;AAClC,QAAO,OAAA,IAAA;AAAA;AAET,MAAA,IAAA,CAAK,MAAW,KAAA,QAAA,IAAY,MAAW,KAAA,QAAA,KAAaA,UAAS,EAAI,EAAA;AAC/D,QAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,QAAO,OAAA,MAAA;AAAA;AAET,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAajB,IAAA,SAAS,OAAOA,KAAM,EAAA;AACpB,MAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,QAAA,OAAA,CAAQ,KAAK,cAAc,CAAA;AAC3B,QAAA,OAAO,UAAUA,KAAI,CAAA;AAAA;AAEvB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,MAAA;AAAA;AAcT,IAAA,SAAS,UAAUA,KAAM,EAAA;AACvB,MAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,QAAA,OAAO,MAAMA,KAAI,CAAA;AAAA;AAEnB,MAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,QAAA,OAAO,QAAQ,KAAM6M,CAAAA,gBAAAA,EAAiB,KAAO,EAAA,iBAAiB,EAAE7M,KAAI,CAAA;AAAA;AAEtE,MAAA,OAAA,CAAQ,MAAM,cAAc,CAAA;AAC5B,MAAA,OAAO,OAAOA,KAAI,CAAA;AAAA;AAcpB,IAAA,SAAS,kBAAkBA,KAAM,EAAA;AAC/B,MAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,MAAO,OAAA,SAAA;AAAA;AAaT,IAAA,SAAS,MAAMA,KAAM,EAAA;AACnB,MAAA,MAAM,SAAS,aAAc+G,CAAAA,KAAAA,CAAK,MAAO,CAAA,KAAA,CAAM,UAAU,CAAG,EAAA;AAAA,QAC1D,KAAA;AAAA,QACA,YAAA;AAAA,QACA,UAAA,EAAY,CAAC,cAAc,CAAA;AAAA,QAC3B,MAAA,EAAQ,wBAAwB,MAAS,GAAA,CAAA,GAAI,SAAS,uBAAwB,CAAA,IAAA,CAAK,GAAG,CAAA,GAAI,IAAO,GAAA;AAAA,OAClG,CAAA;AACD,MAAA,IAAI,OAAO,KAAO,EAAA;AAGhB,QAAI/G,IAAAA,KAAAA,KAAS,IAAQ,IAAA,MAAA,CAAO,OAAS,EAAA;AACnC,UAAA,OAAO,kBAAkBA,KAAI,CAAA;AAAA;AAE/B,QAAM,MAAA,KAAA,GAAQ,IAAI,YAAA,CAAa,2CAA6C,EAAA;AAAA,UAC1E,OAAO,MAAO,CAAA,KAAA;AAAA,UACd,KAAO,EAAA;AAAA,YACL,IAAA,EAAM,MAAO,CAAA,KAAA,CAAM,GAAI,CAAA,IAAA;AAAA,YACvB,MAAQ,EAAA,MAAA,CAAO,KAAM,CAAA,GAAA,CAAI,MAAS,GAAA,CAAA;AAAA,YAClC,MAAA,EAAQ,OAAO,KAAM,CAAA;AAAA,WACvB;AAAA,UACA,MAAQ,EAAA,OAAA;AAAA,UACR,MAAQ,EAAA;AAAA,SACT,CAAA;AACD,QAAA,KAAA,CAAM,MAAM4M,QAAU,GAAA,2CAAA;AACtB,QAAM,MAAA,KAAA;AAAA;AAGR,MAAI,IAAA,uBAAA,CAAwB,SAAS,CAAG,EAAA;AACtC,QAAoB,MAAA,CAAO,MAAO,CAAA,IAAA,CAAK,KAAM;AAAA;AAE/C,MAAA,IAAI/H,MAAQ,GAAA,CAAA,CAAA;AACZ,MAAA,OAAO,EAAEA,MAAAA,GAAQ,MAAO,CAAA,MAAA,CAAO,KAAK,MAAQ,EAAA;AAC1C,QAAA,MAAMvB,KAAO,GAAA,MAAA,CAAO,MAAO,CAAA,IAAA,CAAKuB,MAAK,CAAA;AACrC,QAAA,IAAI,CAAC,iBAAA,CAAkB,GAAIvB,CAAAA,KAAAA,CAAK,IAAI,CAAG,EAAA;AACrC,UAAA,MAAM,QAAQ,IAAI,YAAA,CAAa,cAAiBA,GAAAA,KAAAA,CAAK,OAAO,8CAAgD,EAAA;AAAA,YAC1G,KAAA,EAAO,mBAAmBA,KAAI,CAAA;AAAA,YAC9B,MAAQ,EAAA,SAAA;AAAA,YACR,MAAQ,EAAA;AAAA,WACT,CAAA;AACD,UAAA,KAAA,CAAM,MAAMsJ,QAAU,GAAA,2DAAA;AACtB,UAAM,MAAA,KAAA;AAAA;AAMR,QAAA,IAAItJ,KAAK,CAAA,IAAA,KAAS,mBAAuB,IAAA,CAACyD,MAAK,SAAW,EAAA;AACxD,UAAA,IAAIlC,MAAQ,GAAA,CAAA,CAAA;AACZ,UAAA,OAAO,EAAEA,MAAAA,GAAQvB,KAAK,CAAA,UAAA,CAAW,MAAQ,EAAA;AACvC,YAAM,MAAA,SAAA,GAAYA,KAAK,CAAA,UAAA,CAAWuB,MAAK,CAAA;AACvC,YAAwB,uBAAA,CAAA,IAAA,CAAK,SAAU,CAAA,KAAA,CAAM,IAAI,CAAA;AAAA;AACnD;AACF;AAEF,MAAA,MAAA,CAAO,OAAO,OAAQ,CAAA,IAAA,CAAK,UAAU,CAAA,EAAG7F,SAAQ,SAAY,GAAA;AAAA,QAC1D,QAAQ,MAAO,CAAA;AAAA,UACb,KAAS,CAAA,CAAA;AACb,MAAA,OAAOqL,IAAGrK,KAAI,CAAA;AAAA;AAChB;AAEJ;AAGA,SAAS,iBAAA,CAAkB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC3C,EAAO1I,OAAAA,MAAAA;AAKP,EAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,IAAA,OAAA,CAAQ,MAAM,iBAAiB,CAAA;AAC/B,IAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,IAAA,OAAA,CAAQ,KAAK,iBAAiB,CAAA;AAC9B,IAAA,OAAO,OAAQ,CAAA,OAAA,CAAQ,SAAWqK,EAAAA,GAAAA,EAAI,GAAG,CAAA;AAAA;AAE7C;;;AbpPO,SAAS,MAAMrL,QAAS,EAAA;AAC7B,EAAA,MAAM,WAAW,MAAO,CAAA,MAAA;AAAA,IACtB;AAAA,MACE,KAAO,EAAA,MAAA,CAAO,MAAO,CAAA,IAAA,gBAAA,CAAAsK,UAAU,CAAA;AAAA,MAC/B,YAAc,EAAA,EAAC,WAAa,EAAA,IAAA,EAAM,YAAY,QAAQ,EAAA;AAAA,MACtD,SAAW,EAAA;AAAA,KACb;AAAA,IACAtK;AAAA,GACF;AAEA,EAAA,OAAO,iBAAkB,CAAA;AAAA,IACvB,SAAS,QAAQ,CAAA;AAAA,IACjB,cAAc,QAAQ,CAAA;AAAA,IACtB,OAAO,QAAQ,CAAA;AAAA,IACf,KAAM;AAAA,GACP,CAAA;AACH;;;AcvBA,IAAM2N,gBAAe,EAAC;AAaP,SAAR,UAA2B3N,QAAS,EAAA;AACzC,EAAA,MAAM+H,KAAO,GAAA,IAAA;AACb,EAAA,MAAM,WAAW/H,QAAW2N,IAAAA,aAAAA;AAC5B,EAAMjG,MAAAA,KAAAA,GAAOK,MAAK,IAAK,EAAA;AAEvB,EAAA,MAAM,mBACJL,GAAAA,KAAAA,CAAK,mBAAwBA,KAAAA,KAAAA,CAAK,sBAAsB,EAAC,CAAA;AAC3D,EAAA,MAAM,sBACJA,GAAAA,KAAAA,CAAK,sBAA2BA,KAAAA,KAAAA,CAAK,yBAAyB,EAAC,CAAA;AACjE,EAAA,MAAM,oBACJA,GAAAA,KAAAA,CAAK,oBAAyBA,KAAAA,KAAAA,CAAK,uBAAuB,EAAC,CAAA;AAE7D,EAAoB,mBAAA,CAAA,IAAA,CAAK,KAAM,CAAA,QAAQ,CAAC,CAAA;AACxC,EAAuB,sBAAA,CAAA,IAAA,CAAK,iBAAiB,CAAA;AAC7C,EAAqB,oBAAA,CAAA,IAAA,CAAK,aAAc,CAAA,QAAQ,CAAC,CAAA;AACnD;;;AC1CA,IAAsB,aAAA,GAAA,OAAA,CAAA,cAAA,EAAA,CAAA;AAEf,IAAM,KAAQ,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,CAAO,KAAK,CAAG,EAAA;AAAA,EAChD,IAAA,EAAM,OAAO,SAAS,CAAA;AAAA,EACtB,KAAA,EAAO,OAAO,UAAU,CAAA;AAAA,EACxB,SAAA,EAAW,OAAO,cAAc,CAAA;AAAA,EAChC,MAAA,EAAQ,OAAO,WAAW,CAAA;AAAA,EAC1B,IAAA,EAAM,OAAO,SAAS,CAAA;AAAA,EACtB,GAAA,EAAK,OAAO,QAAQ;AACtB,CAAC,CAAA;AASM,SAAS,OAAO,WAAa,EAAA;AAGlC,EAAe,cAAA,CAAA,WAAA,GAAc,WAAY,CAAA,WAAA,IAAe,WAAY,CAAA,IAAA;AAEpE,EAAO,OAAA,cAAA;AAWP,EAAS,SAAA,cAAA,CAAe,WAAW,MAAQ,EAAA;AAEzC,IAAA,MAAM,SAAS,MAAS,GAAA,IAAA,aAAA,CAAAoG,SAAU,MAAQ,EAAA,GAAG,MAAM,CAAI,GAAA,MAAA;AACvD,IAAO,OAAA,IAAI,YAAY,MAAM,CAAA;AAAA;AAEjC;;;ACwBA,IAAM5C,IAAAA,GAAM,EAAG,CAAA,cAAA;AACf,IAAM,OAAU,GAAA;AAAA,EACd,IAAM,EAAA,GAAA;AAAA,EACN,IAAM,EAAA;AACR,CAAA;AAUO,SAAS,UAAUlL,QAAS,EAAA;AAEjC,EAAA,MAAM,SAAS,EAAC;AAChB,EAAA,IAAI6F,MAAQ,GAAA,CAAA,CAAA;AAGZ,EAAM,MAAA,gBAAA,GAAmB,KAAM,CAAA,OAAA,CAAQ7F,QAAO,CAAA,GAC1CA,QACAA,GAAAA,QAAAA,GACA,CAACA,QAAO,CACR,GAAA,CAAC,MAAM,CAAA;AACX,EAAO,OAAA,EAAE6F,MAAQ,GAAA,gBAAA,CAAiB,MAAQ,EAAA;AACxC,IAAA,MAAA,CAAOA,MAAK,CAAA,GAAI,MAAO,CAAA,gBAAA,CAAiBA,MAAK,CAAC,CAAA;AAAA;AAEhD,EAAO,OAAA,MAAA;AACT;AAUA,SAAS,OAAO,MAAQ,EAAA;AACtB,EAAA,IAAI,MAAS,GAAA,MAAA;AACb,EAAI,IAAA,OAAO,WAAW,QAAU,EAAA;AAC9B,IAAA,IAAI,CAACqF,IAAAA,CAAI,IAAK,CAAA,OAAA,EAAS,MAAM,CAAG,EAAA;AAC9B,MAAM,MAAA,KAAA,CAAM,sCAAsC,MAAM,CAAA;AAAA;AAE1D,IAAS,MAAA,GAAA;AAAA,MACP,IAAM,EAAA,MAAA;AAAA,MACN,MAAA,EAAQ,QAAQ,MAAM;AAAA,KACxB;AAAA,GACF,MAAA,IAAW,OAAO,MAAA,KAAW,QAAU,EAAA;AACrC,IAAM,MAAA,KAAA,CAAM,6CAA6C,MAAM,CAAA;AAAA;AAEjE,EAAA,IAAI,CAACA,IAAAA,CAAI,IAAK,CAAA,MAAA,EAAQ,MAAM,CAAG,EAAA;AAC7B,IAAM,MAAA,KAAA,CAAM,iCAAiC,MAAM,CAAA;AAAA;AAErD,EAAI,IAAA,CAACA,IAAI,CAAA,IAAA,CAAK,MAAQ,EAAA,OAAO,CAAK,IAAA,CAACA,IAAI,CAAA,IAAA,CAAK,MAAQ,EAAA,QAAQ,CAAG,EAAA;AAC7D,IAAM,MAAA,KAAA,CAAM,8CAA8C,MAAM,CAAA;AAAA;AAElE,EAAO,OAAA,MAAA;AACT;;;ACjGO,SAAS,YAAYlL,QAAS,EAAA;AACnC,EAAM,MAAA,OAAA,GAAU,UAAUA,QAAO,CAAA;AAEjC,EAAA,MAAMmM,QAAO,EAAC;AACd,EAAA,IAAItG,MAAQ,GAAA,CAAA,CAAA;AACZ,EAAO,OAAA,EAAEA,MAAQ,GAAA,OAAA,CAAQ,MAAQ,EAAA;AAC/B,IAAMkI,MAAAA,OAAAA,GAAS,QAAQlI,MAAK,CAAA;AAC5B,IAAA,MAAM7E,QAAO,KAAM+M,CAAAA,OAAAA,EAAQ,MAAM,CAAA,CAAE,WAAW,CAAC,CAAA;AAC/C,IAAM,MAAA,SAAA,GAAY,gBAAgBA,OAAM,CAAA;AACxC,IAAM,MAAA,QAAA,GAAW5B,MAAKnL,KAAI,CAAA;AAC1B,IAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,QAAQ,CAAG,EAAA;AAC3B,MAAA,QAAA,CAAS,KAAK,SAAS,CAAA;AAAA,KAClB,MAAA;AAEL,MAAAmL,KAAKnL,CAAAA,KAAI,CAAI,GAAA,CAAC,SAAS,CAAA;AAAA;AACzB;AAEF,EAAO,OAAA;AAAA,IACL,IAAAmL,EAAAA;AAAA,GACF;AACF;AAMA,SAAS,gBAAgB4B,OAAQ,EAAA;AAC/B,EAAA,MAAM,WAAWA,OAAO,CAAA,QAAA;AACxB,EAAM,MAAA,eAAA;AAAA;AAAA,IAA2CA,OAAO,CAAA;AAAA,GAAA;AACxD,EAAM,MAAA,SAAA;AAAA;AAAA,IAAqC,eAAkB,GAAA;AAAA,GAAA;AAC7D,EAAM,MAAA,YAAA;AAAA;AAAA,IAAwC,SAAY,GAAA;AAAA,GAAA;AAC1D,EAAM,MAAA,SAAA;AAAA;AAAA,IAAqC,eAAkB,GAAA;AAAA,GAAA;AAC7D,EAAA,MAAM,qBAAwB,GAAA;AAAA,IAC5B,QAAU,EAAA,oBAAA;AAAA,IACV,OAAS,EAAA;AAAA,GACX;AAOA,EAAI,IAAA,MAAA;AACJ,EAAA,IAAI,WAAc,GAAA,CAAA;AAClB,EAAO,OAAA;AAAA,IACL,QAAU,EAAA,mBAAA;AAAA,IACV,QAAU,EAAA;AAAA,GACZ;AAMA,EAAS,SAAA,mBAAA,CAAoB,OAAS1C,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC7C,IAAA,MAAMtD,KAAO,GAAA,IAAA;AACb,IAAOpF,OAAAA,MAAAA;AAcP,IAAA,SAASA,OAAM3B,KAAM,EAAA;AACnB,MAAMoJ,MAAAA,SAAAA,GAAWrC,MAAK,GAAI,EAAA;AAC1B,MAAA;AAAA;AAAA,QAEEqC,UAAS,MAAW,KAAA,CAAA;AAAA,SAEnBA,SAAAA,CAAS,SAAS,CAAK,IAAA,QAAA;AAAA,QACxB;AACA,QAAS,MAAA,GAAA,KAAA,CAAM2D,SAAQ,MAAM,CAAA;AAC7B,QAAc,WAAA,GAAA,CAAA;AACd,QAAA,IAAI/M,KAAS,KAAA,MAAA,CAAO,UAAW,CAAA,WAAW,CAAG,EAAA;AAC3C,UAAA,OAAA,CAAQ,MAAM,eAAe,CAAA;AAC7B,UAAA,OAAA,CAAQ,MAAM,SAAS,CAAA;AACvB,UAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,UAAA,OAAO,aAAaA,KAAI,CAAA;AAAA;AAC1B;AAEF,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAejB,IAAA,SAAS,aAAaA,KAAM,EAAA;AAC1B,MAAI,IAAA,WAAA,KAAgB,OAAO,MAAQ,EAAA;AACjC,QAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,QAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,UAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,UAAA,OAAO,uBAAuBA,KAAI,CAAA;AAAA;AAEpC,QAAA,OAAO,UAAUA,KAAI,CAAA;AAAA;AAEvB,MAAA,IAAIA,KAAS,KAAA,MAAA,CAAO,UAAW,CAAA,WAAA,EAAa,CAAG,EAAA;AAC7C,QAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,QAAO,OAAA,YAAA;AAAA;AAET,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAejB,IAAA,SAAS,uBAAuBA,KAAM,EAAA;AACpC,MAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,QAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,QAAO,OAAA,sBAAA;AAAA;AAET,MAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,MAAA,OAAO,UAAUA,KAAI,CAAA;AAAA;AAevB,IAAA,SAAS,UAAUA,KAAM,EAAA;AACvB,MAAI,IAAA,kBAAA,CAAmBA,KAAI,CAAG,EAAA;AAC5B,QAAA,OAAA,CAAQ,KAAK,SAAS,CAAA;AACtB,QAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,QAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,QAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AAEzB,QAAS,MAAA,GAAA,KAAA,CAAM+M,SAAQ,OAAO,CAAA;AAC9B,QAAc,WAAA,GAAA,CAAA;AACd,QAAA,OAAO,OAAQ,CAAA,OAAA,CAAQ,qBAAuB,EAAA,KAAA,EAAO,YAAY,CAAA;AAAA;AAInE,MAAA,OAAO,IAAI/M,KAAI,CAAA;AAAA;AAejB,IAAA,SAAS,aAAaA,KAAM,EAAA;AAC1B,MAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,QAAA,OAAO,WAAWA,KAAI,CAAA;AAAA;AAExB,MAAA,OAAA,CAAQ,MAAM,SAAS,CAAA;AACvB,MAAA,OAAO,cAAcA,KAAI,CAAA;AAAA;AAe3B,IAAA,SAAS,cAAcA,KAAM,EAAA;AAC3B,MAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,QAAA,OAAA,CAAQ,KAAK,SAAS,CAAA;AACtB,QAAA,OAAO,WAAWA,KAAI,CAAA;AAAA;AAExB,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAO,OAAA,aAAA;AAAA;AAeT,IAAA,SAAS,WAAWA,KAAM,EAAA;AAExB,MAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,QAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAIjB,MAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,MAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,MAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,MAAA,OAAO,OAAQ,CAAA,OAAA,CAAQ,qBAAuB,EAAA,KAAA,EAAO,YAAY,CAAA;AAAA;AAenE,IAAA,SAAS,MAAMA,KAAM,EAAA;AAEnB,MAAA,OAAA,CAAQ,KAAK,eAAe,CAAA;AAC5B,MAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAChB;AAIF,EAAS,SAAA,oBAAA,CAAqB,OAASqK,EAAAA,GAAAA,EAAI,GAAK,EAAA;AAC9C,IAAA,IAAI2C,YAAc,GAAA,CAAA;AAClB,IAAO,OAAA,UAAA;AAcP,IAAA,SAAS,WAAWhN,KAAM,EAAA;AACxB,MAAA,IAAIA,KAAS,KAAA,MAAA,CAAO,UAAWgN,CAAAA,YAAW,CAAG,EAAA;AAC3C,QAAA,OAAA,CAAQ,MAAM,SAAS,CAAA;AACvB,QAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,QAAA,OAAO,cAAchN,KAAI,CAAA;AAAA;AAE3B,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAejB,IAAA,SAAS,cAAcA,KAAM,EAAA;AAC3B,MAAIgN,IAAAA,YAAAA,KAAgB,OAAO,MAAQ,EAAA;AACjC,QAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,QAAI,IAAA,aAAA,CAAchN,KAAI,CAAG,EAAA;AACvB,UAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAC1B,UAAA,OAAO,wBAAwBA,KAAI,CAAA;AAAA;AAErC,QAAA,OAAO,WAAWA,KAAI,CAAA;AAAA;AAExB,MAAA,IAAIA,KAAS,KAAA,MAAA,CAAO,UAAWgN,CAAAA,YAAAA,EAAa,CAAG,EAAA;AAC7C,QAAA,OAAA,CAAQ,QAAQhN,KAAI,CAAA;AACpB,QAAO,OAAA,aAAA;AAAA;AAET,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AAejB,IAAA,SAAS,wBAAwBA,KAAM,EAAA;AACrC,MAAI,IAAA,aAAA,CAAcA,KAAI,CAAG,EAAA;AACvB,QAAA,OAAA,CAAQ,QAAQA,KAAI,CAAA;AACpB,QAAO,OAAA,uBAAA;AAAA;AAET,MAAA,OAAA,CAAQ,KAAK,YAAY,CAAA;AACzB,MAAA,OAAO,WAAWA,KAAI,CAAA;AAAA;AAexB,IAAA,SAAS,WAAWA,KAAM,EAAA;AACxB,MAAA,IAAIA,KAAS,KAAA,IAAA,IAAQ,kBAAmBA,CAAAA,KAAI,CAAG,EAAA;AAC7C,QAAA,OAAA,CAAQ,KAAK,SAAS,CAAA;AACtB,QAAA,OAAOqK,IAAGrK,KAAI,CAAA;AAAA;AAEhB,MAAA,OAAO,IAAIA,KAAI,CAAA;AAAA;AACjB;AAEJ;AAOA,SAAS,KAAA,CAAM+M,SAAQ,IAAM,EAAA;AAC3B,EAAOA,OAAAA,OAAAA,CAAO,SACV,IAAKA,CAAAA,OAAAA,CAAO,QAAQ,IAAI,CAAA,CAAE,OAAO,CAAC,CAAA;AAAA;AAAA,IAElC,IAAA,CAAKA,OAAO,CAAA,KAAA,EAAO,IAAI;AAAA,GAAA;AAC7B;AAOA,SAAS,IAAA,CAAK,QAAQ,IAAM,EAAA;AAC1B,EAAA,OAAO,OAAO,MAAA,KAAW,QAAW,GAAA,MAAA,GAAS,OAAO,IAAI,CAAA;AAC1D;;;ACzYe,SAAR,mBAAoC3B,OAAQ,EAAA;AAClD,EAAI,IAAA,OAAOA,YAAW,QAAU,EAAA;AAC/B,IAAM,MAAA,IAAI,UAAU,mBAAmB,CAAA;AAAA;AAKxC,EAAA,OAAOA,QACL,OAAQ,CAAA,qBAAA,EAAuB,MAAM,CACrC,CAAA,OAAA,CAAQ,MAAM,OAAO,CAAA;AACxB;;;ACeO,SAAS,wBAAwBpM,QAAS,EAAA;AAC/C,EAAM,MAAA,OAAA,GAAU,UAAUA,QAAO,CAAA;AAEjC,EAAA,MAAM,QAAQ,EAAC;AAEf,EAAA,MAAMqM,QAAO,EAAC;AACd,EAAA,IAAIxG,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAO,OAAA,EAAEA,MAAQ,GAAA,OAAA,CAAQ,MAAQ,EAAA;AAC/B,IAAMkI,MAAAA,OAAAA,GAAS,QAAQlI,MAAK,CAAA;AAC5B,IAAA,KAAA,CAAMkI,OAAO,CAAA,IAAI,CAAI,GAAA,MAAA,CAAOA,OAAM,CAAA;AAClC,IAAA1B,KAAAA,CAAK0B,OAAO,CAAA,IAAI,CAAI,GAAA,KAAA;AACpB,IAAA1B,KAAK0B,CAAAA,OAAAA,CAAO,IAAO,GAAA,OAAO,CAAI,GAAA,KAAA;AAAA;AAGhC,EAAO,OAAA,EAAC,KAAO,EAAA,IAAA,EAAA1B,KAAI,EAAA;AACrB;AAMA,SAAS,OAAO0B,OAAQ,EAAA;AACtB,EAAO,OAAA,IAAA;AAMP,EAAA,SAAS,KAAK,KAAO,EAAA;AAEnB,IAAK,IAAA,CAAA,KAAA,CAAM,EAAC,IAAMA,EAAAA,OAAAA,CAAO,MAAM,KAAO,EAAA,EAAA,IAAK,KAAK,CAAA;AAChD,IAAA,IAAA,CAAK,MAAO,EAAA;AAAA;AAEhB;AAMA,SAAS,MAAM,KAAO,EAAA;AACpB,EAAMrG,MAAAA,KAAAA,GAAO,KAAK,MAAO,EAAA;AACzB,EAAA,MAAMpD,QAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA;AAE7C,EAAA,IAAA,CAAK,KAAK,KAAK,CAAA;AAEf,EAAAA,KAAK,CAAA,KAAA,GAAQoD,KAAK,CAAA,OAAA,CAAQ,4BAA4B,EAAE,CAAA;AAC1D;AAMA,SAAS,MAAM,KAAO,EAAA;AACpB,EAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,IAAK,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AACvC,EAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,IAAK,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AACxC;AAUO,SAAS,sBAAsB1H,QAAS,EAAA;AAE7C,EAAA,MAAMiO,UAAS,EAAC;AAEhB,EAAA,MAAM,WAAW,EAAC;AAClB,EAAM,MAAA,OAAA,GAAU,UAAUjO,QAAO,CAAA;AACjC,EAAA,IAAI6F,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAO,OAAA,EAAEA,MAAQ,GAAA,OAAA,CAAQ,MAAQ,EAAA;AAC/B,IAAMkI,MAAAA,OAAAA,GAAS,QAAQlI,MAAK,CAAA;AAI5B,IAAA,QAAA,CAASkI,OAAO,CAAA,IAAI,CAAI,GAAA,OAAA,CAAQA,OAAM,CAAA;AAEtC,IAAM,MAAA,IAAA,GAAOG,MAAMH,CAAAA,OAAAA,EAAQ,MAAM,CAAA;AAEjC,IAAAE,QAAO,IAAK,CAAA;AAAA,MACV,OAAS,EAAA,IAAA;AAAA,MACT,SAAA,EAAW,IAAK,CAAA,MAAA,CAAO,CAAC,CAAA;AAAA,MACxB,KAAO,EAAA,kBAAA,CAAmB,IAAK,CAAA,MAAA,CAAO,CAAC,CAAC;AAAA,KACzC,CAAA;AAAA;AAGH,EAAO,OAAA,EAAC,MAAAA,EAAAA,OAAAA,EAAQ,QAAQ,EAAA;AAC1B;AAUA,SAAS,QAAQF,OAAQ,EAAA;AACvB,EAAM,MAAA,IAAA,GAAOG,MAAMH,CAAAA,OAAAA,EAAQ,MAAM,CAAA;AACjC,EAAMtI,MAAAA,MAAAA,GAAQyI,MAAMH,CAAAA,OAAAA,EAAQ,OAAO,CAAA;AAEnC,EAAOI,OAAAA,OAAAA;AAUP,EAAA,SAASA,QAAO7J,KAAM,EAAA;AACpB,IAAA,OAAO,QAAQA,KAAK,CAAA,KAAA,GAAQ,OAAOA,KAAK,CAAA,KAAA,GAAQ,MAAM,IAAOmB,GAAAA,MAAAA;AAAA;AAEjE;AAYA,SAASyI,MAAAA,CAAMH,SAAQ,IAAM,EAAA;AAC3B,EAAOA,OAAAA,OAAAA,CAAO,SACVK,KAAKL,CAAAA,OAAAA,CAAO,QAAQ,IAAI,CAAA,CAAE,OAAO,CAAC,CAAA;AAAA;AAAA,IAElCK,KAAAA,CAAKL,OAAO,CAAA,KAAA,EAAO,IAAI;AAAA,GAAA;AAC7B;AAaA,SAASK,KAAAA,CAAK,QAAQ,IAAM,EAAA;AAC1B,EAAA,OAAO,OAAO,MAAA,KAAW,QAAW,GAAA,MAAA,GAAS,OAAO,IAAI,CAAA;AAC1D;;;AC/JA,IAAMT,aAAe,GAAA,MAAA;AAcN,SAAR,kBAAmC3N,QAAS,EAAA;AAGjD,EAAM+H,MAAAA,KAAAA;AAAA;AAAA,IAAiC;AAAA,GAAA;AACvC,EAAA,MAAM,WAAW/H,QAAW2N,IAAAA,aAAAA;AAC5B,EAAMjG,MAAAA,KAAAA,GAAOK,MAAK,IAAK,EAAA;AAEvB,EAAA,MAAM,mBACJL,GAAAA,KAAAA,CAAK,mBAAwBA,KAAAA,KAAAA,CAAK,sBAAsB,EAAC,CAAA;AAC3D,EAAA,MAAM,sBACJA,GAAAA,KAAAA,CAAK,sBAA2BA,KAAAA,KAAAA,CAAK,yBAAyB,EAAC,CAAA;AACjE,EAAA,MAAM,oBACJA,GAAAA,KAAAA,CAAK,oBAAyBA,KAAAA,KAAAA,CAAK,uBAAuB,EAAC,CAAA;AAE7D,EAAoB,mBAAA,CAAA,IAAA,CAAK,WAAY,CAAA,QAAQ,CAAC,CAAA;AAC9C,EAAuB,sBAAA,CAAA,IAAA,CAAK,uBAAwB,CAAA,QAAQ,CAAC,CAAA;AAC7D,EAAqB,oBAAA,CAAA,IAAA,CAAK,qBAAsB,CAAA,QAAQ,CAAC,CAAA;AAC3D;;;ACEA,IAAMwD,IAAAA,GAAM,EAAG,CAAA,cAAA;AAcR,SAAS,MAAA,CAAO,KAAKlL,QAAS,EAAA;AACnC,EAAM,MAAA,QAAA,GAAWA,YAAW,EAAC;AA8B7B,EAASqO,SAAAA,IAAAA,CAAI9I,WAAU,UAAY,EAAA;AAEjC,IAAA,IAAI,KAAK8I,IAAI,CAAA,OAAA;AACb,IAAA,MAAM,WAAWA,IAAI,CAAA,QAAA;AAErB,IAAA,IAAI9I,MAAS2F,IAAAA,IAAAA,CAAI,IAAK3F,CAAAA,MAAAA,EAAO,GAAG,CAAG,EAAA;AAEjC,MAAA,MAAM,EAAK,GAAA,MAAA,CAAOA,MAAM,CAAA,GAAG,CAAC,CAAA;AAE5B,MAAK2F,EAAAA,GAAAA,IAAAA,CAAI,KAAK,QAAU,EAAA,EAAE,IAAI,QAAS,CAAA,EAAE,IAAImD,IAAI,CAAA,OAAA;AAAA;AAGnD,IAAA,IAAI,EAAI,EAAA;AACN,MAAA,OAAO,EAAG,CAAA,IAAA,CAAK,IAAM9I,EAAAA,MAAAA,EAAO,GAAG,UAAU,CAAA;AAAA;AAC3C;AAGF,EAAA8I,IAAI,CAAA,QAAA,GAAW,QAAS,CAAA,QAAA,IAAY,EAAC;AACrC,EAAAA,IAAAA,CAAI,UAAU,QAAS,CAAA,OAAA;AACvB,EAAAA,IAAAA,CAAI,UAAU,QAAS,CAAA,OAAA;AAGvB,EAAOA,OAAAA,IAAAA;AACT;;;ACjHA,IAAMnD,IAAAA,GAAM,EAAG,CAAA,cAAA;AAOR,SAASoD,UAAAA,CAAU,MAAMlD,UAAW,EAAA;AACzC,EAAA,IAAIvF,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAI,IAAA,GAAA;AAGJ,EAAA,IAAIuF,WAAU,UAAY,EAAA;AACxB,IAAA,OAAO,EAAEvF,MAAAA,GAAQuF,UAAU,CAAA,UAAA,CAAW,MAAQ,EAAA;AAC5C,MAAAkD,UAAU,CAAA,IAAA,EAAMlD,UAAU,CAAA,UAAA,CAAWvF,MAAK,CAAC,CAAA;AAAA;AAC7C;AAGF,EAAA,KAAK,OAAOuF,UAAW,EAAA;AACrB,IAAA,IAAIF,IAAI,CAAA,IAAA,CAAKE,UAAW,EAAA,GAAG,CAAG,EAAA;AAC5B,MAAA,QAAQ,GAAK;AAAA,QACX,KAAK,YAAc,EAAA;AAEjB,UAAA;AAAA;AACF;AAAA,QAGA,KAAK,QAAU,EAAA;AACb,UAAAvG,MAAK,IAAK,CAAA,GAAG,CAAGuG,EAAAA,UAAAA,CAAU,GAAG,CAAC,CAAA;AAC9B,UAAA;AAAA;AACF,QAEA,KAAK,MAAQ,EAAA;AACX,UAAAvG,MAAK,IAAK,CAAA,GAAG,CAAGuG,EAAAA,UAAAA,CAAU,GAAG,CAAC,CAAA;AAC9B,UAAA;AAAA;AACF,QAEA,KAAK,UAAY,EAAA;AACf,UAAA,GAAA,CAAI,IAAK,CAAA,GAAG,CAAGA,EAAAA,UAAAA,CAAU,GAAG,CAAC,CAAA;AAC7B,UAAA;AAAA;AACF,QAEA,SAAS;AAEP,UAAA,IAAA,CAAK,OAAQ,CAAA,GAAG,CAAIA,GAAAA,UAAAA,CAAU,GAAG,CAAA;AAAA;AACnC;AACF;AACF;AAGF,EAAO,OAAA,IAAA;AACT;AAOA,SAASvG,KAAAA,CAAK,MAAM,KAAO,EAAA;AACzB,EAAA,IAAI,KAAO,EAAA;AACT,IAAK,IAAA,CAAA,IAAA,CAAK,GAAG,KAAK,CAAA;AAAA;AAEtB;AAOA,SAAS,GAAA,CAAI,MAAM,KAAO,EAAA;AACxB,EAAA,IAAI,KAAO,EAAA;AACT,IAAO,MAAA,CAAA,MAAA,CAAO,MAAM,KAAK,CAAA;AAAA;AAE7B;;;AClEO,SAAS,UAAWP,CAAAA,KAAAA,EAAM,CAAG,EAAA,KAAA,EAAO,IAAM,EAAA;AAC/C,EAAM+H,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,YAAY,CAAA;AACrC,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AACxC,EAAA,OAAA,CAAQ,KAAK,IAAI,CAAA;AACjB,EAAA,OAAA,CAAQ,MAAM,CAAC,CAAA;AACf,EAAA,MAAM9G,SAAQ,KAAM,CAAA,WAAA;AAAA,IAClB,KAAM,CAAA,aAAA,CAAcjB,KAAM,EAAA,OAAA,CAAQ,SAAS,CAAA;AAAA,IAC3CgI;AAAA,GACF;AACA,EAAAD,KAAK,EAAA;AACL,EAAO9G,OAAAA,MAAAA;AACT;AAGA,SAAS+G,IAAAA,CAAI,IAAM,EAAA,CAAA,EAAG,KAAO,EAAA;AAC3B,EAAO,OAAA,GAAA,IAAO,KAAQ,GAAA,EAAA,GAAK,GAAO,CAAA,GAAA,IAAA;AACpC;;;ACnBO,SAAS,cAAA,CAAe,OAAO,OAAS,EAAA;AAC7C,EACE,OAAA,WAAA,CAAY,KAAO,EAAA,OAAA,CAAQ,WAAa,EAAA,IAAI,CAC5C,IAAA,CAAC,WAAY,CAAA,KAAA,EAAO,OAAQ,CAAA,cAAA,EAAgB,KAAK,CAAA;AAErD;AAQA,SAAS,WAAA,CAAY,KAAOzH,EAAAA,KAAAA,EAAM,IAAM,EAAA;AACtC,EAAI,IAAA,OAAOA,UAAS,QAAU,EAAA;AAC5B,IAAAA,KAAAA,GAAO,CAACA,KAAI,CAAA;AAAA;AAGd,EAAA,IAAI,CAACA,KAAAA,IAAQA,KAAK,CAAA,MAAA,KAAW,CAAG,EAAA;AAC9B,IAAO,OAAA,IAAA;AAAA;AAGT,EAAA,IAAIgB,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAO,OAAA,EAAEA,MAAQhB,GAAAA,KAAAA,CAAK,MAAQ,EAAA;AAC5B,IAAA,IAAI,KAAM,CAAA,QAAA,CAASA,KAAKgB,CAAAA,MAAK,CAAC,CAAG,EAAA;AAC/B,MAAO,OAAA,IAAA;AAAA;AACT;AAGF,EAAO,OAAA,KAAA;AACT;;;AC1BO,SAAS,SAAU,CAAA,CAAA,EAAG,EAAI,EAAA,KAAA,EAAO,IAAM,EAAA;AAC5C,EAAA,IAAIA,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAA,OAAO,EAAEA,MAAAA,GAAQ,KAAM,CAAA,MAAA,CAAO,MAAQ,EAAA;AAGpC,IAAA,IACE,KAAM,CAAA,MAAA,CAAOA,MAAK,CAAA,CAAE,SAAc,KAAA,IAAA,IAClC,cAAe,CAAA,KAAA,CAAM,KAAO,EAAA,KAAA,CAAM,MAAOA,CAAAA,MAAK,CAAC,CAC/C,EAAA;AACA,MAAA,OAAO,OAAQ,CAAA,IAAA,CAAK,IAAK,CAAA,MAAM,IAAI,EAAK,GAAA,GAAA;AAAA;AAC1C;AAGF,EAAO,OAAA,MAAA;AACT;;;ACnBO,SAAS,aAAA,CAAcN,QAAO,SAAW,EAAA;AAC9C,EAAM,MAAA,MAAA,GAAS,OAAOA,MAAK,CAAA;AAC3B,EAAIM,IAAAA,MAAAA,GAAQ,MAAO,CAAA,OAAA,CAAQ,SAAS,CAAA;AACpC,EAAA,IAAI,QAAWA,GAAAA,MAAAA;AACf,EAAA,IAAI,KAAQ,GAAA,CAAA;AACZ,EAAA,IAAI,GAAM,GAAA,CAAA;AAEV,EAAI,IAAA,OAAO,cAAc,QAAU,EAAA;AACjC,IAAM,MAAA,IAAI,UAAU,oBAAoB,CAAA;AAAA;AAG1C,EAAA,OAAOA,WAAU,CAAI,CAAA,EAAA;AACnB,IAAA,IAAIA,WAAU,QAAU,EAAA;AACtB,MAAI,IAAA,EAAE,QAAQ,GAAK,EAAA;AACjB,QAAM,GAAA,GAAA,KAAA;AAAA;AACR,KACK,MAAA;AACL,MAAQ,KAAA,GAAA,CAAA;AAAA;AAGV,IAAA,QAAA,GAAWA,SAAQ,SAAU,CAAA,MAAA;AAC7B,IAAAA,MAAQ,GAAA,MAAA,CAAO,OAAQ,CAAA,SAAA,EAAW,QAAQ,CAAA;AAAA;AAG5C,EAAO,OAAA,GAAA;AACT;;;ACzBO,SAAS,oBAAA,CAAqBvB,OAAM,KAAO,EAAA;AAChD,EAAO,OAAA,OAAA;AAAA,IACL,KAAM,CAAA,OAAA,CAAQ,MAAW,KAAA,KAAA,IACvBA,KAAK,CAAA,KAAA;AAAA,IAEL,CAACA,KAAK,CAAA,IAAA;AAAA,IAEN,UAAA,CAAW,IAAKA,CAAAA,KAAAA,CAAK,KAAK,CAAA;AAAA,IAE1B,CAAC,yCAAA,CAA0C,IAAKA,CAAAA,KAAAA,CAAK,KAAK;AAAA,GAC9D;AACF;;;ACbO,SAAS,WAAW,KAAO,EAAA;AAChC,EAAM,MAAA,MAAA,GAAS,KAAM,CAAA,OAAA,CAAQ,KAAS,IAAA,GAAA;AAEtC,EAAI,IAAA,MAAA,KAAW,GAAO,IAAA,MAAA,KAAW,GAAK,EAAA;AACpC,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,iCACE,MACA,GAAA;AAAA,KACJ;AAAA;AAGF,EAAO,OAAA,MAAA;AACT;;;ACJO,SAAS,IAAKA,CAAAA,KAAAA,EAAM,CAAG,EAAA,KAAA,EAAO,IAAM,EAAA;AACzC,EAAM,MAAA,MAAA,GAAS,WAAW,KAAK,CAAA;AAC/B,EAAM,MAAA,GAAA,GAAMA,MAAK,KAAS,IAAA,EAAA;AAC1B,EAAM,MAAA,MAAA,GAAS,MAAW,KAAA,GAAA,GAAM,aAAgB,GAAA,OAAA;AAEhD,EAAI,IAAA,oBAAA,CAAqBA,KAAM,EAAA,KAAK,CAAG,EAAA;AACrC,IAAM+H,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,cAAc,CAAA;AACvC,IAAA,MAAM9G,MAAQ,GAAA,KAAA,CAAM,WAAY,CAAA,GAAA,EAAK+G,IAAG,CAAA;AACxC,IAAAD,KAAK,EAAA;AACL,IAAO9G,OAAAA,MAAAA;AAAA;AAGT,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AACxC,EAAM,MAAA,QAAA,GAAW,MAAO,CAAA,MAAA,CAAO,IAAK,CAAA,GAAA,CAAI,aAAc,CAAA,GAAA,EAAK,MAAM,CAAA,GAAI,CAAG,EAAA,CAAC,CAAC,CAAA;AAC1E,EAAM8G,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,YAAY,CAAA;AACrC,EAAI9G,IAAAA,MAAAA,GAAQ,OAAQ,CAAA,IAAA,CAAK,QAAQ,CAAA;AAEjC,EAAA,IAAIjB,MAAK,IAAM,EAAA;AACb,IAAA,MAAM,OAAU,GAAA,KAAA,CAAM,KAAM,CAAA,CAAA,cAAA,EAAiB,MAAM,CAAE,CAAA,CAAA;AACrD,IAAAiB,UAAS,OAAQ,CAAA,IAAA;AAAA,MACf,KAAA,CAAM,IAAKjB,CAAAA,KAAAA,CAAK,IAAM,EAAA;AAAA,QACpB,MAAQiB,EAAAA,MAAAA;AAAA,QACR,KAAO,EAAA,GAAA;AAAA,QACP,MAAA,EAAQ,CAAC,GAAG,CAAA;AAAA,QACZ,GAAG,QAAQ,OAAQ;AAAA,OACpB;AAAA,KACH;AACA,IAAQ,OAAA,EAAA;AAAA;AAGV,EAAIjB,IAAAA,KAAAA,CAAK,IAAQA,IAAAA,KAAAA,CAAK,IAAM,EAAA;AAC1B,IAAA,MAAM,OAAU,GAAA,KAAA,CAAM,KAAM,CAAA,CAAA,cAAA,EAAiB,MAAM,CAAE,CAAA,CAAA;AACrD,IAAAiB,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AACzB,IAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,MACf,KAAA,CAAM,IAAKjB,CAAAA,KAAAA,CAAK,IAAM,EAAA;AAAA,QACpB,MAAQiB,EAAAA,MAAAA;AAAA,QACR,KAAO,EAAA,IAAA;AAAA,QACP,MAAA,EAAQ,CAAC,GAAG,CAAA;AAAA,QACZ,GAAG,QAAQ,OAAQ;AAAA,OACpB;AAAA,KACH;AACA,IAAQ,OAAA,EAAA;AAAA;AAGV,EAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,IAAI,CAAA;AAE1B,EAAA,IAAI,GAAK,EAAA;AACP,IAAAA,MAAS,IAAA,OAAA,CAAQ,IAAK,CAAA,GAAA,GAAM,IAAI,CAAA;AAAA;AAGlC,EAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,QAAQ,CAAA;AAC9B,EAAA8G,KAAK,EAAA;AACL,EAAO9G,OAAAA,MAAAA;AACT;AAGA,SAAS+G,IAAAA,CAAI,IAAM,EAAA,CAAA,EAAG,KAAO,EAAA;AAC3B,EAAQ,OAAA,CAAA,KAAA,GAAQ,KAAK,MAAU,IAAA,IAAA;AACjC;;;AClEO,SAAS,WAAW,KAAO,EAAA;AAChC,EAAM,MAAA,MAAA,GAAS,KAAM,CAAA,OAAA,CAAQ,KAAS,IAAA,GAAA;AAEtC,EAAI,IAAA,MAAA,KAAW,GAAO,IAAA,MAAA,KAAW,GAAK,EAAA;AACpC,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,kCACE,MACA,GAAA;AAAA,KACJ;AAAA;AAGF,EAAO,OAAA,MAAA;AACT;;;ACNO,SAASP,WAAWzH,CAAAA,KAAAA,EAAM,CAAG,EAAA,KAAA,EAAO,IAAM,EAAA;AAC/C,EAAM,MAAA,KAAA,GAAQ,WAAW,KAAK,CAAA;AAC9B,EAAM,MAAA,MAAA,GAAS,KAAU,KAAA,GAAA,GAAM,OAAU,GAAA,YAAA;AACzC,EAAM+H,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,YAAY,CAAA;AACrC,EAAI,IAAA,OAAA,GAAU,KAAM,CAAA,KAAA,CAAM,OAAO,CAAA;AACjC,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AACxC,EAAI9G,IAAAA,MAAAA,GAAQ,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AAC5B,EAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,IACf,KAAM,CAAA,IAAA,CAAK,KAAM,CAAA,aAAA,CAAcjB,KAAI,CAAG,EAAA;AAAA,MACpC,MAAQiB,EAAAA,MAAAA;AAAA,MACR,KAAO,EAAA,GAAA;AAAA,MACP,GAAG,QAAQ,OAAQ;AAAA,KACpB;AAAA,GACH;AACA,EAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,KAAK,CAAA;AAE3B,EAAQ,OAAA,EAAA;AAER,EAAA;AAAA;AAAA,IAEE,CAACjB,KAAK,CAAA,GAAA;AAAA,IAEN,cAAA,CAAe,IAAKA,CAAAA,KAAAA,CAAK,GAAG;AAAA,IAC5B;AACA,IAAU,OAAA,GAAA,KAAA,CAAM,MAAM,oBAAoB,CAAA;AAC1C,IAAAiB,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AACzB,IAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,MACf,KAAM,CAAA,IAAA,CAAKjB,KAAK,CAAA,GAAA,EAAK,EAAC,MAAA,EAAQiB,MAAO,EAAA,KAAA,EAAO,GAAK,EAAA,GAAG,OAAQ,CAAA,OAAA,IAAU;AAAA,KACxE;AACA,IAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AAAA,GACpB,MAAA;AAEL,IAAU,OAAA,GAAA,KAAA,CAAM,MAAM,gBAAgB,CAAA;AACtC,IAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,MACf,KAAA,CAAM,IAAKjB,CAAAA,KAAAA,CAAK,GAAK,EAAA;AAAA,QACnB,MAAQiB,EAAAA,MAAAA;AAAA,QACR,KAAA,EAAOjB,KAAK,CAAA,KAAA,GAAQ,GAAM,GAAA,IAAA;AAAA,QAC1B,GAAG,QAAQ,OAAQ;AAAA,OACpB;AAAA,KACH;AAAA;AAGF,EAAQ,OAAA,EAAA;AAER,EAAA,IAAIA,MAAK,KAAO,EAAA;AACd,IAAA,OAAA,GAAU,KAAM,CAAA,KAAA,CAAM,CAAQ,KAAA,EAAA,MAAM,CAAE,CAAA,CAAA;AACtC,IAAAiB,MAAS,IAAA,OAAA,CAAQ,IAAK,CAAA,GAAA,GAAM,KAAK,CAAA;AACjC,IAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,MACf,KAAA,CAAM,IAAKjB,CAAAA,KAAAA,CAAK,KAAO,EAAA;AAAA,QACrB,MAAQiB,EAAAA,MAAAA;AAAA,QACR,KAAO,EAAA,KAAA;AAAA,QACP,GAAG,QAAQ,OAAQ;AAAA,OACpB;AAAA,KACH;AACA,IAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,KAAK,CAAA;AAC3B,IAAQ,OAAA,EAAA;AAAA;AAGV,EAAA8G,KAAK,EAAA;AAEL,EAAO9G,OAAAA,MAAAA;AACT;;;ACnEO,SAAS,cAAc,KAAO,EAAA;AACnC,EAAM,MAAA,MAAA,GAAS,KAAM,CAAA,OAAA,CAAQ,QAAY,IAAA,GAAA;AAEzC,EAAI,IAAA,MAAA,KAAW,GAAO,IAAA,MAAA,KAAW,GAAK,EAAA;AACpC,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,qCACE,MACA,GAAA;AAAA,KACJ;AAAA;AAGF,EAAO,OAAA,MAAA;AACT;;;ACZO,SAAS,yBAAyBvE,KAAM,EAAA;AAC7C,EAAA,OAAO,QAAQA,KAAK,CAAA,QAAA,CAAS,EAAE,CAAA,CAAE,aAAgB,GAAA,GAAA;AACnD;;;AC8BO,SAAS,UAAA,CAAW,OAAS,EAAA,MAAA,EAAQ,MAAQ,EAAA;AAClD,EAAM,MAAA,WAAA,GAAc,kBAAkB,OAAO,CAAA;AAC7C,EAAM,MAAA,UAAA,GAAa,kBAAkB,MAAM,CAAA;AAG3C,EAAA,IAAI,gBAAgB,KAAW,CAAA,EAAA;AAC7B,IAAA,OAAO,UAAe,KAAA,KAAA,CAAA;AAAA;AAAA;AAAA;AAAA,MAIlB,MAAW,KAAA,GAAA,GACT,EAAC,MAAA,EAAQ,IAAM,EAAA,OAAA,EAAS,IAAI,EAAA,GAC5B,EAAC,MAAA,EAAQ,KAAO,EAAA,OAAA,EAAS,KAAK;AAAA,QAChC,UAAe,KAAA,CAAA;AAAA;AAAA,MAEb,EAAC,MAAA,EAAQ,IAAM,EAAA,OAAA,EAAS,IAAI;AAAA;AAAA;AAAA,MAE5B,EAAC,MAAA,EAAQ,KAAO,EAAA,OAAA,EAAS,IAAI;AAAA,KAAA;AAAA;AAIrC,EAAA,IAAI,gBAAgB,CAAG,EAAA;AACrB,IAAA,OAAO,UAAe,KAAA,KAAA,CAAA;AAAA;AAAA,MAElB,EAAC,MAAA,EAAQ,KAAO,EAAA,OAAA,EAAS,KAAK;AAAA,QAC9B,UAAe,KAAA,CAAA;AAAA;AAAA,MAEb,EAAC,MAAA,EAAQ,IAAM,EAAA,OAAA,EAAS,IAAI;AAAA;AAAA;AAAA,MAE5B,EAAC,MAAA,EAAQ,KAAO,EAAA,OAAA,EAAS,KAAK;AAAA,KAAA;AAAA;AAItC,EAAA,OAAO,UAAe,KAAA,KAAA,CAAA;AAAA;AAAA,IAElB,EAAC,MAAA,EAAQ,KAAO,EAAA,OAAA,EAAS,KAAK;AAAA,MAC9B,UAAe,KAAA,CAAA;AAAA;AAAA,IAEb,EAAC,MAAA,EAAQ,IAAM,EAAA,OAAA,EAAS,KAAK;AAAA;AAAA;AAAA,IAE7B,EAAC,MAAA,EAAQ,KAAO,EAAA,OAAA,EAAS,KAAK;AAAA,GAAA;AACtC;;;ACxEA,QAAA,CAAS,IAAO,GAAA,YAAA;AAST,SAAS,QAASsD,CAAAA,KAAAA,EAAM,CAAG,EAAA,KAAA,EAAO,IAAM,EAAA;AAC7C,EAAM,MAAA,MAAA,GAAS,cAAc,KAAK,CAAA;AAClC,EAAM+H,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,UAAU,CAAA;AACnC,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AACxC,EAAM,MAAA,MAAA,GAAS,OAAQ,CAAA,IAAA,CAAK,MAAM,CAAA;AAElC,EAAA,IAAIT,WAAU,OAAQ,CAAA,IAAA;AAAA,IACpB,KAAA,CAAM,kBAAkBtH,KAAM,EAAA;AAAA,MAC5B,KAAO,EAAA,MAAA;AAAA,MACP,MAAA;AAAA,MACA,GAAG,QAAQ,OAAQ;AAAA,KACpB;AAAA,GACH;AACA,EAAM,MAAA,WAAA,GAAcsH,QAAQ,CAAA,UAAA,CAAW,CAAC,CAAA;AACxC,EAAA,MAAM,IAAO,GAAA,UAAA;AAAA,IACX,KAAK,MAAO,CAAA,UAAA,CAAW,IAAK,CAAA,MAAA,CAAO,SAAS,CAAC,CAAA;AAAA,IAC7C,WAAA;AAAA,IACA;AAAA,GACF;AAEA,EAAA,IAAI,KAAK,MAAQ,EAAA;AACf,IAAAA,WAAU,wBAAyB,CAAA,WAAW,CAAIA,GAAAA,QAAAA,CAAQ,MAAM,CAAC,CAAA;AAAA;AAGnE,EAAA,MAAM,WAAcA,GAAAA,QAAAA,CAAQ,UAAWA,CAAAA,QAAAA,CAAQ,SAAS,CAAC,CAAA;AACzD,EAAMnG,MAAAA,MAAAA,GAAQ,WAAW,IAAK,CAAA,KAAA,CAAM,WAAW,CAAC,CAAA,EAAG,aAAa,MAAM,CAAA;AAEtE,EAAA,IAAIA,OAAM,MAAQ,EAAA;AAChB,IAAAmG,WAAUA,QAAQ,CAAA,KAAA,CAAM,GAAG,CAAE,CAAA,CAAA,GAAI,yBAAyB,WAAW,CAAA;AAAA;AAGvE,EAAM,MAAA,KAAA,GAAQ,OAAQ,CAAA,IAAA,CAAK,MAAM,CAAA;AAEjC,EAAAS,KAAK,EAAA;AAEL,EAAA,KAAA,CAAM,8BAAiC,GAAA;AAAA,IACrC,OAAO5G,MAAM,CAAA,OAAA;AAAA,IACb,QAAQ,IAAK,CAAA;AAAA,GACf;AACA,EAAA,OAAO,SAASmG,QAAU,GAAA,KAAA;AAC5B;AAQA,SAAS,YAAA,CAAa,CAAG,EAAA,EAAA,EAAI,KAAO,EAAA;AAClC,EAAO,OAAA,KAAA,CAAM,QAAQ,QAAY,IAAA,GAAA;AACnC;;;ACuEO,IAAM,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBT,SAAU,IAAM,EAAA;AACd,IAAI,IAAA,IAAA,KAAS,IAAQ,IAAA,IAAA,KAAS,KAAW,CAAA,EAAA;AACvC,MAAOP,OAAAA,GAAAA;AAAA;AAGT,IAAI,IAAA,OAAO,SAAS,UAAY,EAAA;AAC9B,MAAA,OAAO,YAAY,IAAI,CAAA;AAAA;AAGzB,IAAI,IAAA,OAAO,SAAS,QAAU,EAAA;AAC5B,MAAO,OAAA,KAAA,CAAM,QAAQ,IAAI,CAAA,GAAI,WAAW,IAAI,CAAA,GAAI,aAAa,IAAI,CAAA;AAAA;AAGnE,IAAI,IAAA,OAAO,SAAS,QAAU,EAAA;AAC5B,MAAA,OAAO,YAAY,IAAI,CAAA;AAAA;AAGzB,IAAM,MAAA,IAAI,MAAM,8CAA8C,CAAA;AAAA;AAChE,CAAA;AAOJ,SAAS,WAAW,KAAO,EAAA;AAEzB,EAAA,MAAM,SAAS,EAAC;AAChB,EAAA,IAAIxF,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAO,OAAA,EAAEA,MAAQ,GAAA,KAAA,CAAM,MAAQ,EAAA;AAC7B,IAAA,MAAA,CAAOA,MAAK,CAAA,GAAI,OAAQ,CAAA,KAAA,CAAMA,MAAK,CAAC,CAAA;AAAA;AAGtC,EAAA,OAAO,YAAY,GAAG,CAAA;AAMtB,EAAA,SAAS,OAAO,UAAY,EAAA;AAC1B,IAAA,IAAIA,MAAQ,GAAA,CAAA,CAAA;AAEZ,IAAO,OAAA,EAAEA,MAAQ,GAAA,MAAA,CAAO,MAAQ,EAAA;AAC9B,MAAA,IAAI,OAAOA,MAAK,CAAA,CAAE,MAAM,IAAM,EAAA,UAAU,GAAU,OAAA,IAAA;AAAA;AAGpD,IAAO,OAAA,KAAA;AAAA;AAEX;AAQA,SAAS,aAAa,KAAO,EAAA;AAC3B,EAAM,MAAA,aAAA;AAAA;AAAA,IAAwD;AAAA,GAAA;AAE9D,EAAA,OAAO,YAAYsF,IAAG,CAAA;AAMtB,EAAA,SAASA,KAAI7G,KAAM,EAAA;AACjB,IAAM,MAAA,YAAA;AAAA;AAAA;AAAA,MACoBA;AAAA,KAAA;AAI1B,IAAI,IAAA,GAAA;AAEJ,IAAA,KAAK,OAAO,KAAO,EAAA;AACjB,MAAA,IAAI,aAAa,GAAG,CAAA,KAAM,aAAc,CAAA,GAAG,GAAU,OAAA,KAAA;AAAA;AAGvD,IAAO,OAAA,IAAA;AAAA;AAEX;AAQA,SAAS,YAAY,KAAO,EAAA;AAC1B,EAAA,OAAO,YAAY,IAAI,CAAA;AAKvB,EAAA,SAAS,KAAKA,KAAM,EAAA;AAClB,IAAOA,OAAAA,KAAAA,IAAQA,MAAK,IAAS,KAAA,KAAA;AAAA;AAEjC;AAQA,SAAS,YAAY,YAAc,EAAA;AACjC,EAAO,OAAA,KAAA;AAMP,EAAS,SAAA,KAAA,CAAMiB,MAAOM,EAAAA,MAAAA,EAAO,MAAQ,EAAA;AACnC,IAAO,OAAA,OAAA;AAAA,MACL,cAAA,CAAeN,MAAK,CAAA,IAClB,YAAa,CAAA,IAAA;AAAA,QACX,IAAA;AAAA,QACAA,MAAAA;AAAA,QACA,OAAOM,MAAU,KAAA,QAAA,GAAWA,MAAQ,GAAA,KAAA,CAAA;AAAA,QACpC,MAAU,IAAA,KAAA;AAAA;AACZ,KACJ;AAAA;AAEJ;AAEA,SAASwF,GAAK,GAAA;AACZ,EAAO,OAAA,IAAA;AACT;AAMA,SAAS,eAAe9F,MAAO,EAAA;AAC7B,EAAA,OAAOA,MAAU,KAAA,IAAA,IAAQ,OAAOA,MAAAA,KAAU,YAAY,MAAUA,IAAAA,MAAAA;AAClE;;;AC9RO,SAASgJ,OAAM,CAAG,EAAA;AACvB,EAAA,OAAO,aAAe,CAAI,GAAA,UAAA;AAC5B;;;ACyNA,IAAMtI,SAAQ,EAAC;AAKR,IAAMuI,SAAW,GAAA,IAAA;AAKjB,IAAMC,KAAO,GAAA,KAAA;AAKb,IAAMC,KAAO,GAAA,MAAA;AAiDb,SAAS,YAAa,CAAA,IAAA,EAAM,IAAM,EAAA,OAAA,EAAS,OAAS,EAAA;AAEzD,EAAI,IAAA,KAAA;AAEJ,EAAA,IAAI,OAAO,IAAA,KAAS,UAAc,IAAA,OAAO,YAAY,UAAY,EAAA;AAC/D,IAAU,OAAA,GAAA,OAAA;AAEV,IAAU,OAAA,GAAA,IAAA;AAAA,GACL,MAAA;AAEL,IAAQ,KAAA,GAAA,IAAA;AAAA;AAGV,EAAMC,MAAAA,GAAAA,GAAK,QAAQ,KAAK,CAAA;AACxB,EAAM,MAAA,IAAA,GAAO,UAAU,CAAK,CAAA,GAAA,CAAA;AAE5B,EAAA,OAAA,CAAQ,IAAM,EAAA,KAAA,CAAA,EAAW,EAAE,CAAE,EAAA;AAO7B,EAAS,SAAA,OAAA,CAAQrK,KAAMuB,EAAAA,MAAAA,EAAO,OAAS,EAAA;AACrC,IAAMN,MAAAA,MAAAA;AAAA;AAAA,MACJjB,KAAQ,IAAA,OAAOA,KAAS,KAAA,QAAA,GAAWA,QAAO;AAAC,KAAA;AAG7C,IAAI,IAAA,OAAOiB,MAAM,CAAA,IAAA,KAAS,QAAU,EAAA;AAClC,MAAMrF,MAAAA,KAAAA;AAAA;AAAA,QAEJ,OAAOqF,MAAAA,CAAM,OAAY,KAAA,QAAA,GACrBA,MAAM,CAAA,OAAA;AAAA;AAAA,UAER,OAAOA,MAAAA,CAAM,IAAS,KAAA,QAAA,GACpBA,OAAM,IACN,GAAA,KAAA;AAAA;AAAA,OAAA;AAEN,MAAO,MAAA,CAAA,cAAA,CAAekI,QAAO,MAAQ,EAAA;AAAA,QACnC,KAAA,EACE,QAAWc,GAAAA,MAAAA,CAAMjK,KAAK,CAAA,IAAA,IAAQpE,QAAO,GAAMA,GAAAA,KAAAA,GAAO,GAAM,GAAA,EAAA,CAAG,CAAI,GAAA;AAAA,OAClE,CAAA;AAAA;AAGH,IAAOuN,OAAAA,MAAAA;AAEP,IAAA,SAASA,MAAQ,GAAA;AAEf,MAAA,IAAI,MAASxH,GAAAA,MAAAA;AAEb,MAAI,IAAA,SAAA;AAEJ,MAAIxD,IAAAA,OAAAA;AAEJ,MAAI,IAAA,YAAA;AAEJ,MAAI,IAAA,CAAC,IAAQkM,IAAAA,GAAAA,CAAGrK,KAAMuB,EAAAA,MAAAA,EAAO,OAAQ,CAAA,OAAA,CAAQ,MAAS,GAAA,CAAC,CAAK,IAAA,KAAA,CAAS,CAAG,EAAA;AAEtE,QAAA,MAAA,GAAS+I,SAAS,CAAA,OAAA,CAAQtK,KAAM,EAAA,OAAO,CAAC,CAAA;AAExC,QAAI,IAAA,MAAA,CAAO,CAAC,CAAA,KAAMmK,KAAM,EAAA;AACtB,UAAO,OAAA,MAAA;AAAA;AACT;AAGF,MAAI,IAAA,UAAA,IAAcnK,KAAQA,IAAAA,KAAAA,CAAK,QAAU,EAAA;AACvC,QAAM,MAAA,YAAA;AAAA;AAAA,UAA2CA;AAAA,SAAA;AAEjD,QAAA,IAAI,YAAa,CAAA,QAAA,IAAY,MAAO,CAAA,CAAC,MAAMoK,KAAM,EAAA;AAC/C,UAAAjM,OAAU,GAAA,CAAA,OAAA,GAAU,YAAa,CAAA,QAAA,CAAS,SAAS,CAAM,CAAA,IAAA,IAAA;AACzD,UAAe,YAAA,GAAA,OAAA,CAAQ,OAAO,YAAY,CAAA;AAE1C,UAAA,OAAOA,OAAS,GAAA,CAAA,CAAA,IAAMA,OAAS,GAAA,YAAA,CAAa,SAAS,MAAQ,EAAA;AAC3D,YAAM,MAAA,KAAA,GAAQ,YAAa,CAAA,QAAA,CAASA,OAAM,CAAA;AAE1C,YAAA,SAAA,GAAY,OAAQ,CAAA,KAAA,EAAOA,OAAQ,EAAA,YAAY,CAAE,EAAA;AAEjD,YAAI,IAAA,SAAA,CAAU,CAAC,CAAA,KAAMgM,KAAM,EAAA;AACzB,cAAO,OAAA,SAAA;AAAA;AAGT,YAAAhM,OAAAA,GACE,OAAO,SAAU,CAAA,CAAC,MAAM,QAAW,GAAA,SAAA,CAAU,CAAC,CAAA,GAAIA,OAAS,GAAA,IAAA;AAAA;AAC/D;AACF;AAGF,MAAO,OAAA,MAAA;AAAA;AACT;AAEJ;AAUA,SAASmM,UAASrJ,MAAO,EAAA;AACvB,EAAI,IAAA,KAAA,CAAM,OAAQA,CAAAA,MAAK,CAAG,EAAA;AACxB,IAAOA,OAAAA,MAAAA;AAAA;AAGT,EAAI,IAAA,OAAOA,WAAU,QAAU,EAAA;AAC7B,IAAO,OAAA,CAACiJ,WAAUjJ,MAAK,CAAA;AAAA;AAGzB,EAAA,OAAOA,WAAU,IAAQA,IAAAA,MAAAA,KAAU,KAAYU,CAAAA,GAAAA,MAAAA,GAAQ,CAACV,MAAK,CAAA;AAC/D;;;ACvHO,SAASkI,MAAM,CAAA,IAAA,EAAM,aAAe,EAAA,gBAAA,EAAkB,YAAc,EAAA;AAEzE,EAAI,IAAA,OAAA;AAEJ,EAAI,IAAA,IAAA;AAEJ,EAAI,IAAA,OAAA;AAEJ,EAAA,IACE,OAAO,aAAA,KAAkB,UACzB,IAAA,OAAO,qBAAqB,UAC5B,EAAA;AACA,IAAO,IAAA,GAAA,KAAA,CAAA;AACP,IAAU,OAAA,GAAA,aAAA;AACV,IAAU,OAAA,GAAA,gBAAA;AAAA,GACL,MAAA;AAEL,IAAO,IAAA,GAAA,aAAA;AAEP,IAAU,OAAA,GAAA,gBAAA;AACV,IAAU,OAAA,GAAA,YAAA;AAAA;AAGZ,EAAa,YAAA,CAAA,IAAA,EAAM,IAAM,EAAA,QAAA,EAAU,OAAO,CAAA;AAM1C,EAAS,SAAA,QAAA,CAASnJ,OAAM,OAAS,EAAA;AAC/B,IAAA,MAAM,MAAS,GAAA,OAAA,CAAQ,OAAQ,CAAA,MAAA,GAAS,CAAC,CAAA;AACzC,IAAA,MAAMuB,SAAQ,MAAS,GAAA,MAAA,CAAO,QAAS,CAAA,OAAA,CAAQvB,KAAI,CAAI,GAAA,KAAA,CAAA;AACvD,IAAO,OAAA,OAAA,CAAQA,KAAMuB,EAAAA,MAAAA,EAAO,MAAM,CAAA;AAAA;AAEtC;;;AC3SO,SAAS,qBAAA,CAAsBvB,OAAM,KAAO,EAAA;AACjD,EAAA,IAAI,gBAAmB,GAAA,KAAA;AAIvB,EAAAmJ,MAAAA,CAAMnJ,KAAM,EAAA,SAAUA,KAAM,EAAA;AAC1B,IACG,IAAA,OAAA,IAAWA,SAAQ,UAAW,CAAA,IAAA,CAAKA,MAAK,KAAK,CAAA,IAC9CA,KAAK,CAAA,IAAA,KAAS,OACd,EAAA;AACA,MAAmB,gBAAA,GAAA,IAAA;AACnB,MAAOmK,OAAAA,KAAAA;AAAA;AACT,GACD,CAAA;AAED,EAAO,OAAA,OAAA;AAAA,IACJ,CAAA,CAACnK,KAAK,CAAA,KAAA,IAASA,KAAK,CAAA,KAAA,GAAQ,CAC3B,KAAA,QAAA,CAASA,KAAI,CAAA,KACZ,KAAM,CAAA,OAAA,CAAQ,MAAU,IAAA,gBAAA;AAAA,GAC7B;AACF;;;AClBO,SAAS,OAAQA,CAAAA,KAAAA,EAAM,CAAG,EAAA,KAAA,EAAO,IAAM,EAAA;AAC5C,EAAM,MAAA,IAAA,GAAO,IAAK,CAAA,GAAA,CAAI,IAAK,CAAA,GAAA,CAAI,GAAGA,KAAK,CAAA,KAAA,IAAS,CAAC,CAAA,EAAG,CAAC,CAAA;AACrD,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AAExC,EAAI,IAAA,qBAAA,CAAsBA,KAAM,EAAA,KAAK,CAAG,EAAA;AACtC,IAAM+H,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,eAAe,CAAA;AACxC,IAAMwC,MAAAA,QAAAA,GAAU,KAAM,CAAA,KAAA,CAAM,UAAU,CAAA;AACtC,IAAMtJ,MAAAA,MAAAA,GAAQ,KAAM,CAAA,iBAAA,CAAkBjB,KAAM,EAAA;AAAA,MAC1C,GAAG,QAAQ,OAAQ,EAAA;AAAA,MACnB,MAAQ,EAAA,IAAA;AAAA,MACR,KAAO,EAAA;AAAA,KACR,CAAA;AACD,IAAAuK,QAAQ,EAAA;AACR,IAAAxC,KAAK,EAAA;AAEL,IAAA,OACE9G,MACA,GAAA,IAAA,GAAA,CACC,IAAS,KAAA,CAAA,GAAI,MAAM,GAAK,EAAA,MAAA;AAAA;AAAA,MAEvBA,MAAM,CAAA,MAAA;AAAA;AAAA,OAGH,IAAA,CAAK,GAAIA,CAAAA,MAAAA,CAAM,WAAY,CAAA,IAAI,GAAGA,MAAM,CAAA,WAAA,CAAY,IAAI,CAAC,CAAI,GAAA,CAAA;AAAA,KAClE;AAAA;AAIJ,EAAM,MAAA,QAAA,GAAW,GAAI,CAAA,MAAA,CAAO,IAAI,CAAA;AAChC,EAAM8G,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,YAAY,CAAA;AACrC,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,KAAA,CAAM,UAAU,CAAA;AAMtC,EAAQ,OAAA,CAAA,IAAA,CAAK,WAAW,GAAG,CAAA;AAE3B,EAAI9G,IAAAA,MAAAA,GAAQ,KAAM,CAAA,iBAAA,CAAkBjB,KAAM,EAAA;AAAA,IACxC,MAAQ,EAAA,IAAA;AAAA,IACR,KAAO,EAAA,IAAA;AAAA,IACP,GAAG,QAAQ,OAAQ;AAAA,GACpB,CAAA;AAED,EAAI,IAAA,QAAA,CAAS,IAAKiB,CAAAA,MAAK,CAAG,EAAA;AAExB,IAAAA,MAAAA,GAAQ,yBAAyBA,MAAM,CAAA,UAAA,CAAW,CAAC,CAAC,CAAA,GAAIA,MAAM,CAAA,KAAA,CAAM,CAAC,CAAA;AAAA;AAGvE,EAAAA,MAAQA,GAAAA,MAAAA,GAAQ,QAAW,GAAA,GAAA,GAAMA,MAAQ,GAAA,QAAA;AAEzC,EAAI,IAAA,KAAA,CAAM,QAAQ,QAAU,EAAA;AAC1B,IAAAA,UAAS,GAAM,GAAA,QAAA;AAAA;AAGjB,EAAQ,OAAA,EAAA;AACR,EAAA8G,KAAK,EAAA;AAEL,EAAO9G,OAAAA,MAAAA;AACT;;;ACtEA,IAAA,CAAK,IAAO,GAAA,QAAA;AAML,SAAS,KAAKjB,KAAM,EAAA;AACzB,EAAA,OAAOA,MAAK,KAAS,IAAA,EAAA;AACvB;AAKA,SAAS,QAAW,GAAA;AAClB,EAAO,OAAA,GAAA;AACT;;;ACZA,KAAA,CAAM,IAAO,GAAA,SAAA;AASN,SAAS,KAAMA,CAAAA,KAAAA,EAAM,CAAG,EAAA,KAAA,EAAO,IAAM,EAAA;AAC1C,EAAM,MAAA,KAAA,GAAQ,WAAW,KAAK,CAAA;AAC9B,EAAM,MAAA,MAAA,GAAS,KAAU,KAAA,GAAA,GAAM,OAAU,GAAA,YAAA;AACzC,EAAM+H,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,OAAO,CAAA;AAChC,EAAI,IAAA,OAAA,GAAU,KAAM,CAAA,KAAA,CAAM,OAAO,CAAA;AACjC,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AACxC,EAAI9G,IAAAA,MAAAA,GAAQ,OAAQ,CAAA,IAAA,CAAK,IAAI,CAAA;AAC7B,EAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,IACf,KAAM,CAAA,IAAA,CAAKjB,KAAK,CAAA,GAAA,EAAK,EAAC,MAAA,EAAQiB,MAAO,EAAA,KAAA,EAAO,GAAK,EAAA,GAAG,OAAQ,CAAA,OAAA,IAAU;AAAA,GACxE;AACA,EAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,IAAI,CAAA;AAE1B,EAAQ,OAAA,EAAA;AAER,EAAA;AAAA;AAAA,IAEG,CAACjB,KAAK,CAAA,GAAA,IAAOA,KAAK,CAAA,KAAA;AAAA,IAEnB,cAAA,CAAe,IAAKA,CAAAA,KAAAA,CAAK,GAAG;AAAA,IAC5B;AACA,IAAU,OAAA,GAAA,KAAA,CAAM,MAAM,oBAAoB,CAAA;AAC1C,IAAAiB,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AACzB,IAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,MACf,KAAM,CAAA,IAAA,CAAKjB,KAAK,CAAA,GAAA,EAAK,EAAC,MAAA,EAAQiB,MAAO,EAAA,KAAA,EAAO,GAAK,EAAA,GAAG,OAAQ,CAAA,OAAA,IAAU;AAAA,KACxE;AACA,IAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AAAA,GACpB,MAAA;AAEL,IAAU,OAAA,GAAA,KAAA,CAAM,MAAM,gBAAgB,CAAA;AACtC,IAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,MACf,KAAA,CAAM,IAAKjB,CAAAA,KAAAA,CAAK,GAAK,EAAA;AAAA,QACnB,MAAQiB,EAAAA,MAAAA;AAAA,QACR,KAAA,EAAOjB,KAAK,CAAA,KAAA,GAAQ,GAAM,GAAA,GAAA;AAAA,QAC1B,GAAG,QAAQ,OAAQ;AAAA,OACpB;AAAA,KACH;AAAA;AAGF,EAAQ,OAAA,EAAA;AAER,EAAA,IAAIA,MAAK,KAAO,EAAA;AACd,IAAA,OAAA,GAAU,KAAM,CAAA,KAAA,CAAM,CAAQ,KAAA,EAAA,MAAM,CAAE,CAAA,CAAA;AACtC,IAAAiB,MAAS,IAAA,OAAA,CAAQ,IAAK,CAAA,GAAA,GAAM,KAAK,CAAA;AACjC,IAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,MACf,KAAA,CAAM,IAAKjB,CAAAA,KAAAA,CAAK,KAAO,EAAA;AAAA,QACrB,MAAQiB,EAAAA,MAAAA;AAAA,QACR,KAAO,EAAA,KAAA;AAAA,QACP,GAAG,QAAQ,OAAQ;AAAA,OACpB;AAAA,KACH;AACA,IAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,KAAK,CAAA;AAC3B,IAAQ,OAAA,EAAA;AAAA;AAGV,EAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AACzB,EAAA8G,KAAK,EAAA;AAEL,EAAO9G,OAAAA,MAAAA;AACT;AAKA,SAAS,SAAY,GAAA;AACnB,EAAO,OAAA,GAAA;AACT;;;AC5EA,cAAA,CAAe,IAAO,GAAA,kBAAA;AASf,SAAS,cAAejB,CAAAA,KAAAA,EAAM,CAAG,EAAA,KAAA,EAAO,IAAM,EAAA;AACnD,EAAA,MAAM,OAAOA,KAAK,CAAA,aAAA;AAClB,EAAM+H,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,gBAAgB,CAAA;AACzC,EAAI,IAAA,OAAA,GAAU,KAAM,CAAA,KAAA,CAAM,OAAO,CAAA;AACjC,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AACxC,EAAI9G,IAAAA,MAAAA,GAAQ,OAAQ,CAAA,IAAA,CAAK,IAAI,CAAA;AAC7B,EAAA,MAAM,GAAM,GAAA,KAAA,CAAM,IAAKjB,CAAAA,KAAAA,CAAK,GAAK,EAAA;AAAA,IAC/B,MAAQiB,EAAAA,MAAAA;AAAA,IACR,KAAO,EAAA,GAAA;AAAA,IACP,GAAG,QAAQ,OAAQ;AAAA,GACpB,CAAA;AACD,EAAAA,MAAS,IAAA,OAAA,CAAQ,IAAK,CAAA,GAAA,GAAM,IAAI,CAAA;AAEhC,EAAQ,OAAA,EAAA;AAER,EAAA,MAAM,QAAQ,KAAM,CAAA,KAAA;AACpB,EAAA,KAAA,CAAM,QAAQ,EAAC;AACf,EAAU,OAAA,GAAA,KAAA,CAAM,MAAM,WAAW,CAAA;AAKjC,EAAA,MAAM,YAAY,KAAM,CAAA,IAAA,CAAK,KAAM,CAAA,aAAA,CAAcjB,KAAI,CAAG,EAAA;AAAA,IACtD,MAAQiB,EAAAA,MAAAA;AAAA,IACR,KAAO,EAAA,GAAA;AAAA,IACP,GAAG,QAAQ,OAAQ;AAAA,GACpB,CAAA;AACD,EAAQ,OAAA,EAAA;AACR,EAAA,KAAA,CAAM,KAAQ,GAAA,KAAA;AACd,EAAA8G,KAAK,EAAA;AAEL,EAAA,IAAI,IAAS,KAAA,MAAA,IAAU,CAAC,GAAA,IAAO,QAAQ,SAAW,EAAA;AAChD,IAAA9G,MAAS,IAAA,OAAA,CAAQ,IAAK,CAAA,SAAA,GAAY,GAAG,CAAA;AAAA,GACvC,MAAA,IAAW,SAAS,UAAY,EAAA;AAE9B,IAAAA,MAAQA,GAAAA,MAAAA,CAAM,KAAM,CAAA,CAAA,EAAG,CAAE,CAAA,CAAA;AAAA,GACpB,MAAA;AACL,IAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AAAA;AAG3B,EAAOA,OAAAA,MAAAA;AACT;AAKA,SAAS,kBAAqB,GAAA;AAC5B,EAAO,OAAA,GAAA;AACT;;;ACzDA,UAAA,CAAW,IAAO,GAAA,cAAA;AAQX,SAAS,UAAA,CAAWjB,KAAM,EAAA,CAAA,EAAG,KAAO,EAAA;AACzC,EAAIiB,IAAAA,MAAAA,GAAQjB,MAAK,KAAS,IAAA,EAAA;AAC1B,EAAA,IAAI,QAAW,GAAA,GAAA;AACf,EAAA,IAAIuB,MAAQ,GAAA,CAAA,CAAA;AAKZ,EAAO,OAAA,IAAI,OAAO,UAAa,GAAA,QAAA,GAAW,UAAU,CAAE,CAAA,IAAA,CAAKN,MAAK,CAAG,EAAA;AACjE,IAAY,QAAA,IAAA,GAAA;AAAA;AAKd,EAAA,IACE,UAAW,CAAA,IAAA,CAAKA,MAAK,CAAA,KACnB,WAAW,IAAKA,CAAAA,MAAK,CAAK,IAAA,UAAA,CAAW,KAAKA,MAAK,CAAA,IAAM,OAAQ,CAAA,IAAA,CAAKA,MAAK,CACzE,CAAA,EAAA;AACA,IAAAA,MAAAA,GAAQ,MAAMA,MAAQ,GAAA,GAAA;AAAA;AAUxB,EAAA,OAAO,EAAEM,MAAAA,GAAQ,KAAM,CAAA,MAAA,CAAO,MAAQ,EAAA;AACpC,IAAM,MAAA,OAAA,GAAU,KAAM,CAAA,MAAA,CAAOA,MAAK,CAAA;AAClC,IAAM,MAAA,UAAA,GAAa,KAAM,CAAA,cAAA,CAAe,OAAO,CAAA;AAE/C,IAAI,IAAA,KAAA;AAKJ,IAAI,IAAA,CAAC,QAAQ,OAAS,EAAA;AAEtB,IAAA,OAAQ,KAAQ,GAAA,UAAA,CAAW,IAAKN,CAAAA,MAAK,CAAI,EAAA;AACvC,MAAA,IAAI6E,YAAW,KAAM,CAAA,KAAA;AAGrB,MACE7E,IAAAA,MAAAA,CAAM,UAAW6E,CAAAA,SAAQ,CAAM,KAAA,EAAA,IAC/B7E,OAAM,UAAW6E,CAAAA,SAAAA,GAAW,CAAC,CAAA,KAAM,EACnC,EAAA;AACA,QAAAA,SAAAA,EAAAA;AAAA;AAGF,MAAA7E,MAAAA,GAAQA,MAAM,CAAA,KAAA,CAAM,CAAG6E,EAAAA,SAAQ,CAAI,GAAA,GAAA,GAAM7E,MAAM,CAAA,KAAA,CAAM,KAAM,CAAA,KAAA,GAAQ,CAAC,CAAA;AAAA;AACtE;AAGF,EAAA,OAAO,WAAWA,MAAQ,GAAA,QAAA;AAC5B;AAKA,SAAS,cAAiB,GAAA;AACxB,EAAO,OAAA,GAAA;AACT;;;AC/DO,SAAS,oBAAA,CAAqBjB,OAAM,KAAO,EAAA;AAChD,EAAM,MAAA,GAAA,GAAM,SAASA,KAAI,CAAA;AAEzB,EAAO,OAAA,OAAA;AAAA,IACL,CAAC,MAAM,OAAQ,CAAA,YAAA;AAAA,IAEbA,KAAK,CAAA,GAAA;AAAA,IAEL,CAACA,KAAK,CAAA,KAAA;AAAA,IAENA,KAAAA,CAAK,QACLA,IAAAA,KAAAA,CAAK,QAAS,CAAA,MAAA,KAAW,KACzBA,KAAK,CAAA,QAAA,CAAS,CAAC,CAAA,CAAE,IAAS,KAAA,MAAA;AAAA,KAEzB,GAAQA,KAAAA,KAAAA,CAAK,GAAO,IAAA,SAAA,GAAY,QAAQA,KAAK,CAAA,GAAA,CAAA;AAAA,IAE9C,mBAAA,CAAoB,IAAKA,CAAAA,KAAAA,CAAK,GAAG,CAAA;AAAA;AAAA,IAGjC,CAAC,gBAAA,CAAiB,IAAKA,CAAAA,KAAAA,CAAK,GAAG;AAAA,GACnC;AACF;;;ACxBA,IAAA,CAAK,IAAO,GAAA,QAAA;AASL,SAAS,IAAKA,CAAAA,KAAAA,EAAM,CAAG,EAAA,KAAA,EAAO,IAAM,EAAA;AACzC,EAAM,MAAA,KAAA,GAAQ,WAAW,KAAK,CAAA;AAC9B,EAAM,MAAA,MAAA,GAAS,KAAU,KAAA,GAAA,GAAM,OAAU,GAAA,YAAA;AACzC,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AAExC,EAAI+H,IAAAA,KAAAA;AAEJ,EAAI,IAAA,OAAA;AAEJ,EAAI,IAAA,oBAAA,CAAqB/H,KAAM,EAAA,KAAK,CAAG,EAAA;AAErC,IAAA,MAAM,QAAQ,KAAM,CAAA,KAAA;AACpB,IAAA,KAAA,CAAM,QAAQ,EAAC;AACf,IAAA+H,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,UAAU,CAAA;AAC7B,IAAI9G,IAAAA,MAAAA,GAAQ,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AAC5B,IAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,MACf,KAAA,CAAM,kBAAkBjB,KAAM,EAAA;AAAA,QAC5B,MAAQiB,EAAAA,MAAAA;AAAA,QACR,KAAO,EAAA,GAAA;AAAA,QACP,GAAG,QAAQ,OAAQ;AAAA,OACpB;AAAA,KACH;AACA,IAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AACzB,IAAA8G,KAAK,EAAA;AACL,IAAA,KAAA,CAAM,KAAQ,GAAA,KAAA;AACd,IAAO9G,OAAAA,MAAAA;AAAA;AAGT,EAAA8G,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,MAAM,CAAA;AACzB,EAAU,OAAA,GAAA,KAAA,CAAM,MAAM,OAAO,CAAA;AAC7B,EAAI9G,IAAAA,MAAAA,GAAQ,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AAC5B,EAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,IACf,KAAA,CAAM,kBAAkBjB,KAAM,EAAA;AAAA,MAC5B,MAAQiB,EAAAA,MAAAA;AAAA,MACR,KAAO,EAAA,IAAA;AAAA,MACP,GAAG,QAAQ,OAAQ;AAAA,KACpB;AAAA,GACH;AACA,EAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,IAAI,CAAA;AAC1B,EAAQ,OAAA,EAAA;AAER,EAAA;AAAA;AAAA,IAEG,CAACjB,KAAK,CAAA,GAAA,IAAOA,KAAK,CAAA,KAAA;AAAA,IAEnB,cAAA,CAAe,IAAKA,CAAAA,KAAAA,CAAK,GAAG;AAAA,IAC5B;AACA,IAAU,OAAA,GAAA,KAAA,CAAM,MAAM,oBAAoB,CAAA;AAC1C,IAAAiB,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AACzB,IAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,MACf,KAAM,CAAA,IAAA,CAAKjB,KAAK,CAAA,GAAA,EAAK,EAAC,MAAA,EAAQiB,MAAO,EAAA,KAAA,EAAO,GAAK,EAAA,GAAG,OAAQ,CAAA,OAAA,IAAU;AAAA,KACxE;AACA,IAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AAAA,GACpB,MAAA;AAEL,IAAU,OAAA,GAAA,KAAA,CAAM,MAAM,gBAAgB,CAAA;AACtC,IAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,MACf,KAAA,CAAM,IAAKjB,CAAAA,KAAAA,CAAK,GAAK,EAAA;AAAA,QACnB,MAAQiB,EAAAA,MAAAA;AAAA,QACR,KAAA,EAAOjB,KAAK,CAAA,KAAA,GAAQ,GAAM,GAAA,GAAA;AAAA,QAC1B,GAAG,QAAQ,OAAQ;AAAA,OACpB;AAAA,KACH;AAAA;AAGF,EAAQ,OAAA,EAAA;AAER,EAAA,IAAIA,MAAK,KAAO,EAAA;AACd,IAAA,OAAA,GAAU,KAAM,CAAA,KAAA,CAAM,CAAQ,KAAA,EAAA,MAAM,CAAE,CAAA,CAAA;AACtC,IAAAiB,MAAS,IAAA,OAAA,CAAQ,IAAK,CAAA,GAAA,GAAM,KAAK,CAAA;AACjC,IAAAA,UAAS,OAAQ,CAAA,IAAA;AAAA,MACf,KAAA,CAAM,IAAKjB,CAAAA,KAAAA,CAAK,KAAO,EAAA;AAAA,QACrB,MAAQiB,EAAAA,MAAAA;AAAA,QACR,KAAO,EAAA,KAAA;AAAA,QACP,GAAG,QAAQ,OAAQ;AAAA,OACpB;AAAA,KACH;AACA,IAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,KAAK,CAAA;AAC3B,IAAQ,OAAA,EAAA;AAAA;AAGV,EAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AAEzB,EAAA8G,KAAK,EAAA;AACL,EAAO9G,OAAAA,MAAAA;AACT;AAQA,SAAS,QAAA,CAASjB,KAAM,EAAA,CAAA,EAAG,KAAO,EAAA;AAChC,EAAA,OAAO,oBAAqBA,CAAAA,KAAAA,EAAM,KAAK,CAAA,GAAI,GAAM,GAAA,GAAA;AACnD;;;AC5GA,aAAA,CAAc,IAAO,GAAA,iBAAA;AASd,SAAS,aAAcA,CAAAA,KAAAA,EAAM,CAAG,EAAA,KAAA,EAAO,IAAM,EAAA;AAClD,EAAA,MAAM,OAAOA,KAAK,CAAA,aAAA;AAClB,EAAM+H,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,eAAe,CAAA;AACxC,EAAI,IAAA,OAAA,GAAU,KAAM,CAAA,KAAA,CAAM,OAAO,CAAA;AACjC,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AACxC,EAAI9G,IAAAA,MAAAA,GAAQ,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AAC5B,EAAMtC,MAAAA,KAAAA,GAAO,KAAM,CAAA,iBAAA,CAAkBqB,KAAM,EAAA;AAAA,IACzC,MAAQiB,EAAAA,MAAAA;AAAA,IACR,KAAO,EAAA,GAAA;AAAA,IACP,GAAG,QAAQ,OAAQ;AAAA,GACpB,CAAA;AACD,EAAAA,MAAS,IAAA,OAAA,CAAQ,IAAKtC,CAAAA,KAAAA,GAAO,IAAI,CAAA;AAEjC,EAAQ,OAAA,EAAA;AAER,EAAA,MAAM,QAAQ,KAAM,CAAA,KAAA;AACpB,EAAA,KAAA,CAAM,QAAQ,EAAC;AACf,EAAU,OAAA,GAAA,KAAA,CAAM,MAAM,WAAW,CAAA;AAKjC,EAAA,MAAM,YAAY,KAAM,CAAA,IAAA,CAAK,KAAM,CAAA,aAAA,CAAcqB,KAAI,CAAG,EAAA;AAAA,IACtD,MAAQiB,EAAAA,MAAAA;AAAA,IACR,KAAO,EAAA,GAAA;AAAA,IACP,GAAG,QAAQ,OAAQ;AAAA,GACpB,CAAA;AACD,EAAQ,OAAA,EAAA;AACR,EAAA,KAAA,CAAM,KAAQ,GAAA,KAAA;AACd,EAAA8G,KAAK,EAAA;AAEL,EAAA,IAAI,IAAS,KAAA,MAAA,IAAU,CAACpJ,KAAAA,IAAQA,UAAS,SAAW,EAAA;AAClD,IAAAsC,MAAS,IAAA,OAAA,CAAQ,IAAK,CAAA,SAAA,GAAY,GAAG,CAAA;AAAA,GACvC,MAAA,IAAW,SAAS,UAAY,EAAA;AAE9B,IAAAA,MAAQA,GAAAA,MAAAA,CAAM,KAAM,CAAA,CAAA,EAAG,CAAE,CAAA,CAAA;AAAA,GACpB,MAAA;AACL,IAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AAAA;AAG3B,EAAOA,OAAAA,MAAAA;AACT;AAKA,SAAS,iBAAoB,GAAA;AAC3B,EAAO,OAAA,GAAA;AACT;;;ACtDO,SAAS,YAAY,KAAO,EAAA;AACjC,EAAM,MAAA,MAAA,GAAS,KAAM,CAAA,OAAA,CAAQ,MAAU,IAAA,GAAA;AAEvC,EAAA,IAAI,MAAW,KAAA,GAAA,IAAO,MAAW,KAAA,GAAA,IAAO,WAAW,GAAK,EAAA;AACtD,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,kCACE,MACA,GAAA;AAAA,KACJ;AAAA;AAGF,EAAO,OAAA,MAAA;AACT;;;ACVO,SAAS,iBAAiB,KAAO,EAAA;AACtC,EAAM,MAAA,MAAA,GAAS,YAAY,KAAK,CAAA;AAChC,EAAM,MAAA,WAAA,GAAc,MAAM,OAAQ,CAAA,WAAA;AAElC,EAAA,IAAI,CAAC,WAAa,EAAA;AAChB,IAAO,OAAA,MAAA,KAAW,MAAM,GAAM,GAAA,GAAA;AAAA;AAGhC,EAAA,IAAI,WAAgB,KAAA,GAAA,IAAO,WAAgB,KAAA,GAAA,IAAO,gBAAgB,GAAK,EAAA;AACrE,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,kCACE,WACA,GAAA;AAAA,KACJ;AAAA;AAGF,EAAA,IAAI,gBAAgB,MAAQ,EAAA;AAC1B,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,sBAAA,GACE,MACA,GAAA,yBAAA,GACA,WACA,GAAA;AAAA,KACJ;AAAA;AAGF,EAAO,OAAA,WAAA;AACT;;;AC7BO,SAAS,mBAAmB,KAAO,EAAA;AACxC,EAAM,MAAA,MAAA,GAAS,KAAM,CAAA,OAAA,CAAQ,aAAiB,IAAA,GAAA;AAE9C,EAAI,IAAA,MAAA,KAAW,GAAO,IAAA,MAAA,KAAW,GAAK,EAAA;AACpC,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,kCACE,MACA,GAAA;AAAA,KACJ;AAAA;AAGF,EAAO,OAAA,MAAA;AACT;;;ACZO,SAAS,UAAU,KAAO,EAAA;AAC/B,EAAM,MAAA,MAAA,GAAS,KAAM,CAAA,OAAA,CAAQ,IAAQ,IAAA,GAAA;AAErC,EAAA,IAAI,MAAW,KAAA,GAAA,IAAO,MAAW,KAAA,GAAA,IAAO,WAAW,GAAK,EAAA;AACtD,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,kCACE,MACA,GAAA;AAAA,KACJ;AAAA;AAGF,EAAO,OAAA,MAAA;AACT;;;ACHO,SAASV,KAAKP,CAAAA,KAAAA,EAAM,MAAQ,EAAA,KAAA,EAAO,IAAM,EAAA;AAC9C,EAAM+H,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,MAAM,CAAA;AAC/B,EAAA,MAAM,gBAAgB,KAAM,CAAA,aAAA;AAE5B,EAAA,IAAI,SAAS/H,KAAK,CAAA,OAAA,GAAU,mBAAmB,KAAK,CAAA,GAAI,YAAY,KAAK,CAAA;AAEzE,EAAM,MAAA,WAAA,GAAcA,MAAK,OACrB,GAAA,MAAA,KAAW,MACT,GACA,GAAA,GAAA,GACF,iBAAiB,KAAK,CAAA;AAC1B,EAAA,IAAI,qBACF,MAAU,IAAA,KAAA,CAAM,cAAiB,GAAA,MAAA,KAAW,MAAM,cAAiB,GAAA,KAAA;AAErE,EAAI,IAAA,CAACA,MAAK,OAAS,EAAA;AACjB,IAAA,MAAM,gBAAgBA,KAAK,CAAA,QAAA,GAAWA,KAAK,CAAA,QAAA,CAAS,CAAC,CAAI,GAAA,KAAA,CAAA;AAUzD,IAAA;AAAA;AAAA,MAEG,CAAA,MAAA,KAAW,OAAO,MAAW,KAAA,GAAA;AAAA,MAE9B,kBACC,CAAC,aAAA,CAAc,YAAY,CAAC,aAAA,CAAc,SAAS,CAAC,CAAA,CAAA;AAAA,MAErD,KAAM,CAAA,KAAA,CAAM,KAAM,CAAA,KAAA,CAAM,MAAS,GAAA,CAAC,CAAM,KAAA,MAAA,IACxC,KAAM,CAAA,KAAA,CAAM,KAAM,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA,KAAM,UACxC,IAAA,KAAA,CAAM,KAAM,CAAA,KAAA,CAAM,KAAM,CAAA,MAAA,GAAS,CAAC,CAAA,KAAM,MACxC,IAAA,KAAA,CAAM,KAAM,CAAA,KAAA,CAAM,KAAM,CAAA,MAAA,GAAS,CAAC,CAAM,KAAA,UAAA;AAAA,MAExC,KAAA,CAAM,WAAW,KAAM,CAAA,UAAA,CAAW,SAAS,CAAC,CAAA,KAAM,CAClD,IAAA,KAAA,CAAM,UAAW,CAAA,KAAA,CAAM,WAAW,MAAS,GAAA,CAAC,MAAM,CAClD,IAAA,KAAA,CAAM,WAAW,KAAM,CAAA,UAAA,CAAW,MAAS,GAAA,CAAC,CAAM,KAAA;AAAA,MAClD;AACA,MAAqB,kBAAA,GAAA,IAAA;AAAA;AAWvB,IAAA,IAAI,SAAU,CAAA,KAAK,CAAM,KAAA,MAAA,IAAU,aAAe,EAAA;AAChD,MAAA,IAAIuB,MAAQ,GAAA,CAAA,CAAA;AAEZ,MAAA,OAAO,EAAEA,MAAAA,GAAQvB,KAAK,CAAA,QAAA,CAAS,MAAQ,EAAA;AACrC,QAAM,MAAA,IAAA,GAAOA,KAAK,CAAA,QAAA,CAASuB,MAAK,CAAA;AAEhC,QAAA,IACE,IACA,IAAA,IAAA,CAAK,IAAS,KAAA,UAAA,IACd,KAAK,QACL,IAAA,IAAA,CAAK,QAAS,CAAA,CAAC,KACf,IAAK,CAAA,QAAA,CAAS,CAAC,CAAA,CAAE,SAAS,eAC1B,EAAA;AACA,UAAqB,kBAAA,GAAA,IAAA;AACrB,UAAA;AAAA;AACF;AACF;AACF;AAGF,EAAA,IAAI,kBAAoB,EAAA;AACtB,IAAS,MAAA,GAAA,WAAA;AAAA;AAGX,EAAA,KAAA,CAAM,aAAgB,GAAA,MAAA;AACtB,EAAA,MAAMN,MAAQ,GAAA,KAAA,CAAM,aAAcjB,CAAAA,KAAAA,EAAM,IAAI,CAAA;AAC5C,EAAA,KAAA,CAAM,cAAiB,GAAA,MAAA;AACvB,EAAA,KAAA,CAAM,aAAgB,GAAA,aAAA;AACtB,EAAA+H,KAAK,EAAA;AACL,EAAO9G,OAAAA,MAAAA;AACT;;;AC3FO,SAAS,oBAAoB,KAAO,EAAA;AACzC,EAAM,MAAA,KAAA,GAAQ,KAAM,CAAA,OAAA,CAAQ,cAAkB,IAAA,KAAA;AAE9C,EAAA,IAAI,KAAU,KAAA,KAAA,IAAS,KAAU,KAAA,KAAA,IAAS,UAAU,OAAS,EAAA;AAC3D,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,kCACE,KACA,GAAA;AAAA,KACJ;AAAA;AAGF,EAAO,OAAA,KAAA;AACT;;;ACLO,SAAS,QAASjB,CAAAA,KAAAA,EAAM,MAAQ,EAAA,KAAA,EAAO,IAAM,EAAA;AAClD,EAAM,MAAA,cAAA,GAAiB,oBAAoB,KAAK,CAAA;AAChD,EAAA,IAAI,MAAS,GAAA,KAAA,CAAM,aAAiB,IAAA,WAAA,CAAY,KAAK,CAAA;AAGrD,EAAA,IAAI,MAAU,IAAA,MAAA,CAAO,IAAS,KAAA,MAAA,IAAU,OAAO,OAAS,EAAA;AACtD,IAAA,MAAA,GAAA,CACG,OAAO,MAAO,CAAA,KAAA,KAAU,YAAY,MAAO,CAAA,KAAA,GAAQ,KAChD,MAAO,CAAA,KAAA,GACP,MACH,KAAM,CAAA,OAAA,CAAQ,wBAAwB,KACnC,GAAA,CAAA,GACA,OAAO,QAAS,CAAA,OAAA,CAAQA,KAAI,CAChC,CAAA,GAAA,MAAA;AAAA;AAGJ,EAAI,IAAA,IAAA,GAAO,OAAO,MAAS,GAAA,CAAA;AAE3B,EACE,IAAA,cAAA,KAAmB,KAClB,IAAA,cAAA,KAAmB,OAChB,KAAA,MAAA,IAAU,MAAO,CAAA,IAAA,KAAS,MAAU,IAAA,MAAA,CAAO,MAAWA,IAAAA,KAAAA,CAAK,MAC/D,CAAA,EAAA;AACA,IAAA,IAAA,GAAO,IAAK,CAAA,IAAA,CAAK,IAAO,GAAA,CAAC,CAAI,GAAA,CAAA;AAAA;AAG/B,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AACxC,EAAA,OAAA,CAAQ,KAAK,MAAS,GAAA,GAAA,CAAI,OAAO,IAAO,GAAA,MAAA,CAAO,MAAM,CAAC,CAAA;AACtD,EAAA,OAAA,CAAQ,MAAM,IAAI,CAAA;AAClB,EAAM+H,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,UAAU,CAAA;AACnC,EAAA,MAAM9G,SAAQ,KAAM,CAAA,WAAA;AAAA,IAClB,KAAM,CAAA,aAAA,CAAcjB,KAAM,EAAA,OAAA,CAAQ,SAAS,CAAA;AAAA,IAC3CgI;AAAA,GACF;AACA,EAAAD,KAAK,EAAA;AAEL,EAAO9G,OAAAA,MAAAA;AAGP,EAAS+G,SAAAA,IAAAA,CAAI,IAAMzG,EAAAA,MAAAA,EAAO,KAAO,EAAA;AAC/B,IAAA,IAAIA,MAAO,EAAA;AACT,MAAA,OAAA,CAAQ,KAAQ,GAAA,EAAA,GAAK,GAAI,CAAA,MAAA,CAAO,IAAI,CAAK,IAAA,IAAA;AAAA;AAG3C,IAAQ,OAAA,CAAA,KAAA,GAAQ,SAAS,MAAS,GAAA,GAAA,CAAI,OAAO,IAAO,GAAA,MAAA,CAAO,MAAM,CAAK,IAAA,IAAA;AAAA;AAE1E;;;ACjDO,SAAS,SAAUvB,CAAAA,KAAAA,EAAM,CAAG,EAAA,KAAA,EAAO,IAAM,EAAA;AAC9C,EAAM+H,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,WAAW,CAAA;AACpC,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,KAAA,CAAM,UAAU,CAAA;AACtC,EAAA,MAAM9G,MAAQ,GAAA,KAAA,CAAM,iBAAkBjB,CAAAA,KAAAA,EAAM,IAAI,CAAA;AAChD,EAAQ,OAAA,EAAA;AACR,EAAA+H,KAAK,EAAA;AACL,EAAO9G,OAAAA,MAAAA;AACT;;;ACDO,IAAM,QAAA;AAAA;AAAA,EAGT,OAAQ,CAAA;AAAA,IACN,OAAA;AAAA,IACA,QAAA;AAAA,IACA,UAAA;AAAA;AAAA,IAEA,UAAA;AAAA,IACA,mBAAA;AAAA,IACA,OAAA;AAAA,IACA,gBAAA;AAAA,IACA,YAAA;AAAA;AAAA,IAEA,YAAA;AAAA,IACA,MAAA;AAAA,IACA,eAAA;AAAA;AAAA,IAEA,mBAAA;AAAA;AAAA,IAEA,mBAAA;AAAA,IACA,QAAA;AAAA,IACA,MAAA;AAAA;AAAA,IAEA;AAAA,GACD;AAAA,CAAA;;;AC7BE,SAAS,IAAKjB,CAAAA,KAAAA,EAAM,CAAG,EAAA,KAAA,EAAO,IAAM,EAAA;AAEzC,EAAA,MAAM,WAAcA,GAAAA,KAAAA,CAAK,QAAS,CAAA,IAAA,CAAK,SAAU,CAAG,EAAA;AAClD,IAAA,OAAO,SAAS,CAAC,CAAA;AAAA,GAClB,CAAA;AAED,EAAA,MAAM,SAAY,GAAA,WAAA,GAAc,KAAM,CAAA,iBAAA,GAAoB,KAAM,CAAA,aAAA;AAChE,EAAA,OAAO,SAAU,CAAA,IAAA,CAAK,KAAOA,EAAAA,KAAAA,EAAM,IAAI,CAAA;AACzC;;;ACdO,SAAS,YAAY,KAAO,EAAA;AACjC,EAAM,MAAA,MAAA,GAAS,KAAM,CAAA,OAAA,CAAQ,MAAU,IAAA,GAAA;AAEvC,EAAI,IAAA,MAAA,KAAW,GAAO,IAAA,MAAA,KAAW,GAAK,EAAA;AACpC,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,mCACE,MACA,GAAA;AAAA,KACJ;AAAA;AAGF,EAAO,OAAA,MAAA;AACT;;;ACXA,MAAA,CAAO,IAAO,GAAA,UAAA;AASP,SAAS,MAAOA,CAAAA,KAAAA,EAAM,CAAG,EAAA,KAAA,EAAO,IAAM,EAAA;AAC3C,EAAM,MAAA,MAAA,GAAS,YAAY,KAAK,CAAA;AAChC,EAAM+H,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM,QAAQ,CAAA;AACjC,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AACxC,EAAA,MAAM,MAAS,GAAA,OAAA,CAAQ,IAAK,CAAA,MAAA,GAAS,MAAM,CAAA;AAE3C,EAAA,IAAIT,WAAU,OAAQ,CAAA,IAAA;AAAA,IACpB,KAAA,CAAM,kBAAkBtH,KAAM,EAAA;AAAA,MAC5B,KAAO,EAAA,MAAA;AAAA,MACP,MAAA;AAAA,MACA,GAAG,QAAQ,OAAQ;AAAA,KACpB;AAAA,GACH;AACA,EAAM,MAAA,WAAA,GAAcsH,QAAQ,CAAA,UAAA,CAAW,CAAC,CAAA;AACxC,EAAA,MAAM,IAAO,GAAA,UAAA;AAAA,IACX,KAAK,MAAO,CAAA,UAAA,CAAW,IAAK,CAAA,MAAA,CAAO,SAAS,CAAC,CAAA;AAAA,IAC7C,WAAA;AAAA,IACA;AAAA,GACF;AAEA,EAAA,IAAI,KAAK,MAAQ,EAAA;AACf,IAAAA,WAAU,wBAAyB,CAAA,WAAW,CAAIA,GAAAA,QAAAA,CAAQ,MAAM,CAAC,CAAA;AAAA;AAGnE,EAAA,MAAM,WAAcA,GAAAA,QAAAA,CAAQ,UAAWA,CAAAA,QAAAA,CAAQ,SAAS,CAAC,CAAA;AACzD,EAAMnG,MAAAA,MAAAA,GAAQ,WAAW,IAAK,CAAA,KAAA,CAAM,WAAW,CAAC,CAAA,EAAG,aAAa,MAAM,CAAA;AAEtE,EAAA,IAAIA,OAAM,MAAQ,EAAA;AAChB,IAAAmG,WAAUA,QAAQ,CAAA,KAAA,CAAM,GAAG,CAAE,CAAA,CAAA,GAAI,yBAAyB,WAAW,CAAA;AAAA;AAGvE,EAAA,MAAM,KAAQ,GAAA,OAAA,CAAQ,IAAK,CAAA,MAAA,GAAS,MAAM,CAAA;AAE1C,EAAAS,KAAK,EAAA;AAEL,EAAA,KAAA,CAAM,8BAAiC,GAAA;AAAA,IACrC,OAAO5G,MAAM,CAAA,OAAA;AAAA,IACb,QAAQ,IAAK,CAAA;AAAA,GACf;AACA,EAAA,OAAO,SAASmG,QAAU,GAAA,KAAA;AAC5B;AAQA,SAAS,UAAA,CAAW,CAAG,EAAA,EAAA,EAAI,KAAO,EAAA;AAChC,EAAO,OAAA,KAAA,CAAM,QAAQ,MAAU,IAAA,GAAA;AACjC;;;ACxDO,SAAS3I,KAAKqB,CAAAA,KAAAA,EAAM,CAAG,EAAA,KAAA,EAAO,IAAM,EAAA;AACzC,EAAA,OAAO,KAAM,CAAA,IAAA,CAAKA,KAAK,CAAA,KAAA,EAAO,IAAI,CAAA;AACpC;;;ACNO,SAAS,oBAAoB,KAAO,EAAA;AACzC,EAAM,MAAA,UAAA,GAAa,KAAM,CAAA,OAAA,CAAQ,cAAkB,IAAA,CAAA;AAEnD,EAAA,IAAI,aAAa,CAAG,EAAA;AAClB,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,6CACE,UACA,GAAA;AAAA,KACJ;AAAA;AAGF,EAAO,OAAA,UAAA;AACT;;;ACNO,SAAS8I,cAAAA,CAAc,CAAG,EAAA,EAAA,EAAI,KAAO,EAAA;AAC1C,EAAA,MAAM7H,MACJ,GAAA,CAAA,SAAA,CAAU,KAAK,CAAA,IAAK,KAAM,CAAA,OAAA,CAAQ,UAAa,GAAA,GAAA,GAAM,EACrD,CAAA,EAAA,MAAA,CAAO,mBAAoB,CAAA,KAAK,CAAC,CAAA;AAEnC,EAAA,OAAO,MAAM,OAAQ,CAAA,UAAA,GAAaA,OAAM,KAAM,CAAA,CAAA,EAAG,EAAE,CAAIA,GAAAA,MAAAA;AACzD;;;ACGO,IAAM,MAAS,GAAA;AAAA,EACpB,UAAA;AAAA,EACA,KAAO,EAAA,SAAA;AAAA,EACP,IAAA;AAAA,EACA,UAAAwG,EAAAA,WAAAA;AAAA,EACA,QAAA;AAAA,EACA,SAAA;AAAA,EACA,OAAA;AAAA,EACA,IAAA;AAAA,EACA,KAAA;AAAA,EACA,cAAA;AAAA,EACA,UAAA;AAAA,EACA,IAAA;AAAA,EACA,aAAA;AAAA,EACA,IAAAlH,EAAAA,KAAAA;AAAA,EACA,QAAA;AAAA,EACA,SAAA;AAAA,EACA,IAAA;AAAA,EACA,MAAA;AAAA,EACA,IAAA5B,EAAAA,KAAAA;AAAA,EACA,aAAAmK,EAAAA;AACF,CAAA;;;ACpCO,IAAM,IAAA,GAAO,CAAC,YAAY,CAAA;AAGjC,SAAS,YAAa,CAAA,IAAA,EAAM,KAAO,EAAA,MAAA,EAAQ,KAAO,EAAA;AAEhD,EAAA,IACE,MAAM,IAAS,KAAA,MAAA,IACf,oBAAqB,CAAA,KAAA,EAAO,KAAK,CAChC,KAAA,IAAA,CAAK,IAAS,KAAA,MAAA,IACZ,KAAK,IAAS,KAAA,KAAA,CAAM,QAAQ,oBAAqB,CAAA,IAAA,EAAM,KAAK,CAC/D,CAAA,EAAA;AACA,IAAO,OAAA,KAAA;AAAA;AAKT,EAAA,IAAI,QAAY,IAAA,MAAA,IAAU,OAAO,MAAA,CAAO,WAAW,SAAW,EAAA;AAC5D,IAAA,IACE,KAAK,IAAS,KAAA,WAAA;AAAA,KAEb,IAAK,CAAA,IAAA,KAAS,KAAM,CAAA,IAAA,IACnB,MAAM,IAAS,KAAA,YAAA;AAAA,IAEd,MAAM,IAAS,KAAA,SAAA,IAAa,qBAAsB,CAAA,KAAA,EAAO,KAAK,CACjE,CAAA,EAAA;AACA,MAAA;AAAA;AAGF,IAAO,OAAA,MAAA,CAAO,SAAS,CAAI,GAAA,CAAA;AAAA;AAE/B;;;AC1BA,IAAM,iBAAoB,GAAA;AAAA,EACxB,UAAA;AAAA,EACA,oBAAA;AAAA,EACA,gBAAA;AAAA,EACA,WAAA;AAAA,EACA,YAAA;AAAA,EACA;AACF,CAAA;AAGO,IAAM,MAAS,GAAA;AAAA,EACpB,EAAC,SAAW,EAAA,GAAA,EAAM,KAAO,EAAA,UAAA,EAAY,aAAa,UAAU,EAAA;AAAA,EAC5D,EAAC,SAAW,EAAA,GAAA,EAAM,MAAQ,EAAA,UAAA,EAAY,aAAa,UAAU,EAAA;AAAA,EAC7D;AAAA,IACE,SAAW,EAAA,GAAA;AAAA,IACX,WAAA,EAAa,CAAC,2BAAA,EAA6B,qBAAqB;AAAA,GAClE;AAAA,EACA;AAAA,IACE,SAAW,EAAA,IAAA;AAAA,IACX,WAAa,EAAA;AAAA,MACX,2BAAA;AAAA,MACA,qBAAA;AAAA,MACA,2BAAA;AAAA,MACA,qBAAA;AAAA,MACA,oBAAA;AAAA,MACA;AAAA;AACF,GACF;AAAA,EACA;AAAA,IACE,SAAW,EAAA,IAAA;AAAA,IACX,WAAa,EAAA;AAAA,MACX,2BAAA;AAAA,MACA,qBAAA;AAAA,MACA,2BAAA;AAAA,MACA,qBAAA;AAAA,MACA,oBAAA;AAAA,MACA;AAAA;AACF,GACF;AAAA,EACA,EAAC,SAAW,EAAA,GAAA,EAAK,KAAO,EAAA,UAAA,EAAY,aAAa,UAAU,EAAA;AAAA,EAC3D,EAAC,SAAW,EAAA,GAAA,EAAK,MAAQ,EAAA,UAAA,EAAY,aAAa,UAAU,EAAA;AAAA,EAC5D;AAAA,IACE,SAAW,EAAA,GAAA;AAAA,IACX,WAAA,EAAa,CAAC,2BAAA,EAA6B,qBAAqB;AAAA,GAClE;AAAA;AAAA;AAAA,EAGA;AAAA,IACE,SAAW,EAAA,GAAA;AAAA,IACX,KAAO,EAAA,KAAA;AAAA,IACP,WAAa,EAAA,UAAA;AAAA,IACb,cAAgB,EAAA;AAAA,GAClB;AAAA;AAAA,EAEA,EAAC,SAAA,EAAW,GAAK,EAAA,WAAA,EAAa,YAAY,EAAA;AAAA;AAAA,EAE1C,EAAC,OAAA,EAAS,IAAM,EAAA,SAAA,EAAW,GAAG,EAAA;AAAA,EAC9B,EAAC,SAAW,EAAA,GAAA,EAAK,WAAa,EAAA,YAAA,EAAc,OAAO,cAAc,EAAA;AAAA;AAAA;AAAA,EAGjE,EAAC,SAAW,EAAA,GAAA,EAAK,KAAO,EAAA,WAAA,EAAa,aAAa,UAAU,EAAA;AAAA;AAAA,EAE5D,EAAC,SAAA,EAAW,GAAK,EAAA,WAAA,EAAa,iBAAiB,EAAA;AAAA;AAAA,EAE/C,EAAC,SAAA,EAAW,GAAK,EAAA,WAAA,EAAa,gBAAgB,EAAA;AAAA;AAAA,EAE9C;AAAA,IACE,MAAQ,EAAA,KAAA;AAAA,IACR,SAAW,EAAA,GAAA;AAAA,IACX,WAAa,EAAA,UAAA;AAAA,IACb,cAAgB,EAAA;AAAA,GAClB;AAAA;AAAA;AAAA,EAGA,EAAC,OAAS,EAAA,IAAA,EAAM,MAAQ,EAAA,MAAA,EAAQ,WAAW,GAAG,EAAA;AAAA,EAC9C,EAAC,SAAA,EAAW,GAAK,EAAA,WAAA,EAAa,gBAAgB,EAAA;AAAA;AAAA,EAE9C,EAAC,OAAS,EAAA,IAAA,EAAM,SAAW,EAAA,GAAA,EAAK,OAAO,eAAgB,EAAA;AAAA,EACvD,EAAC,SAAW,EAAA,GAAA,EAAK,WAAa,EAAA,UAAA,EAAY,gBAAgB,iBAAiB,EAAA;AAAA;AAAA,EAE3E,EAAC,OAAS,EAAA,IAAA,EAAM,SAAW,EAAA,GAAA,EAAK,OAAO,cAAe,EAAA;AAAA;AAAA;AAAA,EAGtD,EAAC,OAAS,EAAA,IAAA,EAAM,SAAW,EAAA,GAAA,EAAK,OAAO,eAAgB,EAAA;AAAA;AAAA,EAEvD,EAAC,SAAS,IAAM,EAAA,MAAA,EAAQ,QAAQ,SAAW,EAAA,GAAA,EAAK,OAAO,gBAAiB,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxE,EAAC,OAAS,EAAA,IAAA,EAAM,SAAW,EAAA,GAAA,EAAK,OAAO,aAAa,EAAA;AAAA,EACpD;AAAA,IACE,SAAW,EAAA,GAAA;AAAA,IACX,KAAO,EAAA,aAAA;AAAA,IACP,WAAa,EAAA,UAAA;AAAA,IACb,cAAgB,EAAA;AAAA,GAClB;AAAA,EACA,EAAC,SAAA,EAAW,GAAK,EAAA,WAAA,EAAa,oBAAoB,EAAA;AAAA;AAAA,EAElD,EAAC,OAAA,EAAS,IAAM,EAAA,SAAA,EAAW,GAAG,EAAA;AAAA;AAAA;AAAA,EAG9B,EAAC,OAAA,EAAS,IAAM,EAAA,SAAA,EAAW,GAAG,EAAA;AAAA,EAC9B,EAAC,SAAA,EAAW,GAAK,EAAA,WAAA,EAAa,oBAAoB,EAAA;AAAA;AAAA;AAAA,EAGlD,EAAC,OAAA,EAAS,IAAM,EAAA,SAAA,EAAW,GAAG,EAAA;AAAA,EAC9B,EAAC,SAAW,EAAA,GAAA,EAAK,WAAa,EAAA,UAAA,EAAY,gBAAgB,iBAAiB,EAAA;AAAA,EAC3E,EAAC,SAAW,EAAA,GAAA,EAAK,aAAa,CAAC,OAAA,EAAS,WAAW,CAAC,EAAA;AAAA;AAAA;AAAA;AAAA,EAIpD,EAAC,SAAW,EAAA,IAAA,EAAM,KAAO,EAAA,UAAA,EAAY,aAAa,UAAU,EAAA;AAAA;AAAA,EAE5D,EAAC,SAAW,EAAA,GAAA,EAAK,aAAa,CAAC,OAAA,EAAS,WAAW,CAAC,EAAA;AAAA;AAAA;AAAA,EAGpD,EAAC,OAAA,EAAS,IAAM,EAAA,SAAA,EAAW,GAAG,EAAA;AAAA,EAC9B,EAAC,SAAW,EAAA,GAAA,EAAK,WAAa,EAAA,UAAA,EAAY,gBAAgB,iBAAiB,EAAA;AAAA;AAAA;AAAA,EAG3E,EAAC,OAAA,EAAS,IAAM,EAAA,SAAA,EAAW,GAAG,EAAA;AAAA,EAC9B;AAAA,IACE,SAAW,EAAA,GAAA;AAAA,IACX,WAAA,EAAa,CAAC,2BAAA,EAA6B,2BAA2B;AAAA,GACxE;AAAA,EACA,EAAC,SAAW,EAAA,GAAA,EAAK,WAAa,EAAA,UAAA,EAAY,gBAAgB,iBAAiB,EAAA;AAAA;AAAA;AAAA;AAAA,EAI3E,EAAC,OAAA,EAAS,IAAM,EAAA,SAAA,EAAW,GAAG;AAChC,CAAA;;;ACvHO,SAAS,YAAY9I,KAAM,EAAA;AAChC,EAAA,IAAIA,KAAK,CAAA,KAAA,IAAS,CAACA,KAAAA,CAAK,UAAY,EAAA;AAClC,IAAA,OAAOA,MAAK,KAAS,IAAA,EAAA;AAAA;AAGvB,EAAO,OAAA,YAAA,CAAaA,MAAK,UAAU,CAAA;AACrC;;;ACzBO,SAAS,eAAe,OAAS,EAAA;AACtC,EAAI,IAAA,CAAC,QAAQ,SAAW,EAAA;AACtB,IAAM,MAAA,MAAA,GAAA,CACH,OAAQ,CAAA,OAAA,GAAU,iBAAoB,GAAA,EAAA,KACtC,QAAQ,MAAS,GAAA,KAAA,GAAQ,OAAQ,CAAA,MAAA,GAAS,GAAM,GAAA,EAAA,CAAA;AAEnD,IAAA,OAAA,CAAQ,YAAY,IAAI,MAAA;AAAA,MAAA,CACrB,SAAS,GAAM,GAAA,MAAA,GAAS,MAAM,EAC5B,KAAA,qBAAA,CAAsB,KAAK,OAAQ,CAAA,SAAS,IAAI,IAAO,GAAA,EAAA,CAAA,GACxD,QAAQ,SACP,IAAA,OAAA,CAAQ,QAAQ,KAAQ,GAAA,OAAA,CAAQ,QAAQ,GAAM,GAAA,EAAA,CAAA;AAAA,MACjD;AAAA,KACF;AAAA;AAGF,EAAA,OAAO,OAAQ,CAAA,SAAA;AACjB;;;ACFO,SAAS,iBAAA,CAAkB,MAAQ,EAAA,KAAA,EAAO,IAAM,EAAA;AACrD,EAAA,MAAM,aAAa,KAAM,CAAA,UAAA;AACzB,EAAM,MAAA,QAAA,GAAW,MAAO,CAAA,QAAA,IAAY,EAAC;AAErC,EAAA,MAAM,UAAU,EAAC;AACjB,EAAA,IAAIuB,MAAQ,GAAA,CAAA,CAAA;AACZ,EAAA,IAAI,SAAS,IAAK,CAAA,MAAA;AAElB,EAAI,IAAA,WAAA;AAEJ,EAAA,UAAA,CAAW,KAAK,CAAE,CAAA,CAAA;AAClB,EAAI,IAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AAEtC,EAAO,OAAA,EAAEA,MAAQ,GAAA,QAAA,CAAS,MAAQ,EAAA;AAChC,IAAM,MAAA,KAAA,GAAQ,SAASA,MAAK,CAAA;AAE5B,IAAI,IAAA,KAAA;AAEJ,IAAW,UAAA,CAAA,UAAA,CAAW,MAAS,GAAA,CAAC,CAAIA,GAAAA,MAAAA;AAEpC,IAAIA,IAAAA,MAAAA,GAAQ,CAAI,GAAA,QAAA,CAAS,MAAQ,EAAA;AAG/B,MAAIsI,IAAAA,OAAAA,GAAS,MAAM,MAAO,CAAA,QAAA,CAAS,SAAStI,MAAQ,GAAA,CAAC,EAAE,IAAI,CAAA;AAG3D,MAAA,IAAIsI,OAAUA,IAAAA,OAAAA,CAAO,IAAM,EAAAA,UAASA,OAAO,CAAA,IAAA;AAC3C,MAAA,KAAA,GAAQA,UACJA,OAAO,CAAA,QAAA,CAAStI,SAAQ,CAAC,CAAA,EAAG,QAAQ,KAAO,EAAA;AAAA,QACzC,MAAQ,EAAA,EAAA;AAAA,QACR,KAAO,EAAA,EAAA;AAAA,QACP,GAAG,QAAQ,OAAQ;AAAA,OACpB,CAAA,CAAE,MAAO,CAAA,CAAC,CACX,GAAA,EAAA;AAAA,KACC,MAAA;AACL,MAAA,KAAA,GAAQ,IAAK,CAAA,KAAA;AAAA;AASf,IACE,IAAA,OAAA,CAAQ,SAAS,CAChB,KAAA,MAAA,KAAW,QAAQ,MAAW,KAAA,IAAA,CAAA,IAC/B,KAAM,CAAA,IAAA,KAAS,MACf,EAAA;AACA,MAAQ,OAAA,CAAA,OAAA,CAAQ,SAAS,CAAC,CAAA,GAAI,QAAQ,OAAQ,CAAA,MAAA,GAAS,CAAC,CAAE,CAAA,OAAA;AAAA,QACxD,aAAA;AAAA,QACA;AAAA,OACF;AACA,MAAS,MAAA,GAAA,GAAA;AAGT,MAAU,OAAA,GAAA,KAAA,CAAM,cAAc,IAAI,CAAA;AAClC,MAAA,OAAA,CAAQ,IAAK,CAAA,OAAA,CAAQ,IAAK,CAAA,EAAE,CAAC,CAAA;AAAA;AAG/B,IAAA,IAAIN,MAAQ,GAAA,KAAA,CAAM,MAAO,CAAA,KAAA,EAAO,QAAQ,KAAO,EAAA;AAAA,MAC7C,GAAG,QAAQ,OAAQ,EAAA;AAAA,MACnB,KAAA;AAAA,MACA;AAAA,KACD,CAAA;AAKD,IAAA,IAAI,eAAe,WAAgBA,KAAAA,MAAAA,CAAM,KAAM,CAAA,CAAA,EAAG,CAAC,CAAG,EAAA;AACpD,MAAAA,MAAAA,GACE,yBAAyB,WAAY,CAAA,UAAA,CAAW,CAAC,CAAC,CAAA,GAAIA,MAAM,CAAA,KAAA,CAAM,CAAC,CAAA;AAAA;AAGvE,IAAA,MAAM,eAAe,KAAM,CAAA,8BAAA;AAC3B,IAAA,KAAA,CAAM,8BAAiC,GAAA,KAAA,CAAA;AACvC,IAAc,WAAA,GAAA,KAAA,CAAA;AAKd,IAAA,IAAI,YAAc,EAAA;AAChB,MAAA,IACE,OAAQ,CAAA,MAAA,GAAS,CACjB,IAAA,YAAA,CAAa,MACb,IAAA,MAAA,KAAW,OAAQ,CAAA,OAAA,CAAQ,MAAS,GAAA,CAAC,CAAE,CAAA,KAAA,CAAM,EAAE,CAC/C,EAAA;AACA,QAAA,OAAA,CAAQ,QAAQ,MAAS,GAAA,CAAC,CACxB,GAAA,OAAA,CAAQ,QAAQ,MAAS,GAAA,CAAC,CAAE,CAAA,KAAA,CAAM,GAAG,CAAE,CAAA,CAAA,GACvC,yBAAyB,MAAO,CAAA,UAAA,CAAW,CAAC,CAAC,CAAA;AAAA;AAGjD,MAAI,IAAA,YAAA,CAAa,OAAqB,WAAA,GAAA,KAAA;AAAA;AAGxC,IAAA,OAAA,CAAQ,KAAKA,MAAK,CAAA;AAClB,IAAA,OAAA,CAAQ,KAAKA,MAAK,CAAA;AAClB,IAASA,MAAAA,GAAAA,MAAAA,CAAM,MAAM,CAAE,CAAA,CAAA;AAAA;AAGzB,EAAA,UAAA,CAAW,GAAI,EAAA;AAEf,EAAO,OAAA,OAAA,CAAQ,KAAK,EAAE,CAAA;AACxB;;;AC7GO,SAASuJ,cAAAA,CAAc,MAAQ,EAAA,KAAA,EAAO,IAAM,EAAA;AACjD,EAAA,MAAM,aAAa,KAAM,CAAA,UAAA;AACzB,EAAM,MAAA,QAAA,GAAW,MAAO,CAAA,QAAA,IAAY,EAAC;AACrC,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AAExC,EAAA,MAAM,UAAU,EAAC;AACjB,EAAA,IAAIjJ,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAA,UAAA,CAAW,KAAK,CAAE,CAAA,CAAA;AAElB,EAAO,OAAA,EAAEA,MAAQ,GAAA,QAAA,CAAS,MAAQ,EAAA;AAChC,IAAM,MAAA,KAAA,GAAQ,SAASA,MAAK,CAAA;AAE5B,IAAW,UAAA,CAAA,UAAA,CAAW,MAAS,GAAA,CAAC,CAAIA,GAAAA,MAAAA;AAEpC,IAAQ,OAAA,CAAA,IAAA;AAAA,MACN,OAAQ,CAAA,IAAA;AAAA,QACN,KAAM,CAAA,MAAA,CAAO,KAAO,EAAA,MAAA,EAAQ,KAAO,EAAA;AAAA,UACjC,MAAQ,EAAA,IAAA;AAAA,UACR,KAAO,EAAA,IAAA;AAAA,UACP,GAAG,QAAQ,OAAQ;AAAA,SACpB;AAAA;AACH,KACF;AAEA,IAAI,IAAA,KAAA,CAAM,SAAS,MAAQ,EAAA;AACzB,MAAA,KAAA,CAAM,cAAiB,GAAA,KAAA,CAAA;AAAA;AAGzB,IAAIA,IAAAA,MAAAA,GAAQ,QAAS,CAAA,MAAA,GAAS,CAAG,EAAA;AAC/B,MAAQ,OAAA,CAAA,IAAA;AAAA,QACN,OAAA,CAAQ,IAAK,CAAA,OAAA,CAAQ,KAAO,EAAA,QAAA,CAASA,SAAQ,CAAC,CAAA,EAAG,MAAQ,EAAA,KAAK,CAAC;AAAA,OACjE;AAAA;AACF;AAGF,EAAA,UAAA,CAAW,GAAI,EAAA;AAEf,EAAO,OAAA,OAAA,CAAQ,KAAK,EAAE,CAAA;AACxB;AASA,SAAS,OAAQ,CAAA,IAAA,EAAM,KAAO,EAAA,MAAA,EAAQ,KAAO,EAAA;AAC3C,EAAIA,IAAAA,MAAAA,GAAQ,MAAM,IAAK,CAAA,MAAA;AAEvB,EAAA,OAAOA,MAAS,EAAA,EAAA;AACd,IAAM,MAAA,MAAA,GAAS,MAAM,IAAKA,CAAAA,MAAK,EAAE,IAAM,EAAA,KAAA,EAAO,QAAQ,KAAK,CAAA;AAE3D,IAAI,IAAA,MAAA,KAAW,IAAQ,IAAA,MAAA,KAAW,CAAG,EAAA;AACnC,MAAA;AAAA;AAGF,IAAI,IAAA,OAAO,WAAW,QAAU,EAAA;AAC9B,MAAO,OAAA,IAAA,CAAK,MAAO,CAAA,CAAA,GAAI,MAAM,CAAA;AAAA;AAG/B,IAAA,IAAI,WAAW,KAAO,EAAA;AACpB,MAAO,OAAA,iBAAA;AAAA;AACT;AAGF,EAAO,OAAA,MAAA;AACT;;;AC/EA,IAAM,GAAM,GAAA,WAAA;AAKL,SAAS,WAAA,CAAYN,QAAO+G,IAAK,EAAA;AAEtC,EAAA,MAAM,SAAS,EAAC;AAChB,EAAA,IAAI3J,MAAQ,GAAA,CAAA;AACZ,EAAA,IAAI,IAAO,GAAA,CAAA;AAEX,EAAI,IAAA,KAAA;AAEJ,EAAA,OAAQ,KAAQ,GAAA,GAAA,CAAI,IAAK4C,CAAAA,MAAK,CAAI,EAAA;AAChC,IAAA8I,KAAI9I,MAAM,CAAA,KAAA,CAAM5C,MAAO,EAAA,KAAA,CAAM,KAAK,CAAC,CAAA;AACnC,IAAO,MAAA,CAAA,IAAA,CAAK,KAAM,CAAA,CAAC,CAAC,CAAA;AACpB,IAAAA,MAAQ,GAAA,KAAA,CAAM,KAAQ,GAAA,KAAA,CAAM,CAAC,CAAE,CAAA,MAAA;AAC/B,IAAA,IAAA,EAAA;AAAA;AAGF,EAAA0L,IAAI9I,CAAAA,MAAAA,CAAM,KAAM5C,CAAAA,MAAK,CAAC,CAAA;AAEtB,EAAO,OAAA,MAAA,CAAO,KAAK,EAAE,CAAA;AAKrB,EAAA,SAAS0L,KAAI9I,MAAO,EAAA;AAClB,IAAA,MAAA,CAAO,KAAK+G,IAAI/G,CAAAA,MAAAA,EAAO,IAAM,EAAA,CAACA,MAAK,CAAC,CAAA;AAAA;AAExC;;;ACFO,SAAS,IAAA,CAAK,KAAO,EAAA,KAAA,EAAO,MAAQ,EAAA;AACzC,EAAA,MAAMA,UAAS,MAAO,CAAA,MAAA,IAAU,OAAO,KAAS,IAAA,EAAA,CAAA,IAAO,OAAO,KAAS,IAAA,EAAA,CAAA;AAEvE,EAAA,MAAM,YAAY,EAAC;AAEnB,EAAA,MAAM,SAAS,EAAC;AAEhB,EAAA,MAAM,QAAQ,EAAC;AACf,EAAA,IAAIM,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAA,OAAO,EAAEA,MAAAA,GAAQ,KAAM,CAAA,MAAA,CAAO,MAAQ,EAAA;AACpC,IAAM,MAAA,OAAA,GAAU,KAAM,CAAA,MAAA,CAAOA,MAAK,CAAA;AAElC,IAAA,IAAI,CAAC,cAAA,CAAe,KAAM,CAAA,KAAA,EAAO,OAAO,CAAG,EAAA;AACzC,MAAA;AAAA;AAGF,IAAM,MAAA,UAAA,GAAa,KAAM,CAAA,cAAA,CAAe,OAAO,CAAA;AAE/C,IAAI,IAAA,KAAA;AAEJ,IAAA,OAAQ,KAAQ,GAAA,UAAA,CAAW,IAAKN,CAAAA,MAAK,CAAI,EAAA;AACvC,MAAA,MAAM,MAAS,GAAA,QAAA,IAAY,OAAW,IAAA,OAAA,CAAQ,QAAQ,OAAO,CAAA;AAC7D,MAAA,MAAM,QAAQ,OAAW,IAAA,OAAA;AACzB,MAAA,MAAM6E,YAAW,KAAM,CAAA,KAAA,IAAS,SAAS,KAAM,CAAA,CAAC,EAAE,MAAS,GAAA,CAAA,CAAA;AAE3D,MAAI,IAAA,SAAA,CAAU,QAASA,CAAAA,SAAQ,CAAG,EAAA;AAChC,QAAA,IAAI,KAAMA,CAAAA,SAAQ,CAAE,CAAA,MAAA,IAAU,CAAC,MAAQ,EAAA;AACrC,UAAMA,KAAAA,CAAAA,SAAQ,EAAE,MAAS,GAAA,KAAA;AAAA;AAG3B,QAAA,IAAI,KAAMA,CAAAA,SAAQ,CAAE,CAAA,KAAA,IAAS,CAAC,KAAO,EAAA;AACnC,UAAMA,KAAAA,CAAAA,SAAQ,EAAE,KAAQ,GAAA,KAAA;AAAA;AAC1B,OACK,MAAA;AACL,QAAA,SAAA,CAAU,KAAKA,SAAQ,CAAA;AACvB,QAAA,KAAA,CAAMA,SAAQ,CAAA,GAAI,EAAC,MAAA,EAAQ,KAAK,EAAA;AAAA;AAClC;AACF;AAGF,EAAA,SAAA,CAAU,KAAK,SAAS,CAAA;AAExB,EAAA,IAAIzH,MAAQ,GAAA,MAAA,CAAO,MAAS,GAAA,MAAA,CAAO,OAAO,MAAS,GAAA,CAAA;AACnD,EAAA,MAAM,MAAM4C,MAAM,CAAA,MAAA,IAAU,OAAO,KAAQ,GAAA,MAAA,CAAO,MAAM,MAAS,GAAA,CAAA,CAAA;AACjE,EAAAM,MAAQ,GAAA,CAAA,CAAA;AAER,EAAO,OAAA,EAAEA,MAAQ,GAAA,SAAA,CAAU,MAAQ,EAAA;AACjC,IAAMuE,MAAAA,SAAAA,GAAW,UAAUvE,MAAK,CAAA;AAGhC,IAAIuE,IAAAA,SAAAA,GAAWzH,MAASyH,IAAAA,SAAAA,IAAY,GAAK,EAAA;AACvC,MAAA;AAAA;AAMF,IACGA,IAAAA,SAAAA,GAAW,IAAI,GACd,IAAA,SAAA,CAAUvE,SAAQ,CAAC,CAAA,KAAMuE,YAAW,CACpC,IAAA,KAAA,CAAMA,SAAQ,CAAE,CAAA,KAAA,IAChB,CAAC,KAAMA,CAAAA,SAAAA,GAAW,CAAC,CAAE,CAAA,MAAA,IACrB,CAAC,KAAA,CAAMA,SAAW,GAAA,CAAC,EAAE,KACtB,IAAA,SAAA,CAAUvE,SAAQ,CAAC,CAAA,KAAMuE,YAAW,CACnC,IAAA,KAAA,CAAMA,SAAQ,CAAE,CAAA,MAAA,IAChB,CAAC,KAAMA,CAAAA,SAAAA,GAAW,CAAC,CAAE,CAAA,MAAA,IACrB,CAAC,KAAMA,CAAAA,SAAAA,GAAW,CAAC,CAAA,CAAE,KACvB,EAAA;AACA,MAAA;AAAA;AAGF,IAAA,IAAIzH,WAAUyH,SAAU,EAAA;AAItB,MAAO,MAAA,CAAA,IAAA,CAAK,kBAAkB7E,MAAM,CAAA,KAAA,CAAM5C,QAAOyH,SAAQ,CAAA,EAAG,IAAI,CAAC,CAAA;AAAA;AAGnE,IAAAzH,MAAQyH,GAAAA,SAAAA;AAER,IAAA,IACE,iBAAiB,IAAK7E,CAAAA,MAAAA,CAAM,OAAO6E,SAAQ,CAAC,MAC3C,CAAC,MAAA,CAAO,MAAU,IAAA,CAAC,OAAO,MAAO,CAAA,QAAA,CAAS7E,OAAM,MAAO6E,CAAAA,SAAQ,CAAC,CACjE,CAAA,EAAA;AAEA,MAAA,MAAA,CAAO,KAAK,IAAI,CAAA;AAAA,KACX,MAAA;AAEL,MAAA,MAAA,CAAO,KAAK,wBAAyB7E,CAAAA,MAAAA,CAAM,UAAW6E,CAAAA,SAAQ,CAAC,CAAC,CAAA;AAChE,MAAAzH,MAAAA,EAAAA;AAAA;AACF;AAGF,EAAO,MAAA,CAAA,IAAA,CAAK,kBAAkB4C,MAAM,CAAA,KAAA,CAAM5C,QAAO,GAAG,CAAA,EAAG,MAAO,CAAA,KAAK,CAAC,CAAA;AAEpE,EAAO,OAAA,MAAA,CAAO,KAAK,EAAE,CAAA;AACvB;AAOA,SAAS,SAAA,CAAU,GAAG,CAAG,EAAA;AACvB,EAAA,OAAO,CAAI,GAAA,CAAA;AACb;AAOA,SAAS,iBAAA,CAAkB4C,QAAO,KAAO,EAAA;AACvC,EAAA,MAAM,UAAa,GAAA,uBAAA;AAEnB,EAAA,MAAM,YAAY,EAAC;AAEnB,EAAA,MAAM,UAAU,EAAC;AACjB,EAAA,MAAM,QAAQA,MAAQ,GAAA,KAAA;AACtB,EAAA,IAAIM,MAAQ,GAAA,CAAA,CAAA;AACZ,EAAA,IAAIlD,MAAQ,GAAA,CAAA;AAEZ,EAAI,IAAA,KAAA;AAEJ,EAAA,OAAQ,KAAQ,GAAA,UAAA,CAAW,IAAK,CAAA,KAAK,CAAI,EAAA;AACvC,IAAU,SAAA,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AAAA;AAG5B,EAAO,OAAA,EAAEkD,MAAQ,GAAA,SAAA,CAAU,MAAQ,EAAA;AACjC,IAAIlD,IAAAA,MAAAA,KAAU,SAAUkD,CAAAA,MAAK,CAAG,EAAA;AAC9B,MAAA,OAAA,CAAQ,KAAKN,MAAM,CAAA,KAAA,CAAM5C,QAAO,SAAUkD,CAAAA,MAAK,CAAC,CAAC,CAAA;AAAA;AAGnD,IAAA,OAAA,CAAQ,KAAK,IAAI,CAAA;AACjB,IAAAlD,MAAAA,GAAQ,UAAUkD,MAAK,CAAA;AAAA;AAGzB,EAAA,OAAA,CAAQ,IAAKN,CAAAA,MAAAA,CAAM,KAAM5C,CAAAA,MAAK,CAAC,CAAA;AAE/B,EAAO,OAAA,OAAA,CAAQ,KAAK,EAAE,CAAA;AACxB;;;ACpKO,SAAS,MAAM,MAAQ,EAAA;AAI5B,EAAM3C,MAAAA,QAAAA,GAAU,UAAU,EAAC;AAC3B,EAAM,MAAA,GAAA,GAAMA,QAAQ,CAAA,GAAA,IAAO,EAAC;AAC5B,EAAI,IAAA,SAAA,GAAYA,SAAQ,SAAa,IAAA,CAAA;AACrC,EAAI,IAAA,IAAA,GAAO,IAAI,IAAQ,IAAA,CAAA;AACvB,EAAI,IAAA,MAAA,GAAS,IAAI,MAAU,IAAA,CAAA;AAE3B,EAAA,OAAO,EAAC,IAAA,EAAM,OAAAsI,EAAAA,QAAAA,EAAS,KAAK,EAAA;AAO5B,EAAA,SAASA,QAAU,GAAA;AACjB,IAAA,OAAO,EAAC,GAAK,EAAA,EAAC,IAAM,EAAA,MAAA,IAAS,SAAS,EAAA;AAAA;AAQxC,EAAA,SAAS,MAAM/C,MAAO,EAAA;AACpB,IAAaA,SAAAA,IAAAA,MAAAA;AAAA;AAQf,EAAA,SAAS,KAAK,KAAO,EAAA;AAEnB,IAAA,MAAMA,SAAQ,KAAS,IAAA,EAAA;AACvB,IAAM,MAAA,MAAA,GAASA,MAAM,CAAA,KAAA,CAAM,WAAW,CAAA;AACtC,IAAA,MAAM,IAAO,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA;AACrC,IAAA,IAAA,IAAQ,OAAO,MAAS,GAAA,CAAA;AACxB,IACE,MAAA,GAAA,MAAA,CAAO,WAAW,CAAI,GAAA,MAAA,GAAS,KAAK,MAAS,GAAA,CAAA,GAAI,KAAK,MAAS,GAAA,SAAA;AACjE,IAAOA,OAAAA,MAAAA;AAAA;AAEX;;;ACzBO,SAAS,UAAA,CAAW,MAAMvF,QAAS,EAAA;AACxC,EAAM,MAAA,QAAA,GAAWA,YAAW,EAAC;AAE7B,EAAA,MAAM,KAAQ,GAAA;AAAA,IACZ,aAAe,EAAA,WAAA;AAAA,IACf,iBAAmB,EAAA,sBAAA;AAAA,IACnB,aAAe,EAAA,kBAAA;AAAA,IACf,aAAe,EAAA,KAAA;AAAA,IACf,cAAA;AAAA,IACA,KAAA;AAAA;AAAA;AAAA,IAGA,QAAA,EAAU,EAAC,GAAG,MAAQ,EAAA;AAAA;AAAA,IAEtB,MAAQ,EAAA,KAAA,CAAA;AAAA,IACR,WAAA;AAAA,IACA,YAAY,EAAC;AAAA,IACb,IAAA,EAAM,CAAC,GAAG,IAAI,CAAA;AAAA,IACd,SAAS,EAAC;AAAA,IACV,IAAM,EAAA,SAAA;AAAA,IACN,OAAO,EAAC;AAAA,IACR,MAAA,EAAQ,CAAC,GAAG,MAAM;AAAA,GACpB;AAEA,EAAAsO,UAAAA,CAAU,OAAO,QAAQ,CAAA;AAEzB,EAAI,IAAA,KAAA,CAAM,QAAQ,gBAAkB,EAAA;AAClC,IAAM,KAAA,CAAA,IAAA,CAAK,KAAK,cAAc,CAAA;AAAA;AAGhC,EAAM,KAAA,CAAA,MAAA,GAAS,OAAO,MAAQ,EAAA;AAAA,IAC5B,OAAA;AAAA,IACA,OAAA;AAAA,IACA,UAAU,KAAM,CAAA;AAAA,GACjB,CAAA;AAED,EAAA,IAAI,MAAS,GAAA,KAAA,CAAM,MAAO,CAAA,IAAA,EAAM,QAAW,KAAO,EAAA;AAAA,IAChD,MAAQ,EAAA,IAAA;AAAA,IACR,KAAO,EAAA,IAAA;AAAA,IACP,GAAK,EAAA,EAAC,IAAM,EAAA,CAAA,EAAG,QAAQ,CAAC,EAAA;AAAA,IACxB,SAAW,EAAA;AAAA,GACZ,CAAA;AAED,EAAA,IACE,MACA,IAAA,MAAA,CAAO,UAAW,CAAA,MAAA,CAAO,SAAS,CAAC,CAAA,KAAM,EACzC,IAAA,MAAA,CAAO,UAAW,CAAA,MAAA,CAAO,MAAS,GAAA,CAAC,MAAM,EACzC,EAAA;AACA,IAAU,MAAA,IAAA,IAAA;AAAA;AAGZ,EAAO,OAAA,MAAA;AAGP,EAAA,SAAS,MAAMpO,KAAM,EAAA;AACnB,IAAM,KAAA,CAAA,KAAA,CAAM,KAAKA,KAAI,CAAA;AACrB,IAAOmM,OAAAA,KAAAA;AAKP,IAAA,SAASA,KAAO,GAAA;AACd,MAAA,KAAA,CAAM,MAAM,GAAI,EAAA;AAAA;AAClB;AAEJ;AAMA,SAAS,QAAQ9G,MAAO,EAAA;AACtB,EAAA,MAAM,IAAI,KAAA,CAAM,uBAA0BA,GAAAA,MAAAA,GAAQ,kBAAkB,CAAA;AACtE;AAMA,SAAS,QAAQA,MAAO,EAAA;AAEtB,EAAMjB,MAAAA,KAAAA;AAAA;AAAA,IAA6BiB;AAAA,GAAA;AACnC,EAAA,MAAM,IAAI,KAAA,CAAM,8BAAiCjB,GAAAA,KAAAA,CAAK,OAAO,GAAG,CAAA;AAClE;AAGA,SAAS,cAAA,CAAe,MAAM,KAAO,EAAA;AAEnC,EAAA,IAAI,KAAK,IAAS,KAAA,YAAA,IAAgB,IAAK,CAAA,IAAA,KAAS,MAAM,IAAM,EAAA;AAC1D,IAAO,OAAA,CAAA;AAAA;AAEX;AAgBA,SAAS,sBAAA,CAAuB,QAAQ,IAAM,EAAA;AAC5C,EAAO,OAAA,iBAAA,CAAkB,MAAQ,EAAA,IAAA,EAAM,IAAI,CAAA;AAC7C;AAiBA,SAAS,kBAAA,CAAmB,QAAQ,IAAM,EAAA;AACxC,EAAOwK,OAAAA,cAAAA,CAAc,MAAQ,EAAA,IAAA,EAAM,IAAI,CAAA;AACzC;AA2BA,SAAS,SAAA,CAAUvJ,QAAO,MAAQ,EAAA;AAChC,EAAO,OAAA,IAAA,CAAK,IAAMA,EAAAA,MAAAA,EAAO,MAAM,CAAA;AACjC;;;;;;;;;AC1LO,IAAM,UAAa,GAAA;EACxB,oBAAsB,EAAA,mBAAA;EACtB,oBAAsB,EAAA,mBAAA;EACtB,WAAa,EAAA,UAAA;EACb,IAAM,EAAA,MAAA;EACN,mBAAqB,EAAA,mBAAA;EACrB,mBAAqB,EAAA,mBAAA;EACrB,IAAM,EAAA,MAAA;EACN,SAAW,EAAA,UAAA;EACX,IAAM,EAAA,MAAA;EACN,SAAW,EAAA,WAAA;EACX,IAAM,EAAA;AACR,CAAA;AAEO,IAAM,uBAA0B,GAAA;EACrC,iBAAmB,EAAA,iBAAA;EACnB,kCAAoC,EAAA,gCAAA;EACpC,4BAA8B,EAAA;AAChC,CAAA;AChBO,IAAM,oBAAN,MAAwB;EAG7B,OAAO,QAAA,CAAS,QAAmB,KAAuB,EAAA;AACxD,IAAM,KAAA,CAAA,OAAA,CAAQ,CAACrF,KAAS,KAAA;AACtB,MAAK,IAAA,CAAA,OAAA,CAAQ,GAAIA,CAAAA,KAAAA,EAAM,MAAM,CAAA;KAC9B,CAAA;AACH;AAEA,EAAA,OAAO,IAAIA,KAAqC,EAAA;AAC9C,IAAO,OAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAIA,KAAI,CAAA;AAC9B;AAEA,EAAA,OAAO,MAAiC,GAAA;AACtC,IAAO,OAAA,IAAI,GAAI,CAAA,IAAA,CAAK,OAAO,CAAA;AAC7B;AAEA,EAAA,OAAO,OAAOA,KAAoB,EAAA;AAChC,IAAK,IAAA,CAAA,OAAA,CAAQ,OAAOA,KAAI,CAAA;AAC1B;AAEA,EAAA,OAAO,SAAkB,GAAA;AACvB,IAAA,IAAA,CAAK,QAAQ,KAAM,EAAA;AACrB;AACF,CAAA;AAxBa,iBACI,CAAA,OAAA,uBAAsC,GAAI,EAAA;ACiBpD,SAAS,gBACdoE,KAC+C,EAAA;AAC/C,EAAA,OAAO,mBAAoBA,CAAAA,KAAI,CAAK,IAAA,mBAAA,CAAoBA,KAAI,CAAA;AAC9D;AAEO,SAAS,oBAAoBA,KAAuC,EAAA;AACzE,EAAOA,OAAAA,KAAAA,CAAK,SAAS,UAAW,CAAA,oBAAA;AAClC;AAEO,SAAS,oBAAoBA,KAAuC,EAAA;AACzE,EAAOA,OAAAA,KAAAA,CAAK,SAAS,UAAW,CAAA,oBAAA;AAClC;AAEO,SAAS,aAAaA,KAA4B,EAAA;AACvD,EAAA,OAAO,UAAcA,IAAAA,KAAAA,IAAQ,KAAM,CAAA,OAAA,CAAQA,MAAK,QAAQ,CAAA;AAC1D;AA6Ca,IAAA,cAAA,GAAiB,CAAC,IAAe,KAAA;AAC5C,EAAM,MAAA,eAAA,GAAkB,KAAK,QAAS,CAAA,IAAA;IACpC,CAACA,KAAAA,KAASA,KAAK,CAAA,IAAA,KAAS,UAAW,CAAA;AACrC,GAAA;AACA,EAAA,OAAOyK,sBAAK,IAAK,CAAA,CAAA,eAAA,IAAA,OAAA,KAAA,CAAA,GAAA,eAAA,CAAiB,UAAS,EAAE,CAAA;AAC/C;AAEO,SAAS1K,OAAM,UAA0B,EAAA;AAC9C,EAAM,MAAA,SAAA,GAAY,OAAQ,EAAA,CAAE,GAAI,CAAA,WAAW,EAAE,GAAI,CAAA,SAAS,CAAE,CAAA,GAAA,CAAI,iBAAiB,CAAA;AACjF,EAAO,OAAA,SAAA,CAAU,MAAM,UAAU,CAAA;AACnC;AAOO,SAAS,gBAAgB,SAA0B,EAAA;AAlG1D,EAAA,IAAA,EAAA;AAmGE,EAAI,IAAA,SAAA,CAAU,SAAS,mBAAqB,EAAA;AAC1C,IAAO,OAAA,KAAA;AACT;AAEA,EAAA,MAAM,UAAU,EAAA,GAAA,SAAA,CAAkB,IAAlB,KAAA,IAAA,GAAA,SAAA,EAAwB,CAAA,MAAA;AAExC,EAAA,IAAI,CAAC,MAAA,IAAU,MAAO,CAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AACvC,IAAO,OAAA,KAAA;AACT;AAEA,EAAA,MAAM,UAAa,GAAA,MAAA,CAAO,IAAK,CAAA,CAAC,CAAE,CAAA,UAAA;AAElC,EAAA,OAAO,WAAW,IAAS,KAAA,yBAAA;AAC7B;AAEO,SAAS,gBACd,SAC2C,EAAA;AApH7C,EAAA,IAAA,EAAA;AAqHE,EAAI,IAAA,SAAA,CAAU,SAAS,mBAAqB,EAAA;AAC1C,IAAM,MAAA,IAAI,MAAM,mCAAmC,CAAA;AACrD;AAEA,EAAA,MAAM,eAAgB,SAAkB,CAAA,KAAA;AACxC,EAAA,MAAM,UAAU,EAAA,GAAA,SAAA,CAAkB,IAAlB,KAAA,IAAA,GAAA,SAAA,EAAwB,CAAA,MAAA;AACxC,EAAA,IAAI,CAAC,MAAA,IAAU,MAAO,CAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AACvC,IAAM,MAAA,IAAI,MAAM,8BAA8B,CAAA;AAChD;AAEA,EAAA,MAAM,kBAAqB,GAAA,MAAA,CAAO,IAAK,CAAA,CAAC,CAAE,CAAA,UAAA;AAC1C,EAAI,IAAA,kBAAA,CAAmB,SAAS,yBAA2B,EAAA;AACzD,IAAM,MAAA,IAAI,MAAM,kCAAkC,CAAA;AACpD;AAEA,EAAA,MAAM,SAAS,kBAAmB,CAAA,MAAA;AAClC,EAAA,MAAM,aAAgB,GAAA,MAAA,CAAO,GAAI,CAAA,CAAC,KAAe,KAAA;AAC/C,IAAI,IAAA,KAAA,CAAM,SAAS,YAAc,EAAA;AAC/B,MAAA,OAAO,KAAM,CAAA,IAAA;KACR,MAAA;AACL,MAAM,MAAA,IAAI,MAAM,+DAA+D,CAAA;AACjF;GACD,CAAA;AAED,EAAI,IAAA,aAAA,CAAc,SAAS,CAAG,EAAA;AAC5B,IAAM,MAAA,IAAI,MAAM,4CAA4C,CAAA;AAC9D;AAEA,EAAM,MAAA,UAAA,GAAa,YAAa,CAAA,OAAA,CAAQ,IAAI,CAAA;AAC5C,EAAA,IAAI,eAAe,CAAI,CAAA,EAAA;AACrB,IAAM,MAAA,IAAI,MAAM,8BAA8B,CAAA;AAChD;AACA,EAAA,IAAI,mBAAmB,YAAa,CAAA,SAAA,CAAU,UAAa,GAAA,CAAC,EAAE,IAAK,EAAA;AAEnE,EAAA,IAAI,iBAAiB,UAAW,CAAA,GAAG,KAAK,gBAAiB,CAAA,QAAA,CAAS,GAAG,CAAG,EAAA;AACtE,IAAA,gBAAA,GAAmB,iBAAiB,SAAU,CAAA,CAAA,EAAG,iBAAiB,MAAS,GAAA,CAAC,EAAE,IAAK,EAAA;AACrF;AACA,EAAM,MAAA,gBAAA,GAAmBA,OAAM,gBAAgB,CAAA;AAC/C,EAAM,MAAA,cAAA,GAAiB,eAAgB,CAAA,gBAAA,CAAiB,QAAQ,CAAA;AAEhE,EAAO,OAAA,EAAE,IAAM,EAAA,cAAA,EAAgB,aAAc,EAAA;AAC/C;AAEA,SAAS,gBAAgB,KAAuB,EAAA;AAC9C,EAAA,MAAM,iBAAyB,EAAC;AAEhC,EAAA,KAAA,MAAWC,SAAQ,KAAO,EAAA;AACxB,IAAI,IAAA,cAAA,CAAeA,KAAI,CAAG,EAAA;AACxB,MAAA,IAAKA,MAAa,QAAU,EAAA;AAC1B,QAAM,MAAA,UAAA,GAAa,eAAiBA,CAAAA,KAAAA,CAAa,QAAQ,CAAA;AACzD,QAAe,cAAA,CAAA,IAAA,CAAK,GAAG,UAAU,CAAA;AACnC;KACK,MAAA;AACL,MAAA,cAAA,CAAe,KAAKA,KAAI,CAAA;AAC1B;AACF;AAEA,EAAO,OAAA,cAAA;AACT;AAGA,SAAS,eAAeA,KAAqB,EAAA;AAC3C,EAAA,OACEA,KAAK,CAAA,IAAA,KAAS,UAAW,CAAA,oBAAA,IACxBA,MAAa,IAAS,KAAA,IAAA;AAE3B;ACvLO,SAAS,WAAA,CAAY,UAAkB,UAA4B,EAAA;AACxE,EAAI,IAAA,UAAA,CAAW,UAAW,CAAA,GAAG,CAAG,EAAA;AAC9B,IAAO,OAAA,UAAA;AACT;AAEA,EAAA,MAAM,YAAY,QAAS,CAAA,KAAA,CAAM,GAAG,CAAA,CAAE,OAAO,OAAO,CAAA;AACpD,EAAA,MAAM,cAAc,UAAW,CAAA,KAAA,CAAM,GAAG,CAAA,CAAE,OAAO,OAAO,CAAA;AAExD,EAAA,KAAA,MAAW,QAAQ,WAAa,EAAA;AAC9B,IAAA,IAAI,SAAS,GAAK,EAAA;AAClB,IAAA,IAAI,SAAS,IAAM,EAAA;AACjB,MAAA,SAAA,CAAU,GAAI,EAAA;KACT,MAAA;AACL,MAAA,SAAA,CAAU,KAAK,IAAI,CAAA;AACrB;AACF;AAEA,EAAO,OAAA,GAAA,GAAM,SAAU,CAAA,IAAA,CAAK,GAAG,CAAA;AACjC;AAEO,SAAS,WAAW,QAA0B,EAAA;AACnD,EAAA,MAAM,QAAQ,QAAS,CAAA,KAAA,CAAM,GAAG,CAAA,CAAE,OAAO,OAAO,CAAA;AAChD,EAAA,KAAA,CAAM,GAAI,EAAA;AACV,EAAO,OAAA,GAAA,GAAM,KAAM,CAAA,IAAA,CAAK,GAAG,CAAA;AAC7B;AAEO,SAAS,YAAY,GAAe,EAAA;AACzC,EAAA,OAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,SAAA,CAAU,GAAG,CAAC,CAAA;AACvC;AAEO,SAAS,eAAeiB,MAAoB,EAAA;AACjD,EAAI,IAAA,KAAA,CAAM,OAAQA,CAAAA,MAAK,CAAG,EAAA;AACxB,IAAOA,OAAAA,MAAAA,CAAM,KAAK,EAAE,CAAA;AACtB,GAAA,MAAA,IAAW,OAAOA,MAAAA,KAAU,QAAYA,IAAAA,MAAAA,KAAU,IAAM,EAAA;AACtD,IAAO,OAAA,IAAA,CAAK,UAAUA,MAAK,CAAA;GACtB,MAAA;AACL,IAAA,OAAO,OAAOA,MAAK,CAAA;AACrB;AACF;ACjCO,IAAM,iBAAN,MAAqB;EAG1B,OAAO,QAAA,CAASrF,OAAc,cAAsC,EAAA;AAClE,IAAK,IAAA,CAAA,OAAA,CAAQ,GAAIA,CAAAA,KAAAA,EAAM,cAAc,CAAA;AACvC;AAEA,EAAA,OAAO,IAAIA,KAA0C,EAAA;AACnD,IAAO,OAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAIA,KAAI,CAAA;AAC9B;AAEA,EAAA,OAAO,MAAsC,GAAA;AAC3C,IAAO,OAAA,IAAI,GAAI,CAAA,IAAA,CAAK,OAAO,CAAA;AAC7B;AAEA,EAAA,OAAO,OAAOA,KAAoB,EAAA;AAChC,IAAK,IAAA,CAAA,OAAA,CAAQ,OAAOA,KAAI,CAAA;AAC1B;AAEA,EAAA,OAAO,SAAkB,GAAA;AACvB,IAAA,IAAA,CAAK,QAAQ,KAAM,EAAA;AACrB;AACF;AAtBa,cACI,CAAA,OAAA,uBAA2C,GAAI,EAAA;ACNzD,IAAMkG,MAAAA,GAAN,MAAM,MAAM,CAAA;AAKjB,EAAA,WAAA,CAAY,SAAiC,GAAA,EAAI,EAAA,MAAA,EAA6B,MAAgB,EAAA;AAC5F,IAAA,IAAA,CAAK,SAAY,GAAA,SAAA;AAEjB,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AACd,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AAChB;AAEA,EAAA,GAAA,CAAI,GAAkB,EAAA;AACpB,IAAI,IAAA,GAAA,IAAO,KAAK,SAAW,EAAA;AACzB,MAAO,OAAA,IAAA,CAAK,UAAU,GAAG,CAAA;AAC3B,KAAA,MAAA,IAAW,KAAK,MAAQ,EAAA;AACtB,MAAO,OAAA,IAAA,CAAK,MAAO,CAAA,GAAA,CAAI,GAAG,CAAA;KACjB,MAAA,IAAA,GAAA,IAAO,KAAK,MAAQ,EAAA;AAC7B,MAAO,OAAA,IAAA,CAAK,OAAO,GAAG,CAAA;KACjB,MAAA;AACL,MAAO,OAAA,KAAA,CAAA;AACT;AACF;AAEA,EAAA,QAAA,CAAS,GAAkB,EAAA;AACzB,IAAO,OAAA,IAAA,CAAK,UAAU,GAAG,CAAA;AAC3B;AAEA,EAAA,SAAA,CAAU,GAAkB,EAAA;AAC1B,IAAO,OAAA,IAAA,CAAK,OAAO,GAAG,CAAA;AACxB;AAEA,EAAA,SAAA,CAAU,KAAab,MAAkB,EAAA;AACvC,IAAK,IAAA,CAAA,MAAA,CAAO,GAAG,CAAIA,GAAAA,MAAAA;AACrB;AAEA,EAAA,QAAA,CAAS,KAAaA,MAAkB,EAAA;AACtC,IAAK,IAAA,CAAA,SAAA,CAAU,GAAG,CAAIA,GAAAA,MAAAA;AACxB;EAEA,WAAY,CAAA,SAAA,GAAiC,EAAW,EAAA;AACtD,IAAA,OAAO,IAAI,MAAA,CAAM,SAAW,EAAA,IAAA,CAAK,QAAQ,IAAI,CAAA;AAC/C;AACF,CAAA;ACFO,SAASyJ,wBAA0B,GAAA;AACxC,EAAO,OAAA;IACL,QAAU,EAAA;MACR,iBAAmBC,EAAAA,oBAAAA;MACnB,iBAAmBA,EAAAA;AACrB,KAAA;IACA,MAAQ,EAAA;AACN,MAAA,EAAC,SAAW,EAAA,GAAA,EAAK,WAAa,EAAA,CAAC,UAAU,CAAC,EAAA;MAC1C,EAAC,OAAA,EAAS,IAAM,EAAA,SAAA,EAAW,GAAG;AAChC;AACF,GAAA;AACF;AAyDA,SAASA,oBAAAA,CAAoB3K,KAAM,EAAA,MAAA,EAAQ,KAAO,EAAA;AAChD,EAAMiB,MAAAA,MAAAA,GAAQjB,MAAK,KAAS,IAAA,EAAA;AAC5B,EAAA,MAAM,SAAS,KAAM,CAAA,WAAA,CAAYiB,QAAO,SAAU,IAAA,EAAMM,QAAO,KAAO,EAAA;AAKpE,IAAA,OAAA,CAAQA,MAAU,KAAA,CAAA,IAAK,KAAQ,GAAA,EAAA,GAAK,IAAQ,IAAA,IAAA;GAC7C,CAAA;AACD,EAAA,OAAO,MAAM,MAAS,GAAA,GAAA;AACxB;AC7GO,SAASqJ,OAAAA,CAAO3J,QAAO,SAAW,EAAA;AACvC,EAAM,MAAA,MAAA,GAAS,OAAOA,MAAK,CAAA;AAE3B,EAAI,IAAA,OAAO,cAAc,QAAU,EAAA;AACjC,IAAM,MAAA,IAAI,UAAU,oBAAoB,CAAA;AAC1C;AAEA,EAAA,IAAI,KAAQ,GAAA,CAAA;AACZ,EAAIM,IAAAA,MAAAA,GAAQ,MAAO,CAAA,OAAA,CAAQ,SAAS,CAAA;AAEpC,EAAA,OAAOA,WAAU,CAAI,CAAA,EAAA;AACnB,IAAA,KAAA,EAAA;AACA,IAAAA,SAAQ,MAAO,CAAA,OAAA,CAAQ,SAAWA,EAAAA,MAAAA,GAAQ,UAAU,MAAM,CAAA;AAC5D;AAEA,EAAO,OAAA,KAAA;AACT;ACXA,IAAMsJ,mBAAqB,GAAA,WAAA;AAC3B,IAAMC,oBAAsB,GAAA,iCAAA;AAC5B,IAAMC,uBAAAA;;AAEJ,EAAA;;AACF,IAAMC,iBAAmB,GAAA,qBAAA;AAGzB,IAAMC,mBAAAA,uBAAyB,OAAQ,EAAA;AAShC,SAASC,KAAAA,CAAKjK,QAAOvF,QAAS,EAAA;AACnC,EAAAuF,SAAQA,MAAM,CAAA,OAAA;AACZvF,IAAAA,QAAAA,CAAQ,MACJyP,GAAAA,6BAAAA,CAA6BzP,QAAQ,CAAA,MAAM,CAC3CmP,GAAAA,mBAAAA;AACJ,IAAA;AACF,GAAA;AAEA,EAAInP,IAAAA,QAAAA,CAAQ,MAAUA,IAAAA,QAAAA,CAAQ,UAAY,EAAA;AACxC,IAAOuF,OAAAA,MAAAA;AACT;AAEA,EAAA,OACEA,OAEG,OAAQ6J,CAAAA,oBAAAA,EAAqB,SAAS,CAGtC,CAAA,OAAA,CAAQC,yBAAwB,KAAK,CAAA;AAQ1C,EAAS,SAAA,SAAA,CAAU,IAAMxJ,EAAAA,MAAAA,EAAOsF,IAAK,EAAA;AACnC,IAAA,OAAOnL,QAAQ,CAAA,MAAA;OACZ,IAAK,CAAA,UAAA,CAAW,CAAC,CAAI,GAAA,KAAA,IAAU,OAC9B,IAAK,CAAA,UAAA,CAAW,CAAC,CAAA,GACjB,KACA,GAAA,KAAA;MACFmL,IAAI,CAAA,UAAA,CAAWtF,SAAQ,CAAC,CAAA;AACxB7F,MAAAA;AACF,KAAA;AACF;AAOA,EAAS,SAAA,KAAA,CAAM,SAAW6F,EAAAA,MAAAA,EAAOsF,IAAK,EAAA;AACpC,IAAA,OAAOnL,QAAQ,CAAA,MAAA;AACb,MAAA,SAAA,CAAU,WAAW,CAAC,CAAA;MACtBmL,IAAI,CAAA,UAAA,CAAWtF,SAAQ,CAAC,CAAA;AACxB7F,MAAAA;AACF,KAAA;AACF;AACF;AAUA,SAASyP,8BAA6B,MAAQ,EAAA;AAC5C,EAAI,IAAA,MAAA,GAASF,mBAAmB,CAAA,GAAA,CAAI,MAAM,CAAA;AAE1C,EAAA,IAAI,CAAC,MAAQ,EAAA;AACX,IAAA,MAAA,GAASG,wBAAuB,MAAM,CAAA;AACtC,IAAAH,mBAAAA,CAAmB,GAAI,CAAA,MAAA,EAAQ,MAAM,CAAA;AACvC;AAEA,EAAO,OAAA,MAAA;AACT;AAMA,SAASG,wBAAuB,MAAQ,EAAA;AAEtC,EAAA,MAAM,SAAS,EAAC;AAChB,EAAA,IAAI7J,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAO,OAAA,EAAEA,MAAQ,GAAA,MAAA,CAAO,MAAQ,EAAA;AAC9B,IAAA,MAAA,CAAO,KAAK,MAAOA,CAAAA,MAAK,EAAE,OAAQyJ,CAAAA,iBAAAA,EAAkB,MAAM,CAAC,CAAA;AAC7D;AAEA,EAAO,OAAA,IAAI,OAAO,KAAQ,GAAA,MAAA,CAAO,KAAK,GAAG,CAAA,GAAI,KAAK,GAAG,CAAA;AACvD;AC9GO,SAASK,aAAY3O,KAAM,EAAA;AAChC,EAAA,OAAO,QAAQA,KAAK,CAAA,QAAA,CAAS,EAAE,CAAA,CAAE,aAAgB,GAAA,GAAA;AACnD;ACyBO,SAAS4O,uBAAAA,CAAuBrK,QAAOvF,QAAS,EAAA;AACrD,EAAOwP,OAAAA,KAAAA,CAAKjK,QAAO,MAAO,CAAA,MAAA,CAAO,EAAC,MAAQoK,EAAAA,YAAAA,EAAc3P,EAAAA,QAAO,CAAC,CAAA;AAClE;ACgBA,IAAMsN,OAAS,GAAA,IAAA;AAycR,SAASuC,kBAAiB7P,QAAS,EAAA;AACxC,EAAM,MAAA,QAAA,GAAsB,EAAC;AAC7B,EAAM,MAAA,KAAA,GAAQ,SAAS,KAAS,IAAA,GAAA;AAChC,EAAM,MAAA,UAAA,GAAa,SAAS,UAAc,IAAA,KAAA;AAC1C,EAAM,MAAA,gBAAA,GAAmB,SAAS,gBAAoB,IAAA,KAAA;AACtD,EAAM,MAAA,UAAA,GAAa,QAAS,CAAA,UAAA,IAAc,MAAO,CAAA,iBAAA;AACjD,EAAM,MAAA,WAAA,GAAc,KAAU,KAAA,GAAA,GAAM,GAAM,GAAA,GAAA;AAE1C,EAAI,IAAA,KAAA,KAAU,GAAO,IAAA,KAAA,KAAU,GAAK,EAAA;AAClC,IAAA,MAAM,IAAI,KAAA;AACR,MAAA,0CAAA,GACE,KACA,GAAA;AACJ,KAAA;AACF;AAEA,EAAA,UAAA,CAAW,IAAO8P,GAAAA,YAAAA;AAElB,EAAO,OAAA;IACL,QAAU,EAAA;MACR,iBAAmB,EAAA,UAAA;MACnB,iBAAmB,EAAA;AACrB,KAAA;IACA,MAAQ,EAAA;AACN,MAAA,EAAC,SAAW,EAAA,GAAA,EAAK,WAAa,EAAA,CAAC,UAAU,CAAC,EAAA;MAC1C,EAAC,OAAA,EAAS,IAAM,EAAA,SAAA,EAAW,GAAG;AAChC,KAAA;;IAEA,MAAQ,EAAA,IAAA;;IAER,YAAc,EAAA;AAChB,GAAA;AAOA,EAAA,SAAS,UAAWxL,CAAAA,KAAAA,EAAM,CAAG,EAAA,KAAA,EAAO,IAAM,EAAA;AACxC,IAAM6H,MAAAA,KAAAA,GAAO7H,MAAK,IAAS,KAAA,mBAAA;AAC3B,IAAM,MAAA,WAAA,GAAcA,MAAK,IACrB,GAAA,CAACA,MAAK,QAAYA,IAAAA,KAAAA,CAAK,QAAS,CAAA,MAAA,KAAW,CAC3C,GAAA,KAAA;AACJ,IAAM,MAAA,KAAA,GAAQyL,YAAW,KAAK,CAAA;AAC9B,IAAM,MAAA,aAAA,GAAgBC,cAAa,KAAK,CAAA;AACxC,IAAM,MAAA,cAAA,GAAiB,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AAC/C,IAAM,MAAA,gBAAA,GAAmB,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AAEjD,IAAA,MAAM,uBAAuB,EAAC;AAC9B,IAAA,MAAM,UAAU7D,KAAO,GAAA,aAAA,GAAgB,EAAM,IAAA,GAAA,IAAO7H,MAAK,IAAQ,IAAA,EAAA,CAAA;AACjE,IAAA,MAAM+H,KAAO,GAAA,KAAA,CAAM,KAAM/H,CAAAA,KAAAA,CAAK,IAAI,CAAA;AAElC,IAAA,cAAA,CAAe,KAAK,MAAM,CAAA;AAC1B,IAAA,gBAAA,CAAiB,KAAK,MAAM,CAAA;AAG5B,IAAA,IAAIA,KAAK,CAAA,UAAA,IAAcA,KAAK,CAAA,UAAA,CAAW,SAAS,CAAG,EAAA;AACjD,MAAI,IAAA,CAACA,MAAK,IAAM,EAAA;AACd,QAAM,MAAA,IAAI,MAAM,yCAAyC,CAAA;AAC3D;AAEA,MAAA,IAAIuB,MAAQ,GAAA,CAAA,CAAA;AACZ,MAAA,OAAO,EAAEA,MAAAA,GAAQvB,KAAK,CAAA,UAAA,CAAW,MAAQ,EAAA;AACvC,QAAM,MAAA,SAAA,GAAYA,KAAK,CAAA,UAAA,CAAWuB,MAAK,CAAA;AAEvC,QAAI,IAAA,MAAA;AAEJ,QAAI,IAAA,SAAA,CAAU,SAAS,2BAA6B,EAAA;AAClD,UAAS,MAAA,GAAA,GAAA,IAAO,SAAU,CAAA,KAAA,IAAS,EAAM,CAAA,GAAA,GAAA;SACpC,MAAA;AACL,UAAI,IAAA,CAAC,UAAU,IAAM,EAAA;AACnB,YAAM,MAAA,IAAI,MAAM,qCAAqC,CAAA;AACvD;AAEA,UAAA,MAAMN,UAAQ,SAAU,CAAA,KAAA;AACxB,UAAA,MAAM,OAAO,SAAU,CAAA,IAAA;AAEvB,UAAA,IAAI,KAAQ,GAAA,EAAA;AAEZ,UAAIA,IAAAA,OAAAA,KAAU,IAAQA,IAAAA,OAAAA,KAAU,KAAW,CAAA,EAAA,CAEhC,MAAA,IAAA,OAAOA,YAAU,QAAU,EAAA;AACpC,YAAQ,KAAA,GAAA,GAAA,IAAOA,OAAM,CAAA,KAAA,IAAS,EAAM,CAAA,GAAA,GAAA;WAC/B,MAAA;AAEL,YAAM,MAAA,YAAA,GACJ,UAAc2J,IAAAA,OAAAA,CAAO3J,OAAO,EAAA,KAAK,IAAI2J,OAAO3J,CAAAA,OAAAA,EAAO,WAAW,CAAA,GAC1D,WACA,GAAA,KAAA;AACN,YACE,KAAA,GAAA,YAAA,GACAqK,wBAAuBrK,OAAO,EAAA,EAAC,QAAQ,CAAC,YAAY,CAAC,EAAC,CACtD,GAAA,YAAA;AACJ;AAEA,UAAS,MAAA,GAAA,IAAA,IAAQ,KAAQ,GAAA,GAAA,GAAM,EAAM,CAAA,GAAA,KAAA;AACvC;AAEA,QAAA,oBAAA,CAAqB,KAAK,MAAM,CAAA;AAClC;AACF;AAEA,IAAA,IAAI,wBAA2B,GAAA,KAAA;AAC/B,IAAM,MAAA,mBAAA,GAAsB,oBAAqB,CAAA,IAAA,CAAK,GAAG,CAAA;AAEzD,IAAA;;AAEE4G,MAAAA,KAAAA;AAEC,OAAA,UAAA,CAAW,KAAK,mBAAmB,CAAA;MAElC,cAAe,CAAA,OAAA,GAAU,GAAI,CAAA,MAAA;;MAG3B,mBAAoB,CAAA,MAAA;OAEnB,WAAe,GAAA,gBAAA,GAAmB,CAAI,GAAA,CAAA,GAAK,CAC5C,CAAA,GAAA,UAAA;AACJ,MAAA;AACA,MAA2B,wBAAA,GAAA,IAAA;AAC7B;AAEA,IAAA,IAAI,OAAU,GAAA,cAAA;AACd,IAAA,IAAI5G,MAAQ,GAAA,MAAA;AAEZ,IAAA,IAAI,wBAA0B,EAAA;AAC5B,MAAU,OAAA,GAAA,gBAAA;AAEV,MAAA,IAAIM,MAAQ,GAAA,CAAA,CAAA;AAEZ,MAAO,OAAA,EAAEA,MAAQ,GAAA,oBAAA,CAAqB,MAAQ,EAAA;AAG5C,QAAA,oBAAA,CAAqBA,MAAK,CAAA,GACxB,aAAgByH,GAAAA,OAAAA,GAAS,qBAAqBzH,MAAK,CAAA;AACvD;AAEA,MAAAN,UAAS,OAAQ,CAAA,IAAA;AACf,QAAA,IAAA,GAAO,oBAAqB,CAAA,IAAA,CAAK,IAAI,CAAA,GAAI,IAAO,GAAA;AAClD,OAAA;AACF,KAAA,MAAA,IAAW,mBAAqB,EAAA;AAC9B,MAAAA,MAAS,IAAA,OAAA,CAAQ,IAAK,CAAA,GAAA,GAAM,mBAAmB,CAAA;AACjD;AAEA,IAAA,IAAI,WAAa,EAAA;AACf,MAAAA,UAAS,OAAQ,CAAA,IAAA;SACd,gBAAoB,IAAA,wBAAA,GAA2B,KAAK,GAAO,IAAA;AAC9D,OAAA;AACF;AAEA,IAAAA,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA;AAEzB,IAAA,IAAIjB,KAAK,CAAA,QAAA,IAAYA,KAAK,CAAA,QAAA,CAAS,SAAS,CAAG,EAAA;AAC7C,MAAIA,IAAAA,KAAAA,CAAK,SAAS,mBAAqB,EAAA;AACrC,QAAAiB,UAAS,OAAQ,CAAA,IAAA;;;;;AAKf,UAAA,KAAA,CAAM,kBAAkBjB,KAAM,EAAA;AAC5B,YAAA,GAAG,QAAQ,OAAQ,EAAA;YACnB,MAAQ,EAAA,GAAA;YACR,KAAO,EAAA;WACR;AACH,SAAA;OACK,MAAA;AACL,QAAA,OAAA,CAAQ,MAAM,CAAC,CAAA;AACf,QAAAiB,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,IAAI,CAAA;AAC1B,QAAAA,MAAAA,IAAS,QAAQ,IAAKuJ,CAAAA,cAAAA,CAAcxK,OAAM,KAAO,EAAA,OAAA,CAAQ,OAAQ,EAAC,CAAC,CAAA;AACnE,QAAAiB,MAAAA,IAAS,OAAQ,CAAA,IAAA,CAAK,IAAI,CAAA;AAC5B;AACF;AAEA,IAAA,IAAI,CAAC,WAAa,EAAA;AAChB,MAAAA,UAAS,OAAQ,CAAA,IAAA;AACd4G,QAAAA,CAAAA,KAAAA,GAAO,aAAgB,GAAA,EAAA,IAAM,IAAQ7H,IAAAA,KAAAA,CAAK,QAAQ,EAAM,CAAA,GAAA;AAC3D,OAAA;AACF;AAEA,IAAA+H,KAAK,EAAA;AACL,IAAO9G,OAAAA,MAAAA;AACT;AACF;AAkBA,SAASuJ,cAAAA,CAAc,MAAQ,EAAA,KAAA,EAAO,IAAM,EAAA;AAC1C,EAAA,MAAM,aAAa,KAAM,CAAA,UAAA;AACzB,EAAA,MAAM,WAAW,MAAO,CAAA,QAAA;AACxB,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,IAAI,CAAA;AACxC,EAAA,MAAM,aAAgBkB,GAAAA,aAAAA,CAAaD,WAAW,CAAA,KAAK,CAAC,CAAA;AAEpD,EAAA,MAAM,UAAU,EAAC;AACjB,EAAA,IAAIlK,MAAQ,GAAA,CAAA,CAAA;AAEZ,EAAA,UAAA,CAAW,KAAK,CAAE,CAAA,CAAA;AAElB,EAAO,OAAA,EAAEA,MAAQ,GAAA,QAAA,CAAS,MAAQ,EAAA;AAChC,IAAM,MAAA,KAAA,GAAQ,SAASA,MAAK,CAAA;AAE5B,IAAW,UAAA,CAAA,UAAA,CAAW,MAAS,GAAA,CAAC,CAAIA,GAAAA,MAAAA;AAEpC,IAAM,MAAA,SAAA,GAAY,EAAC,MAAQ,EAAA,IAAA,EAAM,OAAO,IAAM,EAAA,GAAG,OAAQ,CAAA,OAAA,EAAS,EAAA;AAElE,IAAA,MAAM,SAAS,KAAM,CAAA,MAAA,CAAO,KAAO,EAAA,MAAA,EAAQ,OAAO,SAAS,CAAA;AAE3D,IAAM,MAAA,eAAA,GACJ,KAAM,CAAA,IAAA,KAAS,mBACX,GAAA,MAAA,GACA,KAAM,CAAA,WAAA,CAAY,MAAQ,EAAA,SAAU,IAAM,EAAA,CAAA,EAAG,KAAO,EAAA;AAClD,MAAQ,OAAA,CAAA,KAAA,GAAQ,KAAK,aAAiB,IAAA,IAAA;KACvC,CAAA;AAEP,IAAA,OAAA,CAAQ,IAAK,CAAA,OAAA,CAAQ,IAAK,CAAA,eAAe,CAAC,CAAA;AAE1C,IAAI,IAAA,KAAA,CAAM,SAAS,MAAQ,EAAA;AACzB,MAAA,KAAA,CAAM,cAAiB,GAAA,KAAA,CAAA;AACzB;AAEA,IAAIA,IAAAA,MAAAA,GAAQ,QAAS,CAAA,MAAA,GAAS,CAAG,EAAA;AAC/B,MAAA,OAAA,CAAQ,IAAK,CAAA,OAAA,CAAQ,IAAK,CAAA,MAAM,CAAC,CAAA;AACnC;AACF;AAEA,EAAA,UAAA,CAAW,GAAI,EAAA;AAEf,EAAO,OAAA,OAAA,CAAQ,KAAK,EAAE,CAAA;AACxB;AAMA,SAASkK,YAAW,KAAO,EAAA;AACzB,EAAA,IAAI,KAAQ,GAAA,CAAA;AACZ,EAAIlK,IAAAA,MAAAA,GAAQ,MAAM,KAAM,CAAA,MAAA;AAExB,EAAO,OAAA,EAAEA,SAAQ,CAAI,CAAA,EAAA;AACnB,IAAM3F,MAAAA,KAAAA,GAAO,KAAM,CAAA,KAAA,CAAM2F,MAAK,CAAA;AAE9B,IAAI3F,IAAAA,KAAAA,KAAS,YAAgBA,IAAAA,KAAAA,KAAS,UAAY,EAAA;AAClD,IAAA,IAAIA,UAAS,mBAAqB,EAAA,KAAA,EAAA;AACpC;AAEA,EAAO,OAAA,KAAA;AACT;AAMA,SAAS8P,cAAa,KAAO,EAAA;AAC3B,EAAO1C,OAAAA,OAAAA,CAAO,OAAO,KAAK,CAAA;AAC5B;AAKA,SAASwC,YAAc,GAAA;AACrB,EAAO,OAAA,GAAA;AACT;ACxuBO,SAASG,mBAAqB,GAAA;AACnC,EAAA,OAAO,EAAC,QAAA,EAAU,EAAC,QAAA,EAAUC,iBAAe,EAAA;AAC9C;AA4CA,SAASA,gBAAe5L,KAAM,EAAA;AAC5B,EAAA,OAAOA,MAAK,KAAS,IAAA,EAAA;AACvB;AC5CO,SAAS6L,eAAcnQ,QAAS,EAAA;AACrC,EAAO,OAAA;IACL,UAAY,EAAA;MACVgP,wBAAwB,EAAA;AACxBa,MAAAA,iBAAAA,CAAwB,CAAA;MACxBI,mBAAmB;AACrB;AACF,GAAA;AACF;ACrBA,IAAK,CAAA,OAAA,CAAQ,SAAS,KAAU,CAAA;AAEhC,IAAM,OAAmB,GAAA;EACvB,UAAY,EAAA,CAACE,gBAAe;AAC9B,CAAA;AACA,IAAM,aAAA,GAAgB,CAAC7L,KAAe,KAAA;AACpC,EAAO,OAAA,UAAA,CAAWA,OAAM,OAAO,CAAA;AACjC,CAAA;AAEA,IAAM,WAAc,GAAA;AAClB,EAAA,eAAA;AACA,EAAA,mBAAA;AACA,EAAA,mBAAA;AACA,EAAA,YAAA;EACA,UAAY,EAAA,aAAA;AACZ,EAAA,eAAA;AACA,EAAA,eAAA;AACA,EAAA;AACF,CAAA;AAEO,IAAM,eAAA,GAAN,MAAM,gBAAgB,CAAA;AAG3B,EAAA,WAAA,CAAY,KAAc,EAAA;AACxB,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AACf;AAEA,EAAA,MAAM,cAAcA,KAAoC,EAAA;AACtD,IAAA,IACEA,MAAK,IAAS,KAAA,UAAA,CAAW,uBACzBA,KAAK,CAAA,IAAA,KAAS,WAAW,mBACzB,EAAA;AACA,MAAO,OAAA,IAAA,CAAK,uBAAuBA,KAAI,CAAA;AACzC;AAEA,IAAI,IAAA,eAAA,CAAgBA,KAAI,CAAG,EAAA;AACzB,MAAO,OAAA,MAAM,IAAK,CAAA,oBAAA,CAAqBA,KAAI,CAAA;AAC7C;AAEA,IAAI,IAAA,IAAA,CAAK,cAAeA,CAAAA,KAAI,CAAG,EAAA;AAC7B,MAAM,MAAA,iBAAA,GAAoB,MAAM,OAAQ,CAAA,GAAA;QACrCA,KAAgB,CAAA,QAAA,CAAS,GAAI,CAAA,OAAO,KAAU,KAAA;AAC7C,UAAA,MAAM,gBAAmB,GAAA,IAAI,gBAAgB,CAAA,IAAA,CAAK,KAAK,CAAA;AACvD,UAAA,MAAM,MAAS,GAAA,MAAM,gBAAiB,CAAA,aAAA,CAAc,KAAK,CAAA;AACzD,UAAA,OAAO,MAAM,OAAQ,CAAA,MAAM,CAAI,GAAA,MAAA,GAAS,CAAC,MAAM,CAAA;SAChD;AACH,OAAA;AAEA,MAAA,OAAO,kBAAkB,IAAK,EAAA;AAChC;AAEA,IAAI,IAAA,YAAA,CAAaA,KAAI,CAAG,EAAA;AACtB,MAAM,MAAA,OAAA,GAAU,EAAE,GAAGA,KAAK,EAAA;AAE1B,MAAM,MAAA,iBAAA,GAAoB,MAAM,OAAQ,CAAA,GAAA;QACtCA,KAAK,CAAA,QAAA,CAAS,GAAI,CAAA,OAAO,KAAU,KAAA;AACjC,UAAA,MAAM,gBAAmB,GAAA,IAAI,gBAAgB,CAAA,IAAA,CAAK,KAAK,CAAA;AACvD,UAAA,MAAM,MAAS,GAAA,MAAM,gBAAiB,CAAA,aAAA,CAAc,KAAK,CAAA;AACzD,UAAA,OAAO,MAAM,OAAQ,CAAA,MAAM,CAAI,GAAA,MAAA,GAAS,CAAC,MAAM,CAAA;SAChD;AACH,OAAA;AAEA,MAAQ,OAAA,CAAA,QAAA,GAAW,kBAAkB,IAAK,EAAA;AAE1C,MAAO,OAAA,OAAA;AACT;AAEA,IAAOA,OAAAA,KAAAA;AACT;AAEQ,EAAA,cAAA,CAAeA,KAAqB,EAAA;AAC1C,IAAA,OACE,eAAgBA,CAAAA,KAAI,CACnBA,KAAAA,KAAAA,CAAK,IAAS,KAAA,IAAA,IACbA,KAAK,CAAA,IAAA,KAAS,EACdA,IAAAA,KAAAA,CAAK,IAAS,KAAA,UAAA,IACdA,MAAK,IAAS,KAAA,gBAAA,CAAA;AAEpB;AAEA,EAAA,sBAAA,CAAuBA,KAAkB,EAAA;AACvC,IAAA,MAAM,aAAcA,KAAa,CAAA,KAAA;AACjC,IAAI,IAAA;AACF,MAAM,MAAA,cAAA,GAAiB,IAAK,CAAA,iBAAA,CAAkB,UAAU,CAAA;AACxD,MAAO,OAAA;AACL,QAAA,IAAA,EAAM,UAAW,CAAA,IAAA;AACjB,QAAA,KAAA,EAAO,eAAe,cAAc;AACtC,OAAA;AACF,KAAA,CAAA,OAAS,KAAY,EAAA;AACnB,MAAA,MAAM,IAAI,KAAA;QACR,CAAgC,6BAAA,EAAA,UAAU,CAAM,GAAA,EAAA,KAAA,CAAM,OAAO,CAAA;AAC/D,OAAA;AACF;AACF;AAEA,EAAA,iBAAA,CAAkB,UAAyB,EAAA;AACzC,IAAA,UAAA,GAAa,WAAW,IAAK,EAAA;AAC7B,IAAI,IAAA,GAAA;AACJ,IAAI,IAAA;AACF,MAAA,GAAA,GAAM,KAAK,UAAU,CAAA;AACvB,KAAA,CAAA,OAAS,CAAG,EAAA;AACV,MAAA,MAAM,IAAI,KAAA,CAAM,CAAgC,6BAAA,EAAA,UAAU,CAAG,CAAA,CAAA,CAAA;AAC/D;AACA,IAAO,OAAA,IAAA,CAAK,uBAAuB,GAAG,CAAA;AACxC;AAEA,EAAA,sBAAA,CAAuBA,KAA4B,EAAA;AACjD,IAAA,QAAQA,MAAK,IAAM;MACjB,KAAK,kBAAA;AACH,QAAO,OAAA,IAAA,CAAK,yBAAyBA,KAA6B,CAAA;MAEpE,KAAK,iBAAA;AACH,QAAO,OAAA,IAAA,CAAK,wBAAwBA,KAA4B,CAAA;MAElE,KAAK,SAAA;AACH,QAAA,OAAQA,KAAsB,CAAA,KAAA;MAEhC,KAAK,YAAA;AACH,QAAO,OAAA,IAAA,CAAK,eAAiBA,CAAAA,KAAAA,CAAyB,IAAI,CAAA;MAE5D,KAAK,kBAAA;AACH,QAAO,OAAA,IAAA,CAAK,yBAAyBA,KAA6B,CAAA;MAEpE,KAAK,gBAAA;AACH,QAAO,OAAA,IAAA,CAAK,uBAAuBA,KAA2B,CAAA;MAEhE,KAAK,iBAAA;AACH,QAAO,OAAA,IAAA,CAAK,wBAAwBA,KAA4B,CAAA;MAElE,KAAK,kBAAA;AACH,QAAO,OAAA,IAAA,CAAK,yBAAyBA,KAAW,CAAA;AAElD,MAAA;AACE,QAAA,MAAM,IAAI,KAAA,CAAM,CAA0BA,uBAAAA,EAAAA,KAAAA,CAAK,IAAI,CAAE,CAAA,CAAA;AACzD;AACF;AAEA,EAAA,uBAAA,CAAwBA,KAAmC,EAAA;AACzD,IAAOA,OAAAA,KAAAA,CAAK,SAAS,GAAI,CAAA,CAAC,YAAY,IAAK,CAAA,sBAAA,CAAuB,OAAQ,CAAC,CAAA;AAC7E;AAEA,EAAA,wBAAA,CAAyBA,KAAmB,EAAA;AAC1C,IAAA,MAAM,MAA2B,EAAC;AAClC,IAAW,KAAA,MAAA,QAAA,IAAYA,MAAK,UAAY,EAAA;AACtC,MAAI,IAAA,GAAA;AACJ,MAAI,IAAA,QAAA,CAAS,GAAI,CAAA,IAAA,KAAS,YAAc,EAAA;AACtC,QAAA,GAAA,GAAM,SAAS,GAAI,CAAA,IAAA;OACV,MAAA,IAAA,QAAA,CAAS,GAAI,CAAA,IAAA,KAAS,SAAW,EAAA;AAC1C,QAAA,GAAA,GAAM,SAAS,GAAI,CAAA,KAAA;OACd,MAAA;AACL,QAAA,MAAM,IAAI,KAAM,CAAA,CAAA,6BAAA,EAAgC,QAAS,CAAA,GAAA,CAAI,IAAI,CAAE,CAAA,CAAA;AACrE;AACA,MAAA,MAAMiB,MAAQ,GAAA,IAAA,CAAK,sBAAuB,CAAA,QAAA,CAAS,KAAK,CAAA;AACxD,MAAA,GAAA,CAAI,GAAG,CAAIA,GAAAA,MAAAA;AACb;AACA,IAAO,OAAA,GAAA;AACT;AAEA,EAAA,sBAAA,CAAuBjB,KAAgC,EAAA;AACrD,IAAA,MAAM,SAASA,KAAK,CAAA,MAAA;AACpB,IAAI,IAAA,MAAA,CAAO,SAAS,YAAc,EAAA;AAChC,MAAM,MAAA,IAAI,MAAM,CAA+C,6CAAA,CAAA,CAAA;AACjE;AAEA,IAAA,MAAM,eAAgB,MAA2B,CAAA,IAAA;AACjD,IAAM,MAAA,cAAA,GAAiB,cAAe,CAAA,GAAA,CAAI,YAAY,CAAA;AACtD,IAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,MAAA,MAAM,IAAI,KAAA,CAAM,CAAW,QAAA,EAAA,YAAY,CAAsB,oBAAA,CAAA,CAAA;AAC/D;AAEA,IAAM,MAAA,IAAA,GAAOA,MAAK,SAAU,CAAA,GAAA,CAAI,CAAA,GAAO,KAAA,IAAA,CAAK,sBAAuB,CAAA,GAAG,CAAC,CAAA;AACvE,IAAA,MAAM,CAAC,KAAA,EAAO,GAAG,IAAI,CAAI,GAAA,IAAA;AACzB,IAAO,OAAA,cAAA,CAAe,KAAO,EAAA,GAAG,IAAI,CAAA;AACtC;AAEA,EAAA,eAAA,CAAgB,YAA2B,EAAA;AACzC,IAAA,IAAI,CAAC,YAAc,EAAA;AACjB,MAAM,MAAA,IAAI,MAAM,CAAgC,8BAAA,CAAA,CAAA;AAClD;AAEA,IAAM,MAAA,KAAA,GAAQ,YAAa,CAAA,KAAA,CAAM,GAAG,CAAA;AACpC,IAAIiB,IAAAA,MAAAA;AAEJ,IAAI,IAAA;AACF,MAAAA,SAAQ,IAAK,CAAA,KAAA,CAAM,GAAI,CAAA,KAAA,CAAM,CAAC,CAAC,CAAA;AACjC,KAAA,CAAA,OAAS,KAAO,EAAA;AACd,MAAA,MAAM,IAAI,KAAM,CAAA,CAAA,UAAA,EAAa,KAAM,CAAA,CAAC,CAAC,CAAgC,8BAAA,CAAA,CAAA;AACvE;AAEA,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,CAAM,QAAQ,CAAK,EAAA,EAAA;AACrC,MAAM,MAAA,IAAA,GAAO,MAAM,CAAC,CAAA;AACpB,MAAA,IAAIA,UAAS,IAAM,EAAA;AACjB,QAAA,MAAM,IAAI,KAAA;UACR,CAA2B,wBAAA,EAAA,IAAI,8BAA8B,YAAY,CAAA,EAAA;AAC3E,SAAA;AACF;AACA,MAAAA,MAAAA,GAAQA,OAAM,IAAI,CAAA;AACpB;AAEA,IAAOA,OAAAA,MAAAA;AACT;AAEA,EAAA,wBAAA,CAAyBjB,KAAkC,EAAA;AACzD,IAAA,MAAM,iBAAyD,GAAA;AAC7D,MAAA,GAAA,EAAK,CAAC8L,KAAM,EAAA,KAAA,KAAUA,KAAO,GAAA,IAAA,CAAK,uBAAuB,KAAK,CAAA;AAC9D,MAAA,GAAA,EAAK,CAACA,KAAM,EAAA,KAAA,KAAUA,KAAO,GAAA,IAAA,CAAK,uBAAuB,KAAK,CAAA;AAC9D,MAAA,GAAA,EAAK,CAACA,KAAM,EAAA,KAAA,KAAUA,KAAO,GAAA,IAAA,CAAK,uBAAuB,KAAK,CAAA;AAC9D,MAAA,GAAA,EAAK,CAACA,KAAM,EAAA,KAAA,KAAUA,KAAO,GAAA,IAAA,CAAK,uBAAuB,KAAK,CAAA;AAC9D,MAAA,GAAA,EAAK,CAACA,KAAM,EAAA,KAAA,KAAUA,KAAO,GAAA,IAAA,CAAK,uBAAuB,KAAK,CAAA;AAC9D,MAAA,IAAA,EAAM,CAACA,KAAM,EAAA,KAAA,KAAUA,KAAQ,IAAA,IAAA,CAAK,uBAAuB,KAAK,CAAA;AAChE,MAAA,IAAA,EAAM,CAACA,KAAM,EAAA,KAAA,KAAUA,KAAQ,IAAA,IAAA,CAAK,uBAAuB,KAAK,CAAA;AAChE,MAAA,GAAA,EAAK,CAACA,KAAM,EAAA,KAAA,KAAUA,KAAO,GAAA,IAAA,CAAK,uBAAuB,KAAK,CAAA;AAC9D,MAAA,IAAA,EAAM,CAACA,KAAM,EAAA,KAAA,KAAUA,KAAQ,IAAA,IAAA,CAAK,uBAAuB,KAAK,CAAA;AAChE,MAAA,GAAA,EAAK,CAACA,KAAM,EAAA,KAAA,KAAUA,KAAO,GAAA,IAAA,CAAK,uBAAuB,KAAK,CAAA;AAC9D,MAAA,IAAA,EAAM,CAACA,KAAM,EAAA,KAAA,KAAUA,KAAQ,IAAA,IAAA,CAAK,uBAAuB,KAAK,CAAA;AAChE,MAAA,IAAA,EAAM,CAACA,KAAM,EAAA,KAAA,KAAUA,KAAQ,IAAA,IAAA,CAAK,uBAAuB,KAAK,CAAA;AAChE,MAAA,IAAA,EAAM,CAACA,KAAM,EAAA,KAAA,KAAUA,KAAQ,IAAA,IAAA,CAAK,uBAAuB,KAAK;AAClE,KAAA;AACA,IAAA,MAAM,WAAW9L,KAAK,CAAA,QAAA;AAEtB,IAAM,MAAA,SAAA,GAAY,kBAAkB,QAAQ,CAAA;AAC5C,IAAA,IAAI,CAAC,SAAW,EAAA;AACd,MAAA,MAAM,IAAI,KAAA,CAAM,CAAa,UAAA,EAAA,QAAQ,CAAmB,iBAAA,CAAA,CAAA;AAC1D;AAEA,IAAA,MAAM,IAAO,GAAA,IAAA,CAAK,sBAAuBA,CAAAA,KAAAA,CAAK,IAAI,CAAA;AAElD,IAAO,OAAA,SAAA,CAAU,IAAMA,EAAAA,KAAAA,CAAK,KAAK,CAAA;AACnC;AAEA,EAAA,uBAAA,CAAwBA,KAAiC,EAAA;AACvD,IAAA,MAAM,QAAW,GAAA,IAAA,CAAK,sBAAuBA,CAAAA,KAAAA,CAAK,QAAQ,CAAA;AAC1D,IAAA,QAAQA,MAAK,QAAU;MACrB,KAAK,GAAA;AACH,QAAA,OAAO,CAAC,QAAA;MACV,KAAK,GAAA;AACH,QAAA,OAAO,CAAC,QAAA;MACV,KAAK,GAAA;AACH,QAAA,OAAO,CAAC,QAAA;AACV,MAAA;AACE,QAAA,MAAM,IAAI,KAAA,CAAM,CAAyBA,sBAAAA,EAAAA,KAAAA,CAAK,QAAQ,CAAE,CAAA,CAAA;AAC5D;AACF;AAEA,EAAA,wBAAA,CAAyBA,KAAkC,EAAA;AACzD,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,sBAAuBA,CAAAA,KAAAA,CAAK,MAAM,CAAA;AACtD,IAAM,MAAA,QAAA,GAAWA,MAAK,QAClB,GAAA,IAAA,CAAK,uBAAuBA,KAAK,CAAA,QAAQ,CACxCA,GAAAA,KAAAA,CAAK,QAA6B,CAAA,IAAA;AAEvC,IAAA,IAAI,MAAU,IAAA,OAAO,MAAW,KAAA,QAAA,IAAY,YAAY,MAAQ,EAAA;AAC9D,MAAA,IAAI,MAAO,CAAA,QAAQ,CAAM,KAAA,KAAA,CAAA,EAAkB,OAAA,EAAA;AAC3C,MAAA,OAAO,OAAO,QAAQ,CAAA;KACjB,MAAA;AACL,MAAO,OAAA,EAAA;AACT;AACF;AAEA,EAAA,MAAM,qBACJA,KACwB,EAAA;AACxB,IAAI,IAAA;AACF,MAAA,MAAM,UAAUA,KAAK,CAAA,IAAA;AACrB,MAAM,MAAA,MAAA,GAAS,iBAAkB,CAAA,GAAA,CAAI,OAAO,CAAA;AAC5C,MAAA,IAAI,MAAQ,EAAA;AACV,QAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,aAAA,CAAcA,KAAI,CAAA;AACrC,QAAA,MAAM,aAA+B,GAAA;AACnC,UAAA,qBAAA,EAAuB,CAAC,KAAA,KAAiB,IAAI,gBAAA,CAAgB,KAAK,CAAA;AAClE,UAAA,KAAA,EAAO,IAAK,CAAA,KAAA;AACZ,UAAA,OAAA;AACA,UAAA;AACF,SAAA;AACA,QAAA,MAAM,SAAS,MAAM,MAAA,CAAO,UAAU,KAAOA,EAAAA,KAAAA,CAAK,UAAU,aAAa,CAAA;AACzE,QAAO,OAAA,MAAA;OACF,MAAA;AACL,QAAM,MAAA,OAAA,GAAU,EAAE,GAAGA,KAAK,EAAA;AAE1B,QAAM,MAAA,iBAAA,GAAoB,MAAM,OAAQ,CAAA,GAAA;UACtCA,KAAK,CAAA,QAAA,CAAS,GAAI,CAAA,OAAO,KAAU,KAAA;AACjC,YAAA,MAAM,gBAAmB,GAAA,IAAI,gBAAgB,CAAA,IAAA,CAAK,KAAK,CAAA;AACvD,YAAA,MAAM,MAAS,GAAA,MAAM,gBAAiB,CAAA,aAAA,CAAc,KAAK,CAAA;AACzD,YAAA,OAAO,MAAM,OAAQ,CAAA,MAAM,CAAI,GAAA,MAAA,GAAS,CAAC,MAAM,CAAA;WAChD;AACH,SAAA;AAEA,QAAQ,OAAA,CAAA,QAAA,GAAW,kBAAkB,IAAK,EAAA;AAC1C,QAAO,OAAA,OAAA;AACT;AACF,KAAA,CAAA,OAAS,KAAO,EAAA;AACd,MAAA,MAAM,IAAI,KAAA;AACR,QAAA,CAAA,kCAAA,EAAsC,MAAgB,OAAO,CAAA;AAC/D,OAAA;AACF;AACF;AAEA,EAAA,aAAA,CAAcA,KAAgC,EAAA;AAC5C,IAAA,MAAM,QAA6B,EAAC;AAEpC,IAAW,KAAA,MAAA,IAAA,IAAQA,MAAK,UAAY,EAAA;AAClC,MAAI,IAAA,IAAA,CAAK,IAAS,KAAA,uBAAA,CAAwB,iBAAmB,EAAA;AAC3D,QAAA,IAAI,KAAK,KAAU,KAAA,IAAA,IAAQ,OAAO,IAAA,CAAK,UAAU,QAAU,EAAA;AACzD,UAAA,KAAA,CAAM,IAAK,CAAA,IAAI,CAAI,GAAA,IAAA,CAAK,KAAS,IAAA,EAAA;AACnC,SAAA,MAAA,IACE,IAAK,CAAA,KAAA,CAAM,IACX,KAAA,uBAAA,CAAwB,kCACxB,EAAA;AACA,UAAM,MAAA,UAAA,GAAa,KAAK,KAAM,CAAA,KAAA;AAC9B,UAAA,KAAA,CAAM,IAAK,CAAA,IAAI,CAAI,GAAA,IAAA,CAAK,kBAAkB,UAAU,CAAA;AACtD;OAEA,MAAA,IAAA,IAAA,CAAK,IAAS,KAAA,uBAAA,CAAwB,4BACtC,EAAA;AACA,QAAA,MAAM,IAAI,KAAA;AACR,UAAA,CAAA,yCAAA,EAA4CA,MAAK,IAAI,CAAA,EAAA;AACvD,SAAA;AACF;AACF;AAEA,IAAO,OAAA,KAAA;AACT;AACF,CAAA;AAEO,IAAM,aAAA,GAAgB,OAC3B,IACA,EAAA,KAAA,GAA6B,EAC7B,EAAA,MAAA,GAA8B,EACZ,KAAA;AAClB,EAAA,MAAM,QAAQ,IAAI8B,MAAAA,CAAM,EAAE,KAAA,IAAS,MAAM,CAAA;AACzC,EAAM,MAAA,WAAA,GAAc,IAAI,eAAA,CAAgB,KAAK,CAAA;AAC7C,EAAA,MAAM,aAAgB,GAAA,MAAM,WAAY,CAAA,aAAA,CAAc,IAAI,CAAA;AAC1D,EAAO,OAAA,aAAA;AACT,CAAA;AC5VA,eAAsB,MAAA,CACpB,UACA,EAAA,OAAA,EACA,aACe,EAAA;AACf,EAAM,MAAA,cAAA,uBAAqB,GAAY,EAAA;AACvC,EAAM,MAAA,gBAAA,GAAmB,WAAY,CAAA,OAAA,EAAS,yBAAyB,CAAA;AAEvE,EAAA,MAAM,EAAE,IAAA,EAAM,QAAU,EAAA,aAAA,KAAkB,MAAM,iBAAA;AAC9C,IAAA,UAAA;AACA,IAAA,gBAAA;AACA,oBAAA,IAAI,GAAI,EAAA;AACR,IAAA,cAAA;AACA,IAAA;AACF,GAAA;AAEA,EAAM,MAAA,gBAAA,CAAiB,UAAU,aAAa,CAAA;AAE9C,EAAO,OAAA,QAAA;AACT;AAEA,eAAe,iBACbyF,CAAAA,QAAAA,EACA,YACA,EAAA,SAAA,EACA,gBACA,aACuD,EAAA;AACvD,EAAI,IAAA,cAAA,CAAe,GAAI,CAAA,YAAY,CAAG,EAAA;AACpC,IAAO,OAAA,EAAE,IAAM,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,QAAU,EAAA,EAAG,EAAA,EAAG,aAAe,EAAA,EAAG,EAAA;AACnE;AAEA,EAAI,IAAA,SAAA,CAAU,GAAI,CAAA,YAAY,CAAG,EAAA;AAC/B,IAAA,MAAM,IAAI,KAAA;AACR,MAAA,CAAA,0BAAA,EAA6B,CAAC,GAAG,SAAA,EAAW,YAAY,CAAE,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA;AACxE,KAAA;AACF;AAEA,EAAA,SAAA,CAAU,IAAI,YAAY,CAAA;AAE1B,EAAM,MAAA,IAAA,GAAOxH,OAAMwH,QAAO,CAAA;AAC1B,EAAA,cAAA,CAAe,IAAI,CAAA;AACnB,EAAM,MAAA,OAAA,GAAU,cAAe,CAAA,IAAA,EAAM,YAAY,CAAA;AACjD,EAAA,MAAM,gBAA+B,EAAC;AAEtC,EAAA,KAAA,MAAW,CAAC,aAAe,EAAA,UAAU,KAAK,MAAO,CAAA,OAAA,CAAQ,OAAO,CAAG,EAAA;AACjE,IAAA,MAAM,kBAAqB,GAAA,WAAA,CAAY,UAAW,CAAA,YAAY,GAAG,UAAU,CAAA;AAC3E,IAAM,MAAA,eAAA,GAAkB,MAAM,aAAA,CAAc,kBAAkB,CAAA;AAE9D,IAAA,MAAM,EAAE,IAAM,EAAA,aAAA,EAAe,aAAe,EAAA,mBAAA,KAC1C,MAAM,iBAAA;AACJ,MAAA,eAAA;AACA,MAAA,kBAAA;AACA,MAAA,IAAI,IAAI,SAAS,CAAA;AACjB,MAAA,cAAA;AACA,MAAA;AACF,KAAA;AAEF,IAAO,MAAA,CAAA,MAAA,CAAO,eAAe,mBAAmB,CAAA;AAChD,IAAc,aAAA,CAAA,aAAa,IAAI,aAAc,CAAA,QAAA;AAC/C;AAEA,EAAK,IAAA,CAAA,QAAA,GAAW,KAAK,QAAS,CAAA,MAAA;IAC5B,CAACvH,KAAAA,KAAcA,KAAK,CAAA,IAAA,KAAS,UAAW,CAAA;AAC1C,GAAA;AACA,EAAA,cAAA,CAAe,IAAI,YAAY,CAAA;AAC/B,EAAA,SAAA,CAAU,OAAO,YAAY,CAAA;AAE7B,EAAO,OAAA,EAAE,MAAM,aAAc,EAAA;AAC/B;AAEA,SAAS,eAAe,IAAkB,EAAA;AACxC,EAAAmJ,MAAM,CAAA,IAAA,EAAM,CAACnJ,KAAAA,EAAMuB,QAAO,MAAW,KAAA;AACnC,IAAI,IAAA,aAAA,CAAcvB,KAAI,CAAA,IAAK,MAAQ,EAAA;AACjC,MAAO,MAAA,CAAA,QAAA,CAAS,MAAOuB,CAAAA,MAAAA,EAAQ,CAAC,CAAA;AAChC,MAAO,OAAA,CAAC6I,OAAM7I,MAAK,CAAA;AACrB;GACD,CAAA;AACH;AAEA,SAAS,cAAcvB,KAAqB,EAAA;AAC1C,EAAA,IACEA,MAAK,IAAS,KAAA,UAAA,CAAW,uBACzBA,KAAK,CAAA,IAAA,KAAS,WAAW,mBACzB,EAAA;AACA,IAAMiB,MAAAA,MAAAA,GAASjB,KAAa,CAAA,KAAA,CAAM,IAAK,EAAA;AACvC,IACGiB,OAAAA,MAAAA,CAAM,UAAW,CAAA,IAAI,CAAKA,IAAAA,MAAAA,CAAM,SAAS,IAAI,CAAA,IAC9CA,MAAM,CAAA,UAAA,CAAW,IAAI,CAAA;AAEzB;AACA,EAAO,OAAA,KAAA;AACT;AAEA,SAAS,cAAA,CAAe,MAAY,YAA8C,EAAA;AAChF,EAAA,MAAM,UAAkC,EAAC;AAEzC,EAAAkI,MAAM,CAAA,IAAA,EAAM,UAAW,CAAA,WAAA,EAAa,CAACnJ,KAAc,KAAA;AA7GrD,IAAA,IAAA,EAAA;AA8GI,IAAA,MAAM,UAAS,EAAAA,GAAAA,KAAAA,CAAK,IAAL,KAAA,IAAA,GAAA,SAAA,EAAW,CAAA,MAAA;AAE1B,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAA,MAAM,IAAI,KAAA,CAAM,CAAsB,mBAAA,EAAA,YAAY,CAAE,CAAA,CAAA;AACtD;AAEA,IAAW,KAAA,MAAA,IAAA,IAAQ,OAAO,IAAM,EAAA;AAC9B,MAAI,IAAA,IAAA,CAAK,SAAS,mBAAqB,EAAA;AACrC,QAAM,MAAA,gBAAA,GAAmB,KAAK,UAAW,CAAA,IAAA;UACvC,CAAC,IAAA,KAAc,KAAK,IAAS,KAAA;AAC/B,SAAA;AAEA,QAAA,IACE,KAAK,UAAW,CAAA,IAAA;UACd,CAAC,IAAA,KAAc,KAAK,IAAS,KAAA;SAE/B,EAAA;AACA,UAAA,MAAM,IAAI,KAAA;AACR,YAAA,CAAA,sDAAA,EAAyD,YAAY,CAAA,EAAA,EAAKA,KAAK,CAAA,KAAA,CAAM,MAAM,CAAA;AAC7F,WAAA;AACF;AAEA,QAAA,IAAI,gBAAkB,EAAA;AACpB,UAAM,MAAA,YAAA,GAAe,iBAAiB,KAAM,CAAA,IAAA;AAC5C,UAAM,MAAA,MAAA,GAAS,KAAK,MAAO,CAAA,KAAA;AAC3B,UAAA,OAAA,CAAQ,YAAY,CAAI,GAAA,MAAA;SACnB,MAAA;AACL,UAAA,MAAM,IAAI,KAAA;AACR,YAAA,CAAA,kBAAA,EAAqB,YAAY,CAAA,EAAA,EAAKA,KAAK,CAAA,KAAA,CAAM,MAAM,CAAA;AACzD,WAAA;AACF;AACF,OAAA,MAAA,IAAW,IAAK,CAAA,IAAA,CAAK,UAAW,CAAA,QAAQ,CAAG,EAAA;AACzC,QAAA,MAAM,IAAI,KAAA;AACR,UAAA,CAAA,oCAAA,EAAuC,YAAY,CAAA,EAAA,EAAKA,KAAK,CAAA,KAAA,CAAM,MAAM,CAAA;AAC3E,SAAA;AACF;AACF;GACD,CAAA;AAED,EAAO,OAAA,OAAA;AACT;AAEA,eAAe,gBAAA,CACb,MACA,aACe,EAAA;AACf,EAAI,IAAA,eAAA;AAEJ,EAAG,GAAA;AACD,IAAkB,eAAA,GAAA,iBAAA,CAAkB,MAAM,aAAa,CAAA;GAChD,QAAA,eAAA;AACX;AAEA,SAAS,iBACP,CAAA,IAAA,EACA,aACA,EAAA,WAAA,GAAmC,EAC1B,EAAA;AACT,EAAA,IAAI,QAAW,GAAA,KAAA;AAEf,EAAAmJ,MAAAA;AACE,IAAA,IAAA;IACA,CAAC,UAAA,CAAW,oBAAsB,EAAA,UAAA,CAAW,oBAAoB,CAAA;IACjE,CAACnJ,KAAAA,EAAWuB,QAAO,MAAW,KAAA;AAC5B,MAAA,MAAM,gBAAgBvB,KAAK,CAAA,IAAA;AAC3B,MAAI,IAAA,aAAA,CAAc,aAAa,CAAG,EAAA;AAChC,QAAA,MAAM,cAAiB,GAAA,WAAA,CAAY,aAAc,CAAA,aAAa,CAAC,CAAA;AAC/D,QAAM,MAAA,KAAA,GAAQ,eAAgBA,CAAAA,KAAAA,EAAM,WAAW,CAAA;AAC/C,QAAM,MAAA,eAAA,GAAkBA,KAAK,CAAA,QAAA,IAAY,EAAC;AAE1C,QAAA,MAAM,0BAA0B,cAAe,CAAA,GAAA;AAAI,UAAA,CAAC,SAClD,KAAA,+BAAA;AACE,YAAA,SAAA;AACA,YAAA,KAAA;AACA,YAAA,eAAA;AACA,YAAA;AACF;AACF,SAAA;AAEA,QAAA,MAAA,CAAO,SAAS,MAAOuB,CAAAA,MAAAA,EAAO,GAAG,GAAG,uBAAA,CAAwB,MAAM,CAAA;AAClE,QAAW,QAAA,GAAA,IAAA;AACb;AACF;AACF,GAAA;AAEA,EAAO,OAAA,QAAA;AACT;AAEA,SAAS,eAAA,CACPvB,OACA,WACqB,EAAA;AACrB,EAAA,MAAM,QAA6B,EAAC;AAEpC,EAAW,KAAA,MAAA,IAAA,IAAQA,MAAK,UAAY,EAAA;AAClC,IAAI,IAAA,IAAA,CAAK,IAAS,KAAA,uBAAA,CAAwB,iBAAmB,EAAA;AAC3D,MAAA,IAAI,KAAK,KAAU,KAAA,IAAA,IAAQ,OAAO,IAAA,CAAK,UAAU,QAAU,EAAA;AACzD,QAAA,KAAA,CAAM,KAAK,IAAI,CAAA,GAAI,KAAK,SAAU,CAAA,IAAA,CAAK,SAAS,EAAE,CAAA;AACpD,OAAA,MAAA,IAAW,IAAK,CAAA,KAAA,CAAM,IAAS,KAAA,uBAAA,CAAwB,kCAAoC,EAAA;AACzF,QAAM,MAAA,EAAE,KAAO,EAAA,aAAA,EAAkB,GAAA,2BAAA;AAC/B,UAAA,IAAA,CAAK,KAAM,CAAA,KAAA;AACX,UAAA;AACF,SAAA;AACA,QAAM,KAAA,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,aAAA;AACrB;KACS,MAAA,IAAA,IAAA,CAAK,IAAS,KAAA,uBAAA,CAAwB,4BAA8B,EAAA;AAC7E,MAAA,MAAM,IAAI,KAAA;AACR,QAAA,CAAA,6EAAA,EAAgFA,MAAK,IAAI,CAAA,EAAA;AAC3F,OAAA;AACF;AACF;AAEA,EAAO,OAAA,KAAA;AACT;AAEA,SAAS,2BAAA,CACP,YACA,KACuC,EAAA;AACvC,EAAA,MAAM,SAAY,GAAA,eAAA;AAClB,EAAM,MAAA,YAAA,uBAAmB,GAAI,EAAA;AAC7B,EAAA,IAAI,iBAAoB,GAAA,UAAA;AAExB,EAAM,MAAA,UAAA,GAAa,CAAC,IAAyB,KAAA;AAC3C,IAAA,OAAO,IAAK,CAAA,OAAA,CAAQ,SAAW,EAAA,CAAC,OAAO,QAAa,KAAA;AAClD,MAAI,IAAA,YAAA,CAAa,GAAI,CAAA,QAAQ,CAAG,EAAA;AAC9B,QAAA,MAAM,IAAI,KAAA,CAAM,CAA6C,0CAAA,EAAA,QAAQ,CAAI,EAAA,CAAA,CAAA;AAC3E;AACA,MAAI,IAAA,KAAA,CAAM,cAAe,CAAA,QAAQ,CAAG,EAAA;AAClC,QAAA,YAAA,CAAa,IAAI,QAAQ,CAAA;AACzB,QAAM,MAAA,SAAA,GAAY,MAAM,QAAQ,CAAA;AAChC,QAAI,IAAA,OAAO,cAAc,QAAU,EAAA;AACjC,UAAA,OAAO,WAAW,SAAS,CAAA;SACtB,MAAA;AACL,UAAA,OAAO,OAAO,SAAS,CAAA;AACzB;OACK,MAAA;AACL,QAAO,OAAA,KAAA;AACT;KACD,CAAA;AACH,GAAA;AAEA,EAAI,IAAA;AACF,IAAA,iBAAA,GAAoB,WAAW,iBAAiB,CAAA;AAClD,GAAA,CAAA,OAAS,KAAO,EAAA;AACd,IAAA,MAAM,IAAI,KAAA,CAAM,CAA4C,wCAAA,EAAA,KAAA,CAAgB,OAAO,CAAE,CAAA,CAAA;AACvF;AAEA,EAAM,MAAA,SAAA,GAAY,4BAA6B,CAAA,IAAA,CAAK,iBAAiB,CAAA;AAErE,EAAO,OAAA,EAAE,KAAO,EAAA,iBAAA,EAAmB,SAAU,EAAA;AAC/C;AAEA,SAAS,+BACPA,CAAAA,KAAAA,EACA,KACA,EAAA,eAAA,EACA,aACe,EAAA;AACf,EAAA,IACEA,MAAK,IAAS,KAAA,UAAA,CAAW,uBACzBA,KAAK,CAAA,IAAA,KAAS,WAAW,mBACzB,EAAA;AACA,IAAKA,IAAAA,KAAAA,CAAa,UAAU,gBAAkB,EAAA;AAC5C,MAAM,MAAA,YAAA,GAAqB,EAAE,IAAM,EAAA,MAAA,EAAQ,UAAU,CAAC,GAAG,eAAe,CAAE,EAAA;AAC1E,MAAA,gBAAA,CAAiB,cAAc,aAAa,CAAA;AAC5C,MAAO,OAAA,0BAAA,CAA2B,aAAa,QAAQ,CAAA;AACzD,KAAA,MAAA,IAAYA,KAAa,CAAA,KAAA,CAAM,QAAS,CAAA,QAAQ,CAAG,EAAA;AACjD,MAAA,MAAM,EAAE,KAAA,EAAO,aAAe,EAAA,SAAA,EAAc,GAAA,2BAAA;QACzCA,KAAa,CAAA,KAAA;AACd,QAAA;AACF,OAAA;AAEA,MAAA,IAAI,SAAW,EAAA;AACb,QAAO,OAAA;AACL,UAAA,IAAA,EAAM,UAAW,CAAA,IAAA;UACjB,KAAO,EAAA,IAAA,CAAK,MAAM,aAAa;AACjC,SAAA;OACK,MAAA;AACL,QAAO,OAAA;AACL,UAAA,IAAA,EAAMA,KAAK,CAAA,IAAA;UACX,KAAO,EAAA;AACT,SAAA;AACF;AACF;AACF;AAEA,EAAI,IAAA,eAAA,CAAgBA,KAAI,CAAG,EAAA;AACzB,IAAA,MAAM,gBAAgBA,KAAK,CAAA,IAAA;AAC3B,IAAI,IAAA,aAAA,CAAc,aAAa,CAAG,EAAA;AAChC,MAAA,MAAM,cAAiB,GAAA,WAAA,CAAY,aAAc,CAAA,aAAa,CAAC,CAAA;AAC/D,MAAM,MAAA,QAAA,GAAW,eAAgBA,CAAAA,KAAAA,EAAM,KAAK,CAAA;AAC5C,MAAM+L,MAAAA,gBAAAA,GAAkB/L,KAAK,CAAA,QAAA,IAAY,EAAC;AAE1C,MAAA,MAAM,0BAA0B,cAAe,CAAA,GAAA;AAAI,QAAA,CAAC,SAClD,KAAA,+BAAA;AACE,UAAA,SAAA;AACA,UAAA,QAAA;AACA+L,UAAAA,gBAAAA;AACA,UAAA;AACF;AACF,OAAA;AAEA,MAAA,OAAO,wBAAwB,IAAK,EAAA;AACtC;AACF;AAEA,EAAI,IAAA,YAAA,CAAa/L,KAAI,CAAG,EAAA;AACtB,IAAA,MAAM,OAAUA,GAAAA,KAAAA;AAChB,IAAQ,OAAA,CAAA,QAAA,GAAW,QAAQ,QAAS,CAAA,OAAA;AAAQ,MAAA,CAAC,KAC3C,KAAA,+BAAA;AACE,QAAA,KAAA;AACA,QAAA,KAAA;AACA,QAAA,eAAA;AACA,QAAA;AACF;AACF,KAAA;AACF;AAEA,EAAOA,OAAAA,KAAAA;AACT;AAEA,SAAS,2BAA2B,KAAqC,EAAA;AACvE,EAAA,MAAM,kBAAiC,EAAC;AAExC,EAAM,KAAA,CAAA,OAAA,CAAQ,CAACA,KAAAA,EAAMuB,MAAU,KAAA;AAC7B,IAAA,IAAIvB,MAAK,IAAS,KAAA,UAAA,CAAW,aAAaA,KAAK,CAAA,IAAA,KAAS,WAAW,IAAM,EAAA;AACvE,MAAgB,eAAA,CAAA,IAAA,CAAK,GAAIA,KAAAA,CAAgB,QAAQ,CAAA;KAC5C,MAAA;AACL,MAAA,eAAA,CAAgB,KAAKA,KAAI,CAAA;AAC3B;AAEA,IAAIuB,IAAAA,MAAAA,KAAU,KAAM,CAAA,MAAA,GAAS,CAAG,EAAA;AAC9B,MAAA,eAAA,CAAgB,KAAK,EAAE,IAAA,EAAM,WAAW,IAAM,EAAA,KAAA,EAAO,MAAM,CAAA;AAC7D;GACD,CAAA;AAED,EAAI,IAAA,eAAA,CAAgB,SAAS,CAAG,EAAA;AAC9B,IAAO,OAAA;AACL,MAAA;AACE,QAAA,IAAA,EAAM,UAAW,CAAA,SAAA;QACjB,QAAU,EAAA;AACZ;AACF,KAAA;AACF;AAEA,EAAA,OAAO,EAAC;AACV;AC/UO,IAAe,YAAf,MAAsD;AAM7D,CAAA;ACzBO,IAAM,IAAA,GAAO,CAAC,SAAS,CAAA;AAOvB,IAAM,aAAA,GAAN,cAA4B,SAAU,CAAA;EAC3C,MAAM,SAAA,CACJ,KACA,EAAA,QAAA,EACA,OACwB,EAAA;AACxB,IAAM,MAAA;AACJ,MAAA,KAAA;AACA,MAAA,qBAAA;MACA,WAAAyK,EAAAA;KACE,GAAA,OAAA;AAEJ,IAAA,MAAM,EAAE,eAAAC,EAAAA,gBAAAA,EAAiB,iBAAAC,gBAAiB,EAAA,UAAA,EAAAC,aAAeH,GAAAA,YAAAA;AAEzD,IAAA,SAAS,gBAAgBI,mBAAuC,EAAA;AAC9D,MAAA,OAAOA,mBAAmB,CAAA,KAAA;AAAM,QAAA,CAAC,mBAC/B,cAAe,CAAA,KAAA;AACb,UAAA,CAAC,MACC,CAAE,CAAA,IAAA,KAASD,YAAW,IAAQ,IAAA,CAAA,CAAE,SAASA,WAAW,CAAA;AACxD;AACF,OAAA;AACF;AAEA,IAAA,SAAS,iBAAiBC,mBAAsC,EAAA;AAC9D,MAAA,OAAOA,mBAAmB,CAAA,OAAA;AAAQ,QAAA,CAAC,cACjC,KAAA,cAAA,CAAe,OAAQ,CAAA,CAAC,CAAY,KAAA;AAClC,UAAI,IAAA,CAAA,CAAE,IAASD,KAAAA,WAAAA,CAAW,IAAM,EAAA;AAC9B,YAAA,OAAQ,CAAa,CAAA,QAAA;WACZ,MAAA,IAAA,CAAA,CAAE,IAASA,KAAAA,WAAAA,CAAW,SAAW,EAAA;AAC1C,YAAO,OAAA,CAAA;WACF,MAAA;AACL,YAAA,OAAO,EAAC;AACV;SACD;AACH,OAAA;AACF;AAGA,IAAI,IAAA,QAAA,CAAS,WAAW,CAAG,EAAA;AACzB,MAAM,MAAA,IAAI,MAAM,CAA6C,2CAAA,CAAA,CAAA;AAC/D;AACA,IAAM,MAAA,SAAA,GAAY,SAAS,CAAC,CAAA;AAC5B,IAAI,IAAA,CAACF,gBAAgB,CAAA,SAAS,CAAG,EAAA;AAC/B,MAAM,MAAA,IAAI,MAAM,0CAA0C,CAAA;AAC5D;AACA,IAAA,MAAM,EAAE,IAAA,EAAM,aAAc,EAAA,GAAIC,iBAAgB,SAAS,CAAA;AACzD,IAAM,MAAA,GAAA,GAAM,MAAM,KAAK,CAAA;AACvB,IAAA,IAAI,CAAC,KAAA,CAAM,OAAQ,CAAA,GAAG,CAAG,EAAA;AACvB,MAAM,MAAA,IAAI,MAAM,CAAgD,8CAAA,CAAA,CAAA;AAClE;AAEA,IAAM,MAAA,aAAA,GAAgB,cAAc,CAAC,CAAA;AACrC,IAAM,MAAA,cAAA,GAAiB,cAAc,CAAC,CAAA;AACtC,IAAM,MAAA,kBAAA,GAAqB,MAAM,OAAQ,CAAA,GAAA;MACvC,GAAI,CAAA,GAAA,CAAI,OAAO,IAAA,EAAW3K,MAAkB,KAAA;AAC1C,QAAM,MAAA,SAAA,GAAY,MAAM,WAAY,CAAA;AAClC,UAAA,GAAI,aAAiB,IAAA,EAAE,CAAC,aAAa,GAAG,IAAK,EAAA;AAC7C,UAAA,GAAI,cAAkB,IAAA,EAAE,CAAC,cAAc,GAAGA,MAAM;SACjD,CAAA;AACD,QAAM,MAAA,eAAA,GAAkB,sBAAsB,SAAS,CAAA;AACvD,QAAM,MAAA,iBAAA,GAAoB,MAAM,OAAQ,CAAA,GAAA;UACtC,IAAK,CAAA,GAAA,CAAI,OAAO,KAAU,KAAA;AACxB,YAAA,MAAM,MAAS,GAAA,MAAM,eAAgB,CAAA,aAAA,CAAc,KAAK,CAAA;AACxD,YAAA,OAAO,MAAM,OAAQ,CAAA,MAAM,CAAI,GAAA,MAAA,GAAS,CAAC,MAAM,CAAA;WAChD;AACH,SAAA;AACA,QAAA,OAAO,kBAAkB,IAAK,EAAA;OAC/B;AACH,KAAA;AACA,IAAM,MAAA,WAAA,GAAc,mBAAmB,IAAK,EAAA;AAC5C,IAAI,IAAA,eAAA,CAAgB,kBAAkB,CAAG,EAAA;AACvC,MAAO,OAAA;AACL,QAAA;AACE,UAAA,IAAA,EAAM4K,WAAW,CAAA,IAAA;UACjB,OAAS,EAAA,KAAA;UACT,MAAQ,EAAA,KAAA;AACR,UAAA,QAAA,EAAU,iBAAiB,kBAAkB;AAC/C;AACF,OAAA;KACK,MAAA;AACL,MAAO,OAAA,WAAA;AACT;AACF;AACF,CAAA;AC5EO,IAAME,KAAO,GAAA,CAAC,IAAM,EAAA,QAAA,EAAU,MAAM,CAAA;AAEpC,IAAM,iBAAA,GAAN,cAAgC,SAAU,CAAA;EAC/C,MAAM,SAAA,CACJ,KACA,EAAA,QAAA,EACA,OACwB,EAAA;AACxB,IAAA,MAAM,EAAE,KAAA,EAAO,qBAAuB,EAAA,OAAA,EAAY,GAAA,OAAA;AAElD,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAM,MAAA,IAAI,MAAM,gDAAgD,CAAA;AAClE;AAEA,IAAI,IAAA,YAAA,GAAe,KAAM,CAAA,QAAA,CAAS,cAAc,CAAA;AAChD,IAAA,IAAI,iBAAiB,KAAW,CAAA,EAAA;AAC9B,MAAM,KAAA,CAAA,QAAA,CAAS,gBAAgB,KAAK,CAAA;AACpC,MAAe,YAAA,GAAA,KAAA;AACjB;AAEA,IAAA,IAAI,YAAc,EAAA;AAChB,MAAA,OAAO,EAAC;AACV;AAEA,IAAA,IAAI,YAAe,GAAA,KAAA;AAEnB,IAAI,IAAA,OAAA,KAAY,IAAQ,IAAA,OAAA,KAAY,QAAU,EAAA;AAC5C,MAAM,MAAA,SAAA,GAAY,MAAM,WAAW,CAAA;AACnC,MAAI,IAAA,OAAO,cAAc,SAAW,EAAA;AAClC,QAAA,MAAM,IAAI,KAAA;AACR,UAAA,CAAA,0BAAA,EAA6B,OAAO,CAAA,oBAAA;AACtC,SAAA;AACF;AACA,MAAA,IAAI,SAAW,EAAA;AACb,QAAe,YAAA,GAAA,IAAA;AACjB;AACF,KAAA,MAAA,IAAW,YAAY,MAAQ,EAAA;AAC7B,MAAe,YAAA,GAAA,IAAA;KACV,MAAA;AACL,MAAA,MAAM,IAAI,KAAA,CAAM,CAA6B,0BAAA,EAAA,OAAO,CAAE,CAAA,CAAA;AACxD;AAEA,IAAA,IAAI,YAAc,EAAA;AAChB,MAAM,KAAA,CAAA,QAAA,CAAS,gBAAgB,IAAI,CAAA;AACnC,MAAM,MAAA,UAAA,GAAa,MAAM,WAAY,EAAA;AACrC,MAAM,MAAA,WAAA,GAAc,sBAAsB,UAAU,CAAA;AAEpD,MAAA,MAAM,UAAkB,EAAC;AACzB,MAAA,KAAA,MAAW,SAAS,QAAU,EAAA;AAC5B,QAAA,MAAM,WAAc,GAAA,MAAM,WAAY,CAAA,aAAA,CAAc,KAAK,CAAA;AACzD,QAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,WAAW,CAAG,EAAA;AAC9B,UAAQ,OAAA,CAAA,IAAA,CAAK,GAAG,WAAW,CAAA;AAC7B,SAAA,MAAA,IAAW,WAAa,EAAA;AACtB,UAAA,OAAA,CAAQ,KAAK,WAAW,CAAA;AAC1B;AACF;AAEA,MAAO,OAAA,OAAA;AACT;AAEA,IAAA,OAAO,EAAC;AACV;AACF,CAAA;ACxEO,IAAMA,KAAAA,GAAO,CAAC,KAAK,CAAA;AAEnB,IAAM,SAAA,GAAN,cAAwB,SAAU,CAAA;EACvC,MAAM,SAAA,CACJ,MACA,EAAA,QAAA,EACA,OACwB,EAAA;AACxB,IAAM,MAAA,EAAE,WAAAL,EAAAA,YAAAA,EAAgB,GAAA,OAAA;AACxB,IAAM,MAAA,UAAA,GAAaA,aAAY,UAAW,CAAA;MACtC,IAAM,EAAA,MAAA;AACN,MAAA;KACK,CAAA;AACT,IAAO,OAAA;AACL,MAAA;QACE,IAAM,EAAA,MAAA;QACN,KAAO,EAAA;AACT;AACF,KAAA;AACF;AACF,CAAA;ACZO,IAAM,UAAA,GAAoC,CAAC,KAAU,KAAA;AAC1D,EAAI,IAAA,OAAO,KAAU,KAAA,QAAA,EAAiB,OAAA,KAAA;AACtC,EAAO,OAAA,KAAA,CAAM,OAAO,CAAC,CAAA,CAAE,aAAgB,GAAA,KAAA,CAAM,MAAM,CAAC,CAAA;AACtD,CAAA;AAEO,IAAM,KAAA,GAA0B,CAAC,KAAU,KAAA;AAChD,EAAI,IAAA,OAAO,KAAU,KAAA,QAAA,EAAiB,OAAA,KAAA;AACtC,EAAA,OAAO,MAAM,WAAY,EAAA;AAC3B,CAAA;AAEO,IAAM,KAAA,GAAyB,CAAC,KAAU,KAAA;AAC/C,EAAI,IAAA,OAAO,KAAU,KAAA,QAAA,EAAiB,OAAA,KAAA;AACtC,EAAA,OAAO,MAAM,WAAY,EAAA;AAC3B,CAAA;AAEO,IAAM,QAAA,GAAgC,CAAC,KAAA,EAAO,MAAW,KAAA;AAC9D,EAAI,IAAA,OAAO,KAAU,KAAA,QAAA,EAAiB,OAAA,KAAA;AACtC,EAAI,IAAA,KAAA,CAAM,MAAU,IAAA,MAAA,EAAe,OAAA,KAAA;AACnC,EAAA,OAAO,KAAM,CAAA,SAAA,CAAU,CAAG,EAAA,MAAM,CAAI,GAAA,KAAA;AACtC,CAAA;AAEO,IAAM,GAAA,GAAsB,CAAC,KAAU,KAAA;AAC5C,EAAO,OAAA,IAAA,CAAK,IAAI,KAAK,CAAA;AACvB,CAAA;AAEO,IAAMM,KAAwB,GAAA,CAAC,KAAO,EAAA,SAAA,GAAY,IAAS,KAAA;AAChE,EAAA,IAAI,CAAC,KAAA,CAAM,OAAQ,CAAA,KAAK,GAAU,OAAA,KAAA;AAClC,EAAO,OAAA,KAAA,CAAM,KAAK,SAAS,CAAA;AAC7B,CAAA;AAEO,IAAM,KAA0B,GAAA,CAAC,KAAO,EAAA,QAAA,GAAW,CAAM,KAAA;AAC9D,EAAO,OAAA,MAAA,CAAO,IAAK,CAAA,KAAA,CAAM,MAAO,CAAA,KAAA,GAAQ,MAAM,QAAQ,CAAC,CAAI,GAAA,IAAA,GAAO,QAAQ,CAAA;AAC5E,CAAA;AAEO,IAAM,OAA8B,GAAA,CAAC,KAAOC,EAAAA,OAAAA,EAAQC,QAAY,KAAA;AACrE,EAAI,IAAA,OAAO,KAAU,KAAA,QAAA,EAAiB,OAAA,KAAA;AACtC,EAAA,OAAO,KAAM,CAAA,KAAA,CAAMD,OAAM,CAAA,CAAE,KAAKC,QAAO,CAAA;AACzC,CAAA;AAEO,IAAM,SAAA,GAAiC,CAAC,KAAU,KAAA;AACvD,EAAI,IAAA,OAAO,KAAU,KAAA,QAAA,EAAiB,OAAA,KAAA;AACtC,EAAA,OAAO,mBAAmB,KAAK,CAAA;AACjC,CAAA;AAEO,IAAM,IAAA,GAAwB,CAAC,KAAU,KAAA;AAC9C,EAAO,OAAA,IAAA,CAAK,UAAU,KAAK,CAAA;AAC7B,CAAA;ACzCA,iBAAA,CAAkB,QAAS,CAAA,IAAI,aAAc,EAAA,EAAG,IAAW,CAAA;AAC3D,iBAAA,CAAkB,QAAS,CAAA,IAAI,iBAAkB,EAAA,EAAGH,KAAe,CAAA;AACnE,iBAAA,CAAkB,QAAS,CAAA,IAAI,SAAU,EAAA,EAAGA,KAAO,CAAA;AAEnD,cAAe,CAAA,QAAA,CAAS,cAAc,UAAU,CAAA;AAChD,cAAe,CAAA,QAAA,CAAS,SAAS,KAAK,CAAA;AACtC,cAAe,CAAA,QAAA,CAAS,SAAS,KAAK,CAAA;AACtC,cAAe,CAAA,QAAA,CAAS,YAAY,QAAQ,CAAA;AAC5C,cAAe,CAAA,QAAA,CAAS,OAAO,GAAG,CAAA;AAClC,cAAe,CAAA,QAAA,CAAS,QAAQC,KAAI,CAAA;AACpC,cAAe,CAAA,QAAA,CAAS,SAAS,KAAK,CAAA;AACtC,cAAe,CAAA,QAAA,CAAS,WAAW,OAAO,CAAA;AAC1C,cAAe,CAAA,QAAA,CAAS,aAAa,SAAS,CAAA;AAC9C,cAAe,CAAA,QAAA,CAAS,QAAQ,IAAI,CAAA;ACfpC,IAAM,QAAA,GAAW,OAAOjG,KAAiB,KAAA;AAEvC,EAAI,IAAA,OAAO,SAAS,WAAa,EAAA;AAE/B,IAAO,OAAA,MAAM,IAAK,CAAA,YAAA,CAAaA,KAAI,CAAA;GAC1B,MAAA,IAAA,OAAOoG,eAAY,WAAa,EAAA;AACzC,IAAA,MAAM,EAAE,QAAAC,EAAAA,SAAAA,EAAa,GAAA,MAAM,OAAO,aAAa,CAAA;AAC/C,IAAO,OAAA,MAAMA,SAASrG,CAAAA,KAAAA,EAAM,MAAM,CAAA;GAC7B,MAAA;AACL,IAAM,MAAA,IAAI,MAAM,yBAAyB,CAAA;AAC3C;AACF,CAAA;AAEA,eAAe,KAAMA,KAAc,EAAA;AACjC,EAAM,MAAA,IAAA,GAAO,MAAM,QAAA,CAASA,KAAI,CAAA;AAChC,EAAA,MAAM,eAAkB,GAAA,OAAOA,MAAiB,KAAA,QAAA,CAASA,MAAI,CAAA;AAC7D,EAAA,OAAO,MAAO,CAAA,IAAA,EAAM,UAAWA,CAAAA,KAAI,GAAG,eAAe,CAAA;AACvD;;;ACjCO,IAAM,sBAAN,MAA0B;AAAA,EAM/B,OAAc,QACZ,CAAA,WAAA,EACA,GACA,EAAA;AACA,IAAA,KAAA,MAAW,MAAM,GAAK,EAAA;AACpB,MAAK,IAAA,CAAA,OAAA,CAAQ,GAAI,CAAA,EAAA,EAAI,WAAW,CAAA;AAAA;AAClC;AACF,EAEA,OAAc,YACZ,aACA,EAAA;AACA,IAAA,KAAA,MAAW,SAAS,aAAe,EAAA;AACjC,MAAA,IAAA,CAAK,QAAS,CAAA,KAAA,CAAM,QAAU,EAAA,KAAA,CAAM,MAAM,CAAA;AAAA;AAC5C;AACF,EAEA,OAAc,UAAU,EAAY,EAAA;AAClC,IAAO,OAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAI,EAAE,CAAA;AAAA;AAC5B,EAEA,OAAc,aAAa,EAAY,EAAA;AACrC,IAAK,IAAA,CAAA,OAAA,CAAQ,OAAO,EAAE,CAAA;AAAA;AACxB,EAEA,OAAc,aAAgB,GAAA;AAC5B,IAAA,IAAA,CAAK,QAAQ,KAAM,EAAA;AAAA;AAEvB;AAlCa,mBACG,CAAA,OAAA,uBAAyC,GAGrD,EAAA;;;ACHG,IAAM,iBAAA,GAAN,cAAgC,SAAU,CAAA;AAAA,EAC/C,MAAM,SAAA,CACJ,MACA,EAAA,QAAA,EACA,aACwB,EAAA;AACxB,IAAA,MAAM,EAAE,KAAO,EAAA,OAAA,EAAS,qBAAuB,EAAA,WAAA,EAAA2F,cAC7C,GAAA,aAAA;AAEF,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAM,MAAA,IAAI,MAAM,+CAA+C,CAAA;AAAA;AAGjE,IAAA,MAAM,OAAU,GAAA,IAAI,OAAQ,CAAA,OAAO,SAAS,MAAW,KAAA;AACrD,MAAI,IAAA;AACF,QAAM,MAAA,UAAA,GAAa,MAAM,WAAY,EAAA;AACrC,QAAM,MAAA,WAAA,GAAc,sBAAsB,UAAU,CAAA;AACpD,QAAM,MAAA,iBAAA,GAAoB,MAAM,OAAQ,CAAA,GAAA;AAAA,UACtC,QAAA,CAAS,GAAI,CAAA,OAAO,KAAU,KAAA;AAC5B,YAAA,MAAM,MAAS,GAAA,MAAM,WAAY,CAAA,aAAA,CAAc,KAAK,CAAA;AACpD,YAAA,OAAO,MAAM,OAAQ,CAAA,MAAM,CAAI,GAAA,MAAA,GAAS,CAAC,MAAM,CAAA;AAAA,WAChD;AAAA,SACH;AACA,QAAM,MAAA,iBAAA,GAAoB,kBAAkB,IAAK,EAAA;AACjD,QAAM,MAAA,aAAA,GAAgBA,aAAY,UAAW,CAAA;AAAA,UAC3C,IAAM,EAAA,MAAA;AAAA;AAAA,UAEN,QAAU,EAAA;AAAA,SACX,CAAA;AACD,QAAA,OAAA,CAAQ,EAAE,OAAS,EAAA,aAAA,CAAc,MAAQ,EAAA,IAAA,EAAM,SAAS,CAAA;AAAA,eACjD,KAAO,EAAA;AACd,QAAA,MAAA,CAAO,KAAK,CAAA;AAAA;AACd,KACD,CAAA;AAED,IAAM,MAAA,QAAA,GAAW,KAAM,CAAA,SAAA,CAAU,+BAA+B,CAAA;AAChE,IAAA,IAAI,CAAC,QAAU,EAAA;AACb,MAAA,KAAA,CAAM,SAAU,CAAA,+BAAA,EAAiC,CAAC,OAAO,CAAC,CAAA;AAAA,KACrD,MAAA;AACL,MAAA,QAAA,CAAS,KAAK,OAAO,CAAA;AAAA;AAGvB,IAAA,OAAO,EAAC;AAAA;AAEZ,CAAA;AC7CO,IAAM,iBAAA,GAAoBW,MAAE,MAAO,CAAA;AAAA,EACxC,MAAMA,KAAE,CAAA,IAAA,CAAK,CAAC,QAAU,EAAA,MAAA,EAAQ,WAAW,CAAC,CAAA;AAAA,EAC5C,OAAA,EAASA,MAAE,MAAO;AACpB,CAAC,CAAA;AAED,IAAM,2BAAA,GAA8BA,MAAE,MAAO,CAAA;AAAA,EAC3C,UAAY,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,EAChC,WAAa,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,EACjC,aAAe,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,EACnC,KAAO,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,EAC3B,KAAO,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,EAC3B,gBAAkB,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,EACtC,iBAAmB,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,EACvC,gBAAgBA,KAAE,CAAA,KAAA,CAAMA,MAAE,MAAO,EAAC,EAAE,QAAS,EAAA;AAAA,EAC7C,IAAM,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,EAC1B,WAAa,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,EACjC,SAASA,KAAE,CAAA,MAAA,CAAOA,MAAE,MAAO,EAAC,EAAE,QAAS;AACzC,CAAC,CAAA;AAE0C,4BAA4B,MAAO,CAAA;AAAA,EAC5E,OAAOA,KACJ,CAAA,MAAA;AAAA,IACCA,MAAE,MAAO,CAAA;AAAA,MACP,WAAA,EAAaA,MAAE,MAAO,EAAA;AAAA,MACtB,UAAA,EAAYA,MAAE,OAAQ;AAAA,KACvB;AAAA,IAEF,QAAS;AACd,CAAC;AAE4C,4BAA4B,MAAO,CAAA;AAAA,EAC9E,MAAA,EAAQA,MAAE,OAAQ;AACpB,CAAC;AAEM,IAAM,uBAAA,GAA0B,4BAA4B,MAAO,CAAA;AAAA,EACxE,MAAQ,EAAAA,KAAA,CAAE,OAAQ,EAAA,CAAE,QAAS,EAAA;AAAA,EAC7B,OAAOA,KACJ,CAAA,MAAA;AAAA,IACCA,MAAE,MAAO,CAAA;AAAA,MACP,WAAA,EAAaA,MAAE,MAAO,EAAA;AAAA,MACtB,UAAA,EAAYA,MAAE,OAAQ;AAAA,KACvB;AAAA,IAEF,QAAS;AACd,CAAC,CAAA,CAAE,OAAO,CAACvJ,KAAAA,KAAU,YAAYA,KAAO,GAAA,EAAE,OAAWA,IAAAA,KAAAA,CAAAA,GAAQ,IAAO,EAAA;AAAA,EAClE,OAAS,EAAA;AACX,CAAC,CAAA;AAED,IAAM,cAAA,GAAiBuJ,MAAE,MAAO,CAAA;AAAA,EAC9B,KAAA,EAAOA,MAAE,MAAO,CAAA;AAAA,IACd,IAAA,EAAMA,MAAE,MAAO,EAAA;AAAA,IACf,QAAU,EAAA;AAAA,GACX;AACH,CAAC,CAAA;AAEM,IAAM,eAAA,GAAkBA,MAAE,MAAO,CAAA;AAAA,EACtC,IAAA,EAAMA,MAAE,MAAO,EAAA;AAAA,EACf,QAAA,EAAUA,KAAE,CAAA,KAAA,CAAM,iBAAiB,CAAA;AAAA,EACnC,QAAU,EAAA;AACZ,CAAC,CAAA;;;AC3DM,IAAM,qBAAN,MAAyB;AAAA,EAG9B,OAAc,QAAS,CAAA,YAAA,EAAoB/Q,KAAc,EAAA;AACvD,IAAA,IAAI,IAAK,CAAA,KAAA,CAAM,GAAIA,CAAAA,KAAI,CAAG,EAAA;AACxB,MAAA,MAAM,IAAI,KAAA,CAAM,CAAuBA,oBAAAA,EAAAA,KAAI,CAA0B,wBAAA,CAAA,CAAA;AAAA;AAEvE,IAAK,IAAA,CAAA,KAAA,CAAM,GAAIA,CAAAA,KAAAA,EAAM,YAAY,CAAA;AAAA;AACnC,EAEA,OAAc,YAAY,WAAqD,EAAA;AAC7E,IAAA,KAAA,MAAW,SAAS,WAAa,EAAA;AAC/B,MAAA,IAAA,CAAK,QAAS,CAAA,KAAA,CAAM,YAAc,EAAA,KAAA,CAAM,IAAI,CAAA;AAAA;AAC9C;AACF,EAEA,OAAc,QAAQA,KAAgC,EAAA;AACpD,IAAO,OAAA,IAAA,CAAK,KAAM,CAAA,GAAA,CAAIA,KAAI,CAAA;AAAA;AAC5B,EAEA,OAAc,WAAWA,KAAc,EAAA;AACrC,IAAA,IAAI,CAAC,IAAA,CAAK,KAAM,CAAA,MAAA,CAAOA,KAAI,CAAG,EAAA;AAC5B,MAAA,MAAM,IAAI,KAAA,CAAM,CAAuBA,oBAAAA,EAAAA,KAAI,CAAmB,iBAAA,CAAA,CAAA;AAAA;AAChE;AACF,EAEA,OAAc,aAAgB,GAAA;AAC5B,IAAA,IAAA,CAAK,MAAM,KAAM,EAAA;AAAA;AAErB;AA7Ba,kBACG,CAAA,KAAA,uBAA+B,GAAkB,EAAA;;;ACUjE,IAAM,cAAiB,GAAA,MAAA;AAiBhB,SAAS,cAAc2L,QAA6B,EAAA;AACzD,EAAS,SAAA,iBAAA,CAAkB,IAAkByB,EAAAA,OAAAA,GAAS,CAAG,EAAA;AACvD,IAAA,IAAI,WAAc,GAAA,EAAA;AAClB,IAAM,MAAA,WAAA,GAAc,IAAK,CAAA,MAAA,CAAOA,OAAM,CAAA;AAEtC,IAAA,KAAA,MAAW,OAAO,IAAM,EAAA;AACtB,MAAI,IAAA,IAAA,CAAK,cAAe,CAAA,GAAG,CAAG,EAAA;AAC5B,QAAM/H,MAAAA,MAAAA,GAAQ,KAAK,GAAG,CAAA;AAEtB,QAAA,IAAI,OAAOA,MAAU,KAAA,QAAA,IAAY,CAAC,KAAM,CAAA,OAAA,CAAQA,MAAK,CAAG,EAAA;AACtD,UAAe,WAAA,IAAA,CAAA,EAAG,WAAW,CAAA,EAAG,GAAG,CAAA;AAAA,CAAA;AACnC,UAAe,WAAA,IAAA,iBAAA,CAAkBA,MAAO+H,EAAAA,OAAAA,GAAS,CAAC,CAAA;AAAA,SACzC,MAAA,IAAA,KAAA,CAAM,OAAQ/H,CAAAA,MAAK,CAAG,EAAA;AAC/B,UAAe,WAAA,IAAA,CAAA,EAAG,WAAW,CAAA,EAAG,GAAG,CAAA;AAAA,CAAA;AACnC,UAAAA,MAAAA,CAAM,OAAQ,CAAA,CAAC,IAAS,KAAA;AACtB,YAAI,IAAA,OAAO,SAAS,QAAU,EAAA;AAC5B,cAAA,WAAA,IAAe,GAAG,WAAW,CAAA;AAAA,CAAA;AAC7B,cAAe,WAAA,IAAA,iBAAA,CAAkB,IAAM+H,EAAAA,OAAAA,GAAS,CAAC,CAAA;AAAA,aAC5C,MAAA;AACL,cAAe,WAAA,IAAA,CAAA,EAAG,WAAW,CAAA,EAAA,EAAK,IAAI;AAAA,CAAA;AAAA;AACxC,WACD,CAAA;AAAA,SACI,MAAA;AACL,UAAA,WAAA,IAAe,CAAG,EAAA,WAAW,CAAG,EAAA,GAAG,KAAK/H,MAAK;AAAA,CAAA;AAAA;AAC/C;AACF;AAGF,IAAO,OAAA,WAAA;AAAA;AAGT,EAAO,OAAA,CAAA;AAAA,EAAQ,iBAAA,CAAkBsG,QAAO,CAAC,CAAA;AAAA,CAAA;AAC3C;AAEO,SAAS,OAAO,GAAa,EAAA;AAClC,EAAI,IAAA,OAAA,CAAQ,GAAI,CAAA,GAAG,CAAG,EAAA;AACpB,IAAO,OAAA,OAAA,CAAQ,IAAI,GAAG,CAAA;AAAA;AAGxB,EAAA,MAAM,IAAI,KAAA,CAAM,CAAkB,eAAA,EAAA,GAAG,CAAE,CAAA,CAAA;AACzC;AAEO,SAAS,kBAAkB,KAAuC,EAAA;AACvE,EAAI,IAAA,CAAC,OAAc,OAAA,KAAA,CAAA;AACnB,EAAO,OAAA,MAAA,CAAO,OAAQ,CAAA,KAAK,CAAE,CAAA,MAAA,CAAO,CAAC,GAAU,EAAA,CAAC,QAAU,EAAA,QAAQ,CAAM,KAAA;AACtE,IAAM,MAAA,MAAA,GAAS,kBAAmB,CAAA,OAAA,CAAQ,QAAQ,CAAA;AAClD,IAAA,GAAA,CAAI,QAAQ,CAAI,GAAA;AAAA,MACd,aAAa,QAAS,CAAA,WAAA;AAAA,MACtB,UAAA,EAAYqF,aAAW,CAAA,QAAA,CAAS,UAAiB,CAAA;AAAA,MACjD,OAAS,EAAA;AAAA,KACX;AACA,IAAO,OAAA,GAAA;AAAA,GACT,EAAG,EAAE,CAAA;AACP;AAEO,SAAS,eAAA,CACd,MACA,EAAA,KAAA,EACAC,SACmB,EAAA;AACnB,EAAO,OAAA;AAAA,IACL,QAAUA,EAAAA,SAAAA;AAAA,IACV,KAAA;AAAA,IACA,WAAW,MAAO,CAAA,UAAA;AAAA,IAClB,aAAa,MAAO,CAAA,WAAA;AAAA,IACpB,MAAM,MAAO,CAAA,KAAA;AAAA,IACb,UAAU,MAAO,CAAA,aAAA;AAAA,IACjB,MAAM,MAAO,CAAA,KAAA;AAAA,IACb,iBAAiB,MAAO,CAAA,iBAAA;AAAA,IACxB,eAAe,MAAO,CAAA,cAAA;AAAA,IACtB,MAAM,MAAO,CAAA,IAAA;AAAA,IACb,YAAY,MAAO,CAAA,WAAA;AAAA,IACnB,SAAS,MAAO,CAAA;AAAA,GAClB;AACF;AAEA,eAAsB,YACpB,CAAA,MAAA,EACA,KACAA,EAAAA,SAAAA,EACAnR,QAC0B,EAAA;AAC1B,EAAA,MAAM,UAAa,GAAA,eAAA,CAAgB,MAAQ,EAAA,KAAA,EAAOmR,SAAQ,CAAA;AAC1D,EAAW,UAAA,CAAA,sBAAA,GAAyBnR,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,QAAS,CAAA,SAAA;AAC7C,EAAM,MAAA,QAAA,GAAW,uBAAwB,CAAA,KAAA,CAAM,MAAM,CAAA;AACrD,EAAA,IAAI,YAAY,QAAU,EAAA;AACxB,IAAM,MAAA,MAAA,GAAS,MAAMoR,iBAAe,CAAA;AAAA,MAClC,GAAG,UAAA;AAAA,MACH,MAAA,EAAQF,aAAW,CAAA,QAAA,CAAS,MAAa;AAAA,KAC1C,CAAA;AACD,IAAO,OAAA;AAAA,MACL,QAAQ,MAAO,CAAA,MAAA;AAAA,MACf,OAAO,EAAC;AAAA,MACR,OAAS,EAAA,cAAA;AAAA,MACT,OAAO,MAAO,CAAA,KAAA;AAAA,MACd,cAAc,MAAO,CAAA;AAAA,KACvB;AAAA,GACK,MAAA;AACL,IAAM,MAAA,KAAA,GAAQ,iBAAkB,CAAA,QAAA,CAAS,KAAK,CAAA;AAC9C,IAAM,MAAA,MAAA,GAAS,MAAMG,eAAa,CAAA;AAAA,MAChC,GAAG,UAAA;AAAA,MACH;AAAA,KACD,CAAA;AACD,IAAO,OAAA;AAAA,MACL,QAAQ,MAAO,CAAA,IAAA;AAAA,MACf,OAAS,EAAA,cAAA;AAAA,MACT,KAAO,EAAA,MAAA,CAAO,SAAU,CAAA,GAAA,CAAI,CAAC,IAAU,MAAA;AAAA,QACrC,MAAM,IAAK,CAAA,QAAA;AAAA,QACX,OAAO,IAAK,CAAA;AAAA,OACZ,CAAA,CAAA;AAAA,MACF,OAAO,MAAO,CAAA,KAAA;AAAA,MACd,eAAe,MAAO,CAAA,WAAA;AAAA,MACtB,OAAO,MAAO,CAAA,KAAA;AAAA,MACd,cAAc,MAAO,CAAA;AAAA,KACvB;AAAA;AAEJ;AAEA,eAAsB,eACpB,CAAA,MAAA,EACA,KACAF,EAAAA,SAAAA,EACAnR,QACgC,EAAA;AAChC,EAAA,MAAM,UAAa,GAAA,eAAA,CAAgB,MAAQ,EAAA,KAAA,EAAOmR,SAAQ,CAAA;AAC1D,EAAW,UAAA,CAAA,sBAAA,GAAyBnR,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,QAAS,CAAA,SAAA;AAC7C,EAAM,MAAA,QAAA,GAAW,uBAAwB,CAAA,KAAA,CAAM,MAAM,CAAA;AACrD,EAAA,IAAI,YAAY,QAAU,EAAA;AACxB,IAAA,OAAO,IAAI,OAAA,CAAQ,OAAO,OAAA,EAAS,MAAW,KAAA;AAC5C,MAAI,IAAA;AACF,QAAA,MAAM,EAAE,mBAAA,EAAqB,KAAM,EAAA,GAAIsR,eAAa,CAAA;AAAA,UAClD,GAAG,UAAA;AAAA,UACH,MAAA,EAAQJ,aAAW,CAAA,QAAA,CAAS,MAAa;AAAA,SAC1C,CAAA;AACD,QAAQ,OAAA,CAAA;AAAA,UACN,YAAc,EAAA,mBAAA;AAAA,UACd,OAAS,EAAA,cAAA;AAAA,UACT,KAAA;AAAA,UACA,YAAA,EAAc,OAAQ,CAAA,OAAA,CAAQ,SAAS;AAAA,SACxC,CAAA;AAAA,eACM,KAAO,EAAA;AACd,QAAA,MAAA,CAAO,KAAK,CAAA;AAAA;AACd,KACD,CAAA;AAAA,GACI,MAAA;AACL,IAAA,OAAO,IAAI,OAAA,CAAQ,OAAO,OAAA,EAAS,MAAW,KAAA;AAC5C,MAAI,IAAA;AACF,QAAM,MAAA,EAAE,YAAY,KAAO,EAAA,SAAA,EAAW,aAAa,YAAc,EAAA,KAAA,KAAUK,aAAW,CAAA;AAAA,UACpF,GAAG,UAAA;AAAA,UACH,KAAA,EAAO,iBAAkB,CAAA,QAAA,CAAS,KAAK;AAAA,SACxC,CAAA;AACD,QAAQ,OAAA,CAAA;AAAA,UACN,YAAc,EAAA,UAAA;AAAA,UACd,OAAS,EAAA,cAAA;AAAA,UACT,KAAA;AAAA,UACA,KAAA,EAAO,UAAU,IAAK,CAAA,CAAC,UAAU,KAAM,CAAA,GAAA,CAAI,CAAC,IAAU,MAAA;AAAA,YACpD,MAAM,IAAK,CAAA,QAAA;AAAA,YACX,OAAO,IAAK,CAAA;AAAA,YACZ,CAAC,CAAA;AAAA,UACH,aAAe,EAAA,WAAA;AAAA,UACf,YAAA;AAAA,UACA;AAAA,SACD,CAAA;AAAA,eACM,KAAO,EAAA;AACd,QAAA,MAAA,CAAO,KAAK,CAAA;AAAA;AACd,KACD,CAAA;AAAA;AAEL;;;ACpMA,IAAM,SAAY,GAAA;AAAA,EAChB,aAAA;AAAA,EACA,YAAA;AAAA,EACA,MAAA;AAAA,EACA,KAAA;AAAA,EACA;AACF;ACEA,IAAM,GAAA,GAAM,IAAIC,oBAAI,EAAA;AAYpB,iBAAkB,CAAA,QAAA,CAAS,IAAI,iBAAkB,EAAA,EAAG,CAAC,MAAQ,EAAA,QAAA,EAAU,WAAW,CAAC,CAAA;AAEnF,SAAS,YAAY,eAA4C,EAAA;AAC/D,EAAA,MAAML,YAA0B,EAAC;AACjC,EAAgB,eAAA,CAAA,OAAA,CAAQ,CAAC,KAAA,EAAOtL,MAAU,KAAA;AACxC,IAAM,MAAA,SAAA,GAAY,KAAM,CAAA,IAAA,CAAK,iBAAkB,EAAA;AAC/C,IAAIA,IAAAA,MAAAA,KAAU,CAAK,IAAA,SAAA,KAAc,QAAU,EAAA;AACzC,MAAA,MAAM,IAAI,KAAA,CAAM,CAAsD,mDAAA,EAAA,KAAA,CAAM,OAAO,CAAE,CAAA,CAAA;AAAA;AAEvF,IAAAsL,SAAAA,CAAS,KAAK,EAAE,IAAA,EAAM,WAAW,OAAS,EAAA,KAAA,CAAM,SAAS,CAAA;AAAA,GAC1D,CAAA;AACD,EAAOA,OAAAA,SAAAA;AACT;AAEA,eAAsB,YAAA,CAA4C,KAAU,KAAW,EAAA;AApCvF,EAAA,IAAA,EAAA,EAAA,EAAA;AAqCE,EAAM,MAAA,WAAA,GAAmB,eAAe,GAAG,CAAA;AAC3C,EAAA,MAAM,SAAwB,EAAC;AAC/B,EAAA,MAAM,aAAU,CAAA,GAAA,EAAK,KAAS,IAAA,IAAI,MAAM,CAAA;AACxC,EAAA,MAAM,sBAAyB,GAAA,MAAA,CAAO,+BAA+B,CAAA,IAAK,EAAC;AAC3E,EAAA,MAAMA,YAAW,WAAY,CAAA,MAAM,OAAQ,CAAA,GAAA,CAAI,sBAAsB,CAAC,CAAA;AAEtE,EAAY,WAAA,CAAA,QAAA,CAAS,MAAM,QAAW,GAAA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,WAAA,CAAY,aAAZ,IAAsB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAA,KAAtB,IAA6B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAA,KAAY,EAAC;AAEhF,EAAM,MAAA,SAAA,GAAuB,gBAAgB,KAAM,CAAA;AAAA,IACjD,MAAM,WAAY,CAAA,IAAA;AAAA,IAClB,QAAUA,EAAAA,SAAAA;AAAA,IACV,UAAU,WAAY,CAAA;AAAA,GACvB,CAAA;AACD,EAAO,OAAA,SAAA;AACT;AAEA,eAAsBM,aAAAA,CACpB,GACA,EAAA,KAAA,EACAzR,QACkC,EAAA;AAzDpC,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;AA0DE,EAAA,MAAM,SAAY,GAAA,MAAM,YAAa,CAAA,GAAA,EAAK,KAAK,CAAA;AAC/C,EAAA,MAAM,SAAS,mBAAoB,CAAA,SAAA;AAAA,IACjC,SAAA,CAAU,SAAS,KAAM,CAAA;AAAA,GAC3B;AACA,EAAA,IAAI,CAAC,MAAQ,EAAA;AACX,IAAA,MAAM,IAAI,KAAM,CAAA,CAAA,yBAAA,EAA4B,UAAU,QAAS,CAAA,KAAA,CAAM,IAAI,CAAE,CAAA,CAAA;AAAA;AAG7E,EAAM,MAAA,WAAA,GAAc,eAAe,GAAG,CAAA;AAWtC,EAAA,IAAI,YAAY,YAAc,EAAA;AAC5B,IAAA,MAAM,QAAW,GAAA,GAAA,CAAI,OAAQ,CAAA,WAAA,CAAY,YAAY,CAAA;AACrD,IAAI,IAAA,CAAC,QAAS,CAAA,KAAK,CAAG,EAAA;AACpB,MAAM,MAAA,IAAI,MAAM,CAAkB,eAAA,EAAA,GAAA,CAAI,WAAW,QAAS,CAAA,MAAM,CAAC,CAAE,CAAA,CAAA;AAAA;AACrE;AAGF,EAAA,MAAM,gBAAmB,GAAA;AAAA,IACvB,GAAGA,QAAAA;AAAA,IACH,SAAW,EAAA;AAAA,MACT,GAAGA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,QAAS,CAAA,SAAA;AAAA,MACZ,QAAU,EAAA;AAAA,QACR,IAAG,EAAAA,GAAAA,QAAAA,IAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAAA,CAAS,cAAT,IAAoB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAA;AAAA,QACvB,YAAY,SAAU,CAAA,IAAA;AAAA,QACtB,KAAA,EAAO,IAAK,CAAA,SAAA,CAAU,KAAK;AAAA;AAC7B;AACF,GACF;AAEA,EAAA,MAAM,WAAW,MAAM,MAAA,CAAO,YAAa,CAAA,SAAA,EAAW,WAAW,gBAAgB,CAAA;AAEjF,EAAA,IAAA,CAAI,6BAAY,QAAZ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAsB,UAAtB,IAA6B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAA,KAA7B,mBAAuC,MAAQ,EAAA;AACjD,IAAA,MAAM,WAAW,GAAI,CAAA,OAAA,CAAQ,YAAY,QAAS,CAAA,KAAA,CAAM,SAAS,MAAM,CAAA;AACvE,IAAA,IAAI,CAAC,QAAA,CAAS,QAAS,CAAA,MAAM,CAAG,EAAA;AAC9B,MAAM,MAAA,IAAI,MAAM,CAAmB,gBAAA,EAAA,GAAA,CAAI,WAAW,QAAS,CAAA,MAAM,CAAC,CAAE,CAAA,CAAA;AAAA;AACtE;AAGF,EAAO,OAAA,QAAA;AACT;AAEA,eAAsB0R,gBAAAA,CACpB,GACA,EAAA,KAAA,EACA1R,QACwC,EAAA;AAhH1C,EAAA,IAAA,EAAA;AAiHE,EAAA,MAAM,SAAY,GAAA,MAAM,YAAa,CAAA,GAAA,EAAK,KAAK,CAAA;AAC/C,EAAA,MAAM,SAAS,mBAAoB,CAAA,SAAA;AAAA,IACjC,SAAA,CAAU,SAAS,KAAM,CAAA;AAAA,GAC3B;AACA,EAAA,IAAI,CAAC,MAAQ,EAAA;AACX,IAAA,MAAM,IAAI,KAAM,CAAA,CAAA,yBAAA,EAA4B,UAAU,QAAS,CAAA,KAAA,CAAM,IAAI,CAAE,CAAA,CAAA;AAAA;AAG7E,EAAM,MAAA,WAAA,GAAc,eAAe,GAAG,CAAA;AAWtC,EAAA,IAAI,YAAY,YAAc,EAAA;AAC5B,IAAA,MAAM,QAAW,GAAA,GAAA,CAAI,OAAQ,CAAA,WAAA,CAAY,YAAY,CAAA;AACrD,IAAI,IAAA,CAAC,QAAS,CAAA,KAAK,CAAG,EAAA;AACpB,MAAM,MAAA,IAAI,MAAM,CAAkB,eAAA,EAAA,GAAA,CAAI,WAAW,QAAS,CAAA,MAAM,CAAC,CAAE,CAAA,CAAA;AAAA;AACrE;AAGF,EAAA,MAAM,gBAAmB,GAAA;AAAA,IACvB,GAAGA,QAAAA;AAAA,IACH,SAAW,EAAA;AAAA,MACT,GAAGA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,QAAS,CAAA,SAAA;AAAA,MACZ,QAAU,EAAA;AAAA,QACR,IAAG,EAAAA,GAAAA,QAAAA,IAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAAA,CAAS,cAAT,IAAoB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAA;AAAA,QACvB,YAAY,SAAU,CAAA;AAAA;AACxB;AACF,GACF;AAEA,EAAA,MAAM,WAAW,MAAM,MAAA,CAAO,eAAgB,CAAA,SAAA,EAAW,WAAW,gBAAgB,CAAA;AAIpF,EAAO,OAAA,QAAA;AACT;AAEO,SAAS,SAAA,CACd,gBACA,EAAA,KAAA,EACA,UACA,EAAA;AACA,EAAM,MAAA,MAAA,GAAS,mBAAoB,CAAA,SAAA,CAAU,KAAK,CAAA;AAClD,EAAO,OAAA,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAQ,SAAU,CAAA,gBAAA,EAAkB,UAAY,EAAA,SAAA,CAAA;AACzD;AAEA,eAAsB,WAAY,CAAA,GAAA,EAAU,KAAQ,GAAA,IAAI,MAA4B,EAAA;AAClF,EAAA,MAAM,SAAY,GAAA,MAAM,YAAa,CAAA,GAAA,EAAK,KAAK,CAAA;AAC/C,EAAA,MAAM,SAAS,mBAAoB,CAAA,SAAA;AAAA,IACjC,SAAA,CAAU,SAAS,KAAM,CAAA;AAAA,GAC3B;AACA,EAAA,IAAI,CAAC,MAAQ,EAAA;AACX,IAAA,MAAM,IAAI,KAAM,CAAA,CAAA,yBAAA,EAA4B,UAAU,QAAS,CAAA,KAAA,CAAM,IAAI,CAAE,CAAA,CAAA;AAAA;AAE7E,EAAA,OAAO,MAAO,CAAA,WAAA,CAAY,SAAW,EAAA,SAAA,EAAW,MAAM,CAAA;AACxD;AAEa,IAAA,QAAA,GAAW,CAAC,GAAa,KAAA;AACpC,EAAM,MAAA,WAAA,GAAc,eAAe,GAAG,CAAA;AACtC,EAAO,OAAA,WAAA,CAAY,SAAS,KAAM,CAAA,IAAA;AACpC;AASO,SAAS,qBAAgE,GAAU,EAAA;AACxF,EAAO,OAAA;AAAA,IACL,KAAK,CAAC,KAAA,EAAcA,aAA+ByR,aAA4B,CAAA,GAAA,EAAK,OAAOzR,QAAO,CAAA;AAAA,IAClG,QAAQ,CAAC,KAAA,EAAcA,aAA+B0R,gBAA+B,CAAA,GAAA,EAAK,OAAO1R,QAAO,CAAA;AAAA,IACxG,OAAS,EAAA,CAAC,KAAkB,KAAA,YAAA,CAAa,KAAK,KAAK,CAAA;AAAA,IACnD,aAAa,CAAC,KAAA,EAAc,WAA+B,WAAY,CAAA,GAAA,EAAK,OAAO,MAAM;AAAA,GAC3F;AACF;ACxLO,IAAM,aAAN,MAAyI;AAAA,EAG9I,WAAA,CACU,SACA,YACR,EAAA;AAFQ,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA;AACA,IAAA,IAAA,CAAA,YAAA,GAAA,YAAA;AAER,IAAA,IAAA,CAAK,WAAW2K,yBAAK,CAAA,OAAA,CAAQ,OAAQ,CAAA,GAAA,IAAO,OAAO,CAAA;AAAA;AACrD,EAEA,MAAM,KACJ,YAG6B,EAAA;AAC7B,IAAA,MAAM,QAAW,GAAAA,yBAAA,CAAK,IAAK,CAAA,IAAA,CAAK,UAAU,YAAsB,CAAA;AAChE,IAAM,MAAA,GAAA,GAAM,MAAM,IAAA,CAAK,QAAQ,CAAA;AAC/B,IAAM,MAAA,MAAA,GAAS,IAAK,CAAA,YAAA,CAAa,GAAG,CAAA;AAEpC,IAAO,OAAA;AAAA,MACL,OAAS,EAAA,GAAA;AAAA,MACT,GAAG;AAAA,KACL;AAAA;AAEJ","file":"index.cjs","sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","module.exports = {\n  quot: '\\u0022',\n  amp: '&',\n  apos: '\\u0027',\n  lt: '<',\n  gt: '>',\n  nbsp: '\\u00A0',\n  iexcl: '\\u00A1',\n  cent: '\\u00A2',\n  pound: '\\u00A3',\n  curren: '\\u00A4',\n  yen: '\\u00A5',\n  brvbar: '\\u00A6',\n  sect: '\\u00A7',\n  uml: '\\u00A8',\n  copy: '\\u00A9',\n  ordf: '\\u00AA',\n  laquo: '\\u00AB',\n  not: '\\u00AC',\n  shy: '\\u00AD',\n  reg: '\\u00AE',\n  macr: '\\u00AF',\n  deg: '\\u00B0',\n  plusmn: '\\u00B1',\n  sup2: '\\u00B2',\n  sup3: '\\u00B3',\n  acute: '\\u00B4',\n  micro: '\\u00B5',\n  para: '\\u00B6',\n  middot: '\\u00B7',\n  cedil: '\\u00B8',\n  sup1: '\\u00B9',\n  ordm: '\\u00BA',\n  raquo: '\\u00BB',\n  frac14: '\\u00BC',\n  frac12: '\\u00BD',\n  frac34: '\\u00BE',\n  iquest: '\\u00BF',\n  Agrave: '\\u00C0',\n  Aacute: '\\u00C1',\n  Acirc: '\\u00C2',\n  Atilde: '\\u00C3',\n  Auml: '\\u00C4',\n  Aring: '\\u00C5',\n  AElig: '\\u00C6',\n  Ccedil: '\\u00C7',\n  Egrave: '\\u00C8',\n  Eacute: '\\u00C9',\n  Ecirc: '\\u00CA',\n  Euml: '\\u00CB',\n  Igrave: '\\u00CC',\n  Iacute: '\\u00CD',\n  Icirc: '\\u00CE',\n  Iuml: '\\u00CF',\n  ETH: '\\u00D0',\n  Ntilde: '\\u00D1',\n  Ograve: '\\u00D2',\n  Oacute: '\\u00D3',\n  Ocirc: '\\u00D4',\n  Otilde: '\\u00D5',\n  Ouml: '\\u00D6',\n  times: '\\u00D7',\n  Oslash: '\\u00D8',\n  Ugrave: '\\u00D9',\n  Uacute: '\\u00DA',\n  Ucirc: '\\u00DB',\n  Uuml: '\\u00DC',\n  Yacute: '\\u00DD',\n  THORN: '\\u00DE',\n  szlig: '\\u00DF',\n  agrave: '\\u00E0',\n  aacute: '\\u00E1',\n  acirc: '\\u00E2',\n  atilde: '\\u00E3',\n  auml: '\\u00E4',\n  aring: '\\u00E5',\n  aelig: '\\u00E6',\n  ccedil: '\\u00E7',\n  egrave: '\\u00E8',\n  eacute: '\\u00E9',\n  ecirc: '\\u00EA',\n  euml: '\\u00EB',\n  igrave: '\\u00EC',\n  iacute: '\\u00ED',\n  icirc: '\\u00EE',\n  iuml: '\\u00EF',\n  eth: '\\u00F0',\n  ntilde: '\\u00F1',\n  ograve: '\\u00F2',\n  oacute: '\\u00F3',\n  ocirc: '\\u00F4',\n  otilde: '\\u00F5',\n  ouml: '\\u00F6',\n  divide: '\\u00F7',\n  oslash: '\\u00F8',\n  ugrave: '\\u00F9',\n  uacute: '\\u00FA',\n  ucirc: '\\u00FB',\n  uuml: '\\u00FC',\n  yacute: '\\u00FD',\n  thorn: '\\u00FE',\n  yuml: '\\u00FF',\n  OElig: '\\u0152',\n  oelig: '\\u0153',\n  Scaron: '\\u0160',\n  scaron: '\\u0161',\n  Yuml: '\\u0178',\n  fnof: '\\u0192',\n  circ: '\\u02C6',\n  tilde: '\\u02DC',\n  Alpha: '\\u0391',\n  Beta: '\\u0392',\n  Gamma: '\\u0393',\n  Delta: '\\u0394',\n  Epsilon: '\\u0395',\n  Zeta: '\\u0396',\n  Eta: '\\u0397',\n  Theta: '\\u0398',\n  Iota: '\\u0399',\n  Kappa: '\\u039A',\n  Lambda: '\\u039B',\n  Mu: '\\u039C',\n  Nu: '\\u039D',\n  Xi: '\\u039E',\n  Omicron: '\\u039F',\n  Pi: '\\u03A0',\n  Rho: '\\u03A1',\n  Sigma: '\\u03A3',\n  Tau: '\\u03A4',\n  Upsilon: '\\u03A5',\n  Phi: '\\u03A6',\n  Chi: '\\u03A7',\n  Psi: '\\u03A8',\n  Omega: '\\u03A9',\n  alpha: '\\u03B1',\n  beta: '\\u03B2',\n  gamma: '\\u03B3',\n  delta: '\\u03B4',\n  epsilon: '\\u03B5',\n  zeta: '\\u03B6',\n  eta: '\\u03B7',\n  theta: '\\u03B8',\n  iota: '\\u03B9',\n  kappa: '\\u03BA',\n  lambda: '\\u03BB',\n  mu: '\\u03BC',\n  nu: '\\u03BD',\n  xi: '\\u03BE',\n  omicron: '\\u03BF',\n  pi: '\\u03C0',\n  rho: '\\u03C1',\n  sigmaf: '\\u03C2',\n  sigma: '\\u03C3',\n  tau: '\\u03C4',\n  upsilon: '\\u03C5',\n  phi: '\\u03C6',\n  chi: '\\u03C7',\n  psi: '\\u03C8',\n  omega: '\\u03C9',\n  thetasym: '\\u03D1',\n  upsih: '\\u03D2',\n  piv: '\\u03D6',\n  ensp: '\\u2002',\n  emsp: '\\u2003',\n  thinsp: '\\u2009',\n  zwnj: '\\u200C',\n  zwj: '\\u200D',\n  lrm: '\\u200E',\n  rlm: '\\u200F',\n  ndash: '\\u2013',\n  mdash: '\\u2014',\n  lsquo: '\\u2018',\n  rsquo: '\\u2019',\n  sbquo: '\\u201A',\n  ldquo: '\\u201C',\n  rdquo: '\\u201D',\n  bdquo: '\\u201E',\n  dagger: '\\u2020',\n  Dagger: '\\u2021',\n  bull: '\\u2022',\n  hellip: '\\u2026',\n  permil: '\\u2030',\n  prime: '\\u2032',\n  Prime: '\\u2033',\n  lsaquo: '\\u2039',\n  rsaquo: '\\u203A',\n  oline: '\\u203E',\n  frasl: '\\u2044',\n  euro: '\\u20AC',\n  image: '\\u2111',\n  weierp: '\\u2118',\n  real: '\\u211C',\n  trade: '\\u2122',\n  alefsym: '\\u2135',\n  larr: '\\u2190',\n  uarr: '\\u2191',\n  rarr: '\\u2192',\n  darr: '\\u2193',\n  harr: '\\u2194',\n  crarr: '\\u21B5',\n  lArr: '\\u21D0',\n  uArr: '\\u21D1',\n  rArr: '\\u21D2',\n  dArr: '\\u21D3',\n  hArr: '\\u21D4',\n  forall: '\\u2200',\n  part: '\\u2202',\n  exist: '\\u2203',\n  empty: '\\u2205',\n  nabla: '\\u2207',\n  isin: '\\u2208',\n  notin: '\\u2209',\n  ni: '\\u220B',\n  prod: '\\u220F',\n  sum: '\\u2211',\n  minus: '\\u2212',\n  lowast: '\\u2217',\n  radic: '\\u221A',\n  prop: '\\u221D',\n  infin: '\\u221E',\n  ang: '\\u2220',\n  and: '\\u2227',\n  or: '\\u2228',\n  cap: '\\u2229',\n  cup: '\\u222A',\n  'int': '\\u222B',\n  there4: '\\u2234',\n  sim: '\\u223C',\n  cong: '\\u2245',\n  asymp: '\\u2248',\n  ne: '\\u2260',\n  equiv: '\\u2261',\n  le: '\\u2264',\n  ge: '\\u2265',\n  sub: '\\u2282',\n  sup: '\\u2283',\n  nsub: '\\u2284',\n  sube: '\\u2286',\n  supe: '\\u2287',\n  oplus: '\\u2295',\n  otimes: '\\u2297',\n  perp: '\\u22A5',\n  sdot: '\\u22C5',\n  lceil: '\\u2308',\n  rceil: '\\u2309',\n  lfloor: '\\u230A',\n  rfloor: '\\u230B',\n  lang: '\\u2329',\n  rang: '\\u232A',\n  loz: '\\u25CA',\n  spades: '\\u2660',\n  clubs: '\\u2663',\n  hearts: '\\u2665',\n  diams: '\\u2666'\n};\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.acorn = {}));\n})(this, (function (exports) { 'use strict';\n\n  // This file was generated. Do not modify manually!\n  var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\n  // This file was generated. Do not modify manually!\n  var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];\n\n  // This file was generated. Do not modify manually!\n  var nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\n  // This file was generated. Do not modify manually!\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n\n  // These are a run-length and offset encoded representation of the\n  // >0xffff code points that are a valid part of identifiers. The\n  // offset starts at 0x10000, and each pair of numbers represents an\n  // offset to the next range, and then a size of the range.\n\n  // Reserved word lists for various dialects of the language\n\n  var reservedWords = {\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n    5: \"class enum extends super const export import\",\n    6: \"enum\",\n    strict: \"implements interface let package private protected public static yield\",\n    strictBind: \"eval arguments\"\n  };\n\n  // And the keywords\n\n  var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\n  var keywords$1 = {\n    5: ecma5AndLessKeywords,\n    \"5module\": ecma5AndLessKeywords + \" export import\",\n    6: ecma5AndLessKeywords + \" const class extends export import super\"\n  };\n\n  var keywordRelationalOperator = /^in(stanceof)?$/;\n\n  // ## Character categories\n\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n  // This has a complexity linear to the value of the code. The\n  // assumption is that looking up astral identifier characters is\n  // rare.\n  function isInAstralSet(code, set) {\n    var pos = 0x10000;\n    for (var i = 0; i < set.length; i += 2) {\n      pos += set[i];\n      if (pos > code) { return false }\n      pos += set[i + 1];\n      if (pos >= code) { return true }\n    }\n    return false\n  }\n\n  // Test whether a given character code starts an identifier.\n\n  function isIdentifierStart(code, astral) {\n    if (code < 65) { return code === 36 }\n    if (code < 91) { return true }\n    if (code < 97) { return code === 95 }\n    if (code < 123) { return true }\n    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n    if (astral === false) { return false }\n    return isInAstralSet(code, astralIdentifierStartCodes)\n  }\n\n  // Test whether a given character is part of an identifier.\n\n  function isIdentifierChar(code, astral) {\n    if (code < 48) { return code === 36 }\n    if (code < 58) { return true }\n    if (code < 65) { return false }\n    if (code < 91) { return true }\n    if (code < 97) { return code === 95 }\n    if (code < 123) { return true }\n    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n    if (astral === false) { return false }\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n  }\n\n  // ## Token types\n\n  // The assignment of fine-grained, information-carrying type objects\n  // allows the tokenizer to store the information it has about a\n  // token in a way that is very cheap for the parser to look up.\n\n  // All token type variables start with an underscore, to make them\n  // easy to recognize.\n\n  // The `beforeExpr` property is used to disambiguate between regular\n  // expressions and divisions. It is set on all token types that can\n  // be followed by an expression (thus, a slash after them would be a\n  // regular expression).\n  //\n  // The `startsExpr` property is used to check if the token ends a\n  // `yield` expression. It is set on all token types that either can\n  // directly start an expression (like a quotation mark) or can\n  // continue an expression (like the body of a string).\n  //\n  // `isLoop` marks a keyword as starting a loop, which is important\n  // to know when parsing a label, in order to allow or disallow\n  // continue jumps to that label.\n\n  var TokenType = function TokenType(label, conf) {\n    if ( conf === void 0 ) conf = {};\n\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop || null;\n    this.updateContext = null;\n  };\n\n  function binop(name, prec) {\n    return new TokenType(name, {beforeExpr: true, binop: prec})\n  }\n  var beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};\n\n  // Map keyword names to token types.\n\n  var keywords = {};\n\n  // Succinct definitions of keyword token types\n  function kw(name, options) {\n    if ( options === void 0 ) options = {};\n\n    options.keyword = name;\n    return keywords[name] = new TokenType(name, options)\n  }\n\n  var types$1 = {\n    num: new TokenType(\"num\", startsExpr),\n    regexp: new TokenType(\"regexp\", startsExpr),\n    string: new TokenType(\"string\", startsExpr),\n    name: new TokenType(\"name\", startsExpr),\n    privateId: new TokenType(\"privateId\", startsExpr),\n    eof: new TokenType(\"eof\"),\n\n    // Punctuation token types.\n    bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n    bracketR: new TokenType(\"]\"),\n    braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n    braceR: new TokenType(\"}\"),\n    parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n    parenR: new TokenType(\")\"),\n    comma: new TokenType(\",\", beforeExpr),\n    semi: new TokenType(\";\", beforeExpr),\n    colon: new TokenType(\":\", beforeExpr),\n    dot: new TokenType(\".\"),\n    question: new TokenType(\"?\", beforeExpr),\n    questionDot: new TokenType(\"?.\"),\n    arrow: new TokenType(\"=>\", beforeExpr),\n    template: new TokenType(\"template\"),\n    invalidTemplate: new TokenType(\"invalidTemplate\"),\n    ellipsis: new TokenType(\"...\", beforeExpr),\n    backQuote: new TokenType(\"`\", startsExpr),\n    dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n    // Operators. These carry several kinds of properties to help the\n    // parser use them properly (the presence of these properties is\n    // what categorizes them as operators).\n    //\n    // `binop`, when present, specifies that this operator is a binary\n    // operator, and will refer to its precedence.\n    //\n    // `prefix` and `postfix` mark the operator as a prefix or postfix\n    // unary operator.\n    //\n    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n    // binary operators with a very low precedence, that should result\n    // in AssignmentExpression nodes.\n\n    eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n    assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n    incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n    prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    logicalOR: binop(\"||\", 1),\n    logicalAND: binop(\"&&\", 2),\n    bitwiseOR: binop(\"|\", 3),\n    bitwiseXOR: binop(\"^\", 4),\n    bitwiseAND: binop(\"&\", 5),\n    equality: binop(\"==/!=/===/!==\", 6),\n    relational: binop(\"</>/<=/>=\", 7),\n    bitShift: binop(\"<</>>/>>>\", 8),\n    plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n    modulo: binop(\"%\", 10),\n    star: binop(\"*\", 10),\n    slash: binop(\"/\", 10),\n    starstar: new TokenType(\"**\", {beforeExpr: true}),\n    coalesce: binop(\"??\", 1),\n\n    // Keyword token types.\n    _break: kw(\"break\"),\n    _case: kw(\"case\", beforeExpr),\n    _catch: kw(\"catch\"),\n    _continue: kw(\"continue\"),\n    _debugger: kw(\"debugger\"),\n    _default: kw(\"default\", beforeExpr),\n    _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n    _else: kw(\"else\", beforeExpr),\n    _finally: kw(\"finally\"),\n    _for: kw(\"for\", {isLoop: true}),\n    _function: kw(\"function\", startsExpr),\n    _if: kw(\"if\"),\n    _return: kw(\"return\", beforeExpr),\n    _switch: kw(\"switch\"),\n    _throw: kw(\"throw\", beforeExpr),\n    _try: kw(\"try\"),\n    _var: kw(\"var\"),\n    _const: kw(\"const\"),\n    _while: kw(\"while\", {isLoop: true}),\n    _with: kw(\"with\"),\n    _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n    _this: kw(\"this\", startsExpr),\n    _super: kw(\"super\", startsExpr),\n    _class: kw(\"class\", startsExpr),\n    _extends: kw(\"extends\", beforeExpr),\n    _export: kw(\"export\"),\n    _import: kw(\"import\", startsExpr),\n    _null: kw(\"null\", startsExpr),\n    _true: kw(\"true\", startsExpr),\n    _false: kw(\"false\", startsExpr),\n    _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n    _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n    _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n  };\n\n  // Matches a whole line break (where CRLF is considered a single\n  // line break). Used to count lines.\n\n  var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\n  var lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n  function isNewLine(code) {\n    return code === 10 || code === 13 || code === 0x2028 || code === 0x2029\n  }\n\n  function nextLineBreak(code, from, end) {\n    if ( end === void 0 ) end = code.length;\n\n    for (var i = from; i < end; i++) {\n      var next = code.charCodeAt(i);\n      if (isNewLine(next))\n        { return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1 }\n    }\n    return -1\n  }\n\n  var nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\n  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n  var ref = Object.prototype;\n  var hasOwnProperty = ref.hasOwnProperty;\n  var toString = ref.toString;\n\n  var hasOwn = Object.hasOwn || (function (obj, propName) { return (\n    hasOwnProperty.call(obj, propName)\n  ); });\n\n  var isArray = Array.isArray || (function (obj) { return (\n    toString.call(obj) === \"[object Array]\"\n  ); });\n\n  var regexpCache = Object.create(null);\n\n  function wordsRegexp(words) {\n    return regexpCache[words] || (regexpCache[words] = new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\"))\n  }\n\n  function codePointToString(code) {\n    // UTF-16 Decoding\n    if (code <= 0xFFFF) { return String.fromCharCode(code) }\n    code -= 0x10000;\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n  }\n\n  var loneSurrogate = /(?:[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\n\n  // These are used when `options.locations` is on, for the\n  // `startLoc` and `endLoc` properties.\n\n  var Position = function Position(line, col) {\n    this.line = line;\n    this.column = col;\n  };\n\n  Position.prototype.offset = function offset (n) {\n    return new Position(this.line, this.column + n)\n  };\n\n  var SourceLocation = function SourceLocation(p, start, end) {\n    this.start = start;\n    this.end = end;\n    if (p.sourceFile !== null) { this.source = p.sourceFile; }\n  };\n\n  // The `getLineInfo` function is mostly useful when the\n  // `locations` option is off (for performance reasons) and you\n  // want to find the line/column position for a given character\n  // offset. `input` should be the code string that the offset refers\n  // into.\n\n  function getLineInfo(input, offset) {\n    for (var line = 1, cur = 0;;) {\n      var nextBreak = nextLineBreak(input, cur, offset);\n      if (nextBreak < 0) { return new Position(line, offset - cur) }\n      ++line;\n      cur = nextBreak;\n    }\n  }\n\n  // A second argument must be given to configure the parser process.\n  // These options are recognized (only `ecmaVersion` is required):\n\n  var defaultOptions = {\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n    // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10\n    // (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), or `\"latest\"`\n    // (the latest version the library supports). This influences\n    // support for strict mode, the set of reserved words, and support\n    // for new syntax features.\n    ecmaVersion: null,\n    // `sourceType` indicates the mode the code should be parsed in.\n    // Can be either `\"script\"` or `\"module\"`. This influences global\n    // strict mode and parsing of `import` and `export` declarations.\n    sourceType: \"script\",\n    // `onInsertedSemicolon` can be a callback that will be called when\n    // a semicolon is automatically inserted. It will be passed the\n    // position of the inserted semicolon as an offset, and if\n    // `locations` is enabled, it is given the location as a `{line,\n    // column}` object as second argument.\n    onInsertedSemicolon: null,\n    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n    // trailing commas.\n    onTrailingComma: null,\n    // By default, reserved words are only enforced if ecmaVersion >= 5.\n    // Set `allowReserved` to a boolean value to explicitly turn this on\n    // an off. When this option has the value \"never\", reserved words\n    // and keywords can also not be used as property names.\n    allowReserved: null,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program, and an import.meta expression\n    // in a script isn't considered an error.\n    allowImportExportEverywhere: false,\n    // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.\n    // When enabled, await identifiers are allowed to appear at the top-level scope,\n    // but they are still not allowed in non-async functions.\n    allowAwaitOutsideFunction: null,\n    // When enabled, super identifiers are not constrained to\n    // appearing in methods and do not raise an error when they appear elsewhere.\n    allowSuperOutsideMethod: null,\n    // When enabled, hashbang directive in the beginning of file is\n    // allowed and treated as a line comment. Enabled by default when\n    // `ecmaVersion` >= 2023.\n    allowHashBang: false,\n    // By default, the parser will verify that private properties are\n    // only used in places where they are valid and have been declared.\n    // Set this to false to turn such checks off.\n    checkPrivateFields: true,\n    // When `locations` is on, `loc` properties holding objects with\n    // `start` and `end` properties in `{line, column}` form (with\n    // line being 1-based and column 0-based) will be attached to the\n    // nodes.\n    locations: false,\n    // A function can be passed as `onToken` option, which will\n    // cause Acorn to call that function with object in the same\n    // format as tokens returned from `tokenizer().getToken()`. Note\n    // that you are not allowed to call the parser from the\n    // callback—that will corrupt its internal state.\n    onToken: null,\n    // A function can be passed as `onComment` option, which will\n    // cause Acorn to call that function with `(block, text, start,\n    // end)` parameters whenever a comment is skipped. `block` is a\n    // boolean indicating whether this is a block (`/* */`) comment,\n    // `text` is the content of the comment, and `start` and `end` are\n    // character offsets that denote the start and end of the comment.\n    // When the `locations` option is on, two more parameters are\n    // passed, the full `{line, column}` locations of the start and\n    // end of the comments. Note that you are not allowed to call the\n    // parser from the callback—that will corrupt its internal state.\n    // When this option has an array as value, objects representing the\n    // comments are pushed to it.\n    onComment: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // It is possible to parse multiple files into a single AST by\n    // passing the tree produced by parsing the first file as\n    // `program` option in subsequent parses. This will add the\n    // toplevel forms of the parsed file to the `Program` (top) node\n    // of an existing parse tree.\n    program: null,\n    // When `locations` is on, you can pass this to record the source\n    // file in every node's `loc` object.\n    sourceFile: null,\n    // This value, if given, is stored in every node, whether\n    // `locations` is on or off.\n    directSourceFile: null,\n    // When enabled, parenthesized expressions are represented by\n    // (non-standard) ParenthesizedExpression nodes\n    preserveParens: false\n  };\n\n  // Interpret and default an options object\n\n  var warnedAboutEcmaVersion = false;\n\n  function getOptions(opts) {\n    var options = {};\n\n    for (var opt in defaultOptions)\n      { options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n    if (options.ecmaVersion === \"latest\") {\n      options.ecmaVersion = 1e8;\n    } else if (options.ecmaVersion == null) {\n      if (!warnedAboutEcmaVersion && typeof console === \"object\" && console.warn) {\n        warnedAboutEcmaVersion = true;\n        console.warn(\"Since Acorn 8.0.0, options.ecmaVersion is required.\\nDefaulting to 2020, but this will stop working in the future.\");\n      }\n      options.ecmaVersion = 11;\n    } else if (options.ecmaVersion >= 2015) {\n      options.ecmaVersion -= 2009;\n    }\n\n    if (options.allowReserved == null)\n      { options.allowReserved = options.ecmaVersion < 5; }\n\n    if (!opts || opts.allowHashBang == null)\n      { options.allowHashBang = options.ecmaVersion >= 14; }\n\n    if (isArray(options.onToken)) {\n      var tokens = options.onToken;\n      options.onToken = function (token) { return tokens.push(token); };\n    }\n    if (isArray(options.onComment))\n      { options.onComment = pushComment(options, options.onComment); }\n\n    return options\n  }\n\n  function pushComment(options, array) {\n    return function(block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? \"Block\" : \"Line\",\n        value: text,\n        start: start,\n        end: end\n      };\n      if (options.locations)\n        { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n      if (options.ranges)\n        { comment.range = [start, end]; }\n      array.push(comment);\n    }\n  }\n\n  // Each scope gets a bitset that may contain these flags\n  var\n      SCOPE_TOP = 1,\n      SCOPE_FUNCTION = 2,\n      SCOPE_ASYNC = 4,\n      SCOPE_GENERATOR = 8,\n      SCOPE_ARROW = 16,\n      SCOPE_SIMPLE_CATCH = 32,\n      SCOPE_SUPER = 64,\n      SCOPE_DIRECT_SUPER = 128,\n      SCOPE_CLASS_STATIC_BLOCK = 256,\n      SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;\n\n  function functionFlags(async, generator) {\n    return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n  }\n\n  // Used in checkLVal* and declareName to determine the type of a binding\n  var\n      BIND_NONE = 0, // Not a binding\n      BIND_VAR = 1, // Var-style binding\n      BIND_LEXICAL = 2, // Let- or const-style binding\n      BIND_FUNCTION = 3, // Function declaration\n      BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding\n      BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\n  var Parser = function Parser(options, input, startPos) {\n    this.options = options = getOptions(options);\n    this.sourceFile = options.sourceFile;\n    this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n    var reserved = \"\";\n    if (options.allowReserved !== true) {\n      reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];\n      if (options.sourceType === \"module\") { reserved += \" await\"; }\n    }\n    this.reservedWords = wordsRegexp(reserved);\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n    this.reservedWordsStrict = wordsRegexp(reservedStrict);\n    this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n    this.input = String(input);\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false;\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos;\n      this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n    } else {\n      this.pos = this.lineStart = 0;\n      this.curLine = 1;\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = types$1.eof;\n    // For tokens that include more information than their type, the value\n    this.value = null;\n    // Its start and end offset\n    this.start = this.end = this.pos;\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition();\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext();\n    this.exprAllowed = true;\n\n    // Figure out if it's a module code.\n    this.inModule = options.sourceType === \"module\";\n    this.strict = this.inModule || this.strictDirective(this.pos);\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1;\n    this.potentialArrowInForAwait = false;\n\n    // Positions to delayed-check that yield/await does not exist in default parameters.\n    this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n    // Labels in scope.\n    this.labels = [];\n    // Thus-far undefined exports.\n    this.undefinedExports = Object.create(null);\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n      { this.skipLineComment(2); }\n\n    // Scope tracking for duplicate variable names (see scope.js)\n    this.scopeStack = [];\n    this.enterScope(SCOPE_TOP);\n\n    // For RegExp validation\n    this.regexpState = null;\n\n    // The stack of private names.\n    // Each element has two properties: 'declared' and 'used'.\n    // When it exited from the outermost class definition, all used private names must be declared.\n    this.privateNameStack = [];\n  };\n\n  var prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },canAwait: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true },allowNewDotTarget: { configurable: true },inClassStaticBlock: { configurable: true } };\n\n  Parser.prototype.parse = function parse () {\n    var node = this.options.program || this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(node)\n  };\n\n  prototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\n\n  prototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit };\n\n  prototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit };\n\n  prototypeAccessors.canAwait.get = function () {\n    for (var i = this.scopeStack.length - 1; i >= 0; i--) {\n      var scope = this.scopeStack[i];\n      if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) { return false }\n      if (scope.flags & SCOPE_FUNCTION) { return (scope.flags & SCOPE_ASYNC) > 0 }\n    }\n    return (this.inModule && this.options.ecmaVersion >= 13) || this.options.allowAwaitOutsideFunction\n  };\n\n  prototypeAccessors.allowSuper.get = function () {\n    var ref = this.currentThisScope();\n      var flags = ref.flags;\n      var inClassFieldInit = ref.inClassFieldInit;\n    return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod\n  };\n\n  prototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\n\n  prototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\n\n  prototypeAccessors.allowNewDotTarget.get = function () {\n    var ref = this.currentThisScope();\n      var flags = ref.flags;\n      var inClassFieldInit = ref.inClassFieldInit;\n    return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit\n  };\n\n  prototypeAccessors.inClassStaticBlock.get = function () {\n    return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0\n  };\n\n  Parser.extend = function extend () {\n      var plugins = [], len = arguments.length;\n      while ( len-- ) plugins[ len ] = arguments[ len ];\n\n    var cls = this;\n    for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n    return cls\n  };\n\n  Parser.parse = function parse (input, options) {\n    return new this(options, input).parse()\n  };\n\n  Parser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\n    var parser = new this(options, input, pos);\n    parser.nextToken();\n    return parser.parseExpression()\n  };\n\n  Parser.tokenizer = function tokenizer (input, options) {\n    return new this(options, input)\n  };\n\n  Object.defineProperties( Parser.prototype, prototypeAccessors );\n\n  var pp$9 = Parser.prototype;\n\n  // ## Parser utilities\n\n  var literal = /^(?:'((?:\\\\[^]|[^'\\\\])*?)'|\"((?:\\\\[^]|[^\"\\\\])*?)\")/;\n  pp$9.strictDirective = function(start) {\n    if (this.options.ecmaVersion < 5) { return false }\n    for (;;) {\n      // Try to find string literal.\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      var match = literal.exec(this.input.slice(start));\n      if (!match) { return false }\n      if ((match[1] || match[2]) === \"use strict\") {\n        skipWhiteSpace.lastIndex = start + match[0].length;\n        var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;\n        var next = this.input.charAt(end);\n        return next === \";\" || next === \"}\" ||\n          (lineBreak.test(spaceAfter[0]) &&\n           !(/[(`.[+\\-/*%<>=,?^&]/.test(next) || next === \"!\" && this.input.charAt(end + 1) === \"=\"))\n      }\n      start += match[0].length;\n\n      // Skip semicolon, if any.\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      if (this.input[start] === \";\")\n        { start++; }\n    }\n  };\n\n  // Predicate that tests whether the next token is of the given\n  // type, and if yes, consumes it as a side effect.\n\n  pp$9.eat = function(type) {\n    if (this.type === type) {\n      this.next();\n      return true\n    } else {\n      return false\n    }\n  };\n\n  // Tests whether parsed token is a contextual keyword.\n\n  pp$9.isContextual = function(name) {\n    return this.type === types$1.name && this.value === name && !this.containsEsc\n  };\n\n  // Consumes contextual keyword if possible.\n\n  pp$9.eatContextual = function(name) {\n    if (!this.isContextual(name)) { return false }\n    this.next();\n    return true\n  };\n\n  // Asserts that following token is given contextual keyword.\n\n  pp$9.expectContextual = function(name) {\n    if (!this.eatContextual(name)) { this.unexpected(); }\n  };\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  pp$9.canInsertSemicolon = function() {\n    return this.type === types$1.eof ||\n      this.type === types$1.braceR ||\n      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  };\n\n  pp$9.insertSemicolon = function() {\n    if (this.canInsertSemicolon()) {\n      if (this.options.onInsertedSemicolon)\n        { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n      return true\n    }\n  };\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  pp$9.semicolon = function() {\n    if (!this.eat(types$1.semi) && !this.insertSemicolon()) { this.unexpected(); }\n  };\n\n  pp$9.afterTrailingComma = function(tokType, notNext) {\n    if (this.type === tokType) {\n      if (this.options.onTrailingComma)\n        { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n      if (!notNext)\n        { this.next(); }\n      return true\n    }\n  };\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error.\n\n  pp$9.expect = function(type) {\n    this.eat(type) || this.unexpected();\n  };\n\n  // Raise an unexpected token error.\n\n  pp$9.unexpected = function(pos) {\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n  };\n\n  var DestructuringErrors = function DestructuringErrors() {\n    this.shorthandAssign =\n    this.trailingComma =\n    this.parenthesizedAssign =\n    this.parenthesizedBind =\n    this.doubleProto =\n      -1;\n  };\n\n  pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n    if (!refDestructuringErrors) { return }\n    if (refDestructuringErrors.trailingComma > -1)\n      { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n    var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n    if (parens > -1) { this.raiseRecoverable(parens, isAssign ? \"Assigning to rvalue\" : \"Parenthesized pattern\"); }\n  };\n\n  pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n    if (!refDestructuringErrors) { return false }\n    var shorthandAssign = refDestructuringErrors.shorthandAssign;\n    var doubleProto = refDestructuringErrors.doubleProto;\n    if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n    if (shorthandAssign >= 0)\n      { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n    if (doubleProto >= 0)\n      { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n  };\n\n  pp$9.checkYieldAwaitInDefaultParams = function() {\n    if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n      { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n    if (this.awaitPos)\n      { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n  };\n\n  pp$9.isSimpleAssignTarget = function(expr) {\n    if (expr.type === \"ParenthesizedExpression\")\n      { return this.isSimpleAssignTarget(expr.expression) }\n    return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n  };\n\n  var pp$8 = Parser.prototype;\n\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  pp$8.parseTopLevel = function(node) {\n    var exports = Object.create(null);\n    if (!node.body) { node.body = []; }\n    while (this.type !== types$1.eof) {\n      var stmt = this.parseStatement(null, true, exports);\n      node.body.push(stmt);\n    }\n    if (this.inModule)\n      { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)\n        {\n          var name = list[i];\n\n          this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\n        } }\n    this.adaptDirectivePrologue(node.body);\n    this.next();\n    node.sourceType = this.options.sourceType;\n    return this.finishNode(node, \"Program\")\n  };\n\n  var loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\n  pp$8.isLet = function(context) {\n    if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === 91 || nextCh === 92) { return true } // '[', '\\'\n    if (context) { return false }\n\n    if (nextCh === 123 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true } // '{', astral\n    if (isIdentifierStart(nextCh, true)) {\n      var pos = next + 1;\n      while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) { ++pos; }\n      if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true }\n      var ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) { return true }\n    }\n    return false\n  };\n\n  // check 'async [no LineTerminator here] function'\n  // - 'async /*foo*/ function' is OK.\n  // - 'async /*\\n*/ function' is invalid.\n  pp$8.isAsyncFunction = function() {\n    if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n      { return false }\n\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length, after;\n    return !lineBreak.test(this.input.slice(this.pos, next)) &&\n      this.input.slice(next, next + 8) === \"function\" &&\n      (next + 8 === this.input.length ||\n       !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00))\n  };\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  pp$8.parseStatement = function(context, topLevel, exports) {\n    var starttype = this.type, node = this.startNode(), kind;\n\n    if (this.isLet(context)) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n    case types$1._break: case types$1._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n    case types$1._debugger: return this.parseDebuggerStatement(node)\n    case types$1._do: return this.parseDoStatement(node)\n    case types$1._for: return this.parseForStatement(node)\n    case types$1._function:\n      // Function as sole body of either an if statement or a labeled statement\n      // works, but not when it is part of a labeled statement that is the sole\n      // body of an if statement.\n      if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n      return this.parseFunctionStatement(node, false, !context)\n    case types$1._class:\n      if (context) { this.unexpected(); }\n      return this.parseClass(node, true)\n    case types$1._if: return this.parseIfStatement(node)\n    case types$1._return: return this.parseReturnStatement(node)\n    case types$1._switch: return this.parseSwitchStatement(node)\n    case types$1._throw: return this.parseThrowStatement(node)\n    case types$1._try: return this.parseTryStatement(node)\n    case types$1._const: case types$1._var:\n      kind = kind || this.value;\n      if (context && kind !== \"var\") { this.unexpected(); }\n      return this.parseVarStatement(node, kind)\n    case types$1._while: return this.parseWhileStatement(node)\n    case types$1._with: return this.parseWithStatement(node)\n    case types$1.braceL: return this.parseBlock(true, node)\n    case types$1.semi: return this.parseEmptyStatement(node)\n    case types$1._export:\n    case types$1._import:\n      if (this.options.ecmaVersion > 10 && starttype === types$1._import) {\n        skipWhiteSpace.lastIndex = this.pos;\n        var skip = skipWhiteSpace.exec(this.input);\n        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n        if (nextCh === 40 || nextCh === 46) // '(' or '.'\n          { return this.parseExpressionStatement(node, this.parseExpression()) }\n      }\n\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel)\n          { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n        if (!this.inModule)\n          { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n      }\n      return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n      // If the statement does not start with a statement keyword or a\n      // brace, it's an ExpressionStatement or LabeledStatement. We\n      // simply start parsing an expression, and afterwards, if the\n      // next token is a colon and the expression was a simple\n      // Identifier node, we switch to interpreting it as a label.\n    default:\n      if (this.isAsyncFunction()) {\n        if (context) { this.unexpected(); }\n        this.next();\n        return this.parseFunctionStatement(node, true, !context)\n      }\n\n      var maybeName = this.value, expr = this.parseExpression();\n      if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon))\n        { return this.parseLabeledStatement(node, maybeName, expr, context) }\n      else { return this.parseExpressionStatement(node, expr) }\n    }\n  };\n\n  pp$8.parseBreakContinueStatement = function(node, keyword) {\n    var isBreak = keyword === \"break\";\n    this.next();\n    if (this.eat(types$1.semi) || this.insertSemicolon()) { node.label = null; }\n    else if (this.type !== types$1.name) { this.unexpected(); }\n    else {\n      node.label = this.parseIdent();\n      this.semicolon();\n    }\n\n    // Verify that there is an actual destination to break or\n    // continue to.\n    var i = 0;\n    for (; i < this.labels.length; ++i) {\n      var lab = this.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n        if (node.label && isBreak) { break }\n      }\n    }\n    if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n  };\n\n  pp$8.parseDebuggerStatement = function(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\")\n  };\n\n  pp$8.parseDoStatement = function(node) {\n    this.next();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(\"do\");\n    this.labels.pop();\n    this.expect(types$1._while);\n    node.test = this.parseParenExpression();\n    if (this.options.ecmaVersion >= 6)\n      { this.eat(types$1.semi); }\n    else\n      { this.semicolon(); }\n    return this.finishNode(node, \"DoWhileStatement\")\n  };\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  pp$8.parseForStatement = function(node) {\n    this.next();\n    var awaitAt = (this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n    this.labels.push(loopLabel);\n    this.enterScope(0);\n    this.expect(types$1.parenL);\n    if (this.type === types$1.semi) {\n      if (awaitAt > -1) { this.unexpected(awaitAt); }\n      return this.parseFor(node, null)\n    }\n    var isLet = this.isLet();\n    if (this.type === types$1._var || this.type === types$1._const || isLet) {\n      var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n      this.next();\n      this.parseVar(init$1, true, kind);\n      this.finishNode(init$1, \"VariableDeclaration\");\n      if ((this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {\n        if (this.options.ecmaVersion >= 9) {\n          if (this.type === types$1._in) {\n            if (awaitAt > -1) { this.unexpected(awaitAt); }\n          } else { node.await = awaitAt > -1; }\n        }\n        return this.parseForIn(node, init$1)\n      }\n      if (awaitAt > -1) { this.unexpected(awaitAt); }\n      return this.parseFor(node, init$1)\n    }\n    var startsWithLet = this.isContextual(\"let\"), isForOf = false;\n    var containsEsc = this.containsEsc;\n    var refDestructuringErrors = new DestructuringErrors;\n    var initPos = this.start;\n    var init = awaitAt > -1\n      ? this.parseExprSubscripts(refDestructuringErrors, \"await\")\n      : this.parseExpression(true, refDestructuringErrors);\n    if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      if (awaitAt > -1) { // implies `ecmaVersion >= 9` (see declaration of awaitAt)\n        if (this.type === types$1._in) { this.unexpected(awaitAt); }\n        node.await = true;\n      } else if (isForOf && this.options.ecmaVersion >= 8) {\n        if (init.start === initPos && !containsEsc && init.type === \"Identifier\" && init.name === \"async\") { this.unexpected(); }\n        else if (this.options.ecmaVersion >= 9) { node.await = false; }\n      }\n      if (startsWithLet && isForOf) { this.raise(init.start, \"The left-hand side of a for-of loop may not start with 'let'.\"); }\n      this.toAssignable(init, false, refDestructuringErrors);\n      this.checkLValPattern(init);\n      return this.parseForIn(node, init)\n    } else {\n      this.checkExpressionErrors(refDestructuringErrors, true);\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init)\n  };\n\n  pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\n  };\n\n  pp$8.parseIfStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    // allow function declarations in branches, but only in non-strict mode\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\")\n  };\n\n  pp$8.parseReturnStatement = function(node) {\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n      { this.raise(this.start, \"'return' outside of function\"); }\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.eat(types$1.semi) || this.insertSemicolon()) { node.argument = null; }\n    else { node.argument = this.parseExpression(); this.semicolon(); }\n    return this.finishNode(node, \"ReturnStatement\")\n  };\n\n  pp$8.parseSwitchStatement = function(node) {\n    this.next();\n    node.discriminant = this.parseParenExpression();\n    node.cases = [];\n    this.expect(types$1.braceL);\n    this.labels.push(switchLabel);\n    this.enterScope(0);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    var cur;\n    for (var sawDefault = false; this.type !== types$1.braceR;) {\n      if (this.type === types$1._case || this.type === types$1._default) {\n        var isCase = this.type === types$1._case;\n        if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n        node.cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(types$1.colon);\n      } else {\n        if (!cur) { this.unexpected(); }\n        cur.consequent.push(this.parseStatement(null));\n      }\n    }\n    this.exitScope();\n    if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n    this.next(); // Closing brace\n    this.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\")\n  };\n\n  pp$8.parseThrowStatement = function(node) {\n    this.next();\n    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n      { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\")\n  };\n\n  // Reused empty array added for node fields that are always empty.\n\n  var empty$1 = [];\n\n  pp$8.parseCatchClauseParam = function() {\n    var param = this.parseBindingAtom();\n    var simple = param.type === \"Identifier\";\n    this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLValPattern(param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n    this.expect(types$1.parenR);\n\n    return param\n  };\n\n  pp$8.parseTryStatement = function(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.type === types$1._catch) {\n      var clause = this.startNode();\n      this.next();\n      if (this.eat(types$1.parenL)) {\n        clause.param = this.parseCatchClauseParam();\n      } else {\n        if (this.options.ecmaVersion < 10) { this.unexpected(); }\n        clause.param = null;\n        this.enterScope(0);\n      }\n      clause.body = this.parseBlock(false);\n      this.exitScope();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer)\n      { this.raise(node.start, \"Missing catch or finally clause\"); }\n    return this.finishNode(node, \"TryStatement\")\n  };\n\n  pp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\")\n  };\n\n  pp$8.parseWhileStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(\"while\");\n    this.labels.pop();\n    return this.finishNode(node, \"WhileStatement\")\n  };\n\n  pp$8.parseWithStatement = function(node) {\n    if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n    this.next();\n    node.object = this.parseParenExpression();\n    node.body = this.parseStatement(\"with\");\n    return this.finishNode(node, \"WithStatement\")\n  };\n\n  pp$8.parseEmptyStatement = function(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\")\n  };\n\n  pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {\n    for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)\n      {\n      var label = list[i$1];\n\n      if (label.name === maybeName)\n        { this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n    } }\n    var kind = this.type.isLoop ? \"loop\" : this.type === types$1._switch ? \"switch\" : null;\n    for (var i = this.labels.length - 1; i >= 0; i--) {\n      var label$1 = this.labels[i];\n      if (label$1.statementStart === node.start) {\n        // Update information about previous labels on this node\n        label$1.statementStart = this.start;\n        label$1.kind = kind;\n      } else { break }\n    }\n    this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\")\n  };\n\n  pp$8.parseExpressionStatement = function(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\")\n  };\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {\n    if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n    if ( node === void 0 ) node = this.startNode();\n\n    node.body = [];\n    this.expect(types$1.braceL);\n    if (createNewLexicalScope) { this.enterScope(0); }\n    while (this.type !== types$1.braceR) {\n      var stmt = this.parseStatement(null);\n      node.body.push(stmt);\n    }\n    if (exitStrict) { this.strict = false; }\n    this.next();\n    if (createNewLexicalScope) { this.exitScope(); }\n    return this.finishNode(node, \"BlockStatement\")\n  };\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  pp$8.parseFor = function(node, init) {\n    node.init = init;\n    this.expect(types$1.semi);\n    node.test = this.type === types$1.semi ? null : this.parseExpression();\n    this.expect(types$1.semi);\n    node.update = this.type === types$1.parenR ? null : this.parseExpression();\n    this.expect(types$1.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, \"ForStatement\")\n  };\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  pp$8.parseForIn = function(node, init) {\n    var isForIn = this.type === types$1._in;\n    this.next();\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (\n        !isForIn ||\n        this.options.ecmaVersion < 8 ||\n        this.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\"\n      )\n    ) {\n      this.raise(\n        init.start,\n        ((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")\n      );\n    }\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(types$1.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")\n  };\n\n  // Parse a list of variable declarations.\n\n  pp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {\n    node.declarations = [];\n    node.kind = kind;\n    for (;;) {\n      var decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(types$1.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else if (!allowMissingInitializer && kind === \"const\" && !(this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n        this.unexpected();\n      } else if (!allowMissingInitializer && decl.id.type !== \"Identifier\" && !(isFor && (this.type === types$1._in || this.isContextual(\"of\")))) {\n        this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n      } else {\n        decl.init = null;\n      }\n      node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types$1.comma)) { break }\n    }\n    return node\n  };\n\n  pp$8.parseVarId = function(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLValPattern(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n  };\n\n  var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n\n  // Parse a function declaration or literal (depending on the\n  // `statement & FUNC_STATEMENT`).\n\n  // Remove `allowExpressionBody` for 7.0.0, as it is only called with false\n  pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n      if (this.type === types$1.star && (statement & FUNC_HANGING_STATEMENT))\n        { this.unexpected(); }\n      node.generator = this.eat(types$1.star);\n    }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n\n    if (statement & FUNC_STATEMENT) {\n      node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types$1.name ? null : this.parseIdent();\n      if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n        // If it is a regular function declaration in sloppy mode, then it is\n        // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n        // mode depends on properties of the current scope (see\n        // treatFunctionsAsVar).\n        { this.checkLValSimple(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n    }\n\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope(functionFlags(node.async, node.generator));\n\n    if (!(statement & FUNC_STATEMENT))\n      { node.id = this.type === types$1.name ? this.parseIdent() : null; }\n\n    this.parseFunctionParams(node);\n    this.parseFunctionBody(node, allowExpressionBody, false, forInit);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\n  };\n\n  pp$8.parseFunctionParams = function(node) {\n    this.expect(types$1.parenL);\n    node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n  };\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$8.parseClass = function(node, isStatement) {\n    this.next();\n\n    // ecma-262 14.6 Class Definitions\n    // A class definition is always strict mode code.\n    var oldStrict = this.strict;\n    this.strict = true;\n\n    this.parseClassId(node, isStatement);\n    this.parseClassSuper(node);\n    var privateNameMap = this.enterClassBody();\n    var classBody = this.startNode();\n    var hadConstructor = false;\n    classBody.body = [];\n    this.expect(types$1.braceL);\n    while (this.type !== types$1.braceR) {\n      var element = this.parseClassElement(node.superClass !== null);\n      if (element) {\n        classBody.body.push(element);\n        if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n          if (hadConstructor) { this.raiseRecoverable(element.start, \"Duplicate constructor in the same class\"); }\n          hadConstructor = true;\n        } else if (element.key && element.key.type === \"PrivateIdentifier\" && isPrivateNameConflicted(privateNameMap, element)) {\n          this.raiseRecoverable(element.key.start, (\"Identifier '#\" + (element.key.name) + \"' has already been declared\"));\n        }\n      }\n    }\n    this.strict = oldStrict;\n    this.next();\n    node.body = this.finishNode(classBody, \"ClassBody\");\n    this.exitClassBody();\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n  };\n\n  pp$8.parseClassElement = function(constructorAllowsSuper) {\n    if (this.eat(types$1.semi)) { return null }\n\n    var ecmaVersion = this.options.ecmaVersion;\n    var node = this.startNode();\n    var keyName = \"\";\n    var isGenerator = false;\n    var isAsync = false;\n    var kind = \"method\";\n    var isStatic = false;\n\n    if (this.eatContextual(\"static\")) {\n      // Parse static init block\n      if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {\n        this.parseClassStaticBlock(node);\n        return node\n      }\n      if (this.isClassElementNameStart() || this.type === types$1.star) {\n        isStatic = true;\n      } else {\n        keyName = \"static\";\n      }\n    }\n    node.static = isStatic;\n    if (!keyName && ecmaVersion >= 8 && this.eatContextual(\"async\")) {\n      if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {\n        isAsync = true;\n      } else {\n        keyName = \"async\";\n      }\n    }\n    if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {\n      isGenerator = true;\n    }\n    if (!keyName && !isAsync && !isGenerator) {\n      var lastValue = this.value;\n      if (this.eatContextual(\"get\") || this.eatContextual(\"set\")) {\n        if (this.isClassElementNameStart()) {\n          kind = lastValue;\n        } else {\n          keyName = lastValue;\n        }\n      }\n    }\n\n    // Parse element name\n    if (keyName) {\n      // 'async', 'get', 'set', or 'static' were not a keyword contextually.\n      // The last token is any of those. Make it the element name.\n      node.computed = false;\n      node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);\n      node.key.name = keyName;\n      this.finishNode(node.key, \"Identifier\");\n    } else {\n      this.parseClassElementName(node);\n    }\n\n    // Parse element value\n    if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== \"method\" || isGenerator || isAsync) {\n      var isConstructor = !node.static && checkKeyName(node, \"constructor\");\n      var allowsDirectSuper = isConstructor && constructorAllowsSuper;\n      // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.\n      if (isConstructor && kind !== \"method\") { this.raise(node.key.start, \"Constructor can't have get/set modifier\"); }\n      node.kind = isConstructor ? \"constructor\" : kind;\n      this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);\n    } else {\n      this.parseClassField(node);\n    }\n\n    return node\n  };\n\n  pp$8.isClassElementNameStart = function() {\n    return (\n      this.type === types$1.name ||\n      this.type === types$1.privateId ||\n      this.type === types$1.num ||\n      this.type === types$1.string ||\n      this.type === types$1.bracketL ||\n      this.type.keyword\n    )\n  };\n\n  pp$8.parseClassElementName = function(element) {\n    if (this.type === types$1.privateId) {\n      if (this.value === \"constructor\") {\n        this.raise(this.start, \"Classes can't have an element named '#constructor'\");\n      }\n      element.computed = false;\n      element.key = this.parsePrivateIdent();\n    } else {\n      this.parsePropertyName(element);\n    }\n  };\n\n  pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n    // Check key and flags\n    var key = method.key;\n    if (method.kind === \"constructor\") {\n      if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n      if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n    } else if (method.static && checkKeyName(method, \"prototype\")) {\n      this.raise(key.start, \"Classes may not have a static property named prototype\");\n    }\n\n    // Parse value\n    var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n\n    // Check value\n    if (method.kind === \"get\" && value.params.length !== 0)\n      { this.raiseRecoverable(value.start, \"getter should have no params\"); }\n    if (method.kind === \"set\" && value.params.length !== 1)\n      { this.raiseRecoverable(value.start, \"setter should have exactly one param\"); }\n    if (method.kind === \"set\" && value.params[0].type === \"RestElement\")\n      { this.raiseRecoverable(value.params[0].start, \"Setter cannot use rest params\"); }\n\n    return this.finishNode(method, \"MethodDefinition\")\n  };\n\n  pp$8.parseClassField = function(field) {\n    if (checkKeyName(field, \"constructor\")) {\n      this.raise(field.key.start, \"Classes can't have a field named 'constructor'\");\n    } else if (field.static && checkKeyName(field, \"prototype\")) {\n      this.raise(field.key.start, \"Classes can't have a static field named 'prototype'\");\n    }\n\n    if (this.eat(types$1.eq)) {\n      // To raise SyntaxError if 'arguments' exists in the initializer.\n      var scope = this.currentThisScope();\n      var inClassFieldInit = scope.inClassFieldInit;\n      scope.inClassFieldInit = true;\n      field.value = this.parseMaybeAssign();\n      scope.inClassFieldInit = inClassFieldInit;\n    } else {\n      field.value = null;\n    }\n    this.semicolon();\n\n    return this.finishNode(field, \"PropertyDefinition\")\n  };\n\n  pp$8.parseClassStaticBlock = function(node) {\n    node.body = [];\n\n    var oldLabels = this.labels;\n    this.labels = [];\n    this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);\n    while (this.type !== types$1.braceR) {\n      var stmt = this.parseStatement(null);\n      node.body.push(stmt);\n    }\n    this.next();\n    this.exitScope();\n    this.labels = oldLabels;\n\n    return this.finishNode(node, \"StaticBlock\")\n  };\n\n  pp$8.parseClassId = function(node, isStatement) {\n    if (this.type === types$1.name) {\n      node.id = this.parseIdent();\n      if (isStatement)\n        { this.checkLValSimple(node.id, BIND_LEXICAL, false); }\n    } else {\n      if (isStatement === true)\n        { this.unexpected(); }\n      node.id = null;\n    }\n  };\n\n  pp$8.parseClassSuper = function(node) {\n    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;\n  };\n\n  pp$8.enterClassBody = function() {\n    var element = {declared: Object.create(null), used: []};\n    this.privateNameStack.push(element);\n    return element.declared\n  };\n\n  pp$8.exitClassBody = function() {\n    var ref = this.privateNameStack.pop();\n    var declared = ref.declared;\n    var used = ref.used;\n    if (!this.options.checkPrivateFields) { return }\n    var len = this.privateNameStack.length;\n    var parent = len === 0 ? null : this.privateNameStack[len - 1];\n    for (var i = 0; i < used.length; ++i) {\n      var id = used[i];\n      if (!hasOwn(declared, id.name)) {\n        if (parent) {\n          parent.used.push(id);\n        } else {\n          this.raiseRecoverable(id.start, (\"Private field '#\" + (id.name) + \"' must be declared in an enclosing class\"));\n        }\n      }\n    }\n  };\n\n  function isPrivateNameConflicted(privateNameMap, element) {\n    var name = element.key.name;\n    var curr = privateNameMap[name];\n\n    var next = \"true\";\n    if (element.type === \"MethodDefinition\" && (element.kind === \"get\" || element.kind === \"set\")) {\n      next = (element.static ? \"s\" : \"i\") + element.kind;\n    }\n\n    // `class { get #a(){}; static set #a(_){} }` is also conflict.\n    if (\n      curr === \"iget\" && next === \"iset\" ||\n      curr === \"iset\" && next === \"iget\" ||\n      curr === \"sget\" && next === \"sset\" ||\n      curr === \"sset\" && next === \"sget\"\n    ) {\n      privateNameMap[name] = \"true\";\n      return false\n    } else if (!curr) {\n      privateNameMap[name] = next;\n      return false\n    } else {\n      return true\n    }\n  }\n\n  function checkKeyName(node, name) {\n    var computed = node.computed;\n    var key = node.key;\n    return !computed && (\n      key.type === \"Identifier\" && key.name === name ||\n      key.type === \"Literal\" && key.value === name\n    )\n  }\n\n  // Parses module export declaration.\n\n  pp$8.parseExportAllDeclaration = function(node, exports) {\n    if (this.options.ecmaVersion >= 11) {\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseModuleExportName();\n        this.checkExport(exports, node.exported, this.lastTokStart);\n      } else {\n        node.exported = null;\n      }\n    }\n    this.expectContextual(\"from\");\n    if (this.type !== types$1.string) { this.unexpected(); }\n    node.source = this.parseExprAtom();\n    if (this.options.ecmaVersion >= 16)\n      { node.attributes = this.parseWithClause(); }\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  };\n\n  pp$8.parseExport = function(node, exports) {\n    this.next();\n    // export * from '...'\n    if (this.eat(types$1.star)) {\n      return this.parseExportAllDeclaration(node, exports)\n    }\n    if (this.eat(types$1._default)) { // export default ...\n      this.checkExport(exports, \"default\", this.lastTokStart);\n      node.declaration = this.parseExportDefaultDeclaration();\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\n    }\n    // export var|const|let|function|class ...\n    if (this.shouldParseExportStatement()) {\n      node.declaration = this.parseExportDeclaration(node);\n      if (node.declaration.type === \"VariableDeclaration\")\n        { this.checkVariableExport(exports, node.declaration.declarations); }\n      else\n        { this.checkExport(exports, node.declaration.id, node.declaration.id.start); }\n      node.specifiers = [];\n      node.source = null;\n    } else { // export { x, y as z } [from '...']\n      node.declaration = null;\n      node.specifiers = this.parseExportSpecifiers(exports);\n      if (this.eatContextual(\"from\")) {\n        if (this.type !== types$1.string) { this.unexpected(); }\n        node.source = this.parseExprAtom();\n        if (this.options.ecmaVersion >= 16)\n          { node.attributes = this.parseWithClause(); }\n      } else {\n        for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n          // check for keywords used as local names\n          var spec = list[i];\n\n          this.checkUnreserved(spec.local);\n          // check if export is defined\n          this.checkLocalExport(spec.local);\n\n          if (spec.local.type === \"Literal\") {\n            this.raise(spec.local.start, \"A string literal cannot be used as an exported binding without `from`.\");\n          }\n        }\n\n        node.source = null;\n      }\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\")\n  };\n\n  pp$8.parseExportDeclaration = function(node) {\n    return this.parseStatement(null)\n  };\n\n  pp$8.parseExportDefaultDeclaration = function() {\n    var isAsync;\n    if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      return this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync)\n    } else if (this.type === types$1._class) {\n      var cNode = this.startNode();\n      return this.parseClass(cNode, \"nullableID\")\n    } else {\n      var declaration = this.parseMaybeAssign();\n      this.semicolon();\n      return declaration\n    }\n  };\n\n  pp$8.checkExport = function(exports, name, pos) {\n    if (!exports) { return }\n    if (typeof name !== \"string\")\n      { name = name.type === \"Identifier\" ? name.name : name.value; }\n    if (hasOwn(exports, name))\n      { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n    exports[name] = true;\n  };\n\n  pp$8.checkPatternExport = function(exports, pat) {\n    var type = pat.type;\n    if (type === \"Identifier\")\n      { this.checkExport(exports, pat, pat.start); }\n    else if (type === \"ObjectPattern\")\n      { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n        {\n          var prop = list[i];\n\n          this.checkPatternExport(exports, prop);\n        } }\n    else if (type === \"ArrayPattern\")\n      { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n        var elt = list$1[i$1];\n\n          if (elt) { this.checkPatternExport(exports, elt); }\n      } }\n    else if (type === \"Property\")\n      { this.checkPatternExport(exports, pat.value); }\n    else if (type === \"AssignmentPattern\")\n      { this.checkPatternExport(exports, pat.left); }\n    else if (type === \"RestElement\")\n      { this.checkPatternExport(exports, pat.argument); }\n  };\n\n  pp$8.checkVariableExport = function(exports, decls) {\n    if (!exports) { return }\n    for (var i = 0, list = decls; i < list.length; i += 1)\n      {\n      var decl = list[i];\n\n      this.checkPatternExport(exports, decl.id);\n    }\n  };\n\n  pp$8.shouldParseExportStatement = function() {\n    return this.type.keyword === \"var\" ||\n      this.type.keyword === \"const\" ||\n      this.type.keyword === \"class\" ||\n      this.type.keyword === \"function\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n  };\n\n  // Parses a comma-separated list of module exports.\n\n  pp$8.parseExportSpecifier = function(exports) {\n    var node = this.startNode();\n    node.local = this.parseModuleExportName();\n\n    node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local;\n    this.checkExport(\n      exports,\n      node.exported,\n      node.exported.start\n    );\n\n    return this.finishNode(node, \"ExportSpecifier\")\n  };\n\n  pp$8.parseExportSpecifiers = function(exports) {\n    var nodes = [], first = true;\n    // export { x, y as z } [from '...']\n    this.expect(types$1.braceL);\n    while (!this.eat(types$1.braceR)) {\n      if (!first) {\n        this.expect(types$1.comma);\n        if (this.afterTrailingComma(types$1.braceR)) { break }\n      } else { first = false; }\n\n      nodes.push(this.parseExportSpecifier(exports));\n    }\n    return nodes\n  };\n\n  // Parses import declaration.\n\n  pp$8.parseImport = function(node) {\n    this.next();\n\n    // import '...'\n    if (this.type === types$1.string) {\n      node.specifiers = empty$1;\n      node.source = this.parseExprAtom();\n    } else {\n      node.specifiers = this.parseImportSpecifiers();\n      this.expectContextual(\"from\");\n      node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();\n    }\n    if (this.options.ecmaVersion >= 16)\n      { node.attributes = this.parseWithClause(); }\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\")\n  };\n\n  // Parses a comma-separated list of module imports.\n\n  pp$8.parseImportSpecifier = function() {\n    var node = this.startNode();\n    node.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      node.local = this.parseIdent();\n    } else {\n      this.checkUnreserved(node.imported);\n      node.local = node.imported;\n    }\n    this.checkLValSimple(node.local, BIND_LEXICAL);\n\n    return this.finishNode(node, \"ImportSpecifier\")\n  };\n\n  pp$8.parseImportDefaultSpecifier = function() {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLValSimple(node.local, BIND_LEXICAL);\n    return this.finishNode(node, \"ImportDefaultSpecifier\")\n  };\n\n  pp$8.parseImportNamespaceSpecifier = function() {\n    var node = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node.local = this.parseIdent();\n    this.checkLValSimple(node.local, BIND_LEXICAL);\n    return this.finishNode(node, \"ImportNamespaceSpecifier\")\n  };\n\n  pp$8.parseImportSpecifiers = function() {\n    var nodes = [], first = true;\n    if (this.type === types$1.name) {\n      nodes.push(this.parseImportDefaultSpecifier());\n      if (!this.eat(types$1.comma)) { return nodes }\n    }\n    if (this.type === types$1.star) {\n      nodes.push(this.parseImportNamespaceSpecifier());\n      return nodes\n    }\n    this.expect(types$1.braceL);\n    while (!this.eat(types$1.braceR)) {\n      if (!first) {\n        this.expect(types$1.comma);\n        if (this.afterTrailingComma(types$1.braceR)) { break }\n      } else { first = false; }\n\n      nodes.push(this.parseImportSpecifier());\n    }\n    return nodes\n  };\n\n  pp$8.parseWithClause = function() {\n    var nodes = [];\n    if (!this.eat(types$1._with)) {\n      return nodes\n    }\n    this.expect(types$1.braceL);\n    var attributeKeys = {};\n    var first = true;\n    while (!this.eat(types$1.braceR)) {\n      if (!first) {\n        this.expect(types$1.comma);\n        if (this.afterTrailingComma(types$1.braceR)) { break }\n      } else { first = false; }\n\n      var attr = this.parseImportAttribute();\n      var keyName = attr.key.type === \"Identifier\" ? attr.key.name : attr.key.value;\n      if (hasOwn(attributeKeys, keyName))\n        { this.raiseRecoverable(attr.key.start, \"Duplicate attribute key '\" + keyName + \"'\"); }\n      attributeKeys[keyName] = true;\n      nodes.push(attr);\n    }\n    return nodes\n  };\n\n  pp$8.parseImportAttribute = function() {\n    var node = this.startNode();\n    node.key = this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\");\n    this.expect(types$1.colon);\n    if (this.type !== types$1.string) {\n      this.unexpected();\n    }\n    node.value = this.parseExprAtom();\n    return this.finishNode(node, \"ImportAttribute\")\n  };\n\n  pp$8.parseModuleExportName = function() {\n    if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {\n      var stringLiteral = this.parseLiteral(this.value);\n      if (loneSurrogate.test(stringLiteral.value)) {\n        this.raise(stringLiteral.start, \"An export name cannot include a lone surrogate.\");\n      }\n      return stringLiteral\n    }\n    return this.parseIdent(true)\n  };\n\n  // Set `ExpressionStatement#directive` property for directive prologues.\n  pp$8.adaptDirectivePrologue = function(statements) {\n    for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n      statements[i].directive = statements[i].expression.raw.slice(1, -1);\n    }\n  };\n  pp$8.isDirectiveCandidate = function(statement) {\n    return (\n      this.options.ecmaVersion >= 5 &&\n      statement.type === \"ExpressionStatement\" &&\n      statement.expression.type === \"Literal\" &&\n      typeof statement.expression.value === \"string\" &&\n      // Reject parenthesized strings.\n      (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n    )\n  };\n\n  var pp$7 = Parser.prototype;\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 6 && node) {\n      switch (node.type) {\n      case \"Identifier\":\n        if (this.inAsync && node.name === \"await\")\n          { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\n        break\n\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n        for (var i = 0, list = node.properties; i < list.length; i += 1) {\n          var prop = list[i];\n\n        this.toAssignable(prop, isBinding);\n          // Early error:\n          //   AssignmentRestProperty[Yield, Await] :\n          //     `...` DestructuringAssignmentTarget[Yield, Await]\n          //\n          //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n          if (\n            prop.type === \"RestElement\" &&\n            (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n          ) {\n            this.raise(prop.argument.start, \"Unexpected token\");\n          }\n        }\n        break\n\n      case \"Property\":\n        // AssignmentProperty has type === \"Property\"\n        if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n        this.toAssignable(node.value, isBinding);\n        break\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n        this.toAssignableList(node.elements, isBinding);\n        break\n\n      case \"SpreadElement\":\n        node.type = \"RestElement\";\n        this.toAssignable(node.argument, isBinding);\n        if (node.argument.type === \"AssignmentPattern\")\n          { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n        break\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isBinding);\n        break\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n        break\n\n      case \"ChainExpression\":\n        this.raiseRecoverable(node.start, \"Optional chaining cannot appear in left-hand side\");\n        break\n\n      case \"MemberExpression\":\n        if (!isBinding) { break }\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\");\n      }\n    } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n    return node\n  };\n\n  // Convert list of expression atoms to binding list.\n\n  pp$7.toAssignableList = function(exprList, isBinding) {\n    var end = exprList.length;\n    for (var i = 0; i < end; i++) {\n      var elt = exprList[i];\n      if (elt) { this.toAssignable(elt, isBinding); }\n    }\n    if (end) {\n      var last = exprList[end - 1];\n      if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n        { this.unexpected(last.argument.start); }\n    }\n    return exprList\n  };\n\n  // Parses spread element.\n\n  pp$7.parseSpread = function(refDestructuringErrors) {\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    return this.finishNode(node, \"SpreadElement\")\n  };\n\n  pp$7.parseRestBinding = function() {\n    var node = this.startNode();\n    this.next();\n\n    // RestElement inside of a function parameter must be an identifier\n    if (this.options.ecmaVersion === 6 && this.type !== types$1.name)\n      { this.unexpected(); }\n\n    node.argument = this.parseBindingAtom();\n\n    return this.finishNode(node, \"RestElement\")\n  };\n\n  // Parses lvalue (assignable) atom.\n\n  pp$7.parseBindingAtom = function() {\n    if (this.options.ecmaVersion >= 6) {\n      switch (this.type) {\n      case types$1.bracketL:\n        var node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(types$1.bracketR, true, true);\n        return this.finishNode(node, \"ArrayPattern\")\n\n      case types$1.braceL:\n        return this.parseObj(true)\n      }\n    }\n    return this.parseIdent()\n  };\n\n  pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {\n    var elts = [], first = true;\n    while (!this.eat(close)) {\n      if (first) { first = false; }\n      else { this.expect(types$1.comma); }\n      if (allowEmpty && this.type === types$1.comma) {\n        elts.push(null);\n      } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n        break\n      } else if (this.type === types$1.ellipsis) {\n        var rest = this.parseRestBinding();\n        this.parseBindingListItem(rest);\n        elts.push(rest);\n        if (this.type === types$1.comma) { this.raiseRecoverable(this.start, \"Comma is not permitted after the rest element\"); }\n        this.expect(close);\n        break\n      } else {\n        elts.push(this.parseAssignableListItem(allowModifiers));\n      }\n    }\n    return elts\n  };\n\n  pp$7.parseAssignableListItem = function(allowModifiers) {\n    var elem = this.parseMaybeDefault(this.start, this.startLoc);\n    this.parseBindingListItem(elem);\n    return elem\n  };\n\n  pp$7.parseBindingListItem = function(param) {\n    return param\n  };\n\n  // Parses assignment pattern around given atom if possible.\n\n  pp$7.parseMaybeDefault = function(startPos, startLoc, left) {\n    left = left || this.parseBindingAtom();\n    if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) { return left }\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\")\n  };\n\n  // The following three functions all verify that a node is an lvalue —\n  // something that can be bound, or assigned to. In order to do so, they perform\n  // a variety of checks:\n  //\n  // - Check that none of the bound/assigned-to identifiers are reserved words.\n  // - Record name declarations for bindings in the appropriate scope.\n  // - Check duplicate argument names, if checkClashes is set.\n  //\n  // If a complex binding pattern is encountered (e.g., object and array\n  // destructuring), the entire pattern is recursively checked.\n  //\n  // There are three versions of checkLVal*() appropriate for different\n  // circumstances:\n  //\n  // - checkLValSimple() shall be used if the syntactic construct supports\n  //   nothing other than identifiers and member expressions. Parenthesized\n  //   expressions are also correctly handled. This is generally appropriate for\n  //   constructs for which the spec says\n  //\n  //   > It is a Syntax Error if AssignmentTargetType of [the production] is not\n  //   > simple.\n  //\n  //   It is also appropriate for checking if an identifier is valid and not\n  //   defined elsewhere, like import declarations or function/class identifiers.\n  //\n  //   Examples where this is used include:\n  //     a += …;\n  //     import a from '…';\n  //   where a is the node to be checked.\n  //\n  // - checkLValPattern() shall be used if the syntactic construct supports\n  //   anything checkLValSimple() supports, as well as object and array\n  //   destructuring patterns. This is generally appropriate for constructs for\n  //   which the spec says\n  //\n  //   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor\n  //   > an ArrayLiteral and AssignmentTargetType of [the production] is not\n  //   > simple.\n  //\n  //   Examples where this is used include:\n  //     (a = …);\n  //     const a = …;\n  //     try { … } catch (a) { … }\n  //   where a is the node to be checked.\n  //\n  // - checkLValInnerPattern() shall be used if the syntactic construct supports\n  //   anything checkLValPattern() supports, as well as default assignment\n  //   patterns, rest elements, and other constructs that may appear within an\n  //   object or array destructuring pattern.\n  //\n  //   As a special case, function parameters also use checkLValInnerPattern(),\n  //   as they also support defaults and rest constructs.\n  //\n  // These functions deliberately support both assignment and binding constructs,\n  // as the logic for both is exceedingly similar. If the node is the target of\n  // an assignment, then bindingType should be set to BIND_NONE. Otherwise, it\n  // should be set to the appropriate BIND_* constant, like BIND_VAR or\n  // BIND_LEXICAL.\n  //\n  // If the function is called with a non-BIND_NONE bindingType, then\n  // additionally a checkClashes object may be specified to allow checking for\n  // duplicate argument names. checkClashes is ignored if the provided construct\n  // is an assignment (i.e., bindingType is BIND_NONE).\n\n  pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {\n    if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n    var isBind = bindingType !== BIND_NONE;\n\n    switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n        { this.raiseRecoverable(expr.start, (isBind ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n      if (isBind) {\n        if (bindingType === BIND_LEXICAL && expr.name === \"let\")\n          { this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); }\n        if (checkClashes) {\n          if (hasOwn(checkClashes, expr.name))\n            { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n          checkClashes[expr.name] = true;\n        }\n        if (bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\n      }\n      break\n\n    case \"ChainExpression\":\n      this.raiseRecoverable(expr.start, \"Optional chaining cannot appear in left-hand side\");\n      break\n\n    case \"MemberExpression\":\n      if (isBind) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n      break\n\n    case \"ParenthesizedExpression\":\n      if (isBind) { this.raiseRecoverable(expr.start, \"Binding parenthesized expression\"); }\n      return this.checkLValSimple(expr.expression, bindingType, checkClashes)\n\n    default:\n      this.raise(expr.start, (isBind ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n    }\n  };\n\n  pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {\n    if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n    switch (expr.type) {\n    case \"ObjectPattern\":\n      for (var i = 0, list = expr.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this.checkLValInnerPattern(prop, bindingType, checkClashes);\n      }\n      break\n\n    case \"ArrayPattern\":\n      for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n        var elem = list$1[i$1];\n\n      if (elem) { this.checkLValInnerPattern(elem, bindingType, checkClashes); }\n      }\n      break\n\n    default:\n      this.checkLValSimple(expr, bindingType, checkClashes);\n    }\n  };\n\n  pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {\n    if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n    switch (expr.type) {\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      this.checkLValInnerPattern(expr.value, bindingType, checkClashes);\n      break\n\n    case \"AssignmentPattern\":\n      this.checkLValPattern(expr.left, bindingType, checkClashes);\n      break\n\n    case \"RestElement\":\n      this.checkLValPattern(expr.argument, bindingType, checkClashes);\n      break\n\n    default:\n      this.checkLValPattern(expr, bindingType, checkClashes);\n    }\n  };\n\n  // The algorithm used to determine whether a regexp can appear at a\n  // given point in the program is loosely based on sweet.js' approach.\n  // See https://github.com/mozilla/sweet.js/wiki/design\n\n\n  var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n    this.generator = !!generator;\n  };\n\n  var types = {\n    b_stat: new TokContext(\"{\", false),\n    b_expr: new TokContext(\"{\", true),\n    b_tmpl: new TokContext(\"${\", false),\n    p_stat: new TokContext(\"(\", false),\n    p_expr: new TokContext(\"(\", true),\n    q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n    f_stat: new TokContext(\"function\", false),\n    f_expr: new TokContext(\"function\", true),\n    f_expr_gen: new TokContext(\"function\", true, false, null, true),\n    f_gen: new TokContext(\"function\", false, false, null, true)\n  };\n\n  var pp$6 = Parser.prototype;\n\n  pp$6.initialContext = function() {\n    return [types.b_stat]\n  };\n\n  pp$6.curContext = function() {\n    return this.context[this.context.length - 1]\n  };\n\n  pp$6.braceIsBlock = function(prevType) {\n    var parent = this.curContext();\n    if (parent === types.f_expr || parent === types.f_stat)\n      { return true }\n    if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr))\n      { return !parent.isExpr }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed)\n      { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n    if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow)\n      { return true }\n    if (prevType === types$1.braceL)\n      { return parent === types.b_stat }\n    if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name)\n      { return false }\n    return !this.exprAllowed\n  };\n\n  pp$6.inGeneratorContext = function() {\n    for (var i = this.context.length - 1; i >= 1; i--) {\n      var context = this.context[i];\n      if (context.token === \"function\")\n        { return context.generator }\n    }\n    return false\n  };\n\n  pp$6.updateContext = function(prevType) {\n    var update, type = this.type;\n    if (type.keyword && prevType === types$1.dot)\n      { this.exprAllowed = false; }\n    else if (update = type.updateContext)\n      { update.call(this, prevType); }\n    else\n      { this.exprAllowed = type.beforeExpr; }\n  };\n\n  // Used to handle edge cases when token context could not be inferred correctly during tokenization phase\n\n  pp$6.overrideContext = function(tokenCtx) {\n    if (this.curContext() !== tokenCtx) {\n      this.context[this.context.length - 1] = tokenCtx;\n    }\n  };\n\n  // Token-specific context update code\n\n  types$1.parenR.updateContext = types$1.braceR.updateContext = function() {\n    if (this.context.length === 1) {\n      this.exprAllowed = true;\n      return\n    }\n    var out = this.context.pop();\n    if (out === types.b_stat && this.curContext().token === \"function\") {\n      out = this.context.pop();\n    }\n    this.exprAllowed = !out.isExpr;\n  };\n\n  types$1.braceL.updateContext = function(prevType) {\n    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n    this.exprAllowed = true;\n  };\n\n  types$1.dollarBraceL.updateContext = function() {\n    this.context.push(types.b_tmpl);\n    this.exprAllowed = true;\n  };\n\n  types$1.parenL.updateContext = function(prevType) {\n    var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;\n    this.context.push(statementParens ? types.p_stat : types.p_expr);\n    this.exprAllowed = true;\n  };\n\n  types$1.incDec.updateContext = function() {\n    // tokExprAllowed stays unchanged\n  };\n\n  types$1._function.updateContext = types$1._class.updateContext = function(prevType) {\n    if (prevType.beforeExpr && prevType !== types$1._else &&\n        !(prevType === types$1.semi && this.curContext() !== types.p_stat) &&\n        !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\n        !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat))\n      { this.context.push(types.f_expr); }\n    else\n      { this.context.push(types.f_stat); }\n    this.exprAllowed = false;\n  };\n\n  types$1.colon.updateContext = function() {\n    if (this.curContext().token === \"function\") { this.context.pop(); }\n    this.exprAllowed = true;\n  };\n\n  types$1.backQuote.updateContext = function() {\n    if (this.curContext() === types.q_tmpl)\n      { this.context.pop(); }\n    else\n      { this.context.push(types.q_tmpl); }\n    this.exprAllowed = false;\n  };\n\n  types$1.star.updateContext = function(prevType) {\n    if (prevType === types$1._function) {\n      var index = this.context.length - 1;\n      if (this.context[index] === types.f_expr)\n        { this.context[index] = types.f_expr_gen; }\n      else\n        { this.context[index] = types.f_gen; }\n    }\n    this.exprAllowed = true;\n  };\n\n  types$1.name.updateContext = function(prevType) {\n    var allowed = false;\n    if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {\n      if (this.value === \"of\" && !this.exprAllowed ||\n          this.value === \"yield\" && this.inGeneratorContext())\n        { allowed = true; }\n    }\n    this.exprAllowed = allowed;\n  };\n\n  // A recursive descent parser operates by defining functions for all\n  // syntactic elements, and recursively calling those, each function\n  // advancing the input stream and returning an AST node. Precedence\n  // of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n  // instead of `(!x)[1]` is handled by the fact that the parser\n  // function that parses unary prefix operators is called first, and\n  // in turn calls the function that parses `[]` subscripts — that\n  // way, it'll receive the node for `x[1]` already parsed, and wraps\n  // *that* in the unary operator node.\n  //\n  // Acorn uses an [operator precedence parser][opp] to handle binary\n  // operator precedence, because it is much more compact than using\n  // the technique outlined above, which uses different, nesting\n  // functions to specify precedence, for all of the ten binary\n  // precedence levels that JavaScript defines.\n  //\n  // [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\n  var pp$5 = Parser.prototype;\n\n  // Check if property name clashes with already added.\n  // Object/class getters and setters are not allowed to clash —\n  // either with each other or with an init property — and in\n  // strict mode, init properties are also not allowed to be repeated.\n\n  pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n      { return }\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n      { return }\n    var key = prop.key;\n    var name;\n    switch (key.type) {\n    case \"Identifier\": name = key.name; break\n    case \"Literal\": name = String(key.value); break\n    default: return\n    }\n    var kind = prop.kind;\n    if (this.options.ecmaVersion >= 6) {\n      if (name === \"__proto__\" && kind === \"init\") {\n        if (propHash.proto) {\n          if (refDestructuringErrors) {\n            if (refDestructuringErrors.doubleProto < 0) {\n              refDestructuringErrors.doubleProto = key.start;\n            }\n          } else {\n            this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n          }\n        }\n        propHash.proto = true;\n      }\n      return\n    }\n    name = \"$\" + name;\n    var other = propHash[name];\n    if (other) {\n      var redefinition;\n      if (kind === \"init\") {\n        redefinition = this.strict && other.init || other.get || other.set;\n      } else {\n        redefinition = other.init || other[kind];\n      }\n      if (redefinition)\n        { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n    } else {\n      other = propHash[name] = {\n        init: false,\n        get: false,\n        set: false\n      };\n    }\n    other[kind] = true;\n  };\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function(s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression. The optional arguments are used to\n  // forbid the `in` operator (in for loops initalization expressions)\n  // and provide reference for storing '=' operator inside shorthand\n  // property assignment in contexts where both object expression\n  // and object pattern might appear (so it's possible to raise\n  // delayed syntax error at correct position).\n\n  pp$5.parseExpression = function(forInit, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);\n    if (this.type === types$1.comma) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(types$1.comma)) { node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors)); }\n      return this.finishNode(node, \"SequenceExpression\")\n    }\n    return expr\n  };\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {\n    if (this.isContextual(\"yield\")) {\n      if (this.inGenerator) { return this.parseYield(forInit) }\n      // The tokenizer will assume an expression is allowed after\n      // `yield`, but this isn't that kind of yield\n      else { this.exprAllowed = false; }\n    }\n\n    var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;\n    if (refDestructuringErrors) {\n      oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n      oldTrailingComma = refDestructuringErrors.trailingComma;\n      oldDoubleProto = refDestructuringErrors.doubleProto;\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n    } else {\n      refDestructuringErrors = new DestructuringErrors;\n      ownDestructuringErrors = true;\n    }\n\n    var startPos = this.start, startLoc = this.startLoc;\n    if (this.type === types$1.parenL || this.type === types$1.name) {\n      this.potentialArrowAt = this.start;\n      this.potentialArrowInForAwait = forInit === \"await\";\n    }\n    var left = this.parseMaybeConditional(forInit, refDestructuringErrors);\n    if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n    if (this.type.isAssign) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.value;\n      if (this.type === types$1.eq)\n        { left = this.toAssignable(left, false, refDestructuringErrors); }\n      if (!ownDestructuringErrors) {\n        refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n      }\n      if (refDestructuringErrors.shorthandAssign >= left.start)\n        { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly\n      if (this.type === types$1.eq)\n        { this.checkLValPattern(left); }\n      else\n        { this.checkLValSimple(left); }\n      node.left = left;\n      this.next();\n      node.right = this.parseMaybeAssign(forInit);\n      if (oldDoubleProto > -1) { refDestructuringErrors.doubleProto = oldDoubleProto; }\n      return this.finishNode(node, \"AssignmentExpression\")\n    } else {\n      if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n    }\n    if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n    if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n    return left\n  };\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprOps(forInit, refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    if (this.eat(types$1.question)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(types$1.colon);\n      node.alternate = this.parseMaybeAssign(forInit);\n      return this.finishNode(node, \"ConditionalExpression\")\n    }\n    return expr\n  };\n\n  // Start the precedence parser.\n\n  pp$5.parseExprOps = function(forInit, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit)\n  };\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {\n    var prec = this.type.binop;\n    if (prec != null && (!forInit || this.type !== types$1._in)) {\n      if (prec > minPrec) {\n        var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;\n        var coalesce = this.type === types$1.coalesce;\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = types$1.logicalAND.binop;\n        }\n        var op = this.value;\n        this.next();\n        var startPos = this.start, startLoc = this.startLoc;\n        var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);\n        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);\n        if ((logical && this.type === types$1.coalesce) || (coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND))) {\n          this.raiseRecoverable(this.start, \"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");\n        }\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit)\n      }\n    }\n    return left\n  };\n\n  pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n    if (right.type === \"PrivateIdentifier\") { this.raise(right.start, \"Private identifier can only be left side of binary expression\"); }\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.operator = op;\n    node.right = right;\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n  };\n\n  // Parse unary operators, both prefix and postfix.\n\n  pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {\n    var startPos = this.start, startLoc = this.startLoc, expr;\n    if (this.isContextual(\"await\") && this.canAwait) {\n      expr = this.parseAwait(forInit);\n      sawUnary = true;\n    } else if (this.type.prefix) {\n      var node = this.startNode(), update = this.type === types$1.incDec;\n      node.operator = this.value;\n      node.prefix = true;\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true, update, forInit);\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      if (update) { this.checkLValSimple(node.argument); }\n      else if (this.strict && node.operator === \"delete\" && isLocalVariableAccess(node.argument))\n        { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n      else if (node.operator === \"delete\" && isPrivateFieldAccess(node.argument))\n        { this.raiseRecoverable(node.start, \"Private fields can not be deleted\"); }\n      else { sawUnary = true; }\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    } else if (!sawUnary && this.type === types$1.privateId) {\n      if ((forInit || this.privateNameStack.length === 0) && this.options.checkPrivateFields) { this.unexpected(); }\n      expr = this.parsePrivateIdent();\n      // only could be private fields in 'in', such as #x in obj\n      if (this.type !== types$1._in) { this.unexpected(); }\n    } else {\n      expr = this.parseExprSubscripts(refDestructuringErrors, forInit);\n      if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n      while (this.type.postfix && !this.canInsertSemicolon()) {\n        var node$1 = this.startNodeAt(startPos, startLoc);\n        node$1.operator = this.value;\n        node$1.prefix = false;\n        node$1.argument = expr;\n        this.checkLValSimple(expr);\n        this.next();\n        expr = this.finishNode(node$1, \"UpdateExpression\");\n      }\n    }\n\n    if (!incDec && this.eat(types$1.starstar)) {\n      if (sawUnary)\n        { this.unexpected(this.lastTokStart); }\n      else\n        { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), \"**\", false) }\n    } else {\n      return expr\n    }\n  };\n\n  function isLocalVariableAccess(node) {\n    return (\n      node.type === \"Identifier\" ||\n      node.type === \"ParenthesizedExpression\" && isLocalVariableAccess(node.expression)\n    )\n  }\n\n  function isPrivateFieldAccess(node) {\n    return (\n      node.type === \"MemberExpression\" && node.property.type === \"PrivateIdentifier\" ||\n      node.type === \"ChainExpression\" && isPrivateFieldAccess(node.expression) ||\n      node.type === \"ParenthesizedExpression\" && isPrivateFieldAccess(node.expression)\n    )\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprAtom(refDestructuringErrors, forInit);\n    if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\")\n      { return expr }\n    var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);\n    if (refDestructuringErrors && result.type === \"MemberExpression\") {\n      if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n      if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n      if (refDestructuringErrors.trailingComma >= result.start) { refDestructuringErrors.trailingComma = -1; }\n    }\n    return result\n  };\n\n  pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {\n    var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n        this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&\n        this.potentialArrowAt === base.start;\n    var optionalChained = false;\n\n    while (true) {\n      var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);\n\n      if (element.optional) { optionalChained = true; }\n      if (element === base || element.type === \"ArrowFunctionExpression\") {\n        if (optionalChained) {\n          var chainNode = this.startNodeAt(startPos, startLoc);\n          chainNode.expression = element;\n          element = this.finishNode(chainNode, \"ChainExpression\");\n        }\n        return element\n      }\n\n      base = element;\n    }\n  };\n\n  pp$5.shouldParseAsyncArrow = function() {\n    return !this.canInsertSemicolon() && this.eat(types$1.arrow)\n  };\n\n  pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit)\n  };\n\n  pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {\n    var optionalSupported = this.options.ecmaVersion >= 11;\n    var optional = optionalSupported && this.eat(types$1.questionDot);\n    if (noCalls && optional) { this.raise(this.lastTokStart, \"Optional chaining cannot appear in the callee of new expressions\"); }\n\n    var computed = this.eat(types$1.bracketL);\n    if (computed || (optional && this.type !== types$1.parenL && this.type !== types$1.backQuote) || this.eat(types$1.dot)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      if (computed) {\n        node.property = this.parseExpression();\n        this.expect(types$1.bracketR);\n      } else if (this.type === types$1.privateId && base.type !== \"Super\") {\n        node.property = this.parsePrivateIdent();\n      } else {\n        node.property = this.parseIdent(this.options.allowReserved !== \"never\");\n      }\n      node.computed = !!computed;\n      if (optionalSupported) {\n        node.optional = optional;\n      }\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.eat(types$1.parenL)) {\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n      this.yieldPos = 0;\n      this.awaitPos = 0;\n      this.awaitIdentPos = 0;\n      var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n      if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) {\n        this.checkPatternErrors(refDestructuringErrors, false);\n        this.checkYieldAwaitInDefaultParams();\n        if (this.awaitIdentPos > 0)\n          { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        this.awaitIdentPos = oldAwaitIdentPos;\n        return this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit)\n      }\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      this.yieldPos = oldYieldPos || this.yieldPos;\n      this.awaitPos = oldAwaitPos || this.awaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n      var node$1 = this.startNodeAt(startPos, startLoc);\n      node$1.callee = base;\n      node$1.arguments = exprList;\n      if (optionalSupported) {\n        node$1.optional = optional;\n      }\n      base = this.finishNode(node$1, \"CallExpression\");\n    } else if (this.type === types$1.backQuote) {\n      if (optional || optionalChained) {\n        this.raise(this.start, \"Optional chaining cannot appear in the tag of tagged template expressions\");\n      }\n      var node$2 = this.startNodeAt(startPos, startLoc);\n      node$2.tag = base;\n      node$2.quasi = this.parseTemplate({isTagged: true});\n      base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n    }\n    return base\n  };\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.type === types$1.slash) { this.readRegexp(); }\n\n    var node, canBeArrow = this.potentialArrowAt === this.start;\n    switch (this.type) {\n    case types$1._super:\n      if (!this.allowSuper)\n        { this.raise(this.start, \"'super' keyword outside a method\"); }\n      node = this.startNode();\n      this.next();\n      if (this.type === types$1.parenL && !this.allowDirectSuper)\n        { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\n      // The `super` keyword can appear at below:\n      // SuperProperty:\n      //     super [ Expression ]\n      //     super . IdentifierName\n      // SuperCall:\n      //     super ( Arguments )\n      if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL)\n        { this.unexpected(); }\n      return this.finishNode(node, \"Super\")\n\n    case types$1._this:\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"ThisExpression\")\n\n    case types$1.name:\n      var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n      var id = this.parseIdent(false);\n      if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types$1._function)) {\n        this.overrideContext(types.f_expr);\n        return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit)\n      }\n      if (canBeArrow && !this.canInsertSemicolon()) {\n        if (this.eat(types$1.arrow))\n          { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit) }\n        if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types$1.name && !containsEsc &&\n            (!this.potentialArrowInForAwait || this.value !== \"of\" || this.containsEsc)) {\n          id = this.parseIdent(false);\n          if (this.canInsertSemicolon() || !this.eat(types$1.arrow))\n            { this.unexpected(); }\n          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit)\n        }\n      }\n      return id\n\n    case types$1.regexp:\n      var value = this.value;\n      node = this.parseLiteral(value.value);\n      node.regex = {pattern: value.pattern, flags: value.flags};\n      return node\n\n    case types$1.num: case types$1.string:\n      return this.parseLiteral(this.value)\n\n    case types$1._null: case types$1._true: case types$1._false:\n      node = this.startNode();\n      node.value = this.type === types$1._null ? null : this.type === types$1._true;\n      node.raw = this.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\")\n\n    case types$1.parenL:\n      var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);\n      if (refDestructuringErrors) {\n        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n          { refDestructuringErrors.parenthesizedAssign = start; }\n        if (refDestructuringErrors.parenthesizedBind < 0)\n          { refDestructuringErrors.parenthesizedBind = start; }\n      }\n      return expr\n\n    case types$1.bracketL:\n      node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);\n      return this.finishNode(node, \"ArrayExpression\")\n\n    case types$1.braceL:\n      this.overrideContext(types.b_expr);\n      return this.parseObj(false, refDestructuringErrors)\n\n    case types$1._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, 0)\n\n    case types$1._class:\n      return this.parseClass(this.startNode(), false)\n\n    case types$1._new:\n      return this.parseNew()\n\n    case types$1.backQuote:\n      return this.parseTemplate()\n\n    case types$1._import:\n      if (this.options.ecmaVersion >= 11) {\n        return this.parseExprImport(forNew)\n      } else {\n        return this.unexpected()\n      }\n\n    default:\n      return this.parseExprAtomDefault()\n    }\n  };\n\n  pp$5.parseExprAtomDefault = function() {\n    this.unexpected();\n  };\n\n  pp$5.parseExprImport = function(forNew) {\n    var node = this.startNode();\n\n    // Consume `import` as an identifier for `import.meta`.\n    // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword import\"); }\n    this.next();\n\n    if (this.type === types$1.parenL && !forNew) {\n      return this.parseDynamicImport(node)\n    } else if (this.type === types$1.dot) {\n      var meta = this.startNodeAt(node.start, node.loc && node.loc.start);\n      meta.name = \"import\";\n      node.meta = this.finishNode(meta, \"Identifier\");\n      return this.parseImportMeta(node)\n    } else {\n      this.unexpected();\n    }\n  };\n\n  pp$5.parseDynamicImport = function(node) {\n    this.next(); // skip `(`\n\n    // Parse node.source.\n    node.source = this.parseMaybeAssign();\n\n    if (this.options.ecmaVersion >= 16) {\n      if (!this.eat(types$1.parenR)) {\n        this.expect(types$1.comma);\n        if (!this.afterTrailingComma(types$1.parenR)) {\n          node.options = this.parseMaybeAssign();\n          if (!this.eat(types$1.parenR)) {\n            this.expect(types$1.comma);\n            if (!this.afterTrailingComma(types$1.parenR)) {\n              this.unexpected();\n            }\n          }\n        } else {\n          node.options = null;\n        }\n      } else {\n        node.options = null;\n      }\n    } else {\n      // Verify ending.\n      if (!this.eat(types$1.parenR)) {\n        var errorPos = this.start;\n        if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {\n          this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n        } else {\n          this.unexpected(errorPos);\n        }\n      }\n    }\n\n    return this.finishNode(node, \"ImportExpression\")\n  };\n\n  pp$5.parseImportMeta = function(node) {\n    this.next(); // skip `.`\n\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n\n    if (node.property.name !== \"meta\")\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for import is 'import.meta'\"); }\n    if (containsEsc)\n      { this.raiseRecoverable(node.start, \"'import.meta' must not contain escaped characters\"); }\n    if (this.options.sourceType !== \"module\" && !this.options.allowImportExportEverywhere)\n      { this.raiseRecoverable(node.start, \"Cannot use 'import.meta' outside a module\"); }\n\n    return this.finishNode(node, \"MetaProperty\")\n  };\n\n  pp$5.parseLiteral = function(value) {\n    var node = this.startNode();\n    node.value = value;\n    node.raw = this.input.slice(this.start, this.end);\n    if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\"); }\n    this.next();\n    return this.finishNode(node, \"Literal\")\n  };\n\n  pp$5.parseParenExpression = function() {\n    this.expect(types$1.parenL);\n    var val = this.parseExpression();\n    this.expect(types$1.parenR);\n    return val\n  };\n\n  pp$5.shouldParseArrow = function(exprList) {\n    return !this.canInsertSemicolon()\n  };\n\n  pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {\n    var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n    if (this.options.ecmaVersion >= 6) {\n      this.next();\n\n      var innerStartPos = this.start, innerStartLoc = this.startLoc;\n      var exprList = [], first = true, lastIsComma = false;\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n      this.yieldPos = 0;\n      this.awaitPos = 0;\n      // Do not save awaitIdentPos to allow checking awaits nested in parameters\n      while (this.type !== types$1.parenR) {\n        first ? first = false : this.expect(types$1.comma);\n        if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {\n          lastIsComma = true;\n          break\n        } else if (this.type === types$1.ellipsis) {\n          spreadStart = this.start;\n          exprList.push(this.parseParenItem(this.parseRestBinding()));\n          if (this.type === types$1.comma) {\n            this.raiseRecoverable(\n              this.start,\n              \"Comma is not permitted after the rest element\"\n            );\n          }\n          break\n        } else {\n          exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n        }\n      }\n      var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;\n      this.expect(types$1.parenR);\n\n      if (canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, false);\n        this.checkYieldAwaitInDefaultParams();\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        return this.parseParenArrowList(startPos, startLoc, exprList, forInit)\n      }\n\n      if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n      if (spreadStart) { this.unexpected(spreadStart); }\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      this.yieldPos = oldYieldPos || this.yieldPos;\n      this.awaitPos = oldAwaitPos || this.awaitPos;\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc);\n        val.expressions = exprList;\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n      } else {\n        val = exprList[0];\n      }\n    } else {\n      val = this.parseParenExpression();\n    }\n\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(startPos, startLoc);\n      par.expression = val;\n      return this.finishNode(par, \"ParenthesizedExpression\")\n    } else {\n      return val\n    }\n  };\n\n  pp$5.parseParenItem = function(item) {\n    return item\n  };\n\n  pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit)\n  };\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  var empty = [];\n\n  pp$5.parseNew = function() {\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword new\"); }\n    var node = this.startNode();\n    this.next();\n    if (this.options.ecmaVersion >= 6 && this.type === types$1.dot) {\n      var meta = this.startNodeAt(node.start, node.loc && node.loc.start);\n      meta.name = \"new\";\n      node.meta = this.finishNode(meta, \"Identifier\");\n      this.next();\n      var containsEsc = this.containsEsc;\n      node.property = this.parseIdent(true);\n      if (node.property.name !== \"target\")\n        { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is 'new.target'\"); }\n      if (containsEsc)\n        { this.raiseRecoverable(node.start, \"'new.target' must not contain escaped characters\"); }\n      if (!this.allowNewDotTarget)\n        { this.raiseRecoverable(node.start, \"'new.target' can only be used in functions and class static block\"); }\n      return this.finishNode(node, \"MetaProperty\")\n    }\n    var startPos = this.start, startLoc = this.startLoc;\n    node.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false);\n    if (this.eat(types$1.parenL)) { node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false); }\n    else { node.arguments = empty; }\n    return this.finishNode(node, \"NewExpression\")\n  };\n\n  // Parse template expression.\n\n  pp$5.parseTemplateElement = function(ref) {\n    var isTagged = ref.isTagged;\n\n    var elem = this.startNode();\n    if (this.type === types$1.invalidTemplate) {\n      if (!isTagged) {\n        this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n      }\n      elem.value = {\n        raw: this.value.replace(/\\r\\n?/g, \"\\n\"),\n        cooked: null\n      };\n    } else {\n      elem.value = {\n        raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: this.value\n      };\n    }\n    this.next();\n    elem.tail = this.type === types$1.backQuote;\n    return this.finishNode(elem, \"TemplateElement\")\n  };\n\n  pp$5.parseTemplate = function(ref) {\n    if ( ref === void 0 ) ref = {};\n    var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n    var node = this.startNode();\n    this.next();\n    node.expressions = [];\n    var curElt = this.parseTemplateElement({isTagged: isTagged});\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      if (this.type === types$1.eof) { this.raise(this.pos, \"Unterminated template literal\"); }\n      this.expect(types$1.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(types$1.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\")\n  };\n\n  pp$5.isAsyncProp = function(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n      (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types$1.star)) &&\n      !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  };\n\n  // Parse an object literal or binding pattern.\n\n  pp$5.parseObj = function(isPattern, refDestructuringErrors) {\n    var node = this.startNode(), first = true, propHash = {};\n    node.properties = [];\n    this.next();\n    while (!this.eat(types$1.braceR)) {\n      if (!first) {\n        this.expect(types$1.comma);\n        if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) { break }\n      } else { first = false; }\n\n      var prop = this.parseProperty(isPattern, refDestructuringErrors);\n      if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }\n      node.properties.push(prop);\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n  };\n\n  pp$5.parseProperty = function(isPattern, refDestructuringErrors) {\n    var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n    if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {\n      if (isPattern) {\n        prop.argument = this.parseIdent(false);\n        if (this.type === types$1.comma) {\n          this.raiseRecoverable(this.start, \"Comma is not permitted after the rest element\");\n        }\n        return this.finishNode(prop, \"RestElement\")\n      }\n      // Parse argument.\n      prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n      // To disallow trailing comma via `this.toAssignable()`.\n      if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n        refDestructuringErrors.trailingComma = this.start;\n      }\n      // Finish\n      return this.finishNode(prop, \"SpreadElement\")\n    }\n    if (this.options.ecmaVersion >= 6) {\n      prop.method = false;\n      prop.shorthand = false;\n      if (isPattern || refDestructuringErrors) {\n        startPos = this.start;\n        startLoc = this.startLoc;\n      }\n      if (!isPattern)\n        { isGenerator = this.eat(types$1.star); }\n    }\n    var containsEsc = this.containsEsc;\n    this.parsePropertyName(prop);\n    if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);\n      this.parsePropertyName(prop);\n    } else {\n      isAsync = false;\n    }\n    this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n    return this.finishNode(prop, \"Property\")\n  };\n\n  pp$5.parseGetterSetter = function(prop) {\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\n      else\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n    }\n  };\n\n  pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n    if ((isGenerator || isAsync) && this.type === types$1.colon)\n      { this.unexpected(); }\n\n    if (this.eat(types$1.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n      prop.kind = \"init\";\n    } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {\n      if (isPattern) { this.unexpected(); }\n      prop.kind = \"init\";\n      prop.method = true;\n      prop.value = this.parseMethod(isGenerator, isAsync);\n    } else if (!isPattern && !containsEsc &&\n               this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n               (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {\n      if (isGenerator || isAsync) { this.unexpected(); }\n      this.parseGetterSetter(prop);\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n      if (isGenerator || isAsync) { this.unexpected(); }\n      this.checkUnreserved(prop.key);\n      if (prop.key.name === \"await\" && !this.awaitIdentPos)\n        { this.awaitIdentPos = startPos; }\n      prop.kind = \"init\";\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n      } else if (this.type === types$1.eq && refDestructuringErrors) {\n        if (refDestructuringErrors.shorthandAssign < 0)\n          { refDestructuringErrors.shorthandAssign = this.start; }\n        prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n      } else {\n        prop.value = this.copyNode(prop.key);\n      }\n      prop.shorthand = true;\n    } else { this.unexpected(); }\n  };\n\n  pp$5.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(types$1.bracketL)) {\n        prop.computed = true;\n        prop.key = this.parseMaybeAssign();\n        this.expect(types$1.bracketR);\n        return prop.key\n      } else {\n        prop.computed = false;\n      }\n    }\n    return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")\n  };\n\n  // Initialize empty function node.\n\n  pp$5.initFunction = function(node) {\n    node.id = null;\n    if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n    if (this.options.ecmaVersion >= 8) { node.async = false; }\n  };\n\n  // Parse object or class method.\n\n  pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n    var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 6)\n      { node.generator = isGenerator; }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n    this.expect(types$1.parenL);\n    node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n    this.parseFunctionBody(node, false, true, false);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"FunctionExpression\")\n  };\n\n  // Parse arrow function expression with given parameters.\n\n  pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n    this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n\n    node.params = this.toAssignableList(params, true);\n    this.parseFunctionBody(node, true, false, forInit);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\")\n  };\n\n  // Parse function body and check parameters.\n\n  pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {\n    var isExpression = isArrowFunction && this.type !== types$1.braceL;\n    var oldStrict = this.strict, useStrict = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign(forInit);\n      node.expression = true;\n      this.checkParams(node, false);\n    } else {\n      var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n      if (!oldStrict || nonSimple) {\n        useStrict = this.strictDirective(this.end);\n        // If this is a strict mode function, verify that argument names\n        // are not repeated, and it does not try to bind the words `eval`\n        // or `arguments`.\n        if (useStrict && nonSimple)\n          { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n      }\n      // Start a new scope with regard to labels and the `inFunction`\n      // flag (restore them to their old value afterwards).\n      var oldLabels = this.labels;\n      this.labels = [];\n      if (useStrict) { this.strict = true; }\n\n      // Add the params to varDeclaredNames to ensure that an error is thrown\n      // if a let/const declaration in the function clashes with one of the params.\n      this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n      // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n      if (this.strict && node.id) { this.checkLValSimple(node.id, BIND_OUTSIDE); }\n      node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);\n      node.expression = false;\n      this.adaptDirectivePrologue(node.body.body);\n      this.labels = oldLabels;\n    }\n    this.exitScope();\n  };\n\n  pp$5.isSimpleParamList = function(params) {\n    for (var i = 0, list = params; i < list.length; i += 1)\n      {\n      var param = list[i];\n\n      if (param.type !== \"Identifier\") { return false\n    } }\n    return true\n  };\n\n  // Checks function params for various disallowed patterns such as using \"eval\"\n  // or \"arguments\" and duplicate parameters.\n\n  pp$5.checkParams = function(node, allowDuplicates) {\n    var nameHash = Object.create(null);\n    for (var i = 0, list = node.params; i < list.length; i += 1)\n      {\n      var param = list[i];\n\n      this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);\n    }\n  };\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n    var elts = [], first = true;\n    while (!this.eat(close)) {\n      if (!first) {\n        this.expect(types$1.comma);\n        if (allowTrailingComma && this.afterTrailingComma(close)) { break }\n      } else { first = false; }\n\n      var elt = (void 0);\n      if (allowEmpty && this.type === types$1.comma)\n        { elt = null; }\n      else if (this.type === types$1.ellipsis) {\n        elt = this.parseSpread(refDestructuringErrors);\n        if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0)\n          { refDestructuringErrors.trailingComma = this.start; }\n      } else {\n        elt = this.parseMaybeAssign(false, refDestructuringErrors);\n      }\n      elts.push(elt);\n    }\n    return elts\n  };\n\n  pp$5.checkUnreserved = function(ref) {\n    var start = ref.start;\n    var end = ref.end;\n    var name = ref.name;\n\n    if (this.inGenerator && name === \"yield\")\n      { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\n    if (this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\n    if (this.currentThisScope().inClassFieldInit && name === \"arguments\")\n      { this.raiseRecoverable(start, \"Cannot use 'arguments' in class field initializer\"); }\n    if (this.inClassStaticBlock && (name === \"arguments\" || name === \"await\"))\n      { this.raise(start, (\"Cannot use \" + name + \" in class static initialization block\")); }\n    if (this.keywords.test(name))\n      { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n    if (this.options.ecmaVersion < 6 &&\n      this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n    var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n    if (re.test(name)) {\n      if (!this.inAsync && name === \"await\")\n        { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\n      this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n    }\n  };\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n\n  pp$5.parseIdent = function(liberal) {\n    var node = this.parseIdentNode();\n    this.next(!!liberal);\n    this.finishNode(node, \"Identifier\");\n    if (!liberal) {\n      this.checkUnreserved(node);\n      if (node.name === \"await\" && !this.awaitIdentPos)\n        { this.awaitIdentPos = node.start; }\n    }\n    return node\n  };\n\n  pp$5.parseIdentNode = function() {\n    var node = this.startNode();\n    if (this.type === types$1.name) {\n      node.name = this.value;\n    } else if (this.type.keyword) {\n      node.name = this.type.keyword;\n\n      // To fix https://github.com/acornjs/acorn/issues/575\n      // `class` and `function` keywords push new context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n      // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n      if ((node.name === \"class\" || node.name === \"function\") &&\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n        this.context.pop();\n      }\n      this.type = types$1.name;\n    } else {\n      this.unexpected();\n    }\n    return node\n  };\n\n  pp$5.parsePrivateIdent = function() {\n    var node = this.startNode();\n    if (this.type === types$1.privateId) {\n      node.name = this.value;\n    } else {\n      this.unexpected();\n    }\n    this.next();\n    this.finishNode(node, \"PrivateIdentifier\");\n\n    // For validating existence\n    if (this.options.checkPrivateFields) {\n      if (this.privateNameStack.length === 0) {\n        this.raise(node.start, (\"Private field '#\" + (node.name) + \"' must be declared in an enclosing class\"));\n      } else {\n        this.privateNameStack[this.privateNameStack.length - 1].used.push(node);\n      }\n    }\n\n    return node\n  };\n\n  // Parses yield expression inside generator.\n\n  pp$5.parseYield = function(forInit) {\n    if (!this.yieldPos) { this.yieldPos = this.start; }\n\n    var node = this.startNode();\n    this.next();\n    if (this.type === types$1.semi || this.canInsertSemicolon() || (this.type !== types$1.star && !this.type.startsExpr)) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types$1.star);\n      node.argument = this.parseMaybeAssign(forInit);\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  };\n\n  pp$5.parseAwait = function(forInit) {\n    if (!this.awaitPos) { this.awaitPos = this.start; }\n\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true, false, forInit);\n    return this.finishNode(node, \"AwaitExpression\")\n  };\n\n  var pp$4 = Parser.prototype;\n\n  // This function is used to raise exceptions on parse errors. It\n  // takes an offset integer (into the current `input`) to indicate\n  // the location of the error, attaches the position to the end\n  // of the error message, and then raises a `SyntaxError` with that\n  // message.\n\n  pp$4.raise = function(pos, message) {\n    var loc = getLineInfo(this.input, pos);\n    message += \" (\" + loc.line + \":\" + loc.column + \")\";\n    var err = new SyntaxError(message);\n    err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n    throw err\n  };\n\n  pp$4.raiseRecoverable = pp$4.raise;\n\n  pp$4.curPosition = function() {\n    if (this.options.locations) {\n      return new Position(this.curLine, this.pos - this.lineStart)\n    }\n  };\n\n  var pp$3 = Parser.prototype;\n\n  var Scope = function Scope(flags) {\n    this.flags = flags;\n    // A list of var-declared names in the current lexical scope\n    this.var = [];\n    // A list of lexically-declared names in the current lexical scope\n    this.lexical = [];\n    // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n    this.functions = [];\n    // A switch to disallow the identifier reference 'arguments'\n    this.inClassFieldInit = false;\n  };\n\n  // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\n  pp$3.enterScope = function(flags) {\n    this.scopeStack.push(new Scope(flags));\n  };\n\n  pp$3.exitScope = function() {\n    this.scopeStack.pop();\n  };\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  pp$3.treatFunctionsAsVarInScope = function(scope) {\n    return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n  };\n\n  pp$3.declareName = function(name, bindingType, pos) {\n    var redeclared = false;\n    if (bindingType === BIND_LEXICAL) {\n      var scope = this.currentScope();\n      redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n      scope.lexical.push(name);\n      if (this.inModule && (scope.flags & SCOPE_TOP))\n        { delete this.undefinedExports[name]; }\n    } else if (bindingType === BIND_SIMPLE_CATCH) {\n      var scope$1 = this.currentScope();\n      scope$1.lexical.push(name);\n    } else if (bindingType === BIND_FUNCTION) {\n      var scope$2 = this.currentScope();\n      if (this.treatFunctionsAsVar)\n        { redeclared = scope$2.lexical.indexOf(name) > -1; }\n      else\n        { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n      scope$2.functions.push(name);\n    } else {\n      for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n        var scope$3 = this.scopeStack[i];\n        if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n            !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n          redeclared = true;\n          break\n        }\n        scope$3.var.push(name);\n        if (this.inModule && (scope$3.flags & SCOPE_TOP))\n          { delete this.undefinedExports[name]; }\n        if (scope$3.flags & SCOPE_VAR) { break }\n      }\n    }\n    if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\n  };\n\n  pp$3.checkLocalExport = function(id) {\n    // scope.functions must be empty as Module code is always strict.\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n        this.scopeStack[0].var.indexOf(id.name) === -1) {\n      this.undefinedExports[id.name] = id;\n    }\n  };\n\n  pp$3.currentScope = function() {\n    return this.scopeStack[this.scopeStack.length - 1]\n  };\n\n  pp$3.currentVarScope = function() {\n    for (var i = this.scopeStack.length - 1;; i--) {\n      var scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) { return scope }\n    }\n  };\n\n  // Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  pp$3.currentThisScope = function() {\n    for (var i = this.scopeStack.length - 1;; i--) {\n      var scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n    }\n  };\n\n  var Node = function Node(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    if (parser.options.locations)\n      { this.loc = new SourceLocation(parser, loc); }\n    if (parser.options.directSourceFile)\n      { this.sourceFile = parser.options.directSourceFile; }\n    if (parser.options.ranges)\n      { this.range = [pos, 0]; }\n  };\n\n  // Start an AST node, attaching a start offset.\n\n  var pp$2 = Parser.prototype;\n\n  pp$2.startNode = function() {\n    return new Node(this, this.start, this.startLoc)\n  };\n\n  pp$2.startNodeAt = function(pos, loc) {\n    return new Node(this, pos, loc)\n  };\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  function finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    if (this.options.locations)\n      { node.loc.end = loc; }\n    if (this.options.ranges)\n      { node.range[1] = pos; }\n    return node\n  }\n\n  pp$2.finishNode = function(node, type) {\n    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n  };\n\n  // Finish node at given position\n\n  pp$2.finishNodeAt = function(node, type, pos, loc) {\n    return finishNodeAt.call(this, node, type, pos, loc)\n  };\n\n  pp$2.copyNode = function(node) {\n    var newNode = new Node(this, node.start, this.startLoc);\n    for (var prop in node) { newNode[prop] = node[prop]; }\n    return newNode\n  };\n\n  // This file was generated by \"bin/generate-unicode-script-values.js\". Do not modify manually!\n  var scriptValuesAddedInUnicode = \"Gara Garay Gukh Gurung_Khema Hrkt Katakana_Or_Hiragana Kawi Kirat_Rai Krai Nag_Mundari Nagm Ol_Onal Onao Sunu Sunuwar Todhri Todr Tulu_Tigalari Tutg Unknown Zzzz\";\n\n  // This file contains Unicode properties extracted from the ECMAScript specification.\n  // The lists are extracted like so:\n  // $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n\n  // #table-binary-unicode-properties\n  var ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\n  var ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\n  var ecma11BinaryProperties = ecma10BinaryProperties;\n  var ecma12BinaryProperties = ecma11BinaryProperties + \" EBase EComp EMod EPres ExtPict\";\n  var ecma13BinaryProperties = ecma12BinaryProperties;\n  var ecma14BinaryProperties = ecma13BinaryProperties;\n\n  var unicodeBinaryProperties = {\n    9: ecma9BinaryProperties,\n    10: ecma10BinaryProperties,\n    11: ecma11BinaryProperties,\n    12: ecma12BinaryProperties,\n    13: ecma13BinaryProperties,\n    14: ecma14BinaryProperties\n  };\n\n  // #table-binary-unicode-properties-of-strings\n  var ecma14BinaryPropertiesOfStrings = \"Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji\";\n\n  var unicodeBinaryPropertiesOfStrings = {\n    9: \"\",\n    10: \"\",\n    11: \"\",\n    12: \"\",\n    13: \"\",\n    14: ecma14BinaryPropertiesOfStrings\n  };\n\n  // #table-unicode-general-category-values\n  var unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n\n  // #table-unicode-script-values\n  var ecma9ScriptValues = \"Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\n  var ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\n  var ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\n  var ecma12ScriptValues = ecma11ScriptValues + \" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi\";\n  var ecma13ScriptValues = ecma12ScriptValues + \" Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith\";\n  var ecma14ScriptValues = ecma13ScriptValues + \" \" + scriptValuesAddedInUnicode;\n\n  var unicodeScriptValues = {\n    9: ecma9ScriptValues,\n    10: ecma10ScriptValues,\n    11: ecma11ScriptValues,\n    12: ecma12ScriptValues,\n    13: ecma13ScriptValues,\n    14: ecma14ScriptValues\n  };\n\n  var data = {};\n  function buildUnicodeData(ecmaVersion) {\n    var d = data[ecmaVersion] = {\n      binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n      binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]),\n      nonBinary: {\n        General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n        Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n      }\n    };\n    d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n    d.nonBinary.gc = d.nonBinary.General_Category;\n    d.nonBinary.sc = d.nonBinary.Script;\n    d.nonBinary.scx = d.nonBinary.Script_Extensions;\n  }\n\n  for (var i = 0, list = [9, 10, 11, 12, 13, 14]; i < list.length; i += 1) {\n    var ecmaVersion = list[i];\n\n    buildUnicodeData(ecmaVersion);\n  }\n\n  var pp$1 = Parser.prototype;\n\n  // Track disjunction structure to determine whether a duplicate\n  // capture group name is allowed because it is in a separate branch.\n  var BranchID = function BranchID(parent, base) {\n    // Parent disjunction branch\n    this.parent = parent;\n    // Identifies this set of sibling branches\n    this.base = base || this;\n  };\n\n  BranchID.prototype.separatedFrom = function separatedFrom (alt) {\n    // A branch is separate from another branch if they or any of\n    // their parents are siblings in a given disjunction\n    for (var self = this; self; self = self.parent) {\n      for (var other = alt; other; other = other.parent) {\n        if (self.base === other.base && self !== other) { return true }\n      }\n    }\n    return false\n  };\n\n  BranchID.prototype.sibling = function sibling () {\n    return new BranchID(this.parent, this.base)\n  };\n\n  var RegExpValidationState = function RegExpValidationState(parser) {\n    this.parser = parser;\n    this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\") + (parser.options.ecmaVersion >= 13 ? \"d\" : \"\") + (parser.options.ecmaVersion >= 15 ? \"v\" : \"\");\n    this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion];\n    this.source = \"\";\n    this.flags = \"\";\n    this.start = 0;\n    this.switchU = false;\n    this.switchV = false;\n    this.switchN = false;\n    this.pos = 0;\n    this.lastIntValue = 0;\n    this.lastStringValue = \"\";\n    this.lastAssertionIsQuantifiable = false;\n    this.numCapturingParens = 0;\n    this.maxBackReference = 0;\n    this.groupNames = Object.create(null);\n    this.backReferenceNames = [];\n    this.branchID = null;\n  };\n\n  RegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n    var unicodeSets = flags.indexOf(\"v\") !== -1;\n    var unicode = flags.indexOf(\"u\") !== -1;\n    this.start = start | 0;\n    this.source = pattern + \"\";\n    this.flags = flags;\n    if (unicodeSets && this.parser.options.ecmaVersion >= 15) {\n      this.switchU = true;\n      this.switchV = true;\n      this.switchN = true;\n    } else {\n      this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n      this.switchV = false;\n      this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n    }\n  };\n\n  RegExpValidationState.prototype.raise = function raise (message) {\n    this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n  };\n\n  // If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n  // Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\n  RegExpValidationState.prototype.at = function at (i, forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) {\n      return -1\n    }\n    var c = s.charCodeAt(i);\n    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n      return c\n    }\n    var next = s.charCodeAt(i + 1);\n    return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\n  };\n\n  RegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) {\n      return l\n    }\n    var c = s.charCodeAt(i), next;\n    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\n        (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n      return i + 1\n    }\n    return i + 2\n  };\n\n  RegExpValidationState.prototype.current = function current (forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    return this.at(this.pos, forceU)\n  };\n\n  RegExpValidationState.prototype.lookahead = function lookahead (forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    return this.at(this.nextIndex(this.pos, forceU), forceU)\n  };\n\n  RegExpValidationState.prototype.advance = function advance (forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    this.pos = this.nextIndex(this.pos, forceU);\n  };\n\n  RegExpValidationState.prototype.eat = function eat (ch, forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    if (this.current(forceU) === ch) {\n      this.advance(forceU);\n      return true\n    }\n    return false\n  };\n\n  RegExpValidationState.prototype.eatChars = function eatChars (chs, forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    var pos = this.pos;\n    for (var i = 0, list = chs; i < list.length; i += 1) {\n      var ch = list[i];\n\n        var current = this.at(pos, forceU);\n      if (current === -1 || current !== ch) {\n        return false\n      }\n      pos = this.nextIndex(pos, forceU);\n    }\n    this.pos = pos;\n    return true\n  };\n\n  /**\n   * Validate the flags part of a given RegExpLiteral.\n   *\n   * @param {RegExpValidationState} state The state to validate RegExp.\n   * @returns {void}\n   */\n  pp$1.validateRegExpFlags = function(state) {\n    var validFlags = state.validFlags;\n    var flags = state.flags;\n\n    var u = false;\n    var v = false;\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags.charAt(i);\n      if (validFlags.indexOf(flag) === -1) {\n        this.raise(state.start, \"Invalid regular expression flag\");\n      }\n      if (flags.indexOf(flag, i + 1) > -1) {\n        this.raise(state.start, \"Duplicate regular expression flag\");\n      }\n      if (flag === \"u\") { u = true; }\n      if (flag === \"v\") { v = true; }\n    }\n    if (this.options.ecmaVersion >= 15 && u && v) {\n      this.raise(state.start, \"Invalid regular expression flag\");\n    }\n  };\n\n  function hasProp(obj) {\n    for (var _ in obj) { return true }\n    return false\n  }\n\n  /**\n   * Validate the pattern part of a given RegExpLiteral.\n   *\n   * @param {RegExpValidationState} state The state to validate RegExp.\n   * @returns {void}\n   */\n  pp$1.validateRegExpPattern = function(state) {\n    this.regexp_pattern(state);\n\n    // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n    // parsing contains a |GroupName|, reparse with the goal symbol\n    // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n    // exception if _P_ did not conform to the grammar, if any elements of _P_\n    // were not matched by the parse, or if any Early Error conditions exist.\n    if (!state.switchN && this.options.ecmaVersion >= 9 && hasProp(state.groupNames)) {\n      state.switchN = true;\n      this.regexp_pattern(state);\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\n  pp$1.regexp_pattern = function(state) {\n    state.pos = 0;\n    state.lastIntValue = 0;\n    state.lastStringValue = \"\";\n    state.lastAssertionIsQuantifiable = false;\n    state.numCapturingParens = 0;\n    state.maxBackReference = 0;\n    state.groupNames = Object.create(null);\n    state.backReferenceNames.length = 0;\n    state.branchID = null;\n\n    this.regexp_disjunction(state);\n\n    if (state.pos !== state.source.length) {\n      // Make the same messages as V8.\n      if (state.eat(0x29 /* ) */)) {\n        state.raise(\"Unmatched ')'\");\n      }\n      if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {\n        state.raise(\"Lone quantifier brackets\");\n      }\n    }\n    if (state.maxBackReference > state.numCapturingParens) {\n      state.raise(\"Invalid escape\");\n    }\n    for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n      var name = list[i];\n\n      if (!state.groupNames[name]) {\n        state.raise(\"Invalid named capture referenced\");\n      }\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\n  pp$1.regexp_disjunction = function(state) {\n    var trackDisjunction = this.options.ecmaVersion >= 16;\n    if (trackDisjunction) { state.branchID = new BranchID(state.branchID, null); }\n    this.regexp_alternative(state);\n    while (state.eat(0x7C /* | */)) {\n      if (trackDisjunction) { state.branchID = state.branchID.sibling(); }\n      this.regexp_alternative(state);\n    }\n    if (trackDisjunction) { state.branchID = state.branchID.parent; }\n\n    // Make the same message as V8.\n    if (this.regexp_eatQuantifier(state, true)) {\n      state.raise(\"Nothing to repeat\");\n    }\n    if (state.eat(0x7B /* { */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\n  pp$1.regexp_alternative = function(state) {\n    while (state.pos < state.source.length && this.regexp_eatTerm(state)) {}\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\n  pp$1.regexp_eatTerm = function(state) {\n    if (this.regexp_eatAssertion(state)) {\n      // Handle `QuantifiableAssertion Quantifier` alternative.\n      // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n      // is a QuantifiableAssertion.\n      if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n        // Make the same message as V8.\n        if (state.switchU) {\n          state.raise(\"Invalid quantifier\");\n        }\n      }\n      return true\n    }\n\n    if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n      this.regexp_eatQuantifier(state);\n      return true\n    }\n\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\n  pp$1.regexp_eatAssertion = function(state) {\n    var start = state.pos;\n    state.lastAssertionIsQuantifiable = false;\n\n    // ^, $\n    if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n      return true\n    }\n\n    // \\b \\B\n    if (state.eat(0x5C /* \\ */)) {\n      if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n        return true\n      }\n      state.pos = start;\n    }\n\n    // Lookahead / Lookbehind\n    if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n      var lookbehind = false;\n      if (this.options.ecmaVersion >= 9) {\n        lookbehind = state.eat(0x3C /* < */);\n      }\n      if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n        this.regexp_disjunction(state);\n        if (!state.eat(0x29 /* ) */)) {\n          state.raise(\"Unterminated group\");\n        }\n        state.lastAssertionIsQuantifiable = !lookbehind;\n        return true\n      }\n    }\n\n    state.pos = start;\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\n  pp$1.regexp_eatQuantifier = function(state, noError) {\n    if ( noError === void 0 ) noError = false;\n\n    if (this.regexp_eatQuantifierPrefix(state, noError)) {\n      state.eat(0x3F /* ? */);\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\n  pp$1.regexp_eatQuantifierPrefix = function(state, noError) {\n    return (\n      state.eat(0x2A /* * */) ||\n      state.eat(0x2B /* + */) ||\n      state.eat(0x3F /* ? */) ||\n      this.regexp_eatBracedQuantifier(state, noError)\n    )\n  };\n  pp$1.regexp_eatBracedQuantifier = function(state, noError) {\n    var start = state.pos;\n    if (state.eat(0x7B /* { */)) {\n      var min = 0, max = -1;\n      if (this.regexp_eatDecimalDigits(state)) {\n        min = state.lastIntValue;\n        if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n          max = state.lastIntValue;\n        }\n        if (state.eat(0x7D /* } */)) {\n          // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n          if (max !== -1 && max < min && !noError) {\n            state.raise(\"numbers out of order in {} quantifier\");\n          }\n          return true\n        }\n      }\n      if (state.switchU && !noError) {\n        state.raise(\"Incomplete quantifier\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\n  pp$1.regexp_eatAtom = function(state) {\n    return (\n      this.regexp_eatPatternCharacters(state) ||\n      state.eat(0x2E /* . */) ||\n      this.regexp_eatReverseSolidusAtomEscape(state) ||\n      this.regexp_eatCharacterClass(state) ||\n      this.regexp_eatUncapturingGroup(state) ||\n      this.regexp_eatCapturingGroup(state)\n    )\n  };\n  pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5C /* \\ */)) {\n      if (this.regexp_eatAtomEscape(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$1.regexp_eatUncapturingGroup = function(state) {\n    var start = state.pos;\n    if (state.eat(0x28 /* ( */)) {\n      if (state.eat(0x3F /* ? */)) {\n        if (this.options.ecmaVersion >= 16) {\n          var addModifiers = this.regexp_eatModifiers(state);\n          var hasHyphen = state.eat(0x2D /* - */);\n          if (addModifiers || hasHyphen) {\n            for (var i = 0; i < addModifiers.length; i++) {\n              var modifier = addModifiers.charAt(i);\n              if (addModifiers.indexOf(modifier, i + 1) > -1) {\n                state.raise(\"Duplicate regular expression modifiers\");\n              }\n            }\n            if (hasHyphen) {\n              var removeModifiers = this.regexp_eatModifiers(state);\n              if (!addModifiers && !removeModifiers && state.current() === 0x3A /* : */) {\n                state.raise(\"Invalid regular expression modifiers\");\n              }\n              for (var i$1 = 0; i$1 < removeModifiers.length; i$1++) {\n                var modifier$1 = removeModifiers.charAt(i$1);\n                if (\n                  removeModifiers.indexOf(modifier$1, i$1 + 1) > -1 ||\n                  addModifiers.indexOf(modifier$1) > -1\n                ) {\n                  state.raise(\"Duplicate regular expression modifiers\");\n                }\n              }\n            }\n          }\n        }\n        if (state.eat(0x3A /* : */)) {\n          this.regexp_disjunction(state);\n          if (state.eat(0x29 /* ) */)) {\n            return true\n          }\n          state.raise(\"Unterminated group\");\n        }\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$1.regexp_eatCapturingGroup = function(state) {\n    if (state.eat(0x28 /* ( */)) {\n      if (this.options.ecmaVersion >= 9) {\n        this.regexp_groupSpecifier(state);\n      } else if (state.current() === 0x3F /* ? */) {\n        state.raise(\"Invalid group\");\n      }\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        state.numCapturingParens += 1;\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    return false\n  };\n  // RegularExpressionModifiers ::\n  //   [empty]\n  //   RegularExpressionModifiers RegularExpressionModifier\n  pp$1.regexp_eatModifiers = function(state) {\n    var modifiers = \"\";\n    var ch = 0;\n    while ((ch = state.current()) !== -1 && isRegularExpressionModifier(ch)) {\n      modifiers += codePointToString(ch);\n      state.advance();\n    }\n    return modifiers\n  };\n  // RegularExpressionModifier :: one of\n  //   `i` `m` `s`\n  function isRegularExpressionModifier(ch) {\n    return ch === 0x69 /* i */ || ch === 0x6d /* m */ || ch === 0x73 /* s */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\n  pp$1.regexp_eatExtendedAtom = function(state) {\n    return (\n      state.eat(0x2E /* . */) ||\n      this.regexp_eatReverseSolidusAtomEscape(state) ||\n      this.regexp_eatCharacterClass(state) ||\n      this.regexp_eatUncapturingGroup(state) ||\n      this.regexp_eatCapturingGroup(state) ||\n      this.regexp_eatInvalidBracedQuantifier(state) ||\n      this.regexp_eatExtendedPatternCharacter(state)\n    )\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\n  pp$1.regexp_eatInvalidBracedQuantifier = function(state) {\n    if (this.regexp_eatBracedQuantifier(state, true)) {\n      state.raise(\"Nothing to repeat\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\n  pp$1.regexp_eatSyntaxCharacter = function(state) {\n    var ch = state.current();\n    if (isSyntaxCharacter(ch)) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n    return false\n  };\n  function isSyntaxCharacter(ch) {\n    return (\n      ch === 0x24 /* $ */ ||\n      ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n      ch === 0x2E /* . */ ||\n      ch === 0x3F /* ? */ ||\n      ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n      ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n    )\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n  // But eat eager.\n  pp$1.regexp_eatPatternCharacters = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n      state.advance();\n    }\n    return state.pos !== start\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\n  pp$1.regexp_eatExtendedPatternCharacter = function(state) {\n    var ch = state.current();\n    if (\n      ch !== -1 &&\n      ch !== 0x24 /* $ */ &&\n      !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n      ch !== 0x2E /* . */ &&\n      ch !== 0x3F /* ? */ &&\n      ch !== 0x5B /* [ */ &&\n      ch !== 0x5E /* ^ */ &&\n      ch !== 0x7C /* | */\n    ) {\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // GroupSpecifier ::\n  //   [empty]\n  //   `?` GroupName\n  pp$1.regexp_groupSpecifier = function(state) {\n    if (state.eat(0x3F /* ? */)) {\n      if (!this.regexp_eatGroupName(state)) { state.raise(\"Invalid group\"); }\n      var trackDisjunction = this.options.ecmaVersion >= 16;\n      var known = state.groupNames[state.lastStringValue];\n      if (known) {\n        if (trackDisjunction) {\n          for (var i = 0, list = known; i < list.length; i += 1) {\n            var altID = list[i];\n\n            if (!altID.separatedFrom(state.branchID))\n              { state.raise(\"Duplicate capture group name\"); }\n          }\n        } else {\n          state.raise(\"Duplicate capture group name\");\n        }\n      }\n      if (trackDisjunction) {\n        (known || (state.groupNames[state.lastStringValue] = [])).push(state.branchID);\n      } else {\n        state.groupNames[state.lastStringValue] = true;\n      }\n    }\n  };\n\n  // GroupName ::\n  //   `<` RegExpIdentifierName `>`\n  // Note: this updates `state.lastStringValue` property with the eaten name.\n  pp$1.regexp_eatGroupName = function(state) {\n    state.lastStringValue = \"\";\n    if (state.eat(0x3C /* < */)) {\n      if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n        return true\n      }\n      state.raise(\"Invalid capture group name\");\n    }\n    return false\n  };\n\n  // RegExpIdentifierName ::\n  //   RegExpIdentifierStart\n  //   RegExpIdentifierName RegExpIdentifierPart\n  // Note: this updates `state.lastStringValue` property with the eaten name.\n  pp$1.regexp_eatRegExpIdentifierName = function(state) {\n    state.lastStringValue = \"\";\n    if (this.regexp_eatRegExpIdentifierStart(state)) {\n      state.lastStringValue += codePointToString(state.lastIntValue);\n      while (this.regexp_eatRegExpIdentifierPart(state)) {\n        state.lastStringValue += codePointToString(state.lastIntValue);\n      }\n      return true\n    }\n    return false\n  };\n\n  // RegExpIdentifierStart ::\n  //   UnicodeIDStart\n  //   `$`\n  //   `_`\n  //   `\\` RegExpUnicodeEscapeSequence[+U]\n  pp$1.regexp_eatRegExpIdentifierStart = function(state) {\n    var start = state.pos;\n    var forceU = this.options.ecmaVersion >= 11;\n    var ch = state.current(forceU);\n    state.advance(forceU);\n\n    if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n      ch = state.lastIntValue;\n    }\n    if (isRegExpIdentifierStart(ch)) {\n      state.lastIntValue = ch;\n      return true\n    }\n\n    state.pos = start;\n    return false\n  };\n  function isRegExpIdentifierStart(ch) {\n    return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n  }\n\n  // RegExpIdentifierPart ::\n  //   UnicodeIDContinue\n  //   `$`\n  //   `_`\n  //   `\\` RegExpUnicodeEscapeSequence[+U]\n  //   <ZWNJ>\n  //   <ZWJ>\n  pp$1.regexp_eatRegExpIdentifierPart = function(state) {\n    var start = state.pos;\n    var forceU = this.options.ecmaVersion >= 11;\n    var ch = state.current(forceU);\n    state.advance(forceU);\n\n    if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n      ch = state.lastIntValue;\n    }\n    if (isRegExpIdentifierPart(ch)) {\n      state.lastIntValue = ch;\n      return true\n    }\n\n    state.pos = start;\n    return false\n  };\n  function isRegExpIdentifierPart(ch) {\n    return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\n  pp$1.regexp_eatAtomEscape = function(state) {\n    if (\n      this.regexp_eatBackReference(state) ||\n      this.regexp_eatCharacterClassEscape(state) ||\n      this.regexp_eatCharacterEscape(state) ||\n      (state.switchN && this.regexp_eatKGroupName(state))\n    ) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      if (state.current() === 0x63 /* c */) {\n        state.raise(\"Invalid unicode escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    return false\n  };\n  pp$1.regexp_eatBackReference = function(state) {\n    var start = state.pos;\n    if (this.regexp_eatDecimalEscape(state)) {\n      var n = state.lastIntValue;\n      if (state.switchU) {\n        // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n        if (n > state.maxBackReference) {\n          state.maxBackReference = n;\n        }\n        return true\n      }\n      if (n <= state.numCapturingParens) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$1.regexp_eatKGroupName = function(state) {\n    if (state.eat(0x6B /* k */)) {\n      if (this.regexp_eatGroupName(state)) {\n        state.backReferenceNames.push(state.lastStringValue);\n        return true\n      }\n      state.raise(\"Invalid named reference\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\n  pp$1.regexp_eatCharacterEscape = function(state) {\n    return (\n      this.regexp_eatControlEscape(state) ||\n      this.regexp_eatCControlLetter(state) ||\n      this.regexp_eatZero(state) ||\n      this.regexp_eatHexEscapeSequence(state) ||\n      this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||\n      (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n      this.regexp_eatIdentityEscape(state)\n    )\n  };\n  pp$1.regexp_eatCControlLetter = function(state) {\n    var start = state.pos;\n    if (state.eat(0x63 /* c */)) {\n      if (this.regexp_eatControlLetter(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$1.regexp_eatZero = function(state) {\n    if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n      state.lastIntValue = 0;\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\n  pp$1.regexp_eatControlEscape = function(state) {\n    var ch = state.current();\n    if (ch === 0x74 /* t */) {\n      state.lastIntValue = 0x09; /* \\t */\n      state.advance();\n      return true\n    }\n    if (ch === 0x6E /* n */) {\n      state.lastIntValue = 0x0A; /* \\n */\n      state.advance();\n      return true\n    }\n    if (ch === 0x76 /* v */) {\n      state.lastIntValue = 0x0B; /* \\v */\n      state.advance();\n      return true\n    }\n    if (ch === 0x66 /* f */) {\n      state.lastIntValue = 0x0C; /* \\f */\n      state.advance();\n      return true\n    }\n    if (ch === 0x72 /* r */) {\n      state.lastIntValue = 0x0D; /* \\r */\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\n  pp$1.regexp_eatControlLetter = function(state) {\n    var ch = state.current();\n    if (isControlLetter(ch)) {\n      state.lastIntValue = ch % 0x20;\n      state.advance();\n      return true\n    }\n    return false\n  };\n  function isControlLetter(ch) {\n    return (\n      (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n      (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n    )\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\n  pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n    var start = state.pos;\n    var switchU = forceU || state.switchU;\n\n    if (state.eat(0x75 /* u */)) {\n      if (this.regexp_eatFixedHexDigits(state, 4)) {\n        var lead = state.lastIntValue;\n        if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n          var leadSurrogateEnd = state.pos;\n          if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n            var trail = state.lastIntValue;\n            if (trail >= 0xDC00 && trail <= 0xDFFF) {\n              state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n              return true\n            }\n          }\n          state.pos = leadSurrogateEnd;\n          state.lastIntValue = lead;\n        }\n        return true\n      }\n      if (\n        switchU &&\n        state.eat(0x7B /* { */) &&\n        this.regexp_eatHexDigits(state) &&\n        state.eat(0x7D /* } */) &&\n        isValidUnicode(state.lastIntValue)\n      ) {\n        return true\n      }\n      if (switchU) {\n        state.raise(\"Invalid unicode escape\");\n      }\n      state.pos = start;\n    }\n\n    return false\n  };\n  function isValidUnicode(ch) {\n    return ch >= 0 && ch <= 0x10FFFF\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\n  pp$1.regexp_eatIdentityEscape = function(state) {\n    if (state.switchU) {\n      if (this.regexp_eatSyntaxCharacter(state)) {\n        return true\n      }\n      if (state.eat(0x2F /* / */)) {\n        state.lastIntValue = 0x2F; /* / */\n        return true\n      }\n      return false\n    }\n\n    var ch = state.current();\n    if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\n  pp$1.regexp_eatDecimalEscape = function(state) {\n    state.lastIntValue = 0;\n    var ch = state.current();\n    if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n      do {\n        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n        state.advance();\n      } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n      return true\n    }\n    return false\n  };\n\n  // Return values used by character set parsing methods, needed to\n  // forbid negation of sets that can match strings.\n  var CharSetNone = 0; // Nothing parsed\n  var CharSetOk = 1; // Construct parsed, cannot contain strings\n  var CharSetString = 2; // Construct parsed, can contain strings\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\n  pp$1.regexp_eatCharacterClassEscape = function(state) {\n    var ch = state.current();\n\n    if (isCharacterClassEscape(ch)) {\n      state.lastIntValue = -1;\n      state.advance();\n      return CharSetOk\n    }\n\n    var negate = false;\n    if (\n      state.switchU &&\n      this.options.ecmaVersion >= 9 &&\n      ((negate = ch === 0x50 /* P */) || ch === 0x70 /* p */)\n    ) {\n      state.lastIntValue = -1;\n      state.advance();\n      var result;\n      if (\n        state.eat(0x7B /* { */) &&\n        (result = this.regexp_eatUnicodePropertyValueExpression(state)) &&\n        state.eat(0x7D /* } */)\n      ) {\n        if (negate && result === CharSetString) { state.raise(\"Invalid property name\"); }\n        return result\n      }\n      state.raise(\"Invalid property name\");\n    }\n\n    return CharSetNone\n  };\n\n  function isCharacterClassEscape(ch) {\n    return (\n      ch === 0x64 /* d */ ||\n      ch === 0x44 /* D */ ||\n      ch === 0x73 /* s */ ||\n      ch === 0x53 /* S */ ||\n      ch === 0x77 /* w */ ||\n      ch === 0x57 /* W */\n    )\n  }\n\n  // UnicodePropertyValueExpression ::\n  //   UnicodePropertyName `=` UnicodePropertyValue\n  //   LoneUnicodePropertyNameOrValue\n  pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {\n    var start = state.pos;\n\n    // UnicodePropertyName `=` UnicodePropertyValue\n    if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n      var name = state.lastStringValue;\n      if (this.regexp_eatUnicodePropertyValue(state)) {\n        var value = state.lastStringValue;\n        this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n        return CharSetOk\n      }\n    }\n    state.pos = start;\n\n    // LoneUnicodePropertyNameOrValue\n    if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n      var nameOrValue = state.lastStringValue;\n      return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue)\n    }\n    return CharSetNone\n  };\n\n  pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n    if (!hasOwn(state.unicodeProperties.nonBinary, name))\n      { state.raise(\"Invalid property name\"); }\n    if (!state.unicodeProperties.nonBinary[name].test(value))\n      { state.raise(\"Invalid property value\"); }\n  };\n\n  pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n    if (state.unicodeProperties.binary.test(nameOrValue)) { return CharSetOk }\n    if (state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue)) { return CharSetString }\n    state.raise(\"Invalid property name\");\n  };\n\n  // UnicodePropertyName ::\n  //   UnicodePropertyNameCharacters\n  pp$1.regexp_eatUnicodePropertyName = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while (isUnicodePropertyNameCharacter(ch = state.current())) {\n      state.lastStringValue += codePointToString(ch);\n      state.advance();\n    }\n    return state.lastStringValue !== \"\"\n  };\n\n  function isUnicodePropertyNameCharacter(ch) {\n    return isControlLetter(ch) || ch === 0x5F /* _ */\n  }\n\n  // UnicodePropertyValue ::\n  //   UnicodePropertyValueCharacters\n  pp$1.regexp_eatUnicodePropertyValue = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while (isUnicodePropertyValueCharacter(ch = state.current())) {\n      state.lastStringValue += codePointToString(ch);\n      state.advance();\n    }\n    return state.lastStringValue !== \"\"\n  };\n  function isUnicodePropertyValueCharacter(ch) {\n    return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n  }\n\n  // LoneUnicodePropertyNameOrValue ::\n  //   UnicodePropertyValueCharacters\n  pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n    return this.regexp_eatUnicodePropertyValue(state)\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\n  pp$1.regexp_eatCharacterClass = function(state) {\n    if (state.eat(0x5B /* [ */)) {\n      var negate = state.eat(0x5E /* ^ */);\n      var result = this.regexp_classContents(state);\n      if (!state.eat(0x5D /* ] */))\n        { state.raise(\"Unterminated character class\"); }\n      if (negate && result === CharSetString)\n        { state.raise(\"Negated character class may contain strings\"); }\n      return true\n    }\n    return false\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassContents\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n  pp$1.regexp_classContents = function(state) {\n    if (state.current() === 0x5D /* ] */) { return CharSetOk }\n    if (state.switchV) { return this.regexp_classSetExpression(state) }\n    this.regexp_nonEmptyClassRanges(state);\n    return CharSetOk\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\n  pp$1.regexp_nonEmptyClassRanges = function(state) {\n    while (this.regexp_eatClassAtom(state)) {\n      var left = state.lastIntValue;\n      if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {\n        var right = state.lastIntValue;\n        if (state.switchU && (left === -1 || right === -1)) {\n          state.raise(\"Invalid character class\");\n        }\n        if (left !== -1 && right !== -1 && left > right) {\n          state.raise(\"Range out of order in character class\");\n        }\n      }\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\n  pp$1.regexp_eatClassAtom = function(state) {\n    var start = state.pos;\n\n    if (state.eat(0x5C /* \\ */)) {\n      if (this.regexp_eatClassEscape(state)) {\n        return true\n      }\n      if (state.switchU) {\n        // Make the same message as V8.\n        var ch$1 = state.current();\n        if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n          state.raise(\"Invalid class escape\");\n        }\n        state.raise(\"Invalid escape\");\n      }\n      state.pos = start;\n    }\n\n    var ch = state.current();\n    if (ch !== 0x5D /* ] */) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\n  pp$1.regexp_eatClassEscape = function(state) {\n    var start = state.pos;\n\n    if (state.eat(0x62 /* b */)) {\n      state.lastIntValue = 0x08; /* <BS> */\n      return true\n    }\n\n    if (state.switchU && state.eat(0x2D /* - */)) {\n      state.lastIntValue = 0x2D; /* - */\n      return true\n    }\n\n    if (!state.switchU && state.eat(0x63 /* c */)) {\n      if (this.regexp_eatClassControlLetter(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n\n    return (\n      this.regexp_eatCharacterClassEscape(state) ||\n      this.regexp_eatCharacterEscape(state)\n    )\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassSetExpression\n  // https://tc39.es/ecma262/#prod-ClassUnion\n  // https://tc39.es/ecma262/#prod-ClassIntersection\n  // https://tc39.es/ecma262/#prod-ClassSubtraction\n  pp$1.regexp_classSetExpression = function(state) {\n    var result = CharSetOk, subResult;\n    if (this.regexp_eatClassSetRange(state)) ; else if (subResult = this.regexp_eatClassSetOperand(state)) {\n      if (subResult === CharSetString) { result = CharSetString; }\n      // https://tc39.es/ecma262/#prod-ClassIntersection\n      var start = state.pos;\n      while (state.eatChars([0x26, 0x26] /* && */)) {\n        if (\n          state.current() !== 0x26 /* & */ &&\n          (subResult = this.regexp_eatClassSetOperand(state))\n        ) {\n          if (subResult !== CharSetString) { result = CharSetOk; }\n          continue\n        }\n        state.raise(\"Invalid character in character class\");\n      }\n      if (start !== state.pos) { return result }\n      // https://tc39.es/ecma262/#prod-ClassSubtraction\n      while (state.eatChars([0x2D, 0x2D] /* -- */)) {\n        if (this.regexp_eatClassSetOperand(state)) { continue }\n        state.raise(\"Invalid character in character class\");\n      }\n      if (start !== state.pos) { return result }\n    } else {\n      state.raise(\"Invalid character in character class\");\n    }\n    // https://tc39.es/ecma262/#prod-ClassUnion\n    for (;;) {\n      if (this.regexp_eatClassSetRange(state)) { continue }\n      subResult = this.regexp_eatClassSetOperand(state);\n      if (!subResult) { return result }\n      if (subResult === CharSetString) { result = CharSetString; }\n    }\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassSetRange\n  pp$1.regexp_eatClassSetRange = function(state) {\n    var start = state.pos;\n    if (this.regexp_eatClassSetCharacter(state)) {\n      var left = state.lastIntValue;\n      if (state.eat(0x2D /* - */) && this.regexp_eatClassSetCharacter(state)) {\n        var right = state.lastIntValue;\n        if (left !== -1 && right !== -1 && left > right) {\n          state.raise(\"Range out of order in character class\");\n        }\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassSetOperand\n  pp$1.regexp_eatClassSetOperand = function(state) {\n    if (this.regexp_eatClassSetCharacter(state)) { return CharSetOk }\n    return this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state)\n  };\n\n  // https://tc39.es/ecma262/#prod-NestedClass\n  pp$1.regexp_eatNestedClass = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5B /* [ */)) {\n      var negate = state.eat(0x5E /* ^ */);\n      var result = this.regexp_classContents(state);\n      if (state.eat(0x5D /* ] */)) {\n        if (negate && result === CharSetString) {\n          state.raise(\"Negated character class may contain strings\");\n        }\n        return result\n      }\n      state.pos = start;\n    }\n    if (state.eat(0x5C /* \\ */)) {\n      var result$1 = this.regexp_eatCharacterClassEscape(state);\n      if (result$1) {\n        return result$1\n      }\n      state.pos = start;\n    }\n    return null\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassStringDisjunction\n  pp$1.regexp_eatClassStringDisjunction = function(state) {\n    var start = state.pos;\n    if (state.eatChars([0x5C, 0x71] /* \\q */)) {\n      if (state.eat(0x7B /* { */)) {\n        var result = this.regexp_classStringDisjunctionContents(state);\n        if (state.eat(0x7D /* } */)) {\n          return result\n        }\n      } else {\n        // Make the same message as V8.\n        state.raise(\"Invalid escape\");\n      }\n      state.pos = start;\n    }\n    return null\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassStringDisjunctionContents\n  pp$1.regexp_classStringDisjunctionContents = function(state) {\n    var result = this.regexp_classString(state);\n    while (state.eat(0x7C /* | */)) {\n      if (this.regexp_classString(state) === CharSetString) { result = CharSetString; }\n    }\n    return result\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassString\n  // https://tc39.es/ecma262/#prod-NonEmptyClassString\n  pp$1.regexp_classString = function(state) {\n    var count = 0;\n    while (this.regexp_eatClassSetCharacter(state)) { count++; }\n    return count === 1 ? CharSetOk : CharSetString\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassSetCharacter\n  pp$1.regexp_eatClassSetCharacter = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5C /* \\ */)) {\n      if (\n        this.regexp_eatCharacterEscape(state) ||\n        this.regexp_eatClassSetReservedPunctuator(state)\n      ) {\n        return true\n      }\n      if (state.eat(0x62 /* b */)) {\n        state.lastIntValue = 0x08; /* <BS> */\n        return true\n      }\n      state.pos = start;\n      return false\n    }\n    var ch = state.current();\n    if (ch < 0 || ch === state.lookahead() && isClassSetReservedDoublePunctuatorCharacter(ch)) { return false }\n    if (isClassSetSyntaxCharacter(ch)) { return false }\n    state.advance();\n    state.lastIntValue = ch;\n    return true\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassSetReservedDoublePunctuator\n  function isClassSetReservedDoublePunctuatorCharacter(ch) {\n    return (\n      ch === 0x21 /* ! */ ||\n      ch >= 0x23 /* # */ && ch <= 0x26 /* & */ ||\n      ch >= 0x2A /* * */ && ch <= 0x2C /* , */ ||\n      ch === 0x2E /* . */ ||\n      ch >= 0x3A /* : */ && ch <= 0x40 /* @ */ ||\n      ch === 0x5E /* ^ */ ||\n      ch === 0x60 /* ` */ ||\n      ch === 0x7E /* ~ */\n    )\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassSetSyntaxCharacter\n  function isClassSetSyntaxCharacter(ch) {\n    return (\n      ch === 0x28 /* ( */ ||\n      ch === 0x29 /* ) */ ||\n      ch === 0x2D /* - */ ||\n      ch === 0x2F /* / */ ||\n      ch >= 0x5B /* [ */ && ch <= 0x5D /* ] */ ||\n      ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n    )\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator\n  pp$1.regexp_eatClassSetReservedPunctuator = function(state) {\n    var ch = state.current();\n    if (isClassSetReservedPunctuator(ch)) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator\n  function isClassSetReservedPunctuator(ch) {\n    return (\n      ch === 0x21 /* ! */ ||\n      ch === 0x23 /* # */ ||\n      ch === 0x25 /* % */ ||\n      ch === 0x26 /* & */ ||\n      ch === 0x2C /* , */ ||\n      ch === 0x2D /* - */ ||\n      ch >= 0x3A /* : */ && ch <= 0x3E /* > */ ||\n      ch === 0x40 /* @ */ ||\n      ch === 0x60 /* ` */ ||\n      ch === 0x7E /* ~ */\n    )\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\n  pp$1.regexp_eatClassControlLetter = function(state) {\n    var ch = state.current();\n    if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n      state.lastIntValue = ch % 0x20;\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n  pp$1.regexp_eatHexEscapeSequence = function(state) {\n    var start = state.pos;\n    if (state.eat(0x78 /* x */)) {\n      if (this.regexp_eatFixedHexDigits(state, 2)) {\n        return true\n      }\n      if (state.switchU) {\n        state.raise(\"Invalid escape\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\n  pp$1.regexp_eatDecimalDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while (isDecimalDigit(ch = state.current())) {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    }\n    return state.pos !== start\n  };\n  function isDecimalDigit(ch) {\n    return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\n  pp$1.regexp_eatHexDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while (isHexDigit(ch = state.current())) {\n      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n      state.advance();\n    }\n    return state.pos !== start\n  };\n  function isHexDigit(ch) {\n    return (\n      (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n      (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n      (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n    )\n  }\n  function hexToInt(ch) {\n    if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n      return 10 + (ch - 0x41 /* A */)\n    }\n    if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n      return 10 + (ch - 0x61 /* a */)\n    }\n    return ch - 0x30 /* 0 */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n  // Allows only 0-377(octal) i.e. 0-255(decimal).\n  pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {\n    if (this.regexp_eatOctalDigit(state)) {\n      var n1 = state.lastIntValue;\n      if (this.regexp_eatOctalDigit(state)) {\n        var n2 = state.lastIntValue;\n        if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n          state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n        } else {\n          state.lastIntValue = n1 * 8 + n2;\n        }\n      } else {\n        state.lastIntValue = n1;\n      }\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\n  pp$1.regexp_eatOctalDigit = function(state) {\n    var ch = state.current();\n    if (isOctalDigit(ch)) {\n      state.lastIntValue = ch - 0x30; /* 0 */\n      state.advance();\n      return true\n    }\n    state.lastIntValue = 0;\n    return false\n  };\n  function isOctalDigit(ch) {\n    return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n  // And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n  pp$1.regexp_eatFixedHexDigits = function(state, length) {\n    var start = state.pos;\n    state.lastIntValue = 0;\n    for (var i = 0; i < length; ++i) {\n      var ch = state.current();\n      if (!isHexDigit(ch)) {\n        state.pos = start;\n        return false\n      }\n      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n      state.advance();\n    }\n    return true\n  };\n\n  // Object type used to represent tokens. Note that normally, tokens\n  // simply exist as properties on the parser object. This is only\n  // used for the onToken callback and the external tokenizer.\n\n  var Token = function Token(p) {\n    this.type = p.type;\n    this.value = p.value;\n    this.start = p.start;\n    this.end = p.end;\n    if (p.options.locations)\n      { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n    if (p.options.ranges)\n      { this.range = [p.start, p.end]; }\n  };\n\n  // ## Tokenizer\n\n  var pp = Parser.prototype;\n\n  // Move to the next token\n\n  pp.next = function(ignoreEscapeSequenceInKeyword) {\n    if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\n      { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword); }\n    if (this.options.onToken)\n      { this.options.onToken(new Token(this)); }\n\n    this.lastTokEnd = this.end;\n    this.lastTokStart = this.start;\n    this.lastTokEndLoc = this.endLoc;\n    this.lastTokStartLoc = this.startLoc;\n    this.nextToken();\n  };\n\n  pp.getToken = function() {\n    this.next();\n    return new Token(this)\n  };\n\n  // If we're in an ES6 environment, make parsers iterable\n  if (typeof Symbol !== \"undefined\")\n    { pp[Symbol.iterator] = function() {\n      var this$1$1 = this;\n\n      return {\n        next: function () {\n          var token = this$1$1.getToken();\n          return {\n            done: token.type === types$1.eof,\n            value: token\n          }\n        }\n      }\n    }; }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  pp.nextToken = function() {\n    var curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n    this.start = this.pos;\n    if (this.options.locations) { this.startLoc = this.curPosition(); }\n    if (this.pos >= this.input.length) { return this.finishToken(types$1.eof) }\n\n    if (curContext.override) { return curContext.override(this) }\n    else { this.readToken(this.fullCharCodeAtPos()); }\n  };\n\n  pp.readToken = function(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n      { return this.readWord() }\n\n    return this.getTokenFromCode(code)\n  };\n\n  pp.fullCharCodeAtPos = function() {\n    var code = this.input.charCodeAt(this.pos);\n    if (code <= 0xd7ff || code >= 0xdc00) { return code }\n    var next = this.input.charCodeAt(this.pos + 1);\n    return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00\n  };\n\n  pp.skipBlockComment = function() {\n    var startLoc = this.options.onComment && this.curPosition();\n    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n    if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n    this.pos = end + 2;\n    if (this.options.locations) {\n      for (var nextBreak = (void 0), pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;) {\n        ++this.curLine;\n        pos = this.lineStart = nextBreak;\n      }\n    }\n    if (this.options.onComment)\n      { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                             startLoc, this.curPosition()); }\n  };\n\n  pp.skipLineComment = function(startSkip) {\n    var start = this.pos;\n    var startLoc = this.options.onComment && this.curPosition();\n    var ch = this.input.charCodeAt(this.pos += startSkip);\n    while (this.pos < this.input.length && !isNewLine(ch)) {\n      ch = this.input.charCodeAt(++this.pos);\n    }\n    if (this.options.onComment)\n      { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                             startLoc, this.curPosition()); }\n  };\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  pp.skipSpace = function() {\n    loop: while (this.pos < this.input.length) {\n      var ch = this.input.charCodeAt(this.pos);\n      switch (ch) {\n      case 32: case 160: // ' '\n        ++this.pos;\n        break\n      case 13:\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\n          ++this.pos;\n        }\n      case 10: case 8232: case 8233:\n        ++this.pos;\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        break\n      case 47: // '/'\n        switch (this.input.charCodeAt(this.pos + 1)) {\n        case 42: // '*'\n          this.skipBlockComment();\n          break\n        case 47:\n          this.skipLineComment(2);\n          break\n        default:\n          break loop\n        }\n        break\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this.pos;\n        } else {\n          break loop\n        }\n      }\n    }\n  };\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  pp.finishToken = function(type, val) {\n    this.end = this.pos;\n    if (this.options.locations) { this.endLoc = this.curPosition(); }\n    var prevType = this.type;\n    this.type = type;\n    this.value = val;\n\n    this.updateContext(prevType);\n  };\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n  pp.readToken_dot = function() {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next >= 48 && next <= 57) { return this.readNumber(true) }\n    var next2 = this.input.charCodeAt(this.pos + 2);\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n      this.pos += 3;\n      return this.finishToken(types$1.ellipsis)\n    } else {\n      ++this.pos;\n      return this.finishToken(types$1.dot)\n    }\n  };\n\n  pp.readToken_slash = function() { // '/'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\n    return this.finishOp(types$1.slash, 1)\n  };\n\n  pp.readToken_mult_modulo_exp = function(code) { // '%*'\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    var tokentype = code === 42 ? types$1.star : types$1.modulo;\n\n    // exponentiation operator ** and **=\n    if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n      ++size;\n      tokentype = types$1.starstar;\n      next = this.input.charCodeAt(this.pos + 2);\n    }\n\n    if (next === 61) { return this.finishOp(types$1.assign, size + 1) }\n    return this.finishOp(tokentype, size)\n  };\n\n  pp.readToken_pipe_amp = function(code) { // '|&'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) {\n      if (this.options.ecmaVersion >= 12) {\n        var next2 = this.input.charCodeAt(this.pos + 2);\n        if (next2 === 61) { return this.finishOp(types$1.assign, 3) }\n      }\n      return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2)\n    }\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\n    return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1)\n  };\n\n  pp.readToken_caret = function() { // '^'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\n    return this.finishOp(types$1.bitwiseXOR, 1)\n  };\n\n  pp.readToken_plus_min = function(code) { // '+-'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n          (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        return this.nextToken()\n      }\n      return this.finishOp(types$1.incDec, 2)\n    }\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\n    return this.finishOp(types$1.plusMin, 1)\n  };\n\n  pp.readToken_lt_gt = function(code) { // '<>'\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types$1.assign, size + 1) }\n      return this.finishOp(types$1.bitShift, size)\n    }\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n        this.input.charCodeAt(this.pos + 3) === 45) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    if (next === 61) { size = 2; }\n    return this.finishOp(types$1.relational, size)\n  };\n\n  pp.readToken_eq_excl = function(code) { // '=!'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) { return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n      this.pos += 2;\n      return this.finishToken(types$1.arrow)\n    }\n    return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1)\n  };\n\n  pp.readToken_question = function() { // '?'\n    var ecmaVersion = this.options.ecmaVersion;\n    if (ecmaVersion >= 11) {\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 46) {\n        var next2 = this.input.charCodeAt(this.pos + 2);\n        if (next2 < 48 || next2 > 57) { return this.finishOp(types$1.questionDot, 2) }\n      }\n      if (next === 63) {\n        if (ecmaVersion >= 12) {\n          var next2$1 = this.input.charCodeAt(this.pos + 2);\n          if (next2$1 === 61) { return this.finishOp(types$1.assign, 3) }\n        }\n        return this.finishOp(types$1.coalesce, 2)\n      }\n    }\n    return this.finishOp(types$1.question, 1)\n  };\n\n  pp.readToken_numberSign = function() { // '#'\n    var ecmaVersion = this.options.ecmaVersion;\n    var code = 35; // '#'\n    if (ecmaVersion >= 13) {\n      ++this.pos;\n      code = this.fullCharCodeAtPos();\n      if (isIdentifierStart(code, true) || code === 92 /* '\\' */) {\n        return this.finishToken(types$1.privateId, this.readWord1())\n      }\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n  };\n\n  pp.getTokenFromCode = function(code) {\n    switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n    case 46: // '.'\n      return this.readToken_dot()\n\n    // Punctuation tokens.\n    case 40: ++this.pos; return this.finishToken(types$1.parenL)\n    case 41: ++this.pos; return this.finishToken(types$1.parenR)\n    case 59: ++this.pos; return this.finishToken(types$1.semi)\n    case 44: ++this.pos; return this.finishToken(types$1.comma)\n    case 91: ++this.pos; return this.finishToken(types$1.bracketL)\n    case 93: ++this.pos; return this.finishToken(types$1.bracketR)\n    case 123: ++this.pos; return this.finishToken(types$1.braceL)\n    case 125: ++this.pos; return this.finishToken(types$1.braceR)\n    case 58: ++this.pos; return this.finishToken(types$1.colon)\n\n    case 96: // '`'\n      if (this.options.ecmaVersion < 6) { break }\n      ++this.pos;\n      return this.finishToken(types$1.backQuote)\n\n    case 48: // '0'\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n        if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n      }\n\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n      return this.readNumber(false)\n\n    // Quotes produce strings.\n    case 34: case 39: // '\"', \"'\"\n      return this.readString(code)\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n    case 47: // '/'\n      return this.readToken_slash()\n\n    case 37: case 42: // '%*'\n      return this.readToken_mult_modulo_exp(code)\n\n    case 124: case 38: // '|&'\n      return this.readToken_pipe_amp(code)\n\n    case 94: // '^'\n      return this.readToken_caret()\n\n    case 43: case 45: // '+-'\n      return this.readToken_plus_min(code)\n\n    case 60: case 62: // '<>'\n      return this.readToken_lt_gt(code)\n\n    case 61: case 33: // '=!'\n      return this.readToken_eq_excl(code)\n\n    case 63: // '?'\n      return this.readToken_question()\n\n    case 126: // '~'\n      return this.finishOp(types$1.prefix, 1)\n\n    case 35: // '#'\n      return this.readToken_numberSign()\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n  };\n\n  pp.finishOp = function(type, size) {\n    var str = this.input.slice(this.pos, this.pos + size);\n    this.pos += size;\n    return this.finishToken(type, str)\n  };\n\n  pp.readRegexp = function() {\n    var escaped, inClass, start = this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }\n      var ch = this.input.charAt(this.pos);\n      if (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); }\n      if (!escaped) {\n        if (ch === \"[\") { inClass = true; }\n        else if (ch === \"]\" && inClass) { inClass = false; }\n        else if (ch === \"/\" && !inClass) { break }\n        escaped = ch === \"\\\\\";\n      } else { escaped = false; }\n      ++this.pos;\n    }\n    var pattern = this.input.slice(start, this.pos);\n    ++this.pos;\n    var flagsStart = this.pos;\n    var flags = this.readWord1();\n    if (this.containsEsc) { this.unexpected(flagsStart); }\n\n    // Validate pattern\n    var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n    state.reset(start, pattern, flags);\n    this.validateRegExpFlags(state);\n    this.validateRegExpPattern(state);\n\n    // Create Literal#value property value.\n    var value = null;\n    try {\n      value = new RegExp(pattern, flags);\n    } catch (e) {\n      // ESTree requires null if it failed to instantiate RegExp object.\n      // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n    }\n\n    return this.finishToken(types$1.regexp, {pattern: pattern, flags: flags, value: value})\n  };\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {\n    // `len` is used for character escape sequences. In that case, disallow separators.\n    var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n\n    // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\n    // and isn't fraction part nor exponent part. In that case, if the first digit\n    // is zero then disallow separators.\n    var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n\n    var start = this.pos, total = 0, lastCode = 0;\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {\n      var code = this.input.charCodeAt(this.pos), val = (void 0);\n\n      if (allowSeparators && code === 95) {\n        if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed in legacy octal numeric literals\"); }\n        if (lastCode === 95) { this.raiseRecoverable(this.pos, \"Numeric separator must be exactly one underscore\"); }\n        if (i === 0) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed at the first of digits\"); }\n        lastCode = code;\n        continue\n      }\n\n      if (code >= 97) { val = code - 97 + 10; } // a\n      else if (code >= 65) { val = code - 65 + 10; } // A\n      else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n      else { val = Infinity; }\n      if (val >= radix) { break }\n      lastCode = code;\n      total = total * radix + val;\n    }\n\n    if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, \"Numeric separator is not allowed at the last of digits\"); }\n    if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n    return total\n  };\n\n  function stringToNumber(str, isLegacyOctalNumericLiteral) {\n    if (isLegacyOctalNumericLiteral) {\n      return parseInt(str, 8)\n    }\n\n    // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\n    return parseFloat(str.replace(/_/g, \"\"))\n  }\n\n  function stringToBigInt(str) {\n    if (typeof BigInt !== \"function\") {\n      return null\n    }\n\n    // `BigInt(value)` throws syntax error if the string contains numeric separators.\n    return BigInt(str.replace(/_/g, \"\"))\n  }\n\n  pp.readRadixNumber = function(radix) {\n    var start = this.pos;\n    this.pos += 2; // 0x\n    var val = this.readInt(radix);\n    if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n    if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n      val = stringToBigInt(this.input.slice(start, this.pos));\n      ++this.pos;\n    } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n    return this.finishToken(types$1.num, val)\n  };\n\n  // Read an integer, octal integer, or floating-point number.\n\n  pp.readNumber = function(startsWithDot) {\n    var start = this.pos;\n    if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, \"Invalid number\"); }\n    var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n    if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n    var next = this.input.charCodeAt(this.pos);\n    if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n      var val$1 = stringToBigInt(this.input.slice(start, this.pos));\n      ++this.pos;\n      if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n      return this.finishToken(types$1.num, val$1)\n    }\n    if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n    if (next === 46 && !octal) { // '.'\n      ++this.pos;\n      this.readInt(10);\n      next = this.input.charCodeAt(this.pos);\n    }\n    if ((next === 69 || next === 101) && !octal) { // 'eE'\n      next = this.input.charCodeAt(++this.pos);\n      if (next === 43 || next === 45) { ++this.pos; } // '+-'\n      if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n    }\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n    var val = stringToNumber(this.input.slice(start, this.pos), octal);\n    return this.finishToken(types$1.num, val)\n  };\n\n  // Read a string value, interpreting backslash-escapes.\n\n  pp.readCodePoint = function() {\n    var ch = this.input.charCodeAt(this.pos), code;\n\n    if (ch === 123) { // '{'\n      if (this.options.ecmaVersion < 6) { this.unexpected(); }\n      var codePos = ++this.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n      ++this.pos;\n      if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n    } else {\n      code = this.readHexChar(4);\n    }\n    return code\n  };\n\n  pp.readString = function(quote) {\n    var out = \"\", chunkStart = ++this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }\n      var ch = this.input.charCodeAt(this.pos);\n      if (ch === quote) { break }\n      if (ch === 92) { // '\\'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.pos;\n      } else if (ch === 0x2028 || ch === 0x2029) {\n        if (this.options.ecmaVersion < 10) { this.raise(this.start, \"Unterminated string constant\"); }\n        ++this.pos;\n        if (this.options.locations) {\n          this.curLine++;\n          this.lineStart = this.pos;\n        }\n      } else {\n        if (isNewLine(ch)) { this.raise(this.start, \"Unterminated string constant\"); }\n        ++this.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.pos++);\n    return this.finishToken(types$1.string, out)\n  };\n\n  // Reads template string tokens.\n\n  var INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\n  pp.tryReadTemplateToken = function() {\n    this.inTemplateElement = true;\n    try {\n      this.readTmplToken();\n    } catch (err) {\n      if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n        this.readInvalidTemplateToken();\n      } else {\n        throw err\n      }\n    }\n\n    this.inTemplateElement = false;\n  };\n\n  pp.invalidStringToken = function(position, message) {\n    if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n      throw INVALID_TEMPLATE_ESCAPE_ERROR\n    } else {\n      this.raise(position, message);\n    }\n  };\n\n  pp.readTmplToken = function() {\n    var out = \"\", chunkStart = this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }\n      var ch = this.input.charCodeAt(this.pos);\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n        if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {\n          if (ch === 36) {\n            this.pos += 2;\n            return this.finishToken(types$1.dollarBraceL)\n          } else {\n            ++this.pos;\n            return this.finishToken(types$1.backQuote)\n          }\n        }\n        out += this.input.slice(chunkStart, this.pos);\n        return this.finishToken(types$1.template, out)\n      }\n      if (ch === 92) { // '\\'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.readEscapedChar(true);\n        chunkStart = this.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.pos);\n        ++this.pos;\n        switch (ch) {\n        case 13:\n          if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\n        case 10:\n          out += \"\\n\";\n          break\n        default:\n          out += String.fromCharCode(ch);\n          break\n        }\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        chunkStart = this.pos;\n      } else {\n        ++this.pos;\n      }\n    }\n  };\n\n  // Reads a template token to search for the end, without validating any escape sequences\n  pp.readInvalidTemplateToken = function() {\n    for (; this.pos < this.input.length; this.pos++) {\n      switch (this.input[this.pos]) {\n      case \"\\\\\":\n        ++this.pos;\n        break\n\n      case \"$\":\n        if (this.input[this.pos + 1] !== \"{\") { break }\n        // fall through\n      case \"`\":\n        return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos))\n\n      case \"\\r\":\n        if (this.input[this.pos + 1] === \"\\n\") { ++this.pos; }\n        // fall through\n      case \"\\n\": case \"\\u2028\": case \"\\u2029\":\n        ++this.curLine;\n        this.lineStart = this.pos + 1;\n        break\n      }\n    }\n    this.raise(this.start, \"Unterminated template\");\n  };\n\n  // Used to read escaped characters\n\n  pp.readEscapedChar = function(inTemplate) {\n    var ch = this.input.charCodeAt(++this.pos);\n    ++this.pos;\n    switch (ch) {\n    case 110: return \"\\n\" // 'n' -> '\\n'\n    case 114: return \"\\r\" // 'r' -> '\\r'\n    case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n    case 117: return codePointToString(this.readCodePoint()) // 'u'\n    case 116: return \"\\t\" // 't' -> '\\t'\n    case 98: return \"\\b\" // 'b' -> '\\b'\n    case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n    case 102: return \"\\f\" // 'f' -> '\\f'\n    case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n    case 10: // ' \\n'\n      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n      return \"\"\n    case 56:\n    case 57:\n      if (this.strict) {\n        this.invalidStringToken(\n          this.pos - 1,\n          \"Invalid escape sequence\"\n        );\n      }\n      if (inTemplate) {\n        var codePos = this.pos - 1;\n\n        this.invalidStringToken(\n          codePos,\n          \"Invalid escape sequence in template string\"\n        );\n      }\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n        var octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        this.pos += octalStr.length - 1;\n        ch = this.input.charCodeAt(this.pos);\n        if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n          this.invalidStringToken(\n            this.pos - 1 - octalStr.length,\n            inTemplate\n              ? \"Octal literal in template string\"\n              : \"Octal literal in strict mode\"\n          );\n        }\n        return String.fromCharCode(octal)\n      }\n      if (isNewLine(ch)) {\n        // Unicode new line characters after \\ get removed from output in both\n        // template literals and strings\n        if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n        return \"\"\n      }\n      return String.fromCharCode(ch)\n    }\n  };\n\n  // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\n  pp.readHexChar = function(len) {\n    var codePos = this.pos;\n    var n = this.readInt(16, len);\n    if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n    return n\n  };\n\n  // Read an identifier, and return it as a string. Sets `this.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  pp.readWord1 = function() {\n    this.containsEsc = false;\n    var word = \"\", first = true, chunkStart = this.pos;\n    var astral = this.options.ecmaVersion >= 6;\n    while (this.pos < this.input.length) {\n      var ch = this.fullCharCodeAtPos();\n      if (isIdentifierChar(ch, astral)) {\n        this.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) { // \"\\\"\n        this.containsEsc = true;\n        word += this.input.slice(chunkStart, this.pos);\n        var escStart = this.pos;\n        if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"\n          { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n        ++this.pos;\n        var esc = this.readCodePoint();\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n          { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n        word += codePointToString(esc);\n        chunkStart = this.pos;\n      } else {\n        break\n      }\n      first = false;\n    }\n    return word + this.input.slice(chunkStart, this.pos)\n  };\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  pp.readWord = function() {\n    var word = this.readWord1();\n    var type = types$1.name;\n    if (this.keywords.test(word)) {\n      type = keywords[word];\n    }\n    return this.finishToken(type, word)\n  };\n\n  // Acorn is a tiny, fast JavaScript parser written in JavaScript.\n  //\n  // Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n  // various contributors and released under an MIT license.\n  //\n  // Git repositories for Acorn are available at\n  //\n  //     http://marijnhaverbeke.nl/git/acorn\n  //     https://github.com/acornjs/acorn.git\n  //\n  // Please use the [github bug tracker][ghbt] to report issues.\n  //\n  // [ghbt]: https://github.com/acornjs/acorn/issues\n  //\n  // [walk]: util/walk.js\n\n\n  var version = \"8.14.0\";\n\n  Parser.acorn = {\n    Parser: Parser,\n    version: version,\n    defaultOptions: defaultOptions,\n    Position: Position,\n    SourceLocation: SourceLocation,\n    getLineInfo: getLineInfo,\n    Node: Node,\n    TokenType: TokenType,\n    tokTypes: types$1,\n    keywordTypes: keywords,\n    TokContext: TokContext,\n    tokContexts: types,\n    isIdentifierChar: isIdentifierChar,\n    isIdentifierStart: isIdentifierStart,\n    Token: Token,\n    isNewLine: isNewLine,\n    lineBreak: lineBreak,\n    lineBreakG: lineBreakG,\n    nonASCIIwhitespace: nonASCIIwhitespace\n  };\n\n  // The main exported interface (under `self.acorn` when in the\n  // browser) is a `parse` function that takes a code string and returns\n  // an abstract syntax tree as specified by the [ESTree spec][estree].\n  //\n  // [estree]: https://github.com/estree/estree\n\n  function parse(input, options) {\n    return Parser.parse(input, options)\n  }\n\n  // This function tries to parse a single expression at a given\n  // offset in a string. Useful for parsing mixed-language formats\n  // that embed JavaScript expressions.\n\n  function parseExpressionAt(input, pos, options) {\n    return Parser.parseExpressionAt(input, pos, options)\n  }\n\n  // Acorn is organized as a tokenizer and a recursive-descent parser.\n  // The `tokenizer` export provides an interface to the tokenizer.\n\n  function tokenizer(input, options) {\n    return Parser.tokenizer(input, options)\n  }\n\n  exports.Node = Node;\n  exports.Parser = Parser;\n  exports.Position = Position;\n  exports.SourceLocation = SourceLocation;\n  exports.TokContext = TokContext;\n  exports.Token = Token;\n  exports.TokenType = TokenType;\n  exports.defaultOptions = defaultOptions;\n  exports.getLineInfo = getLineInfo;\n  exports.isIdentifierChar = isIdentifierChar;\n  exports.isIdentifierStart = isIdentifierStart;\n  exports.isNewLine = isNewLine;\n  exports.keywordTypes = keywords;\n  exports.lineBreak = lineBreak;\n  exports.lineBreakG = lineBreakG;\n  exports.nonASCIIwhitespace = nonASCIIwhitespace;\n  exports.parse = parse;\n  exports.parseExpressionAt = parseExpressionAt;\n  exports.tokContexts = types;\n  exports.tokTypes = types$1;\n  exports.tokenizer = tokenizer;\n  exports.version = version;\n\n}));\n","'use strict';\n\nconst XHTMLEntities = require('./xhtml');\n\nconst hexNumber = /^[\\da-fA-F]+$/;\nconst decimalNumber = /^\\d+$/;\n\n// The map to `acorn-jsx` tokens from `acorn` namespace objects.\nconst acornJsxMap = new WeakMap();\n\n// Get the original tokens for the given `acorn` namespace object.\nfunction getJsxTokens(acorn) {\n  acorn = acorn.Parser.acorn || acorn;\n  let acornJsx = acornJsxMap.get(acorn);\n  if (!acornJsx) {\n    const tt = acorn.tokTypes;\n    const TokContext = acorn.TokContext;\n    const TokenType = acorn.TokenType;\n    const tc_oTag = new TokContext('<tag', false);\n    const tc_cTag = new TokContext('</tag', false);\n    const tc_expr = new TokContext('<tag>...</tag>', true, true);\n    const tokContexts = {\n      tc_oTag: tc_oTag,\n      tc_cTag: tc_cTag,\n      tc_expr: tc_expr\n    };\n    const tokTypes = {\n      jsxName: new TokenType('jsxName'),\n      jsxText: new TokenType('jsxText', {beforeExpr: true}),\n      jsxTagStart: new TokenType('jsxTagStart', {startsExpr: true}),\n      jsxTagEnd: new TokenType('jsxTagEnd')\n    };\n\n    tokTypes.jsxTagStart.updateContext = function() {\n      this.context.push(tc_expr); // treat as beginning of JSX expression\n      this.context.push(tc_oTag); // start opening tag context\n      this.exprAllowed = false;\n    };\n    tokTypes.jsxTagEnd.updateContext = function(prevType) {\n      let out = this.context.pop();\n      if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {\n        this.context.pop();\n        this.exprAllowed = this.curContext() === tc_expr;\n      } else {\n        this.exprAllowed = true;\n      }\n    };\n\n    acornJsx = { tokContexts: tokContexts, tokTypes: tokTypes };\n    acornJsxMap.set(acorn, acornJsx);\n  }\n\n  return acornJsx;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(object) {\n  if (!object)\n    return object;\n\n  if (object.type === 'JSXIdentifier')\n    return object.name;\n\n  if (object.type === 'JSXNamespacedName')\n    return object.namespace.name + ':' + object.name.name;\n\n  if (object.type === 'JSXMemberExpression')\n    return getQualifiedJSXName(object.object) + '.' +\n    getQualifiedJSXName(object.property);\n}\n\nmodule.exports = function(options) {\n  options = options || {};\n  return function(Parser) {\n    return plugin({\n      allowNamespaces: options.allowNamespaces !== false,\n      allowNamespacedObjects: !!options.allowNamespacedObjects\n    }, Parser);\n  };\n};\n\n// This is `tokTypes` of the peer dep.\n// This can be different instances from the actual `tokTypes` this plugin uses.\nObject.defineProperty(module.exports, \"tokTypes\", {\n  get: function get_tokTypes() {\n    return getJsxTokens(require(\"acorn\")).tokTypes;\n  },\n  configurable: true,\n  enumerable: true\n});\n\nfunction plugin(options, Parser) {\n  const acorn = Parser.acorn || require(\"acorn\");\n  const acornJsx = getJsxTokens(acorn);\n  const tt = acorn.tokTypes;\n  const tok = acornJsx.tokTypes;\n  const tokContexts = acorn.tokContexts;\n  const tc_oTag = acornJsx.tokContexts.tc_oTag;\n  const tc_cTag = acornJsx.tokContexts.tc_cTag;\n  const tc_expr = acornJsx.tokContexts.tc_expr;\n  const isNewLine = acorn.isNewLine;\n  const isIdentifierStart = acorn.isIdentifierStart;\n  const isIdentifierChar = acorn.isIdentifierChar;\n\n  return class extends Parser {\n    // Expose actual `tokTypes` and `tokContexts` to other plugins.\n    static get acornJsx() {\n      return acornJsx;\n    }\n\n    // Reads inline JSX contents token.\n    jsx_readToken() {\n      let out = '', chunkStart = this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated JSX contents');\n        let ch = this.input.charCodeAt(this.pos);\n\n        switch (ch) {\n        case 60: // '<'\n        case 123: // '{'\n          if (this.pos === this.start) {\n            if (ch === 60 && this.exprAllowed) {\n              ++this.pos;\n              return this.finishToken(tok.jsxTagStart);\n            }\n            return this.getTokenFromCode(ch);\n          }\n          out += this.input.slice(chunkStart, this.pos);\n          return this.finishToken(tok.jsxText, out);\n\n        case 38: // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n          break;\n\n        case 62: // '>'\n        case 125: // '}'\n          this.raise(\n            this.pos,\n            \"Unexpected token `\" + this.input[this.pos] + \"`. Did you mean `\" +\n              (ch === 62 ? \"&gt;\" : \"&rbrace;\") + \"` or \" + \"`{\\\"\" + this.input[this.pos] + \"\\\"}\" + \"`?\"\n          );\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.pos);\n            out += this.jsx_readNewLine(true);\n            chunkStart = this.pos;\n          } else {\n            ++this.pos;\n          }\n        }\n      }\n    }\n\n    jsx_readNewLine(normalizeCRLF) {\n      let ch = this.input.charCodeAt(this.pos);\n      let out;\n      ++this.pos;\n      if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n        ++this.pos;\n        out = normalizeCRLF ? '\\n' : '\\r\\n';\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n\n      return out;\n    }\n\n    jsx_readString(quote) {\n      let out = '', chunkStart = ++this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated string constant');\n        let ch = this.input.charCodeAt(this.pos);\n        if (ch === quote) break;\n        if (ch === 38) { // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readNewLine(false);\n          chunkStart = this.pos;\n        } else {\n          ++this.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsx_readEntity() {\n      let str = '', count = 0, entity;\n      let ch = this.input[this.pos];\n      if (ch !== '&')\n        this.raise(this.pos, 'Entity must start with an ampersand');\n      let startPos = ++this.pos;\n      while (this.pos < this.input.length && count++ < 10) {\n        ch = this.input[this.pos++];\n        if (ch === ';') {\n          if (str[0] === '#') {\n            if (str[1] === 'x') {\n              str = str.substr(2);\n              if (hexNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 16));\n            } else {\n              str = str.substr(1);\n              if (decimalNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 10));\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.pos = startPos;\n        return '&';\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can't contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsx_readWord() {\n      let ch, start = this.pos;\n      do {\n        ch = this.input.charCodeAt(++this.pos);\n      } while (isIdentifierChar(ch) || ch === 45); // '-'\n      return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsx_parseIdentifier() {\n      let node = this.startNode();\n      if (this.type === tok.jsxName)\n        node.name = this.value;\n      else if (this.type.keyword)\n        node.name = this.type.keyword;\n      else\n        this.unexpected();\n      this.next();\n      return this.finishNode(node, 'JSXIdentifier');\n    }\n\n    // Parse namespaced identifier.\n\n    jsx_parseNamespacedName() {\n      let startPos = this.start, startLoc = this.startLoc;\n      let name = this.jsx_parseIdentifier();\n      if (!options.allowNamespaces || !this.eat(tt.colon)) return name;\n      var node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsx_parseIdentifier();\n      return this.finishNode(node, 'JSXNamespacedName');\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsx_parseElementName() {\n      if (this.type === tok.jsxTagEnd) return '';\n      let startPos = this.start, startLoc = this.startLoc;\n      let node = this.jsx_parseNamespacedName();\n      if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !options.allowNamespacedObjects) {\n        this.unexpected();\n      }\n      while (this.eat(tt.dot)) {\n        let newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsx_parseIdentifier();\n        node = this.finishNode(newNode, 'JSXMemberExpression');\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsx_parseAttributeValue() {\n      switch (this.type) {\n      case tt.braceL:\n        let node = this.jsx_parseExpressionContainer();\n        if (node.expression.type === 'JSXEmptyExpression')\n          this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');\n        return node;\n\n      case tok.jsxTagStart:\n      case tt.string:\n        return this.parseExprAtom();\n\n      default:\n        this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsx_parseEmptyExpression() {\n      let node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\n      return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsx_parseExpressionContainer() {\n      let node = this.startNode();\n      this.next();\n      node.expression = this.type === tt.braceR\n        ? this.jsx_parseEmptyExpression()\n        : this.parseExpression();\n      this.expect(tt.braceR);\n      return this.finishNode(node, 'JSXExpressionContainer');\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsx_parseAttribute() {\n      let node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, 'JSXSpreadAttribute');\n      }\n      node.name = this.jsx_parseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\n      return this.finishNode(node, 'JSXAttribute');\n    }\n\n    // Parses JSX opening tag starting after '<'.\n\n    jsx_parseOpeningElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      node.attributes = [];\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      while (this.type !== tt.slash && this.type !== tok.jsxTagEnd)\n        node.attributes.push(this.jsx_parseAttribute());\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXOpeningElement' : 'JSXOpeningFragment');\n    }\n\n    // Parses JSX closing tag starting after '</'.\n\n    jsx_parseClosingElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXClosingElement' : 'JSXClosingFragment');\n    }\n\n    // Parses entire JSX element, including it's opening tag\n    // (starting after '<'), attributes, contents and closing tag.\n\n    jsx_parseElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let children = [];\n      let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.type) {\n          case tok.jsxTagStart:\n            startPos = this.start; startLoc = this.startLoc;\n            this.next();\n            if (this.eat(tt.slash)) {\n              closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n            children.push(this.jsx_parseElementAt(startPos, startLoc));\n            break;\n\n          case tok.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case tt.braceL:\n            children.push(this.jsx_parseExpressionContainer());\n            break;\n\n          default:\n            this.unexpected();\n          }\n        }\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(\n            closingElement.start,\n            'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');\n        }\n      }\n      let fragmentOrElement = openingElement.name ? 'Element' : 'Fragment';\n\n      node['opening' + fragmentOrElement] = openingElement;\n      node['closing' + fragmentOrElement] = closingElement;\n      node.children = children;\n      if (this.type === tt.relational && this.value === \"<\") {\n        this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n      }\n      return this.finishNode(node, 'JSX' + fragmentOrElement);\n    }\n\n    // Parse JSX text\n\n    jsx_parseText() {\n      let node = this.parseLiteral(this.value);\n      node.type = \"JSXText\";\n      return node;\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsx_parseElement() {\n      let startPos = this.start, startLoc = this.startLoc;\n      this.next();\n      return this.jsx_parseElementAt(startPos, startLoc);\n    }\n\n    parseExprAtom(refShortHandDefaultPos) {\n      if (this.type === tok.jsxText)\n        return this.jsx_parseText();\n      else if (this.type === tok.jsxTagStart)\n        return this.jsx_parseElement();\n      else\n        return super.parseExprAtom(refShortHandDefaultPos);\n    }\n\n    readToken(code) {\n      let context = this.curContext();\n\n      if (context === tc_expr) return this.jsx_readToken();\n\n      if (context === tc_oTag || context === tc_cTag) {\n        if (isIdentifierStart(code)) return this.jsx_readWord();\n\n        if (code == 62) {\n          ++this.pos;\n          return this.finishToken(tok.jsxTagEnd);\n        }\n\n        if ((code === 34 || code === 39) && context == tc_oTag)\n          return this.jsx_readString(code);\n      }\n\n      if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {\n        ++this.pos;\n        return this.finishToken(tok.jsxTagStart);\n      }\n      return super.readToken(code);\n    }\n\n    updateContext(prevType) {\n      if (this.type == tt.braceL) {\n        var curContext = this.curContext();\n        if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);\n        else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);\n        else super.updateContext(prevType);\n        this.exprAllowed = true;\n      } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {\n        this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.context.push(tc_cTag); // reconsider as closing tag context\n        this.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n}\n","//\n// format - printf-like string formatting for JavaScript\n// github.com/samsonjs/format\n// @_sjs\n//\n// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>\n//\n// MIT License\n// http://sjs.mit-license.org\n//\n\n;(function() {\n\n  //// Export the API\n  var namespace;\n\n  // CommonJS / Node module\n  if (typeof module !== 'undefined') {\n    namespace = module.exports = format;\n  }\n\n  // Browsers and other environments\n  else {\n    // Get the global object. Works in ES3, ES5, and ES5 strict mode.\n    namespace = (function(){ return this || (1,eval)('this') }());\n  }\n\n  namespace.format = format;\n  namespace.vsprintf = vsprintf;\n\n  if (typeof console !== 'undefined' && typeof console.log === 'function') {\n    namespace.printf = printf;\n  }\n\n  function printf(/* ... */) {\n    console.log(format.apply(null, arguments));\n  }\n\n  function vsprintf(fmt, replacements) {\n    return format.apply(null, [fmt].concat(replacements));\n  }\n\n  function format(fmt) {\n    var argIndex = 1 // skip initial format argument\n      , args = [].slice.call(arguments)\n      , i = 0\n      , n = fmt.length\n      , result = ''\n      , c\n      , escaped = false\n      , arg\n      , tmp\n      , leadingZero = false\n      , precision\n      , nextArg = function() { return args[argIndex++]; }\n      , slurpNumber = function() {\n          var digits = '';\n          while (/\\d/.test(fmt[i])) {\n            digits += fmt[i++];\n            c = fmt[i];\n          }\n          return digits.length > 0 ? parseInt(digits) : null;\n        }\n      ;\n    for (; i < n; ++i) {\n      c = fmt[i];\n      if (escaped) {\n        escaped = false;\n        if (c == '.') {\n          leadingZero = false;\n          c = fmt[++i];\n        }\n        else if (c == '0' && fmt[i + 1] == '.') {\n          leadingZero = true;\n          i += 2;\n          c = fmt[i];\n        }\n        else {\n          leadingZero = true;\n        }\n        precision = slurpNumber();\n        switch (c) {\n        case 'b': // number in binary\n          result += parseInt(nextArg(), 10).toString(2);\n          break;\n        case 'c': // character\n          arg = nextArg();\n          if (typeof arg === 'string' || arg instanceof String)\n            result += arg;\n          else\n            result += String.fromCharCode(parseInt(arg, 10));\n          break;\n        case 'd': // number in decimal\n          result += parseInt(nextArg(), 10);\n          break;\n        case 'f': // floating point number\n          tmp = String(parseFloat(nextArg()).toFixed(precision || 6));\n          result += leadingZero ? tmp : tmp.replace(/^0/, '');\n          break;\n        case 'j': // JSON\n          result += JSON.stringify(nextArg());\n          break;\n        case 'o': // number in octal\n          result += '0' + parseInt(nextArg(), 10).toString(8);\n          break;\n        case 's': // string\n          result += nextArg();\n          break;\n        case 'x': // lowercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16);\n          break;\n        case 'X': // uppercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16).toUpperCase();\n          break;\n        default:\n          result += c;\n          break;\n        }\n      } else if (c === '%') {\n        escaped = true;\n      } else {\n        result += c;\n      }\n    }\n    return result;\n  }\n\n}());\n","/**\n * @implements {IHooks}\n */\nclass Hooks {\n\t/**\n\t * @callback HookCallback\n\t * @this {*|Jsep} this\n\t * @param {Jsep} env\n\t * @returns: void\n\t */\n\t/**\n\t * Adds the given callback to the list of callbacks for the given hook.\n\t *\n\t * The callback will be invoked when the hook it is registered for is run.\n\t *\n\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t *\n\t * @param {string|object} name The name of the hook, or an object of callbacks keyed by name\n\t * @param {HookCallback|boolean} callback The callback function which is given environment variables.\n\t * @param {?boolean} [first=false] Will add the hook to the top of the list (defaults to the bottom)\n\t * @public\n\t */\n\tadd(name, callback, first) {\n\t\tif (typeof arguments[0] != 'string') {\n\t\t\t// Multiple hook callbacks, keyed by name\n\t\t\tfor (let name in arguments[0]) {\n\t\t\t\tthis.add(name, arguments[0][name], arguments[1]);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t(Array.isArray(name) ? name : [name]).forEach(function (name) {\n\t\t\t\tthis[name] = this[name] || [];\n\n\t\t\t\tif (callback) {\n\t\t\t\t\tthis[name][first ? 'unshift' : 'push'](callback);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t}\n\t}\n\n\t/**\n\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t *\n\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t *\n\t * @param {string} name The name of the hook.\n\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t * @public\n\t */\n\trun(name, env) {\n\t\tthis[name] = this[name] || [];\n\t\tthis[name].forEach(function (callback) {\n\t\t\tcallback.call(env && env.context ? env.context : env, env);\n\t\t});\n\t}\n}\n\n/**\n * @implements {IPlugins}\n */\nclass Plugins {\n\tconstructor(jsep) {\n\t\tthis.jsep = jsep;\n\t\tthis.registered = {};\n\t}\n\n\t/**\n\t * @callback PluginSetup\n\t * @this {Jsep} jsep\n\t * @returns: void\n\t */\n\t/**\n\t * Adds the given plugin(s) to the registry\n\t *\n\t * @param {object} plugins\n\t * @param {string} plugins.name The name of the plugin\n\t * @param {PluginSetup} plugins.init The init function\n\t * @public\n\t */\n\tregister(...plugins) {\n\t\tplugins.forEach((plugin) => {\n\t\t\tif (typeof plugin !== 'object' || !plugin.name || !plugin.init) {\n\t\t\t\tthrow new Error('Invalid JSEP plugin format');\n\t\t\t}\n\t\t\tif (this.registered[plugin.name]) {\n\t\t\t\t// already registered. Ignore.\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tplugin.init(this.jsep);\n\t\t\tthis.registered[plugin.name] = plugin;\n\t\t});\n\t}\n}\n\n//     JavaScript Expression Parser (JSEP) 1.4.0\n\nclass Jsep {\n\t/**\n\t * @returns {string}\n\t */\n\tstatic get version() {\n\t\t// To be filled in by the template\n\t\treturn '1.4.0';\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tstatic toString() {\n\t\treturn 'JavaScript Expression Parser (JSEP) v' + Jsep.version;\n\t};\n\n\t// ==================== CONFIG ================================\n\t/**\n\t * @method addUnaryOp\n\t * @param {string} op_name The name of the unary op to add\n\t * @returns {Jsep}\n\t */\n\tstatic addUnaryOp(op_name) {\n\t\tJsep.max_unop_len = Math.max(op_name.length, Jsep.max_unop_len);\n\t\tJsep.unary_ops[op_name] = 1;\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method jsep.addBinaryOp\n\t * @param {string} op_name The name of the binary op to add\n\t * @param {number} precedence The precedence of the binary op (can be a float). Higher number = higher precedence\n\t * @param {boolean} [isRightAssociative=false] whether operator is right-associative\n\t * @returns {Jsep}\n\t */\n\tstatic addBinaryOp(op_name, precedence, isRightAssociative) {\n\t\tJsep.max_binop_len = Math.max(op_name.length, Jsep.max_binop_len);\n\t\tJsep.binary_ops[op_name] = precedence;\n\t\tif (isRightAssociative) {\n\t\t\tJsep.right_associative.add(op_name);\n\t\t}\n\t\telse {\n\t\t\tJsep.right_associative.delete(op_name);\n\t\t}\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method addIdentifierChar\n\t * @param {string} char The additional character to treat as a valid part of an identifier\n\t * @returns {Jsep}\n\t */\n\tstatic addIdentifierChar(char) {\n\t\tJsep.additional_identifier_chars.add(char);\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method addLiteral\n\t * @param {string} literal_name The name of the literal to add\n\t * @param {*} literal_value The value of the literal\n\t * @returns {Jsep}\n\t */\n\tstatic addLiteral(literal_name, literal_value) {\n\t\tJsep.literals[literal_name] = literal_value;\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeUnaryOp\n\t * @param {string} op_name The name of the unary op to remove\n\t * @returns {Jsep}\n\t */\n\tstatic removeUnaryOp(op_name) {\n\t\tdelete Jsep.unary_ops[op_name];\n\t\tif (op_name.length === Jsep.max_unop_len) {\n\t\t\tJsep.max_unop_len = Jsep.getMaxKeyLen(Jsep.unary_ops);\n\t\t}\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeAllUnaryOps\n\t * @returns {Jsep}\n\t */\n\tstatic removeAllUnaryOps() {\n\t\tJsep.unary_ops = {};\n\t\tJsep.max_unop_len = 0;\n\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeIdentifierChar\n\t * @param {string} char The additional character to stop treating as a valid part of an identifier\n\t * @returns {Jsep}\n\t */\n\tstatic removeIdentifierChar(char) {\n\t\tJsep.additional_identifier_chars.delete(char);\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeBinaryOp\n\t * @param {string} op_name The name of the binary op to remove\n\t * @returns {Jsep}\n\t */\n\tstatic removeBinaryOp(op_name) {\n\t\tdelete Jsep.binary_ops[op_name];\n\n\t\tif (op_name.length === Jsep.max_binop_len) {\n\t\t\tJsep.max_binop_len = Jsep.getMaxKeyLen(Jsep.binary_ops);\n\t\t}\n\t\tJsep.right_associative.delete(op_name);\n\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeAllBinaryOps\n\t * @returns {Jsep}\n\t */\n\tstatic removeAllBinaryOps() {\n\t\tJsep.binary_ops = {};\n\t\tJsep.max_binop_len = 0;\n\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeLiteral\n\t * @param {string} literal_name The name of the literal to remove\n\t * @returns {Jsep}\n\t */\n\tstatic removeLiteral(literal_name) {\n\t\tdelete Jsep.literals[literal_name];\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeAllLiterals\n\t * @returns {Jsep}\n\t */\n\tstatic removeAllLiterals() {\n\t\tJsep.literals = {};\n\n\t\treturn Jsep;\n\t}\n\t// ==================== END CONFIG ============================\n\n\n\t/**\n\t * @returns {string}\n\t */\n\tget char() {\n\t\treturn this.expr.charAt(this.index);\n\t}\n\n\t/**\n\t * @returns {number}\n\t */\n\tget code() {\n\t\treturn this.expr.charCodeAt(this.index);\n\t};\n\n\n\t/**\n\t * @param {string} expr a string with the passed in express\n\t * @returns Jsep\n\t */\n\tconstructor(expr) {\n\t\t// `index` stores the character number we are currently at\n\t\t// All of the gobbles below will modify `index` as we move along\n\t\tthis.expr = expr;\n\t\tthis.index = 0;\n\t}\n\n\t/**\n\t * static top-level parser\n\t * @returns {jsep.Expression}\n\t */\n\tstatic parse(expr) {\n\t\treturn (new Jsep(expr)).parse();\n\t}\n\n\t/**\n\t * Get the longest key length of any object\n\t * @param {object} obj\n\t * @returns {number}\n\t */\n\tstatic getMaxKeyLen(obj) {\n\t\treturn Math.max(0, ...Object.keys(obj).map(k => k.length));\n\t}\n\n\t/**\n\t * `ch` is a character code in the next three functions\n\t * @param {number} ch\n\t * @returns {boolean}\n\t */\n\tstatic isDecimalDigit(ch) {\n\t\treturn (ch >= 48 && ch <= 57); // 0...9\n\t}\n\n\t/**\n\t * Returns the precedence of a binary operator or `0` if it isn't a binary operator. Can be float.\n\t * @param {string} op_val\n\t * @returns {number}\n\t */\n\tstatic binaryPrecedence(op_val) {\n\t\treturn Jsep.binary_ops[op_val] || 0;\n\t}\n\n\t/**\n\t * Looks for start of identifier\n\t * @param {number} ch\n\t * @returns {boolean}\n\t */\n\tstatic isIdentifierStart(ch) {\n\t\treturn  (ch >= 65 && ch <= 90) || // A...Z\n\t\t\t(ch >= 97 && ch <= 122) || // a...z\n\t\t\t(ch >= 128 && !Jsep.binary_ops[String.fromCharCode(ch)]) || // any non-ASCII that is not an operator\n\t\t\t(Jsep.additional_identifier_chars.has(String.fromCharCode(ch))); // additional characters\n\t}\n\n\t/**\n\t * @param {number} ch\n\t * @returns {boolean}\n\t */\n\tstatic isIdentifierPart(ch) {\n\t\treturn Jsep.isIdentifierStart(ch) || Jsep.isDecimalDigit(ch);\n\t}\n\n\t/**\n\t * throw error at index of the expression\n\t * @param {string} message\n\t * @throws\n\t */\n\tthrowError(message) {\n\t\tconst error = new Error(message + ' at character ' + this.index);\n\t\terror.index = this.index;\n\t\terror.description = message;\n\t\tthrow error;\n\t}\n\n\t/**\n\t * Run a given hook\n\t * @param {string} name\n\t * @param {jsep.Expression|false} [node]\n\t * @returns {?jsep.Expression}\n\t */\n\trunHook(name, node) {\n\t\tif (Jsep.hooks[name]) {\n\t\t\tconst env = { context: this, node };\n\t\t\tJsep.hooks.run(name, env);\n\t\t\treturn env.node;\n\t\t}\n\t\treturn node;\n\t}\n\n\t/**\n\t * Runs a given hook until one returns a node\n\t * @param {string} name\n\t * @returns {?jsep.Expression}\n\t */\n\tsearchHook(name) {\n\t\tif (Jsep.hooks[name]) {\n\t\t\tconst env = { context: this };\n\t\t\tJsep.hooks[name].find(function (callback) {\n\t\t\t\tcallback.call(env.context, env);\n\t\t\t\treturn env.node;\n\t\t\t});\n\t\t\treturn env.node;\n\t\t}\n\t}\n\n\t/**\n\t * Push `index` up to the next non-space character\n\t */\n\tgobbleSpaces() {\n\t\tlet ch = this.code;\n\t\t// Whitespace\n\t\twhile (ch === Jsep.SPACE_CODE\n\t\t|| ch === Jsep.TAB_CODE\n\t\t|| ch === Jsep.LF_CODE\n\t\t|| ch === Jsep.CR_CODE) {\n\t\t\tch = this.expr.charCodeAt(++this.index);\n\t\t}\n\t\tthis.runHook('gobble-spaces');\n\t}\n\n\t/**\n\t * Top-level method to parse all expressions and returns compound or single node\n\t * @returns {jsep.Expression}\n\t */\n\tparse() {\n\t\tthis.runHook('before-all');\n\t\tconst nodes = this.gobbleExpressions();\n\n\t\t// If there's only one expression just try returning the expression\n\t\tconst node = nodes.length === 1\n\t\t  ? nodes[0]\n\t\t\t: {\n\t\t\t\ttype: Jsep.COMPOUND,\n\t\t\t\tbody: nodes\n\t\t\t};\n\t\treturn this.runHook('after-all', node);\n\t}\n\n\t/**\n\t * top-level parser (but can be reused within as well)\n\t * @param {number} [untilICode]\n\t * @returns {jsep.Expression[]}\n\t */\n\tgobbleExpressions(untilICode) {\n\t\tlet nodes = [], ch_i, node;\n\n\t\twhile (this.index < this.expr.length) {\n\t\t\tch_i = this.code;\n\n\t\t\t// Expressions can be separated by semicolons, commas, or just inferred without any\n\t\t\t// separators\n\t\t\tif (ch_i === Jsep.SEMCOL_CODE || ch_i === Jsep.COMMA_CODE) {\n\t\t\t\tthis.index++; // ignore separators\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Try to gobble each expression individually\n\t\t\t\tif (node = this.gobbleExpression()) {\n\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t// If we weren't able to find a binary expression and are out of room, then\n\t\t\t\t\t// the expression passed in probably has too much\n\t\t\t\t}\n\t\t\t\telse if (this.index < this.expr.length) {\n\t\t\t\t\tif (ch_i === untilICode) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tthis.throwError('Unexpected \"' + this.char + '\"');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn nodes;\n\t}\n\n\t/**\n\t * The main parsing function.\n\t * @returns {?jsep.Expression}\n\t */\n\tgobbleExpression() {\n\t\tconst node = this.searchHook('gobble-expression') || this.gobbleBinaryExpression();\n\t\tthis.gobbleSpaces();\n\n\t\treturn this.runHook('after-expression', node);\n\t}\n\n\t/**\n\t * Search for the operation portion of the string (e.g. `+`, `===`)\n\t * Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)\n\t * and move down from 3 to 2 to 1 character until a matching binary operation is found\n\t * then, return that binary operation\n\t * @returns {string|boolean}\n\t */\n\tgobbleBinaryOp() {\n\t\tthis.gobbleSpaces();\n\t\tlet to_check = this.expr.substr(this.index, Jsep.max_binop_len);\n\t\tlet tc_len = to_check.length;\n\n\t\twhile (tc_len > 0) {\n\t\t\t// Don't accept a binary op when it is an identifier.\n\t\t\t// Binary ops that start with a identifier-valid character must be followed\n\t\t\t// by a non identifier-part valid character\n\t\t\tif (Jsep.binary_ops.hasOwnProperty(to_check) && (\n\t\t\t\t!Jsep.isIdentifierStart(this.code) ||\n\t\t\t\t(this.index + to_check.length < this.expr.length && !Jsep.isIdentifierPart(this.expr.charCodeAt(this.index + to_check.length)))\n\t\t\t)) {\n\t\t\t\tthis.index += tc_len;\n\t\t\t\treturn to_check;\n\t\t\t}\n\t\t\tto_check = to_check.substr(0, --tc_len);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * This function is responsible for gobbling an individual expression,\n\t * e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`\n\t * @returns {?jsep.BinaryExpression}\n\t */\n\tgobbleBinaryExpression() {\n\t\tlet node, biop, prec, stack, biop_info, left, right, i, cur_biop;\n\n\t\t// First, try to get the leftmost thing\n\t\t// Then, check to see if there's a binary operator operating on that leftmost thing\n\t\t// Don't gobbleBinaryOp without a left-hand-side\n\t\tleft = this.gobbleToken();\n\t\tif (!left) {\n\t\t\treturn left;\n\t\t}\n\t\tbiop = this.gobbleBinaryOp();\n\n\t\t// If there wasn't a binary operator, just return the leftmost node\n\t\tif (!biop) {\n\t\t\treturn left;\n\t\t}\n\n\t\t// Otherwise, we need to start a stack to properly place the binary operations in their\n\t\t// precedence structure\n\t\tbiop_info = { value: biop, prec: Jsep.binaryPrecedence(biop), right_a: Jsep.right_associative.has(biop) };\n\n\t\tright = this.gobbleToken();\n\n\t\tif (!right) {\n\t\t\tthis.throwError(\"Expected expression after \" + biop);\n\t\t}\n\n\t\tstack = [left, biop_info, right];\n\n\t\t// Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)\n\t\twhile ((biop = this.gobbleBinaryOp())) {\n\t\t\tprec = Jsep.binaryPrecedence(biop);\n\n\t\t\tif (prec === 0) {\n\t\t\t\tthis.index -= biop.length;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbiop_info = { value: biop, prec, right_a: Jsep.right_associative.has(biop) };\n\n\t\t\tcur_biop = biop;\n\n\t\t\t// Reduce: make a binary expression from the three topmost entries.\n\t\t\tconst comparePrev = prev => biop_info.right_a && prev.right_a\n\t\t\t\t? prec > prev.prec\n\t\t\t\t: prec <= prev.prec;\n\t\t\twhile ((stack.length > 2) && comparePrev(stack[stack.length - 2])) {\n\t\t\t\tright = stack.pop();\n\t\t\t\tbiop = stack.pop().value;\n\t\t\t\tleft = stack.pop();\n\t\t\t\tnode = {\n\t\t\t\t\ttype: Jsep.BINARY_EXP,\n\t\t\t\t\toperator: biop,\n\t\t\t\t\tleft,\n\t\t\t\t\tright\n\t\t\t\t};\n\t\t\t\tstack.push(node);\n\t\t\t}\n\n\t\t\tnode = this.gobbleToken();\n\n\t\t\tif (!node) {\n\t\t\t\tthis.throwError(\"Expected expression after \" + cur_biop);\n\t\t\t}\n\n\t\t\tstack.push(biop_info, node);\n\t\t}\n\n\t\ti = stack.length - 1;\n\t\tnode = stack[i];\n\n\t\twhile (i > 1) {\n\t\t\tnode = {\n\t\t\t\ttype: Jsep.BINARY_EXP,\n\t\t\t\toperator: stack[i - 1].value,\n\t\t\t\tleft: stack[i - 2],\n\t\t\t\tright: node\n\t\t\t};\n\t\t\ti -= 2;\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * An individual part of a binary expression:\n\t * e.g. `foo.bar(baz)`, `1`, `\"abc\"`, `(a % 2)` (because it's in parenthesis)\n\t * @returns {boolean|jsep.Expression}\n\t */\n\tgobbleToken() {\n\t\tlet ch, to_check, tc_len, node;\n\n\t\tthis.gobbleSpaces();\n\t\tnode = this.searchHook('gobble-token');\n\t\tif (node) {\n\t\t\treturn this.runHook('after-token', node);\n\t\t}\n\n\t\tch = this.code;\n\n\t\tif (Jsep.isDecimalDigit(ch) || ch === Jsep.PERIOD_CODE) {\n\t\t\t// Char code 46 is a dot `.` which can start off a numeric literal\n\t\t\treturn this.gobbleNumericLiteral();\n\t\t}\n\n\t\tif (ch === Jsep.SQUOTE_CODE || ch === Jsep.DQUOTE_CODE) {\n\t\t\t// Single or double quotes\n\t\t\tnode = this.gobbleStringLiteral();\n\t\t}\n\t\telse if (ch === Jsep.OBRACK_CODE) {\n\t\t\tnode = this.gobbleArray();\n\t\t}\n\t\telse {\n\t\t\tto_check = this.expr.substr(this.index, Jsep.max_unop_len);\n\t\t\ttc_len = to_check.length;\n\n\t\t\twhile (tc_len > 0) {\n\t\t\t\t// Don't accept an unary op when it is an identifier.\n\t\t\t\t// Unary ops that start with a identifier-valid character must be followed\n\t\t\t\t// by a non identifier-part valid character\n\t\t\t\tif (Jsep.unary_ops.hasOwnProperty(to_check) && (\n\t\t\t\t\t!Jsep.isIdentifierStart(this.code) ||\n\t\t\t\t\t(this.index + to_check.length < this.expr.length && !Jsep.isIdentifierPart(this.expr.charCodeAt(this.index + to_check.length)))\n\t\t\t\t)) {\n\t\t\t\t\tthis.index += tc_len;\n\t\t\t\t\tconst argument = this.gobbleToken();\n\t\t\t\t\tif (!argument) {\n\t\t\t\t\t\tthis.throwError('missing unaryOp argument');\n\t\t\t\t\t}\n\t\t\t\t\treturn this.runHook('after-token', {\n\t\t\t\t\t\ttype: Jsep.UNARY_EXP,\n\t\t\t\t\t\toperator: to_check,\n\t\t\t\t\t\targument,\n\t\t\t\t\t\tprefix: true\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tto_check = to_check.substr(0, --tc_len);\n\t\t\t}\n\n\t\t\tif (Jsep.isIdentifierStart(ch)) {\n\t\t\t\tnode = this.gobbleIdentifier();\n\t\t\t\tif (Jsep.literals.hasOwnProperty(node.name)) {\n\t\t\t\t\tnode = {\n\t\t\t\t\t\ttype: Jsep.LITERAL,\n\t\t\t\t\t\tvalue: Jsep.literals[node.name],\n\t\t\t\t\t\traw: node.name,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse if (node.name === Jsep.this_str) {\n\t\t\t\t\tnode = { type: Jsep.THIS_EXP };\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (ch === Jsep.OPAREN_CODE) { // open parenthesis\n\t\t\t\tnode = this.gobbleGroup();\n\t\t\t}\n\t\t}\n\n\t\tif (!node) {\n\t\t\treturn this.runHook('after-token', false);\n\t\t}\n\n\t\tnode = this.gobbleTokenProperty(node);\n\t\treturn this.runHook('after-token', node);\n\t}\n\n\t/**\n\t * Gobble properties of of identifiers/strings/arrays/groups.\n\t * e.g. `foo`, `bar.baz`, `foo['bar'].baz`\n\t * It also gobbles function calls:\n\t * e.g. `Math.acos(obj.angle)`\n\t * @param {jsep.Expression} node\n\t * @returns {jsep.Expression}\n\t */\n\tgobbleTokenProperty(node) {\n\t\tthis.gobbleSpaces();\n\n\t\tlet ch = this.code;\n\t\twhile (ch === Jsep.PERIOD_CODE || ch === Jsep.OBRACK_CODE || ch === Jsep.OPAREN_CODE || ch === Jsep.QUMARK_CODE) {\n\t\t\tlet optional;\n\t\t\tif (ch === Jsep.QUMARK_CODE) {\n\t\t\t\tif (this.expr.charCodeAt(this.index + 1) !== Jsep.PERIOD_CODE) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\toptional = true;\n\t\t\t\tthis.index += 2;\n\t\t\t\tthis.gobbleSpaces();\n\t\t\t\tch = this.code;\n\t\t\t}\n\t\t\tthis.index++;\n\n\t\t\tif (ch === Jsep.OBRACK_CODE) {\n\t\t\t\tnode = {\n\t\t\t\t\ttype: Jsep.MEMBER_EXP,\n\t\t\t\t\tcomputed: true,\n\t\t\t\t\tobject: node,\n\t\t\t\t\tproperty: this.gobbleExpression()\n\t\t\t\t};\n\t\t\t\tif (!node.property) {\n\t\t\t\t\tthis.throwError('Unexpected \"' + this.char + '\"');\n\t\t\t\t}\n\t\t\t\tthis.gobbleSpaces();\n\t\t\t\tch = this.code;\n\t\t\t\tif (ch !== Jsep.CBRACK_CODE) {\n\t\t\t\t\tthis.throwError('Unclosed [');\n\t\t\t\t}\n\t\t\t\tthis.index++;\n\t\t\t}\n\t\t\telse if (ch === Jsep.OPAREN_CODE) {\n\t\t\t\t// A function call is being made; gobble all the arguments\n\t\t\t\tnode = {\n\t\t\t\t\ttype: Jsep.CALL_EXP,\n\t\t\t\t\t'arguments': this.gobbleArguments(Jsep.CPAREN_CODE),\n\t\t\t\t\tcallee: node\n\t\t\t\t};\n\t\t\t}\n\t\t\telse if (ch === Jsep.PERIOD_CODE || optional) {\n\t\t\t\tif (optional) {\n\t\t\t\t\tthis.index--;\n\t\t\t\t}\n\t\t\t\tthis.gobbleSpaces();\n\t\t\t\tnode = {\n\t\t\t\t\ttype: Jsep.MEMBER_EXP,\n\t\t\t\t\tcomputed: false,\n\t\t\t\t\tobject: node,\n\t\t\t\t\tproperty: this.gobbleIdentifier(),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (optional) {\n\t\t\t\tnode.optional = true;\n\t\t\t} // else leave undefined for compatibility with esprima\n\n\t\t\tthis.gobbleSpaces();\n\t\t\tch = this.code;\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to\n\t * keep track of everything in the numeric literal and then calling `parseFloat` on that string\n\t * @returns {jsep.Literal}\n\t */\n\tgobbleNumericLiteral() {\n\t\tlet number = '', ch, chCode;\n\n\t\twhile (Jsep.isDecimalDigit(this.code)) {\n\t\t\tnumber += this.expr.charAt(this.index++);\n\t\t}\n\n\t\tif (this.code === Jsep.PERIOD_CODE) { // can start with a decimal marker\n\t\t\tnumber += this.expr.charAt(this.index++);\n\n\t\t\twhile (Jsep.isDecimalDigit(this.code)) {\n\t\t\t\tnumber += this.expr.charAt(this.index++);\n\t\t\t}\n\t\t}\n\n\t\tch = this.char;\n\n\t\tif (ch === 'e' || ch === 'E') { // exponent marker\n\t\t\tnumber += this.expr.charAt(this.index++);\n\t\t\tch = this.char;\n\n\t\t\tif (ch === '+' || ch === '-') { // exponent sign\n\t\t\t\tnumber += this.expr.charAt(this.index++);\n\t\t\t}\n\n\t\t\twhile (Jsep.isDecimalDigit(this.code)) { // exponent itself\n\t\t\t\tnumber += this.expr.charAt(this.index++);\n\t\t\t}\n\n\t\t\tif (!Jsep.isDecimalDigit(this.expr.charCodeAt(this.index - 1)) ) {\n\t\t\t\tthis.throwError('Expected exponent (' + number + this.char + ')');\n\t\t\t}\n\t\t}\n\n\t\tchCode = this.code;\n\n\t\t// Check to make sure this isn't a variable name that start with a number (123abc)\n\t\tif (Jsep.isIdentifierStart(chCode)) {\n\t\t\tthis.throwError('Variable names cannot start with a number (' +\n\t\t\t\tnumber + this.char + ')');\n\t\t}\n\t\telse if (chCode === Jsep.PERIOD_CODE || (number.length === 1 && number.charCodeAt(0) === Jsep.PERIOD_CODE)) {\n\t\t\tthis.throwError('Unexpected period');\n\t\t}\n\n\t\treturn {\n\t\t\ttype: Jsep.LITERAL,\n\t\t\tvalue: parseFloat(number),\n\t\t\traw: number\n\t\t};\n\t}\n\n\t/**\n\t * Parses a string literal, staring with single or double quotes with basic support for escape codes\n\t * e.g. `\"hello world\"`, `'this is\\nJSEP'`\n\t * @returns {jsep.Literal}\n\t */\n\tgobbleStringLiteral() {\n\t\tlet str = '';\n\t\tconst startIndex = this.index;\n\t\tconst quote = this.expr.charAt(this.index++);\n\t\tlet closed = false;\n\n\t\twhile (this.index < this.expr.length) {\n\t\t\tlet ch = this.expr.charAt(this.index++);\n\n\t\t\tif (ch === quote) {\n\t\t\t\tclosed = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (ch === '\\\\') {\n\t\t\t\t// Check for all of the common escape codes\n\t\t\t\tch = this.expr.charAt(this.index++);\n\n\t\t\t\tswitch (ch) {\n\t\t\t\t\tcase 'n': str += '\\n'; break;\n\t\t\t\t\tcase 'r': str += '\\r'; break;\n\t\t\t\t\tcase 't': str += '\\t'; break;\n\t\t\t\t\tcase 'b': str += '\\b'; break;\n\t\t\t\t\tcase 'f': str += '\\f'; break;\n\t\t\t\t\tcase 'v': str += '\\x0B'; break;\n\t\t\t\t\tdefault : str += ch;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstr += ch;\n\t\t\t}\n\t\t}\n\n\t\tif (!closed) {\n\t\t\tthis.throwError('Unclosed quote after \"' + str + '\"');\n\t\t}\n\n\t\treturn {\n\t\t\ttype: Jsep.LITERAL,\n\t\t\tvalue: str,\n\t\t\traw: this.expr.substring(startIndex, this.index),\n\t\t};\n\t}\n\n\t/**\n\t * Gobbles only identifiers\n\t * e.g.: `foo`, `_value`, `$x1`\n\t * Also, this function checks if that identifier is a literal:\n\t * (e.g. `true`, `false`, `null`) or `this`\n\t * @returns {jsep.Identifier}\n\t */\n\tgobbleIdentifier() {\n\t\tlet ch = this.code, start = this.index;\n\n\t\tif (Jsep.isIdentifierStart(ch)) {\n\t\t\tthis.index++;\n\t\t}\n\t\telse {\n\t\t\tthis.throwError('Unexpected ' + this.char);\n\t\t}\n\n\t\twhile (this.index < this.expr.length) {\n\t\t\tch = this.code;\n\n\t\t\tif (Jsep.isIdentifierPart(ch)) {\n\t\t\t\tthis.index++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\ttype: Jsep.IDENTIFIER,\n\t\t\tname: this.expr.slice(start, this.index),\n\t\t};\n\t}\n\n\t/**\n\t * Gobbles a list of arguments within the context of a function call\n\t * or array literal. This function also assumes that the opening character\n\t * `(` or `[` has already been gobbled, and gobbles expressions and commas\n\t * until the terminator character `)` or `]` is encountered.\n\t * e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`\n\t * @param {number} termination\n\t * @returns {jsep.Expression[]}\n\t */\n\tgobbleArguments(termination) {\n\t\tconst args = [];\n\t\tlet closed = false;\n\t\tlet separator_count = 0;\n\n\t\twhile (this.index < this.expr.length) {\n\t\t\tthis.gobbleSpaces();\n\t\t\tlet ch_i = this.code;\n\n\t\t\tif (ch_i === termination) { // done parsing\n\t\t\t\tclosed = true;\n\t\t\t\tthis.index++;\n\n\t\t\t\tif (termination === Jsep.CPAREN_CODE && separator_count && separator_count >= args.length){\n\t\t\t\t\tthis.throwError('Unexpected token ' + String.fromCharCode(termination));\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (ch_i === Jsep.COMMA_CODE) { // between expressions\n\t\t\t\tthis.index++;\n\t\t\t\tseparator_count++;\n\n\t\t\t\tif (separator_count !== args.length) { // missing argument\n\t\t\t\t\tif (termination === Jsep.CPAREN_CODE) {\n\t\t\t\t\t\tthis.throwError('Unexpected token ,');\n\t\t\t\t\t}\n\t\t\t\t\telse if (termination === Jsep.CBRACK_CODE) {\n\t\t\t\t\t\tfor (let arg = args.length; arg < separator_count; arg++) {\n\t\t\t\t\t\t\targs.push(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (args.length !== separator_count && separator_count !== 0) {\n\t\t\t\t// NOTE: `&& separator_count !== 0` allows for either all commas, or all spaces as arguments\n\t\t\t\tthis.throwError('Expected comma');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst node = this.gobbleExpression();\n\n\t\t\t\tif (!node || node.type === Jsep.COMPOUND) {\n\t\t\t\t\tthis.throwError('Expected comma');\n\t\t\t\t}\n\n\t\t\t\targs.push(node);\n\t\t\t}\n\t\t}\n\n\t\tif (!closed) {\n\t\t\tthis.throwError('Expected ' + String.fromCharCode(termination));\n\t\t}\n\n\t\treturn args;\n\t}\n\n\t/**\n\t * Responsible for parsing a group of things within parentheses `()`\n\t * that have no identifier in front (so not a function call)\n\t * This function assumes that it needs to gobble the opening parenthesis\n\t * and then tries to gobble everything within that parenthesis, assuming\n\t * that the next thing it should see is the close parenthesis. If not,\n\t * then the expression probably doesn't have a `)`\n\t * @returns {boolean|jsep.Expression}\n\t */\n\tgobbleGroup() {\n\t\tthis.index++;\n\t\tlet nodes = this.gobbleExpressions(Jsep.CPAREN_CODE);\n\t\tif (this.code === Jsep.CPAREN_CODE) {\n\t\t\tthis.index++;\n\t\t\tif (nodes.length === 1) {\n\t\t\t\treturn nodes[0];\n\t\t\t}\n\t\t\telse if (!nodes.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn {\n\t\t\t\t\ttype: Jsep.SEQUENCE_EXP,\n\t\t\t\t\texpressions: nodes,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.throwError('Unclosed (');\n\t\t}\n\t}\n\n\t/**\n\t * Responsible for parsing Array literals `[1, 2, 3]`\n\t * This function assumes that it needs to gobble the opening bracket\n\t * and then tries to gobble the expressions as arguments.\n\t * @returns {jsep.ArrayExpression}\n\t */\n\tgobbleArray() {\n\t\tthis.index++;\n\n\t\treturn {\n\t\t\ttype: Jsep.ARRAY_EXP,\n\t\t\telements: this.gobbleArguments(Jsep.CBRACK_CODE)\n\t\t};\n\t}\n}\n\n// Static fields:\nconst hooks = new Hooks();\nObject.assign(Jsep, {\n\thooks,\n\tplugins: new Plugins(Jsep),\n\n\t// Node Types\n\t// ----------\n\t// This is the full set of types that any JSEP node can be.\n\t// Store them here to save space when minified\n\tCOMPOUND:        'Compound',\n\tSEQUENCE_EXP:    'SequenceExpression',\n\tIDENTIFIER:      'Identifier',\n\tMEMBER_EXP:      'MemberExpression',\n\tLITERAL:         'Literal',\n\tTHIS_EXP:        'ThisExpression',\n\tCALL_EXP:        'CallExpression',\n\tUNARY_EXP:       'UnaryExpression',\n\tBINARY_EXP:      'BinaryExpression',\n\tARRAY_EXP:       'ArrayExpression',\n\n\tTAB_CODE:    9,\n\tLF_CODE:     10,\n\tCR_CODE:     13,\n\tSPACE_CODE:  32,\n\tPERIOD_CODE: 46, // '.'\n\tCOMMA_CODE:  44, // ','\n\tSQUOTE_CODE: 39, // single quote\n\tDQUOTE_CODE: 34, // double quotes\n\tOPAREN_CODE: 40, // (\n\tCPAREN_CODE: 41, // )\n\tOBRACK_CODE: 91, // [\n\tCBRACK_CODE: 93, // ]\n\tQUMARK_CODE: 63, // ?\n\tSEMCOL_CODE: 59, // ;\n\tCOLON_CODE:  58, // :\n\n\n\t// Operations\n\t// ----------\n\t// Use a quickly-accessible map to store all of the unary operators\n\t// Values are set to `1` (it really doesn't matter)\n\tunary_ops: {\n\t\t'-': 1,\n\t\t'!': 1,\n\t\t'~': 1,\n\t\t'+': 1\n\t},\n\n\t// Also use a map for the binary operations but set their values to their\n\t// binary precedence for quick reference (higher number = higher precedence)\n\t// see [Order of operations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)\n\tbinary_ops: {\n\t\t'||': 1, '??': 1,\n\t\t'&&': 2, '|': 3, '^': 4, '&': 5,\n\t\t'==': 6, '!=': 6, '===': 6, '!==': 6,\n\t\t'<': 7, '>': 7, '<=': 7, '>=': 7,\n\t\t'<<': 8, '>>': 8, '>>>': 8,\n\t\t'+': 9, '-': 9,\n\t\t'*': 10, '/': 10, '%': 10,\n\t\t'**': 11,\n\t},\n\n\t// sets specific binary_ops as right-associative\n\tright_associative: new Set(['**']),\n\n\t// Additional valid identifier chars, apart from a-z, A-Z and 0-9 (except on the starting char)\n\tadditional_identifier_chars: new Set(['$', '_']),\n\n\t// Literals\n\t// ----------\n\t// Store the values to return for the various literals we may encounter\n\tliterals: {\n\t\t'true': true,\n\t\t'false': false,\n\t\t'null': null\n\t},\n\n\t// Except for `this`, which is special. This could be changed to something like `'self'` as well\n\tthis_str: 'this',\n});\nJsep.max_unop_len = Jsep.getMaxKeyLen(Jsep.unary_ops);\nJsep.max_binop_len = Jsep.getMaxKeyLen(Jsep.binary_ops);\n\n// Backward Compatibility:\nconst jsep = expr => (new Jsep(expr)).parse();\nconst stdClassProps = Object.getOwnPropertyNames(class Test{});\nObject.getOwnPropertyNames(Jsep)\n\t.filter(prop => !stdClassProps.includes(prop) && jsep[prop] === undefined)\n\t.forEach((m) => {\n\t\tjsep[m] = Jsep[m];\n\t});\njsep.Jsep = Jsep; // allows for const { Jsep } = require('jsep');\n\nconst CONDITIONAL_EXP = 'ConditionalExpression';\n\nvar ternary = {\n\tname: 'ternary',\n\n\tinit(jsep) {\n\t\t// Ternary expression: test ? consequent : alternate\n\t\tjsep.hooks.add('after-expression', function gobbleTernary(env) {\n\t\t\tif (env.node && this.code === jsep.QUMARK_CODE) {\n\t\t\t\tthis.index++;\n\t\t\t\tconst test = env.node;\n\t\t\t\tconst consequent = this.gobbleExpression();\n\n\t\t\t\tif (!consequent) {\n\t\t\t\t\tthis.throwError('Expected expression');\n\t\t\t\t}\n\n\t\t\t\tthis.gobbleSpaces();\n\n\t\t\t\tif (this.code === jsep.COLON_CODE) {\n\t\t\t\t\tthis.index++;\n\t\t\t\t\tconst alternate = this.gobbleExpression();\n\n\t\t\t\t\tif (!alternate) {\n\t\t\t\t\t\tthis.throwError('Expected expression');\n\t\t\t\t\t}\n\t\t\t\t\tenv.node = {\n\t\t\t\t\t\ttype: CONDITIONAL_EXP,\n\t\t\t\t\t\ttest,\n\t\t\t\t\t\tconsequent,\n\t\t\t\t\t\talternate,\n\t\t\t\t\t};\n\n\t\t\t\t\t// check for operators of higher priority than ternary (i.e. assignment)\n\t\t\t\t\t// jsep sets || at 1, and assignment at 0.9, and conditional should be between them\n\t\t\t\t\tif (test.operator && jsep.binary_ops[test.operator] <= 0.9) {\n\t\t\t\t\t\tlet newTest = test;\n\t\t\t\t\t\twhile (newTest.right.operator && jsep.binary_ops[newTest.right.operator] <= 0.9) {\n\t\t\t\t\t\t\tnewTest = newTest.right;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tenv.node.test = newTest.right;\n\t\t\t\t\t\tnewTest.right = env.node;\n\t\t\t\t\t\tenv.node = test;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.throwError('Expected :');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n};\n\n// Add default plugins:\n\njsep.plugins.register(ternary);\n\nexport { Jsep, jsep as default };\n","const OCURLY_CODE = 123; // {\nconst CCURLY_CODE = 125; // }\nconst OBJECT_EXP  = 'ObjectExpression';\nconst PROPERTY    = 'Property';\n\nvar index = {\n\tname: 'object',\n\n\tinit(jsep) {\n\t\t// Object literal support\n\t\tfunction gobbleObjectExpression(env) {\n\t\t\tif (this.code === OCURLY_CODE) {\n\t\t\t\tthis.index++;\n\t\t\t\tconst properties = [];\n\n\t\t\t\twhile (!isNaN(this.code)) {\n\t\t\t\t\tthis.gobbleSpaces();\n\t\t\t\t\tif (this.code === CCURLY_CODE) {\n\t\t\t\t\t\tthis.index++;\n\t\t\t\t\t\tenv.node = this.gobbleTokenProperty({\n\t\t\t\t\t\t\ttype: OBJECT_EXP,\n\t\t\t\t\t\t\tproperties,\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Note: using gobbleExpression instead of gobbleToken to support object destructuring\n\t\t\t\t\tconst key = this.gobbleExpression();\n\t\t\t\t\tif (!key) {\n\t\t\t\t\t\tbreak; // missing }\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.gobbleSpaces();\n\t\t\t\t\tif (key.type === jsep.IDENTIFIER && (this.code === jsep.COMMA_CODE || this.code === CCURLY_CODE)) {\n\t\t\t\t\t\t// property value shorthand\n\t\t\t\t\t\tproperties.push({\n\t\t\t\t\t\t\ttype: PROPERTY,\n\t\t\t\t\t\t\tcomputed: false,\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tvalue: key,\n\t\t\t\t\t\t\tshorthand: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse if (this.code === jsep.COLON_CODE) {\n\t\t\t\t\t\tthis.index++;\n\t\t\t\t\t\tconst value = this.gobbleExpression();\n\n\t\t\t\t\t\tif (!value) {\n\t\t\t\t\t\t\tthis.throwError('unexpected object property');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst computed = key.type === jsep.ARRAY_EXP;\n\t\t\t\t\t\tproperties.push({\n\t\t\t\t\t\t\ttype: PROPERTY,\n\t\t\t\t\t\t\tcomputed,\n\t\t\t\t\t\t\tkey: computed\n\t\t\t\t\t\t\t\t? key.elements[0]\n\t\t\t\t\t\t\t\t: key,\n\t\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\t\tshorthand: false,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.gobbleSpaces();\n\t\t\t\t\t}\n\t\t\t\t\telse if (key) {\n\t\t\t\t\t\t// spread, assignment (object destructuring with defaults), etc.\n\t\t\t\t\t\tproperties.push(key);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.code === jsep.COMMA_CODE) {\n\t\t\t\t\t\tthis.index++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.throwError('missing }');\n\t\t\t}\n\t\t}\n\n\t\tjsep.hooks.add('gobble-token', gobbleObjectExpression);\n\t}\n};\n\nexport { index as default };\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Map of named character references.\n *\n * @type {Record<string, string>}\n */\nexport const characterEntities = {\n  AElig: 'Æ',\n  AMP: '&',\n  Aacute: 'Á',\n  Abreve: 'Ă',\n  Acirc: 'Â',\n  Acy: 'А',\n  Afr: '𝔄',\n  Agrave: 'À',\n  Alpha: 'Α',\n  Amacr: 'Ā',\n  And: '⩓',\n  Aogon: 'Ą',\n  Aopf: '𝔸',\n  ApplyFunction: '⁡',\n  Aring: 'Å',\n  Ascr: '𝒜',\n  Assign: '≔',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Backslash: '∖',\n  Barv: '⫧',\n  Barwed: '⌆',\n  Bcy: 'Б',\n  Because: '∵',\n  Bernoullis: 'ℬ',\n  Beta: 'Β',\n  Bfr: '𝔅',\n  Bopf: '𝔹',\n  Breve: '˘',\n  Bscr: 'ℬ',\n  Bumpeq: '≎',\n  CHcy: 'Ч',\n  COPY: '©',\n  Cacute: 'Ć',\n  Cap: '⋒',\n  CapitalDifferentialD: 'ⅅ',\n  Cayleys: 'ℭ',\n  Ccaron: 'Č',\n  Ccedil: 'Ç',\n  Ccirc: 'Ĉ',\n  Cconint: '∰',\n  Cdot: 'Ċ',\n  Cedilla: '¸',\n  CenterDot: '·',\n  Cfr: 'ℭ',\n  Chi: 'Χ',\n  CircleDot: '⊙',\n  CircleMinus: '⊖',\n  CirclePlus: '⊕',\n  CircleTimes: '⊗',\n  ClockwiseContourIntegral: '∲',\n  CloseCurlyDoubleQuote: '”',\n  CloseCurlyQuote: '’',\n  Colon: '∷',\n  Colone: '⩴',\n  Congruent: '≡',\n  Conint: '∯',\n  ContourIntegral: '∮',\n  Copf: 'ℂ',\n  Coproduct: '∐',\n  CounterClockwiseContourIntegral: '∳',\n  Cross: '⨯',\n  Cscr: '𝒞',\n  Cup: '⋓',\n  CupCap: '≍',\n  DD: 'ⅅ',\n  DDotrahd: '⤑',\n  DJcy: 'Ђ',\n  DScy: 'Ѕ',\n  DZcy: 'Џ',\n  Dagger: '‡',\n  Darr: '↡',\n  Dashv: '⫤',\n  Dcaron: 'Ď',\n  Dcy: 'Д',\n  Del: '∇',\n  Delta: 'Δ',\n  Dfr: '𝔇',\n  DiacriticalAcute: '´',\n  DiacriticalDot: '˙',\n  DiacriticalDoubleAcute: '˝',\n  DiacriticalGrave: '`',\n  DiacriticalTilde: '˜',\n  Diamond: '⋄',\n  DifferentialD: 'ⅆ',\n  Dopf: '𝔻',\n  Dot: '¨',\n  DotDot: '⃜',\n  DotEqual: '≐',\n  DoubleContourIntegral: '∯',\n  DoubleDot: '¨',\n  DoubleDownArrow: '⇓',\n  DoubleLeftArrow: '⇐',\n  DoubleLeftRightArrow: '⇔',\n  DoubleLeftTee: '⫤',\n  DoubleLongLeftArrow: '⟸',\n  DoubleLongLeftRightArrow: '⟺',\n  DoubleLongRightArrow: '⟹',\n  DoubleRightArrow: '⇒',\n  DoubleRightTee: '⊨',\n  DoubleUpArrow: '⇑',\n  DoubleUpDownArrow: '⇕',\n  DoubleVerticalBar: '∥',\n  DownArrow: '↓',\n  DownArrowBar: '⤓',\n  DownArrowUpArrow: '⇵',\n  DownBreve: '̑',\n  DownLeftRightVector: '⥐',\n  DownLeftTeeVector: '⥞',\n  DownLeftVector: '↽',\n  DownLeftVectorBar: '⥖',\n  DownRightTeeVector: '⥟',\n  DownRightVector: '⇁',\n  DownRightVectorBar: '⥗',\n  DownTee: '⊤',\n  DownTeeArrow: '↧',\n  Downarrow: '⇓',\n  Dscr: '𝒟',\n  Dstrok: 'Đ',\n  ENG: 'Ŋ',\n  ETH: 'Ð',\n  Eacute: 'É',\n  Ecaron: 'Ě',\n  Ecirc: 'Ê',\n  Ecy: 'Э',\n  Edot: 'Ė',\n  Efr: '𝔈',\n  Egrave: 'È',\n  Element: '∈',\n  Emacr: 'Ē',\n  EmptySmallSquare: '◻',\n  EmptyVerySmallSquare: '▫',\n  Eogon: 'Ę',\n  Eopf: '𝔼',\n  Epsilon: 'Ε',\n  Equal: '⩵',\n  EqualTilde: '≂',\n  Equilibrium: '⇌',\n  Escr: 'ℰ',\n  Esim: '⩳',\n  Eta: 'Η',\n  Euml: 'Ë',\n  Exists: '∃',\n  ExponentialE: 'ⅇ',\n  Fcy: 'Ф',\n  Ffr: '𝔉',\n  FilledSmallSquare: '◼',\n  FilledVerySmallSquare: '▪',\n  Fopf: '𝔽',\n  ForAll: '∀',\n  Fouriertrf: 'ℱ',\n  Fscr: 'ℱ',\n  GJcy: 'Ѓ',\n  GT: '>',\n  Gamma: 'Γ',\n  Gammad: 'Ϝ',\n  Gbreve: 'Ğ',\n  Gcedil: 'Ģ',\n  Gcirc: 'Ĝ',\n  Gcy: 'Г',\n  Gdot: 'Ġ',\n  Gfr: '𝔊',\n  Gg: '⋙',\n  Gopf: '𝔾',\n  GreaterEqual: '≥',\n  GreaterEqualLess: '⋛',\n  GreaterFullEqual: '≧',\n  GreaterGreater: '⪢',\n  GreaterLess: '≷',\n  GreaterSlantEqual: '⩾',\n  GreaterTilde: '≳',\n  Gscr: '𝒢',\n  Gt: '≫',\n  HARDcy: 'Ъ',\n  Hacek: 'ˇ',\n  Hat: '^',\n  Hcirc: 'Ĥ',\n  Hfr: 'ℌ',\n  HilbertSpace: 'ℋ',\n  Hopf: 'ℍ',\n  HorizontalLine: '─',\n  Hscr: 'ℋ',\n  Hstrok: 'Ħ',\n  HumpDownHump: '≎',\n  HumpEqual: '≏',\n  IEcy: 'Е',\n  IJlig: 'Ĳ',\n  IOcy: 'Ё',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Icy: 'И',\n  Idot: 'İ',\n  Ifr: 'ℑ',\n  Igrave: 'Ì',\n  Im: 'ℑ',\n  Imacr: 'Ī',\n  ImaginaryI: 'ⅈ',\n  Implies: '⇒',\n  Int: '∬',\n  Integral: '∫',\n  Intersection: '⋂',\n  InvisibleComma: '⁣',\n  InvisibleTimes: '⁢',\n  Iogon: 'Į',\n  Iopf: '𝕀',\n  Iota: 'Ι',\n  Iscr: 'ℐ',\n  Itilde: 'Ĩ',\n  Iukcy: 'І',\n  Iuml: 'Ï',\n  Jcirc: 'Ĵ',\n  Jcy: 'Й',\n  Jfr: '𝔍',\n  Jopf: '𝕁',\n  Jscr: '𝒥',\n  Jsercy: 'Ј',\n  Jukcy: 'Є',\n  KHcy: 'Х',\n  KJcy: 'Ќ',\n  Kappa: 'Κ',\n  Kcedil: 'Ķ',\n  Kcy: 'К',\n  Kfr: '𝔎',\n  Kopf: '𝕂',\n  Kscr: '𝒦',\n  LJcy: 'Љ',\n  LT: '<',\n  Lacute: 'Ĺ',\n  Lambda: 'Λ',\n  Lang: '⟪',\n  Laplacetrf: 'ℒ',\n  Larr: '↞',\n  Lcaron: 'Ľ',\n  Lcedil: 'Ļ',\n  Lcy: 'Л',\n  LeftAngleBracket: '⟨',\n  LeftArrow: '←',\n  LeftArrowBar: '⇤',\n  LeftArrowRightArrow: '⇆',\n  LeftCeiling: '⌈',\n  LeftDoubleBracket: '⟦',\n  LeftDownTeeVector: '⥡',\n  LeftDownVector: '⇃',\n  LeftDownVectorBar: '⥙',\n  LeftFloor: '⌊',\n  LeftRightArrow: '↔',\n  LeftRightVector: '⥎',\n  LeftTee: '⊣',\n  LeftTeeArrow: '↤',\n  LeftTeeVector: '⥚',\n  LeftTriangle: '⊲',\n  LeftTriangleBar: '⧏',\n  LeftTriangleEqual: '⊴',\n  LeftUpDownVector: '⥑',\n  LeftUpTeeVector: '⥠',\n  LeftUpVector: '↿',\n  LeftUpVectorBar: '⥘',\n  LeftVector: '↼',\n  LeftVectorBar: '⥒',\n  Leftarrow: '⇐',\n  Leftrightarrow: '⇔',\n  LessEqualGreater: '⋚',\n  LessFullEqual: '≦',\n  LessGreater: '≶',\n  LessLess: '⪡',\n  LessSlantEqual: '⩽',\n  LessTilde: '≲',\n  Lfr: '𝔏',\n  Ll: '⋘',\n  Lleftarrow: '⇚',\n  Lmidot: 'Ŀ',\n  LongLeftArrow: '⟵',\n  LongLeftRightArrow: '⟷',\n  LongRightArrow: '⟶',\n  Longleftarrow: '⟸',\n  Longleftrightarrow: '⟺',\n  Longrightarrow: '⟹',\n  Lopf: '𝕃',\n  LowerLeftArrow: '↙',\n  LowerRightArrow: '↘',\n  Lscr: 'ℒ',\n  Lsh: '↰',\n  Lstrok: 'Ł',\n  Lt: '≪',\n  Map: '⤅',\n  Mcy: 'М',\n  MediumSpace: ' ',\n  Mellintrf: 'ℳ',\n  Mfr: '𝔐',\n  MinusPlus: '∓',\n  Mopf: '𝕄',\n  Mscr: 'ℳ',\n  Mu: 'Μ',\n  NJcy: 'Њ',\n  Nacute: 'Ń',\n  Ncaron: 'Ň',\n  Ncedil: 'Ņ',\n  Ncy: 'Н',\n  NegativeMediumSpace: '​',\n  NegativeThickSpace: '​',\n  NegativeThinSpace: '​',\n  NegativeVeryThinSpace: '​',\n  NestedGreaterGreater: '≫',\n  NestedLessLess: '≪',\n  NewLine: '\\n',\n  Nfr: '𝔑',\n  NoBreak: '⁠',\n  NonBreakingSpace: ' ',\n  Nopf: 'ℕ',\n  Not: '⫬',\n  NotCongruent: '≢',\n  NotCupCap: '≭',\n  NotDoubleVerticalBar: '∦',\n  NotElement: '∉',\n  NotEqual: '≠',\n  NotEqualTilde: '≂̸',\n  NotExists: '∄',\n  NotGreater: '≯',\n  NotGreaterEqual: '≱',\n  NotGreaterFullEqual: '≧̸',\n  NotGreaterGreater: '≫̸',\n  NotGreaterLess: '≹',\n  NotGreaterSlantEqual: '⩾̸',\n  NotGreaterTilde: '≵',\n  NotHumpDownHump: '≎̸',\n  NotHumpEqual: '≏̸',\n  NotLeftTriangle: '⋪',\n  NotLeftTriangleBar: '⧏̸',\n  NotLeftTriangleEqual: '⋬',\n  NotLess: '≮',\n  NotLessEqual: '≰',\n  NotLessGreater: '≸',\n  NotLessLess: '≪̸',\n  NotLessSlantEqual: '⩽̸',\n  NotLessTilde: '≴',\n  NotNestedGreaterGreater: '⪢̸',\n  NotNestedLessLess: '⪡̸',\n  NotPrecedes: '⊀',\n  NotPrecedesEqual: '⪯̸',\n  NotPrecedesSlantEqual: '⋠',\n  NotReverseElement: '∌',\n  NotRightTriangle: '⋫',\n  NotRightTriangleBar: '⧐̸',\n  NotRightTriangleEqual: '⋭',\n  NotSquareSubset: '⊏̸',\n  NotSquareSubsetEqual: '⋢',\n  NotSquareSuperset: '⊐̸',\n  NotSquareSupersetEqual: '⋣',\n  NotSubset: '⊂⃒',\n  NotSubsetEqual: '⊈',\n  NotSucceeds: '⊁',\n  NotSucceedsEqual: '⪰̸',\n  NotSucceedsSlantEqual: '⋡',\n  NotSucceedsTilde: '≿̸',\n  NotSuperset: '⊃⃒',\n  NotSupersetEqual: '⊉',\n  NotTilde: '≁',\n  NotTildeEqual: '≄',\n  NotTildeFullEqual: '≇',\n  NotTildeTilde: '≉',\n  NotVerticalBar: '∤',\n  Nscr: '𝒩',\n  Ntilde: 'Ñ',\n  Nu: 'Ν',\n  OElig: 'Œ',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Ocy: 'О',\n  Odblac: 'Ő',\n  Ofr: '𝔒',\n  Ograve: 'Ò',\n  Omacr: 'Ō',\n  Omega: 'Ω',\n  Omicron: 'Ο',\n  Oopf: '𝕆',\n  OpenCurlyDoubleQuote: '“',\n  OpenCurlyQuote: '‘',\n  Or: '⩔',\n  Oscr: '𝒪',\n  Oslash: 'Ø',\n  Otilde: 'Õ',\n  Otimes: '⨷',\n  Ouml: 'Ö',\n  OverBar: '‾',\n  OverBrace: '⏞',\n  OverBracket: '⎴',\n  OverParenthesis: '⏜',\n  PartialD: '∂',\n  Pcy: 'П',\n  Pfr: '𝔓',\n  Phi: 'Φ',\n  Pi: 'Π',\n  PlusMinus: '±',\n  Poincareplane: 'ℌ',\n  Popf: 'ℙ',\n  Pr: '⪻',\n  Precedes: '≺',\n  PrecedesEqual: '⪯',\n  PrecedesSlantEqual: '≼',\n  PrecedesTilde: '≾',\n  Prime: '″',\n  Product: '∏',\n  Proportion: '∷',\n  Proportional: '∝',\n  Pscr: '𝒫',\n  Psi: 'Ψ',\n  QUOT: '\"',\n  Qfr: '𝔔',\n  Qopf: 'ℚ',\n  Qscr: '𝒬',\n  RBarr: '⤐',\n  REG: '®',\n  Racute: 'Ŕ',\n  Rang: '⟫',\n  Rarr: '↠',\n  Rarrtl: '⤖',\n  Rcaron: 'Ř',\n  Rcedil: 'Ŗ',\n  Rcy: 'Р',\n  Re: 'ℜ',\n  ReverseElement: '∋',\n  ReverseEquilibrium: '⇋',\n  ReverseUpEquilibrium: '⥯',\n  Rfr: 'ℜ',\n  Rho: 'Ρ',\n  RightAngleBracket: '⟩',\n  RightArrow: '→',\n  RightArrowBar: '⇥',\n  RightArrowLeftArrow: '⇄',\n  RightCeiling: '⌉',\n  RightDoubleBracket: '⟧',\n  RightDownTeeVector: '⥝',\n  RightDownVector: '⇂',\n  RightDownVectorBar: '⥕',\n  RightFloor: '⌋',\n  RightTee: '⊢',\n  RightTeeArrow: '↦',\n  RightTeeVector: '⥛',\n  RightTriangle: '⊳',\n  RightTriangleBar: '⧐',\n  RightTriangleEqual: '⊵',\n  RightUpDownVector: '⥏',\n  RightUpTeeVector: '⥜',\n  RightUpVector: '↾',\n  RightUpVectorBar: '⥔',\n  RightVector: '⇀',\n  RightVectorBar: '⥓',\n  Rightarrow: '⇒',\n  Ropf: 'ℝ',\n  RoundImplies: '⥰',\n  Rrightarrow: '⇛',\n  Rscr: 'ℛ',\n  Rsh: '↱',\n  RuleDelayed: '⧴',\n  SHCHcy: 'Щ',\n  SHcy: 'Ш',\n  SOFTcy: 'Ь',\n  Sacute: 'Ś',\n  Sc: '⪼',\n  Scaron: 'Š',\n  Scedil: 'Ş',\n  Scirc: 'Ŝ',\n  Scy: 'С',\n  Sfr: '𝔖',\n  ShortDownArrow: '↓',\n  ShortLeftArrow: '←',\n  ShortRightArrow: '→',\n  ShortUpArrow: '↑',\n  Sigma: 'Σ',\n  SmallCircle: '∘',\n  Sopf: '𝕊',\n  Sqrt: '√',\n  Square: '□',\n  SquareIntersection: '⊓',\n  SquareSubset: '⊏',\n  SquareSubsetEqual: '⊑',\n  SquareSuperset: '⊐',\n  SquareSupersetEqual: '⊒',\n  SquareUnion: '⊔',\n  Sscr: '𝒮',\n  Star: '⋆',\n  Sub: '⋐',\n  Subset: '⋐',\n  SubsetEqual: '⊆',\n  Succeeds: '≻',\n  SucceedsEqual: '⪰',\n  SucceedsSlantEqual: '≽',\n  SucceedsTilde: '≿',\n  SuchThat: '∋',\n  Sum: '∑',\n  Sup: '⋑',\n  Superset: '⊃',\n  SupersetEqual: '⊇',\n  Supset: '⋑',\n  THORN: 'Þ',\n  TRADE: '™',\n  TSHcy: 'Ћ',\n  TScy: 'Ц',\n  Tab: '\\t',\n  Tau: 'Τ',\n  Tcaron: 'Ť',\n  Tcedil: 'Ţ',\n  Tcy: 'Т',\n  Tfr: '𝔗',\n  Therefore: '∴',\n  Theta: 'Θ',\n  ThickSpace: '  ',\n  ThinSpace: ' ',\n  Tilde: '∼',\n  TildeEqual: '≃',\n  TildeFullEqual: '≅',\n  TildeTilde: '≈',\n  Topf: '𝕋',\n  TripleDot: '⃛',\n  Tscr: '𝒯',\n  Tstrok: 'Ŧ',\n  Uacute: 'Ú',\n  Uarr: '↟',\n  Uarrocir: '⥉',\n  Ubrcy: 'Ў',\n  Ubreve: 'Ŭ',\n  Ucirc: 'Û',\n  Ucy: 'У',\n  Udblac: 'Ű',\n  Ufr: '𝔘',\n  Ugrave: 'Ù',\n  Umacr: 'Ū',\n  UnderBar: '_',\n  UnderBrace: '⏟',\n  UnderBracket: '⎵',\n  UnderParenthesis: '⏝',\n  Union: '⋃',\n  UnionPlus: '⊎',\n  Uogon: 'Ų',\n  Uopf: '𝕌',\n  UpArrow: '↑',\n  UpArrowBar: '⤒',\n  UpArrowDownArrow: '⇅',\n  UpDownArrow: '↕',\n  UpEquilibrium: '⥮',\n  UpTee: '⊥',\n  UpTeeArrow: '↥',\n  Uparrow: '⇑',\n  Updownarrow: '⇕',\n  UpperLeftArrow: '↖',\n  UpperRightArrow: '↗',\n  Upsi: 'ϒ',\n  Upsilon: 'Υ',\n  Uring: 'Ů',\n  Uscr: '𝒰',\n  Utilde: 'Ũ',\n  Uuml: 'Ü',\n  VDash: '⊫',\n  Vbar: '⫫',\n  Vcy: 'В',\n  Vdash: '⊩',\n  Vdashl: '⫦',\n  Vee: '⋁',\n  Verbar: '‖',\n  Vert: '‖',\n  VerticalBar: '∣',\n  VerticalLine: '|',\n  VerticalSeparator: '❘',\n  VerticalTilde: '≀',\n  VeryThinSpace: ' ',\n  Vfr: '𝔙',\n  Vopf: '𝕍',\n  Vscr: '𝒱',\n  Vvdash: '⊪',\n  Wcirc: 'Ŵ',\n  Wedge: '⋀',\n  Wfr: '𝔚',\n  Wopf: '𝕎',\n  Wscr: '𝒲',\n  Xfr: '𝔛',\n  Xi: 'Ξ',\n  Xopf: '𝕏',\n  Xscr: '𝒳',\n  YAcy: 'Я',\n  YIcy: 'Ї',\n  YUcy: 'Ю',\n  Yacute: 'Ý',\n  Ycirc: 'Ŷ',\n  Ycy: 'Ы',\n  Yfr: '𝔜',\n  Yopf: '𝕐',\n  Yscr: '𝒴',\n  Yuml: 'Ÿ',\n  ZHcy: 'Ж',\n  Zacute: 'Ź',\n  Zcaron: 'Ž',\n  Zcy: 'З',\n  Zdot: 'Ż',\n  ZeroWidthSpace: '​',\n  Zeta: 'Ζ',\n  Zfr: 'ℨ',\n  Zopf: 'ℤ',\n  Zscr: '𝒵',\n  aacute: 'á',\n  abreve: 'ă',\n  ac: '∾',\n  acE: '∾̳',\n  acd: '∿',\n  acirc: 'â',\n  acute: '´',\n  acy: 'а',\n  aelig: 'æ',\n  af: '⁡',\n  afr: '𝔞',\n  agrave: 'à',\n  alefsym: 'ℵ',\n  aleph: 'ℵ',\n  alpha: 'α',\n  amacr: 'ā',\n  amalg: '⨿',\n  amp: '&',\n  and: '∧',\n  andand: '⩕',\n  andd: '⩜',\n  andslope: '⩘',\n  andv: '⩚',\n  ang: '∠',\n  ange: '⦤',\n  angle: '∠',\n  angmsd: '∡',\n  angmsdaa: '⦨',\n  angmsdab: '⦩',\n  angmsdac: '⦪',\n  angmsdad: '⦫',\n  angmsdae: '⦬',\n  angmsdaf: '⦭',\n  angmsdag: '⦮',\n  angmsdah: '⦯',\n  angrt: '∟',\n  angrtvb: '⊾',\n  angrtvbd: '⦝',\n  angsph: '∢',\n  angst: 'Å',\n  angzarr: '⍼',\n  aogon: 'ą',\n  aopf: '𝕒',\n  ap: '≈',\n  apE: '⩰',\n  apacir: '⩯',\n  ape: '≊',\n  apid: '≋',\n  apos: \"'\",\n  approx: '≈',\n  approxeq: '≊',\n  aring: 'å',\n  ascr: '𝒶',\n  ast: '*',\n  asymp: '≈',\n  asympeq: '≍',\n  atilde: 'ã',\n  auml: 'ä',\n  awconint: '∳',\n  awint: '⨑',\n  bNot: '⫭',\n  backcong: '≌',\n  backepsilon: '϶',\n  backprime: '‵',\n  backsim: '∽',\n  backsimeq: '⋍',\n  barvee: '⊽',\n  barwed: '⌅',\n  barwedge: '⌅',\n  bbrk: '⎵',\n  bbrktbrk: '⎶',\n  bcong: '≌',\n  bcy: 'б',\n  bdquo: '„',\n  becaus: '∵',\n  because: '∵',\n  bemptyv: '⦰',\n  bepsi: '϶',\n  bernou: 'ℬ',\n  beta: 'β',\n  beth: 'ℶ',\n  between: '≬',\n  bfr: '𝔟',\n  bigcap: '⋂',\n  bigcirc: '◯',\n  bigcup: '⋃',\n  bigodot: '⨀',\n  bigoplus: '⨁',\n  bigotimes: '⨂',\n  bigsqcup: '⨆',\n  bigstar: '★',\n  bigtriangledown: '▽',\n  bigtriangleup: '△',\n  biguplus: '⨄',\n  bigvee: '⋁',\n  bigwedge: '⋀',\n  bkarow: '⤍',\n  blacklozenge: '⧫',\n  blacksquare: '▪',\n  blacktriangle: '▴',\n  blacktriangledown: '▾',\n  blacktriangleleft: '◂',\n  blacktriangleright: '▸',\n  blank: '␣',\n  blk12: '▒',\n  blk14: '░',\n  blk34: '▓',\n  block: '█',\n  bne: '=⃥',\n  bnequiv: '≡⃥',\n  bnot: '⌐',\n  bopf: '𝕓',\n  bot: '⊥',\n  bottom: '⊥',\n  bowtie: '⋈',\n  boxDL: '╗',\n  boxDR: '╔',\n  boxDl: '╖',\n  boxDr: '╓',\n  boxH: '═',\n  boxHD: '╦',\n  boxHU: '╩',\n  boxHd: '╤',\n  boxHu: '╧',\n  boxUL: '╝',\n  boxUR: '╚',\n  boxUl: '╜',\n  boxUr: '╙',\n  boxV: '║',\n  boxVH: '╬',\n  boxVL: '╣',\n  boxVR: '╠',\n  boxVh: '╫',\n  boxVl: '╢',\n  boxVr: '╟',\n  boxbox: '⧉',\n  boxdL: '╕',\n  boxdR: '╒',\n  boxdl: '┐',\n  boxdr: '┌',\n  boxh: '─',\n  boxhD: '╥',\n  boxhU: '╨',\n  boxhd: '┬',\n  boxhu: '┴',\n  boxminus: '⊟',\n  boxplus: '⊞',\n  boxtimes: '⊠',\n  boxuL: '╛',\n  boxuR: '╘',\n  boxul: '┘',\n  boxur: '└',\n  boxv: '│',\n  boxvH: '╪',\n  boxvL: '╡',\n  boxvR: '╞',\n  boxvh: '┼',\n  boxvl: '┤',\n  boxvr: '├',\n  bprime: '‵',\n  breve: '˘',\n  brvbar: '¦',\n  bscr: '𝒷',\n  bsemi: '⁏',\n  bsim: '∽',\n  bsime: '⋍',\n  bsol: '\\\\',\n  bsolb: '⧅',\n  bsolhsub: '⟈',\n  bull: '•',\n  bullet: '•',\n  bump: '≎',\n  bumpE: '⪮',\n  bumpe: '≏',\n  bumpeq: '≏',\n  cacute: 'ć',\n  cap: '∩',\n  capand: '⩄',\n  capbrcup: '⩉',\n  capcap: '⩋',\n  capcup: '⩇',\n  capdot: '⩀',\n  caps: '∩︀',\n  caret: '⁁',\n  caron: 'ˇ',\n  ccaps: '⩍',\n  ccaron: 'č',\n  ccedil: 'ç',\n  ccirc: 'ĉ',\n  ccups: '⩌',\n  ccupssm: '⩐',\n  cdot: 'ċ',\n  cedil: '¸',\n  cemptyv: '⦲',\n  cent: '¢',\n  centerdot: '·',\n  cfr: '𝔠',\n  chcy: 'ч',\n  check: '✓',\n  checkmark: '✓',\n  chi: 'χ',\n  cir: '○',\n  cirE: '⧃',\n  circ: 'ˆ',\n  circeq: '≗',\n  circlearrowleft: '↺',\n  circlearrowright: '↻',\n  circledR: '®',\n  circledS: 'Ⓢ',\n  circledast: '⊛',\n  circledcirc: '⊚',\n  circleddash: '⊝',\n  cire: '≗',\n  cirfnint: '⨐',\n  cirmid: '⫯',\n  cirscir: '⧂',\n  clubs: '♣',\n  clubsuit: '♣',\n  colon: ':',\n  colone: '≔',\n  coloneq: '≔',\n  comma: ',',\n  commat: '@',\n  comp: '∁',\n  compfn: '∘',\n  complement: '∁',\n  complexes: 'ℂ',\n  cong: '≅',\n  congdot: '⩭',\n  conint: '∮',\n  copf: '𝕔',\n  coprod: '∐',\n  copy: '©',\n  copysr: '℗',\n  crarr: '↵',\n  cross: '✗',\n  cscr: '𝒸',\n  csub: '⫏',\n  csube: '⫑',\n  csup: '⫐',\n  csupe: '⫒',\n  ctdot: '⋯',\n  cudarrl: '⤸',\n  cudarrr: '⤵',\n  cuepr: '⋞',\n  cuesc: '⋟',\n  cularr: '↶',\n  cularrp: '⤽',\n  cup: '∪',\n  cupbrcap: '⩈',\n  cupcap: '⩆',\n  cupcup: '⩊',\n  cupdot: '⊍',\n  cupor: '⩅',\n  cups: '∪︀',\n  curarr: '↷',\n  curarrm: '⤼',\n  curlyeqprec: '⋞',\n  curlyeqsucc: '⋟',\n  curlyvee: '⋎',\n  curlywedge: '⋏',\n  curren: '¤',\n  curvearrowleft: '↶',\n  curvearrowright: '↷',\n  cuvee: '⋎',\n  cuwed: '⋏',\n  cwconint: '∲',\n  cwint: '∱',\n  cylcty: '⌭',\n  dArr: '⇓',\n  dHar: '⥥',\n  dagger: '†',\n  daleth: 'ℸ',\n  darr: '↓',\n  dash: '‐',\n  dashv: '⊣',\n  dbkarow: '⤏',\n  dblac: '˝',\n  dcaron: 'ď',\n  dcy: 'д',\n  dd: 'ⅆ',\n  ddagger: '‡',\n  ddarr: '⇊',\n  ddotseq: '⩷',\n  deg: '°',\n  delta: 'δ',\n  demptyv: '⦱',\n  dfisht: '⥿',\n  dfr: '𝔡',\n  dharl: '⇃',\n  dharr: '⇂',\n  diam: '⋄',\n  diamond: '⋄',\n  diamondsuit: '♦',\n  diams: '♦',\n  die: '¨',\n  digamma: 'ϝ',\n  disin: '⋲',\n  div: '÷',\n  divide: '÷',\n  divideontimes: '⋇',\n  divonx: '⋇',\n  djcy: 'ђ',\n  dlcorn: '⌞',\n  dlcrop: '⌍',\n  dollar: '$',\n  dopf: '𝕕',\n  dot: '˙',\n  doteq: '≐',\n  doteqdot: '≑',\n  dotminus: '∸',\n  dotplus: '∔',\n  dotsquare: '⊡',\n  doublebarwedge: '⌆',\n  downarrow: '↓',\n  downdownarrows: '⇊',\n  downharpoonleft: '⇃',\n  downharpoonright: '⇂',\n  drbkarow: '⤐',\n  drcorn: '⌟',\n  drcrop: '⌌',\n  dscr: '𝒹',\n  dscy: 'ѕ',\n  dsol: '⧶',\n  dstrok: 'đ',\n  dtdot: '⋱',\n  dtri: '▿',\n  dtrif: '▾',\n  duarr: '⇵',\n  duhar: '⥯',\n  dwangle: '⦦',\n  dzcy: 'џ',\n  dzigrarr: '⟿',\n  eDDot: '⩷',\n  eDot: '≑',\n  eacute: 'é',\n  easter: '⩮',\n  ecaron: 'ě',\n  ecir: '≖',\n  ecirc: 'ê',\n  ecolon: '≕',\n  ecy: 'э',\n  edot: 'ė',\n  ee: 'ⅇ',\n  efDot: '≒',\n  efr: '𝔢',\n  eg: '⪚',\n  egrave: 'è',\n  egs: '⪖',\n  egsdot: '⪘',\n  el: '⪙',\n  elinters: '⏧',\n  ell: 'ℓ',\n  els: '⪕',\n  elsdot: '⪗',\n  emacr: 'ē',\n  empty: '∅',\n  emptyset: '∅',\n  emptyv: '∅',\n  emsp13: ' ',\n  emsp14: ' ',\n  emsp: ' ',\n  eng: 'ŋ',\n  ensp: ' ',\n  eogon: 'ę',\n  eopf: '𝕖',\n  epar: '⋕',\n  eparsl: '⧣',\n  eplus: '⩱',\n  epsi: 'ε',\n  epsilon: 'ε',\n  epsiv: 'ϵ',\n  eqcirc: '≖',\n  eqcolon: '≕',\n  eqsim: '≂',\n  eqslantgtr: '⪖',\n  eqslantless: '⪕',\n  equals: '=',\n  equest: '≟',\n  equiv: '≡',\n  equivDD: '⩸',\n  eqvparsl: '⧥',\n  erDot: '≓',\n  erarr: '⥱',\n  escr: 'ℯ',\n  esdot: '≐',\n  esim: '≂',\n  eta: 'η',\n  eth: 'ð',\n  euml: 'ë',\n  euro: '€',\n  excl: '!',\n  exist: '∃',\n  expectation: 'ℰ',\n  exponentiale: 'ⅇ',\n  fallingdotseq: '≒',\n  fcy: 'ф',\n  female: '♀',\n  ffilig: 'ﬃ',\n  fflig: 'ﬀ',\n  ffllig: 'ﬄ',\n  ffr: '𝔣',\n  filig: 'ﬁ',\n  fjlig: 'fj',\n  flat: '♭',\n  fllig: 'ﬂ',\n  fltns: '▱',\n  fnof: 'ƒ',\n  fopf: '𝕗',\n  forall: '∀',\n  fork: '⋔',\n  forkv: '⫙',\n  fpartint: '⨍',\n  frac12: '½',\n  frac13: '⅓',\n  frac14: '¼',\n  frac15: '⅕',\n  frac16: '⅙',\n  frac18: '⅛',\n  frac23: '⅔',\n  frac25: '⅖',\n  frac34: '¾',\n  frac35: '⅗',\n  frac38: '⅜',\n  frac45: '⅘',\n  frac56: '⅚',\n  frac58: '⅝',\n  frac78: '⅞',\n  frasl: '⁄',\n  frown: '⌢',\n  fscr: '𝒻',\n  gE: '≧',\n  gEl: '⪌',\n  gacute: 'ǵ',\n  gamma: 'γ',\n  gammad: 'ϝ',\n  gap: '⪆',\n  gbreve: 'ğ',\n  gcirc: 'ĝ',\n  gcy: 'г',\n  gdot: 'ġ',\n  ge: '≥',\n  gel: '⋛',\n  geq: '≥',\n  geqq: '≧',\n  geqslant: '⩾',\n  ges: '⩾',\n  gescc: '⪩',\n  gesdot: '⪀',\n  gesdoto: '⪂',\n  gesdotol: '⪄',\n  gesl: '⋛︀',\n  gesles: '⪔',\n  gfr: '𝔤',\n  gg: '≫',\n  ggg: '⋙',\n  gimel: 'ℷ',\n  gjcy: 'ѓ',\n  gl: '≷',\n  glE: '⪒',\n  gla: '⪥',\n  glj: '⪤',\n  gnE: '≩',\n  gnap: '⪊',\n  gnapprox: '⪊',\n  gne: '⪈',\n  gneq: '⪈',\n  gneqq: '≩',\n  gnsim: '⋧',\n  gopf: '𝕘',\n  grave: '`',\n  gscr: 'ℊ',\n  gsim: '≳',\n  gsime: '⪎',\n  gsiml: '⪐',\n  gt: '>',\n  gtcc: '⪧',\n  gtcir: '⩺',\n  gtdot: '⋗',\n  gtlPar: '⦕',\n  gtquest: '⩼',\n  gtrapprox: '⪆',\n  gtrarr: '⥸',\n  gtrdot: '⋗',\n  gtreqless: '⋛',\n  gtreqqless: '⪌',\n  gtrless: '≷',\n  gtrsim: '≳',\n  gvertneqq: '≩︀',\n  gvnE: '≩︀',\n  hArr: '⇔',\n  hairsp: ' ',\n  half: '½',\n  hamilt: 'ℋ',\n  hardcy: 'ъ',\n  harr: '↔',\n  harrcir: '⥈',\n  harrw: '↭',\n  hbar: 'ℏ',\n  hcirc: 'ĥ',\n  hearts: '♥',\n  heartsuit: '♥',\n  hellip: '…',\n  hercon: '⊹',\n  hfr: '𝔥',\n  hksearow: '⤥',\n  hkswarow: '⤦',\n  hoarr: '⇿',\n  homtht: '∻',\n  hookleftarrow: '↩',\n  hookrightarrow: '↪',\n  hopf: '𝕙',\n  horbar: '―',\n  hscr: '𝒽',\n  hslash: 'ℏ',\n  hstrok: 'ħ',\n  hybull: '⁃',\n  hyphen: '‐',\n  iacute: 'í',\n  ic: '⁣',\n  icirc: 'î',\n  icy: 'и',\n  iecy: 'е',\n  iexcl: '¡',\n  iff: '⇔',\n  ifr: '𝔦',\n  igrave: 'ì',\n  ii: 'ⅈ',\n  iiiint: '⨌',\n  iiint: '∭',\n  iinfin: '⧜',\n  iiota: '℩',\n  ijlig: 'ĳ',\n  imacr: 'ī',\n  image: 'ℑ',\n  imagline: 'ℐ',\n  imagpart: 'ℑ',\n  imath: 'ı',\n  imof: '⊷',\n  imped: 'Ƶ',\n  in: '∈',\n  incare: '℅',\n  infin: '∞',\n  infintie: '⧝',\n  inodot: 'ı',\n  int: '∫',\n  intcal: '⊺',\n  integers: 'ℤ',\n  intercal: '⊺',\n  intlarhk: '⨗',\n  intprod: '⨼',\n  iocy: 'ё',\n  iogon: 'į',\n  iopf: '𝕚',\n  iota: 'ι',\n  iprod: '⨼',\n  iquest: '¿',\n  iscr: '𝒾',\n  isin: '∈',\n  isinE: '⋹',\n  isindot: '⋵',\n  isins: '⋴',\n  isinsv: '⋳',\n  isinv: '∈',\n  it: '⁢',\n  itilde: 'ĩ',\n  iukcy: 'і',\n  iuml: 'ï',\n  jcirc: 'ĵ',\n  jcy: 'й',\n  jfr: '𝔧',\n  jmath: 'ȷ',\n  jopf: '𝕛',\n  jscr: '𝒿',\n  jsercy: 'ј',\n  jukcy: 'є',\n  kappa: 'κ',\n  kappav: 'ϰ',\n  kcedil: 'ķ',\n  kcy: 'к',\n  kfr: '𝔨',\n  kgreen: 'ĸ',\n  khcy: 'х',\n  kjcy: 'ќ',\n  kopf: '𝕜',\n  kscr: '𝓀',\n  lAarr: '⇚',\n  lArr: '⇐',\n  lAtail: '⤛',\n  lBarr: '⤎',\n  lE: '≦',\n  lEg: '⪋',\n  lHar: '⥢',\n  lacute: 'ĺ',\n  laemptyv: '⦴',\n  lagran: 'ℒ',\n  lambda: 'λ',\n  lang: '⟨',\n  langd: '⦑',\n  langle: '⟨',\n  lap: '⪅',\n  laquo: '«',\n  larr: '←',\n  larrb: '⇤',\n  larrbfs: '⤟',\n  larrfs: '⤝',\n  larrhk: '↩',\n  larrlp: '↫',\n  larrpl: '⤹',\n  larrsim: '⥳',\n  larrtl: '↢',\n  lat: '⪫',\n  latail: '⤙',\n  late: '⪭',\n  lates: '⪭︀',\n  lbarr: '⤌',\n  lbbrk: '❲',\n  lbrace: '{',\n  lbrack: '[',\n  lbrke: '⦋',\n  lbrksld: '⦏',\n  lbrkslu: '⦍',\n  lcaron: 'ľ',\n  lcedil: 'ļ',\n  lceil: '⌈',\n  lcub: '{',\n  lcy: 'л',\n  ldca: '⤶',\n  ldquo: '“',\n  ldquor: '„',\n  ldrdhar: '⥧',\n  ldrushar: '⥋',\n  ldsh: '↲',\n  le: '≤',\n  leftarrow: '←',\n  leftarrowtail: '↢',\n  leftharpoondown: '↽',\n  leftharpoonup: '↼',\n  leftleftarrows: '⇇',\n  leftrightarrow: '↔',\n  leftrightarrows: '⇆',\n  leftrightharpoons: '⇋',\n  leftrightsquigarrow: '↭',\n  leftthreetimes: '⋋',\n  leg: '⋚',\n  leq: '≤',\n  leqq: '≦',\n  leqslant: '⩽',\n  les: '⩽',\n  lescc: '⪨',\n  lesdot: '⩿',\n  lesdoto: '⪁',\n  lesdotor: '⪃',\n  lesg: '⋚︀',\n  lesges: '⪓',\n  lessapprox: '⪅',\n  lessdot: '⋖',\n  lesseqgtr: '⋚',\n  lesseqqgtr: '⪋',\n  lessgtr: '≶',\n  lesssim: '≲',\n  lfisht: '⥼',\n  lfloor: '⌊',\n  lfr: '𝔩',\n  lg: '≶',\n  lgE: '⪑',\n  lhard: '↽',\n  lharu: '↼',\n  lharul: '⥪',\n  lhblk: '▄',\n  ljcy: 'љ',\n  ll: '≪',\n  llarr: '⇇',\n  llcorner: '⌞',\n  llhard: '⥫',\n  lltri: '◺',\n  lmidot: 'ŀ',\n  lmoust: '⎰',\n  lmoustache: '⎰',\n  lnE: '≨',\n  lnap: '⪉',\n  lnapprox: '⪉',\n  lne: '⪇',\n  lneq: '⪇',\n  lneqq: '≨',\n  lnsim: '⋦',\n  loang: '⟬',\n  loarr: '⇽',\n  lobrk: '⟦',\n  longleftarrow: '⟵',\n  longleftrightarrow: '⟷',\n  longmapsto: '⟼',\n  longrightarrow: '⟶',\n  looparrowleft: '↫',\n  looparrowright: '↬',\n  lopar: '⦅',\n  lopf: '𝕝',\n  loplus: '⨭',\n  lotimes: '⨴',\n  lowast: '∗',\n  lowbar: '_',\n  loz: '◊',\n  lozenge: '◊',\n  lozf: '⧫',\n  lpar: '(',\n  lparlt: '⦓',\n  lrarr: '⇆',\n  lrcorner: '⌟',\n  lrhar: '⇋',\n  lrhard: '⥭',\n  lrm: '‎',\n  lrtri: '⊿',\n  lsaquo: '‹',\n  lscr: '𝓁',\n  lsh: '↰',\n  lsim: '≲',\n  lsime: '⪍',\n  lsimg: '⪏',\n  lsqb: '[',\n  lsquo: '‘',\n  lsquor: '‚',\n  lstrok: 'ł',\n  lt: '<',\n  ltcc: '⪦',\n  ltcir: '⩹',\n  ltdot: '⋖',\n  lthree: '⋋',\n  ltimes: '⋉',\n  ltlarr: '⥶',\n  ltquest: '⩻',\n  ltrPar: '⦖',\n  ltri: '◃',\n  ltrie: '⊴',\n  ltrif: '◂',\n  lurdshar: '⥊',\n  luruhar: '⥦',\n  lvertneqq: '≨︀',\n  lvnE: '≨︀',\n  mDDot: '∺',\n  macr: '¯',\n  male: '♂',\n  malt: '✠',\n  maltese: '✠',\n  map: '↦',\n  mapsto: '↦',\n  mapstodown: '↧',\n  mapstoleft: '↤',\n  mapstoup: '↥',\n  marker: '▮',\n  mcomma: '⨩',\n  mcy: 'м',\n  mdash: '—',\n  measuredangle: '∡',\n  mfr: '𝔪',\n  mho: '℧',\n  micro: 'µ',\n  mid: '∣',\n  midast: '*',\n  midcir: '⫰',\n  middot: '·',\n  minus: '−',\n  minusb: '⊟',\n  minusd: '∸',\n  minusdu: '⨪',\n  mlcp: '⫛',\n  mldr: '…',\n  mnplus: '∓',\n  models: '⊧',\n  mopf: '𝕞',\n  mp: '∓',\n  mscr: '𝓂',\n  mstpos: '∾',\n  mu: 'μ',\n  multimap: '⊸',\n  mumap: '⊸',\n  nGg: '⋙̸',\n  nGt: '≫⃒',\n  nGtv: '≫̸',\n  nLeftarrow: '⇍',\n  nLeftrightarrow: '⇎',\n  nLl: '⋘̸',\n  nLt: '≪⃒',\n  nLtv: '≪̸',\n  nRightarrow: '⇏',\n  nVDash: '⊯',\n  nVdash: '⊮',\n  nabla: '∇',\n  nacute: 'ń',\n  nang: '∠⃒',\n  nap: '≉',\n  napE: '⩰̸',\n  napid: '≋̸',\n  napos: 'ŉ',\n  napprox: '≉',\n  natur: '♮',\n  natural: '♮',\n  naturals: 'ℕ',\n  nbsp: ' ',\n  nbump: '≎̸',\n  nbumpe: '≏̸',\n  ncap: '⩃',\n  ncaron: 'ň',\n  ncedil: 'ņ',\n  ncong: '≇',\n  ncongdot: '⩭̸',\n  ncup: '⩂',\n  ncy: 'н',\n  ndash: '–',\n  ne: '≠',\n  neArr: '⇗',\n  nearhk: '⤤',\n  nearr: '↗',\n  nearrow: '↗',\n  nedot: '≐̸',\n  nequiv: '≢',\n  nesear: '⤨',\n  nesim: '≂̸',\n  nexist: '∄',\n  nexists: '∄',\n  nfr: '𝔫',\n  ngE: '≧̸',\n  nge: '≱',\n  ngeq: '≱',\n  ngeqq: '≧̸',\n  ngeqslant: '⩾̸',\n  nges: '⩾̸',\n  ngsim: '≵',\n  ngt: '≯',\n  ngtr: '≯',\n  nhArr: '⇎',\n  nharr: '↮',\n  nhpar: '⫲',\n  ni: '∋',\n  nis: '⋼',\n  nisd: '⋺',\n  niv: '∋',\n  njcy: 'њ',\n  nlArr: '⇍',\n  nlE: '≦̸',\n  nlarr: '↚',\n  nldr: '‥',\n  nle: '≰',\n  nleftarrow: '↚',\n  nleftrightarrow: '↮',\n  nleq: '≰',\n  nleqq: '≦̸',\n  nleqslant: '⩽̸',\n  nles: '⩽̸',\n  nless: '≮',\n  nlsim: '≴',\n  nlt: '≮',\n  nltri: '⋪',\n  nltrie: '⋬',\n  nmid: '∤',\n  nopf: '𝕟',\n  not: '¬',\n  notin: '∉',\n  notinE: '⋹̸',\n  notindot: '⋵̸',\n  notinva: '∉',\n  notinvb: '⋷',\n  notinvc: '⋶',\n  notni: '∌',\n  notniva: '∌',\n  notnivb: '⋾',\n  notnivc: '⋽',\n  npar: '∦',\n  nparallel: '∦',\n  nparsl: '⫽⃥',\n  npart: '∂̸',\n  npolint: '⨔',\n  npr: '⊀',\n  nprcue: '⋠',\n  npre: '⪯̸',\n  nprec: '⊀',\n  npreceq: '⪯̸',\n  nrArr: '⇏',\n  nrarr: '↛',\n  nrarrc: '⤳̸',\n  nrarrw: '↝̸',\n  nrightarrow: '↛',\n  nrtri: '⋫',\n  nrtrie: '⋭',\n  nsc: '⊁',\n  nsccue: '⋡',\n  nsce: '⪰̸',\n  nscr: '𝓃',\n  nshortmid: '∤',\n  nshortparallel: '∦',\n  nsim: '≁',\n  nsime: '≄',\n  nsimeq: '≄',\n  nsmid: '∤',\n  nspar: '∦',\n  nsqsube: '⋢',\n  nsqsupe: '⋣',\n  nsub: '⊄',\n  nsubE: '⫅̸',\n  nsube: '⊈',\n  nsubset: '⊂⃒',\n  nsubseteq: '⊈',\n  nsubseteqq: '⫅̸',\n  nsucc: '⊁',\n  nsucceq: '⪰̸',\n  nsup: '⊅',\n  nsupE: '⫆̸',\n  nsupe: '⊉',\n  nsupset: '⊃⃒',\n  nsupseteq: '⊉',\n  nsupseteqq: '⫆̸',\n  ntgl: '≹',\n  ntilde: 'ñ',\n  ntlg: '≸',\n  ntriangleleft: '⋪',\n  ntrianglelefteq: '⋬',\n  ntriangleright: '⋫',\n  ntrianglerighteq: '⋭',\n  nu: 'ν',\n  num: '#',\n  numero: '№',\n  numsp: ' ',\n  nvDash: '⊭',\n  nvHarr: '⤄',\n  nvap: '≍⃒',\n  nvdash: '⊬',\n  nvge: '≥⃒',\n  nvgt: '>⃒',\n  nvinfin: '⧞',\n  nvlArr: '⤂',\n  nvle: '≤⃒',\n  nvlt: '<⃒',\n  nvltrie: '⊴⃒',\n  nvrArr: '⤃',\n  nvrtrie: '⊵⃒',\n  nvsim: '∼⃒',\n  nwArr: '⇖',\n  nwarhk: '⤣',\n  nwarr: '↖',\n  nwarrow: '↖',\n  nwnear: '⤧',\n  oS: 'Ⓢ',\n  oacute: 'ó',\n  oast: '⊛',\n  ocir: '⊚',\n  ocirc: 'ô',\n  ocy: 'о',\n  odash: '⊝',\n  odblac: 'ő',\n  odiv: '⨸',\n  odot: '⊙',\n  odsold: '⦼',\n  oelig: 'œ',\n  ofcir: '⦿',\n  ofr: '𝔬',\n  ogon: '˛',\n  ograve: 'ò',\n  ogt: '⧁',\n  ohbar: '⦵',\n  ohm: 'Ω',\n  oint: '∮',\n  olarr: '↺',\n  olcir: '⦾',\n  olcross: '⦻',\n  oline: '‾',\n  olt: '⧀',\n  omacr: 'ō',\n  omega: 'ω',\n  omicron: 'ο',\n  omid: '⦶',\n  ominus: '⊖',\n  oopf: '𝕠',\n  opar: '⦷',\n  operp: '⦹',\n  oplus: '⊕',\n  or: '∨',\n  orarr: '↻',\n  ord: '⩝',\n  order: 'ℴ',\n  orderof: 'ℴ',\n  ordf: 'ª',\n  ordm: 'º',\n  origof: '⊶',\n  oror: '⩖',\n  orslope: '⩗',\n  orv: '⩛',\n  oscr: 'ℴ',\n  oslash: 'ø',\n  osol: '⊘',\n  otilde: 'õ',\n  otimes: '⊗',\n  otimesas: '⨶',\n  ouml: 'ö',\n  ovbar: '⌽',\n  par: '∥',\n  para: '¶',\n  parallel: '∥',\n  parsim: '⫳',\n  parsl: '⫽',\n  part: '∂',\n  pcy: 'п',\n  percnt: '%',\n  period: '.',\n  permil: '‰',\n  perp: '⊥',\n  pertenk: '‱',\n  pfr: '𝔭',\n  phi: 'φ',\n  phiv: 'ϕ',\n  phmmat: 'ℳ',\n  phone: '☎',\n  pi: 'π',\n  pitchfork: '⋔',\n  piv: 'ϖ',\n  planck: 'ℏ',\n  planckh: 'ℎ',\n  plankv: 'ℏ',\n  plus: '+',\n  plusacir: '⨣',\n  plusb: '⊞',\n  pluscir: '⨢',\n  plusdo: '∔',\n  plusdu: '⨥',\n  pluse: '⩲',\n  plusmn: '±',\n  plussim: '⨦',\n  plustwo: '⨧',\n  pm: '±',\n  pointint: '⨕',\n  popf: '𝕡',\n  pound: '£',\n  pr: '≺',\n  prE: '⪳',\n  prap: '⪷',\n  prcue: '≼',\n  pre: '⪯',\n  prec: '≺',\n  precapprox: '⪷',\n  preccurlyeq: '≼',\n  preceq: '⪯',\n  precnapprox: '⪹',\n  precneqq: '⪵',\n  precnsim: '⋨',\n  precsim: '≾',\n  prime: '′',\n  primes: 'ℙ',\n  prnE: '⪵',\n  prnap: '⪹',\n  prnsim: '⋨',\n  prod: '∏',\n  profalar: '⌮',\n  profline: '⌒',\n  profsurf: '⌓',\n  prop: '∝',\n  propto: '∝',\n  prsim: '≾',\n  prurel: '⊰',\n  pscr: '𝓅',\n  psi: 'ψ',\n  puncsp: ' ',\n  qfr: '𝔮',\n  qint: '⨌',\n  qopf: '𝕢',\n  qprime: '⁗',\n  qscr: '𝓆',\n  quaternions: 'ℍ',\n  quatint: '⨖',\n  quest: '?',\n  questeq: '≟',\n  quot: '\"',\n  rAarr: '⇛',\n  rArr: '⇒',\n  rAtail: '⤜',\n  rBarr: '⤏',\n  rHar: '⥤',\n  race: '∽̱',\n  racute: 'ŕ',\n  radic: '√',\n  raemptyv: '⦳',\n  rang: '⟩',\n  rangd: '⦒',\n  range: '⦥',\n  rangle: '⟩',\n  raquo: '»',\n  rarr: '→',\n  rarrap: '⥵',\n  rarrb: '⇥',\n  rarrbfs: '⤠',\n  rarrc: '⤳',\n  rarrfs: '⤞',\n  rarrhk: '↪',\n  rarrlp: '↬',\n  rarrpl: '⥅',\n  rarrsim: '⥴',\n  rarrtl: '↣',\n  rarrw: '↝',\n  ratail: '⤚',\n  ratio: '∶',\n  rationals: 'ℚ',\n  rbarr: '⤍',\n  rbbrk: '❳',\n  rbrace: '}',\n  rbrack: ']',\n  rbrke: '⦌',\n  rbrksld: '⦎',\n  rbrkslu: '⦐',\n  rcaron: 'ř',\n  rcedil: 'ŗ',\n  rceil: '⌉',\n  rcub: '}',\n  rcy: 'р',\n  rdca: '⤷',\n  rdldhar: '⥩',\n  rdquo: '”',\n  rdquor: '”',\n  rdsh: '↳',\n  real: 'ℜ',\n  realine: 'ℛ',\n  realpart: 'ℜ',\n  reals: 'ℝ',\n  rect: '▭',\n  reg: '®',\n  rfisht: '⥽',\n  rfloor: '⌋',\n  rfr: '𝔯',\n  rhard: '⇁',\n  rharu: '⇀',\n  rharul: '⥬',\n  rho: 'ρ',\n  rhov: 'ϱ',\n  rightarrow: '→',\n  rightarrowtail: '↣',\n  rightharpoondown: '⇁',\n  rightharpoonup: '⇀',\n  rightleftarrows: '⇄',\n  rightleftharpoons: '⇌',\n  rightrightarrows: '⇉',\n  rightsquigarrow: '↝',\n  rightthreetimes: '⋌',\n  ring: '˚',\n  risingdotseq: '≓',\n  rlarr: '⇄',\n  rlhar: '⇌',\n  rlm: '‏',\n  rmoust: '⎱',\n  rmoustache: '⎱',\n  rnmid: '⫮',\n  roang: '⟭',\n  roarr: '⇾',\n  robrk: '⟧',\n  ropar: '⦆',\n  ropf: '𝕣',\n  roplus: '⨮',\n  rotimes: '⨵',\n  rpar: ')',\n  rpargt: '⦔',\n  rppolint: '⨒',\n  rrarr: '⇉',\n  rsaquo: '›',\n  rscr: '𝓇',\n  rsh: '↱',\n  rsqb: ']',\n  rsquo: '’',\n  rsquor: '’',\n  rthree: '⋌',\n  rtimes: '⋊',\n  rtri: '▹',\n  rtrie: '⊵',\n  rtrif: '▸',\n  rtriltri: '⧎',\n  ruluhar: '⥨',\n  rx: '℞',\n  sacute: 'ś',\n  sbquo: '‚',\n  sc: '≻',\n  scE: '⪴',\n  scap: '⪸',\n  scaron: 'š',\n  sccue: '≽',\n  sce: '⪰',\n  scedil: 'ş',\n  scirc: 'ŝ',\n  scnE: '⪶',\n  scnap: '⪺',\n  scnsim: '⋩',\n  scpolint: '⨓',\n  scsim: '≿',\n  scy: 'с',\n  sdot: '⋅',\n  sdotb: '⊡',\n  sdote: '⩦',\n  seArr: '⇘',\n  searhk: '⤥',\n  searr: '↘',\n  searrow: '↘',\n  sect: '§',\n  semi: ';',\n  seswar: '⤩',\n  setminus: '∖',\n  setmn: '∖',\n  sext: '✶',\n  sfr: '𝔰',\n  sfrown: '⌢',\n  sharp: '♯',\n  shchcy: 'щ',\n  shcy: 'ш',\n  shortmid: '∣',\n  shortparallel: '∥',\n  shy: '­',\n  sigma: 'σ',\n  sigmaf: 'ς',\n  sigmav: 'ς',\n  sim: '∼',\n  simdot: '⩪',\n  sime: '≃',\n  simeq: '≃',\n  simg: '⪞',\n  simgE: '⪠',\n  siml: '⪝',\n  simlE: '⪟',\n  simne: '≆',\n  simplus: '⨤',\n  simrarr: '⥲',\n  slarr: '←',\n  smallsetminus: '∖',\n  smashp: '⨳',\n  smeparsl: '⧤',\n  smid: '∣',\n  smile: '⌣',\n  smt: '⪪',\n  smte: '⪬',\n  smtes: '⪬︀',\n  softcy: 'ь',\n  sol: '/',\n  solb: '⧄',\n  solbar: '⌿',\n  sopf: '𝕤',\n  spades: '♠',\n  spadesuit: '♠',\n  spar: '∥',\n  sqcap: '⊓',\n  sqcaps: '⊓︀',\n  sqcup: '⊔',\n  sqcups: '⊔︀',\n  sqsub: '⊏',\n  sqsube: '⊑',\n  sqsubset: '⊏',\n  sqsubseteq: '⊑',\n  sqsup: '⊐',\n  sqsupe: '⊒',\n  sqsupset: '⊐',\n  sqsupseteq: '⊒',\n  squ: '□',\n  square: '□',\n  squarf: '▪',\n  squf: '▪',\n  srarr: '→',\n  sscr: '𝓈',\n  ssetmn: '∖',\n  ssmile: '⌣',\n  sstarf: '⋆',\n  star: '☆',\n  starf: '★',\n  straightepsilon: 'ϵ',\n  straightphi: 'ϕ',\n  strns: '¯',\n  sub: '⊂',\n  subE: '⫅',\n  subdot: '⪽',\n  sube: '⊆',\n  subedot: '⫃',\n  submult: '⫁',\n  subnE: '⫋',\n  subne: '⊊',\n  subplus: '⪿',\n  subrarr: '⥹',\n  subset: '⊂',\n  subseteq: '⊆',\n  subseteqq: '⫅',\n  subsetneq: '⊊',\n  subsetneqq: '⫋',\n  subsim: '⫇',\n  subsub: '⫕',\n  subsup: '⫓',\n  succ: '≻',\n  succapprox: '⪸',\n  succcurlyeq: '≽',\n  succeq: '⪰',\n  succnapprox: '⪺',\n  succneqq: '⪶',\n  succnsim: '⋩',\n  succsim: '≿',\n  sum: '∑',\n  sung: '♪',\n  sup1: '¹',\n  sup2: '²',\n  sup3: '³',\n  sup: '⊃',\n  supE: '⫆',\n  supdot: '⪾',\n  supdsub: '⫘',\n  supe: '⊇',\n  supedot: '⫄',\n  suphsol: '⟉',\n  suphsub: '⫗',\n  suplarr: '⥻',\n  supmult: '⫂',\n  supnE: '⫌',\n  supne: '⊋',\n  supplus: '⫀',\n  supset: '⊃',\n  supseteq: '⊇',\n  supseteqq: '⫆',\n  supsetneq: '⊋',\n  supsetneqq: '⫌',\n  supsim: '⫈',\n  supsub: '⫔',\n  supsup: '⫖',\n  swArr: '⇙',\n  swarhk: '⤦',\n  swarr: '↙',\n  swarrow: '↙',\n  swnwar: '⤪',\n  szlig: 'ß',\n  target: '⌖',\n  tau: 'τ',\n  tbrk: '⎴',\n  tcaron: 'ť',\n  tcedil: 'ţ',\n  tcy: 'т',\n  tdot: '⃛',\n  telrec: '⌕',\n  tfr: '𝔱',\n  there4: '∴',\n  therefore: '∴',\n  theta: 'θ',\n  thetasym: 'ϑ',\n  thetav: 'ϑ',\n  thickapprox: '≈',\n  thicksim: '∼',\n  thinsp: ' ',\n  thkap: '≈',\n  thksim: '∼',\n  thorn: 'þ',\n  tilde: '˜',\n  times: '×',\n  timesb: '⊠',\n  timesbar: '⨱',\n  timesd: '⨰',\n  tint: '∭',\n  toea: '⤨',\n  top: '⊤',\n  topbot: '⌶',\n  topcir: '⫱',\n  topf: '𝕥',\n  topfork: '⫚',\n  tosa: '⤩',\n  tprime: '‴',\n  trade: '™',\n  triangle: '▵',\n  triangledown: '▿',\n  triangleleft: '◃',\n  trianglelefteq: '⊴',\n  triangleq: '≜',\n  triangleright: '▹',\n  trianglerighteq: '⊵',\n  tridot: '◬',\n  trie: '≜',\n  triminus: '⨺',\n  triplus: '⨹',\n  trisb: '⧍',\n  tritime: '⨻',\n  trpezium: '⏢',\n  tscr: '𝓉',\n  tscy: 'ц',\n  tshcy: 'ћ',\n  tstrok: 'ŧ',\n  twixt: '≬',\n  twoheadleftarrow: '↞',\n  twoheadrightarrow: '↠',\n  uArr: '⇑',\n  uHar: '⥣',\n  uacute: 'ú',\n  uarr: '↑',\n  ubrcy: 'ў',\n  ubreve: 'ŭ',\n  ucirc: 'û',\n  ucy: 'у',\n  udarr: '⇅',\n  udblac: 'ű',\n  udhar: '⥮',\n  ufisht: '⥾',\n  ufr: '𝔲',\n  ugrave: 'ù',\n  uharl: '↿',\n  uharr: '↾',\n  uhblk: '▀',\n  ulcorn: '⌜',\n  ulcorner: '⌜',\n  ulcrop: '⌏',\n  ultri: '◸',\n  umacr: 'ū',\n  uml: '¨',\n  uogon: 'ų',\n  uopf: '𝕦',\n  uparrow: '↑',\n  updownarrow: '↕',\n  upharpoonleft: '↿',\n  upharpoonright: '↾',\n  uplus: '⊎',\n  upsi: 'υ',\n  upsih: 'ϒ',\n  upsilon: 'υ',\n  upuparrows: '⇈',\n  urcorn: '⌝',\n  urcorner: '⌝',\n  urcrop: '⌎',\n  uring: 'ů',\n  urtri: '◹',\n  uscr: '𝓊',\n  utdot: '⋰',\n  utilde: 'ũ',\n  utri: '▵',\n  utrif: '▴',\n  uuarr: '⇈',\n  uuml: 'ü',\n  uwangle: '⦧',\n  vArr: '⇕',\n  vBar: '⫨',\n  vBarv: '⫩',\n  vDash: '⊨',\n  vangrt: '⦜',\n  varepsilon: 'ϵ',\n  varkappa: 'ϰ',\n  varnothing: '∅',\n  varphi: 'ϕ',\n  varpi: 'ϖ',\n  varpropto: '∝',\n  varr: '↕',\n  varrho: 'ϱ',\n  varsigma: 'ς',\n  varsubsetneq: '⊊︀',\n  varsubsetneqq: '⫋︀',\n  varsupsetneq: '⊋︀',\n  varsupsetneqq: '⫌︀',\n  vartheta: 'ϑ',\n  vartriangleleft: '⊲',\n  vartriangleright: '⊳',\n  vcy: 'в',\n  vdash: '⊢',\n  vee: '∨',\n  veebar: '⊻',\n  veeeq: '≚',\n  vellip: '⋮',\n  verbar: '|',\n  vert: '|',\n  vfr: '𝔳',\n  vltri: '⊲',\n  vnsub: '⊂⃒',\n  vnsup: '⊃⃒',\n  vopf: '𝕧',\n  vprop: '∝',\n  vrtri: '⊳',\n  vscr: '𝓋',\n  vsubnE: '⫋︀',\n  vsubne: '⊊︀',\n  vsupnE: '⫌︀',\n  vsupne: '⊋︀',\n  vzigzag: '⦚',\n  wcirc: 'ŵ',\n  wedbar: '⩟',\n  wedge: '∧',\n  wedgeq: '≙',\n  weierp: '℘',\n  wfr: '𝔴',\n  wopf: '𝕨',\n  wp: '℘',\n  wr: '≀',\n  wreath: '≀',\n  wscr: '𝓌',\n  xcap: '⋂',\n  xcirc: '◯',\n  xcup: '⋃',\n  xdtri: '▽',\n  xfr: '𝔵',\n  xhArr: '⟺',\n  xharr: '⟷',\n  xi: 'ξ',\n  xlArr: '⟸',\n  xlarr: '⟵',\n  xmap: '⟼',\n  xnis: '⋻',\n  xodot: '⨀',\n  xopf: '𝕩',\n  xoplus: '⨁',\n  xotime: '⨂',\n  xrArr: '⟹',\n  xrarr: '⟶',\n  xscr: '𝓍',\n  xsqcup: '⨆',\n  xuplus: '⨄',\n  xutri: '△',\n  xvee: '⋁',\n  xwedge: '⋀',\n  yacute: 'ý',\n  yacy: 'я',\n  ycirc: 'ŷ',\n  ycy: 'ы',\n  yen: '¥',\n  yfr: '𝔶',\n  yicy: 'ї',\n  yopf: '𝕪',\n  yscr: '𝓎',\n  yucy: 'ю',\n  yuml: 'ÿ',\n  zacute: 'ź',\n  zcaron: 'ž',\n  zcy: 'з',\n  zdot: 'ż',\n  zeetrf: 'ℨ',\n  zeta: 'ζ',\n  zfr: '𝔷',\n  zhcy: 'ж',\n  zigrarr: '⇝',\n  zopf: '𝕫',\n  zscr: '𝓏',\n  zwj: '‍',\n  zwnj: '‌'\n}\n","import {characterEntities} from 'character-entities'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Decode a single character reference (without the `&` or `;`).\n * You probably only need this when you’re building parsers yourself that follow\n * different rules compared to HTML.\n * This is optimized to be tiny in browsers.\n *\n * @param {string} value\n *   `notin` (named), `#123` (deci), `#x123` (hexa).\n * @returns {string|false}\n *   Decoded reference.\n */\nexport function decodeNamedCharacterReference(value) {\n  return own.call(characterEntities, value) ? characterEntities[value] : false\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[text][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","/**\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle} from 'mdast-util-from-markdown'\n * @import {MdxFlowExpression, MdxTextExpression} from 'mdast-util-mdx-expression'\n * @import {Handle as ToMarkdownHandle, Options as ToMarkdownExtension, State} from 'mdast-util-to-markdown'\n * @import {Parents} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX expressions\n * in markdown.\n *\n * When using the micromark syntax extension with `addResult`, nodes will have\n * a `data.estree` field set to an ESTree `Program` node.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX expressions.\n */\nexport function mdxExpressionFromMarkdown() {\n  return {\n    enter: {\n      mdxFlowExpression: enterMdxFlowExpression,\n      mdxTextExpression: enterMdxTextExpression\n    },\n    exit: {\n      mdxFlowExpression: exitMdxExpression,\n      mdxFlowExpressionChunk: exitMdxExpressionData,\n      mdxTextExpression: exitMdxExpression,\n      mdxTextExpressionChunk: exitMdxExpressionData\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX expressions\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX expressions.\n */\nexport function mdxExpressionToMarkdown() {\n  return {\n    handlers: {\n      mdxFlowExpression: handleMdxExpression,\n      mdxTextExpression: handleMdxExpression\n    },\n    unsafe: [\n      {character: '{', inConstruct: ['phrasing']},\n      {atBreak: true, character: '{'}\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxFlowExpression(token) {\n  this.enter({type: 'mdxFlowExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxTextExpression(token) {\n  this.enter({type: 'mdxTextExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpression(token) {\n  const value = this.resume()\n  const estree = token.estree\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression')\n  this.exit(token)\n  node.value = value\n\n  if (estree) {\n    node.data = {estree}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpressionData(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Node.\n * @param {Parents | undefined} parent\n *   Parent, if any.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized markdown.\n */\nfunction handleMdxExpression(node, parent, state) {\n  const value = node.value || ''\n  const result = state.indentLines(value, function (line, index, blank) {\n    // Tab-size to eat has to be the same as what we serialize as.\n    // While in some places in markdown that’s 4, in JS it’s more common as 2.\n    // Which is what’s also in `mdast-util-mdx-jsx`:\n    // <https://github.com/syntax-tree/mdast-util-mdx-jsx/blob/40b951b/lib/index.js#L52>\n    return (index === 0 || blank ? '' : '  ') + line\n  })\n  return '{' + result + '}'\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * List of legacy HTML named character references that don’t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nexport const characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n]\n","/**\n * Map of invalid numeric character references to their replacements, according to HTML.\n *\n * @type {Record<number, string>}\n */\nexport const characterReferenceInvalid = {\n  0: '�',\n  128: '€',\n  130: '‚',\n  131: 'ƒ',\n  132: '„',\n  133: '…',\n  134: '†',\n  135: '‡',\n  136: 'ˆ',\n  137: '‰',\n  138: 'Š',\n  139: '‹',\n  140: 'Œ',\n  142: 'Ž',\n  145: '‘',\n  146: '’',\n  147: '“',\n  148: '”',\n  149: '•',\n  150: '–',\n  151: '—',\n  152: '˜',\n  153: '™',\n  154: 'š',\n  155: '›',\n  156: 'œ',\n  158: 'ž',\n  159: 'Ÿ'\n}\n","/**\n * Check if the given character code, or the character code at the first\n * character, is decimal.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is a decimal\n */\nexport function isDecimal(character) {\n  const code =\n    typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return code >= 48 && code <= 57 /* 0-9 */\n}\n","/**\n * Check if the given character code, or the character code at the first\n * character, is hexadecimal.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is hexadecimal\n */\nexport function isHexadecimal(character) {\n  const code =\n    typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return (\n    (code >= 97 /* a */ && code <= 102) /* z */ ||\n    (code >= 65 /* A */ && code <= 70) /* Z */ ||\n    (code >= 48 /* A */ && code <= 57) /* Z */\n  )\n}\n","/**\n * Check if the given character code, or the character code at the first\n * character, is alphabetical.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is alphabetical.\n */\nexport function isAlphabetical(character) {\n  const code =\n    typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return (\n    (code >= 97 && code <= 122) /* a-z */ ||\n    (code >= 65 && code <= 90) /* A-Z */\n  )\n}\n","import {isAlphabetical} from 'is-alphabetical'\nimport {isDecimal} from 'is-decimal'\n\n/**\n * Check if the given character code, or the character code at the first\n * character, is alphanumerical.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is alphanumerical.\n */\nexport function isAlphanumerical(character) {\n  return isAlphabetical(character) || isDecimal(character)\n}\n","/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\nimport {characterEntitiesLegacy} from 'character-entities-legacy'\nimport {characterReferenceInvalid} from 'character-reference-invalid'\nimport {isDecimal} from 'is-decimal'\nimport {isHexadecimal} from 'is-hexadecimal'\nimport {isAlphanumerical} from 'is-alphanumerical'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\n\nconst fromCharCode = String.fromCharCode\n\n// Warning messages.\nconst messages = [\n  '',\n  /* 1: Non terminated (named) */\n  'Named character references must be terminated by a semicolon',\n  /* 2: Non terminated (numeric) */\n  'Numeric character references must be terminated by a semicolon',\n  /* 3: Empty (named) */\n  'Named character references cannot be empty',\n  /* 4: Empty (numeric) */\n  'Numeric character references cannot be empty',\n  /* 5: Unknown (named) */\n  'Named character references must be known',\n  /* 6: Disallowed (numeric) */\n  'Numeric character references cannot be disallowed',\n  /* 7: Prohibited (numeric) */\n  'Numeric character references cannot be outside the permissible Unicode range'\n]\n\n/**\n * Parse HTML character references.\n *\n * @param {string} value\n * @param {import('../index.js').Options} [options={}]\n */\nexport function parseEntities(value, options = {}) {\n  const additional =\n    typeof options.additional === 'string'\n      ? options.additional.charCodeAt(0)\n      : options.additional\n  /** @type {Array<string>} */\n  const result = []\n  let index = 0\n  let lines = -1\n  let queue = ''\n  /** @type {Point|undefined} */\n  let point\n  /** @type {Array<number>|undefined} */\n  let indent\n\n  if (options.position) {\n    if ('start' in options.position || 'indent' in options.position) {\n      // @ts-expect-error: points don’t have indent.\n      indent = options.position.indent\n      // @ts-expect-error: points don’t have indent.\n      point = options.position.start\n    } else {\n      point = options.position\n    }\n  }\n\n  let line = (point ? point.line : 0) || 1\n  let column = (point ? point.column : 0) || 1\n\n  // Cache the current point.\n  let previous = now()\n  /** @type {number|undefined} */\n  let character\n\n  // Ensure the algorithm walks over the first character (inclusive).\n  index--\n\n  while (++index <= value.length) {\n    // If the previous character was a newline.\n    if (character === 10 /* `\\n` */) {\n      column = (indent ? indent[lines] : 0) || 1\n    }\n\n    character = value.charCodeAt(index)\n\n    if (character === 38 /* `&` */) {\n      const following = value.charCodeAt(index + 1)\n\n      // The behavior depends on the identity of the next character.\n      if (\n        following === 9 /* `\\t` */ ||\n        following === 10 /* `\\n` */ ||\n        following === 12 /* `\\f` */ ||\n        following === 32 /* ` ` */ ||\n        following === 38 /* `&` */ ||\n        following === 60 /* `<` */ ||\n        Number.isNaN(following) ||\n        (additional && following === additional)\n      ) {\n        // Not a character reference.\n        // No characters are consumed, and nothing is returned.\n        // This is not an error, either.\n        queue += fromCharCode(character)\n        column++\n        continue\n      }\n\n      const start = index + 1\n      let begin = start\n      let end = start\n      /** @type {string} */\n      let type\n\n      if (following === 35 /* `#` */) {\n        // Numerical reference.\n        end = ++begin\n\n        // The behavior further depends on the next character.\n        const following = value.charCodeAt(end)\n\n        if (following === 88 /* `X` */ || following === 120 /* `x` */) {\n          // ASCII hexadecimal digits.\n          type = 'hexadecimal'\n          end = ++begin\n        } else {\n          // ASCII decimal digits.\n          type = 'decimal'\n        }\n      } else {\n        // Named reference.\n        type = 'named'\n      }\n\n      let characterReferenceCharacters = ''\n      let characterReference = ''\n      let characters = ''\n      // Each type of character reference accepts different characters.\n      // This test is used to detect whether a reference has ended (as the semicolon\n      // is not strictly needed).\n      const test =\n        type === 'named'\n          ? isAlphanumerical\n          : type === 'decimal'\n          ? isDecimal\n          : isHexadecimal\n\n      end--\n\n      while (++end <= value.length) {\n        const following = value.charCodeAt(end)\n\n        if (!test(following)) {\n          break\n        }\n\n        characters += fromCharCode(following)\n\n        // Check if we can match a legacy named reference.\n        // If so, we cache that as the last viable named reference.\n        // This ensures we do not need to walk backwards later.\n        if (type === 'named' && characterEntitiesLegacy.includes(characters)) {\n          characterReferenceCharacters = characters\n          // @ts-expect-error: always able to decode.\n          characterReference = decodeNamedCharacterReference(characters)\n        }\n      }\n\n      let terminated = value.charCodeAt(end) === 59 /* `;` */\n\n      if (terminated) {\n        end++\n\n        const namedReference =\n          type === 'named' ? decodeNamedCharacterReference(characters) : false\n\n        if (namedReference) {\n          characterReferenceCharacters = characters\n          characterReference = namedReference\n        }\n      }\n\n      let diff = 1 + end - start\n      let reference = ''\n\n      if (!terminated && options.nonTerminated === false) {\n        // Empty.\n      } else if (!characters) {\n        // An empty (possible) reference is valid, unless it’s numeric (thus an\n        // ampersand followed by an octothorp).\n        if (type !== 'named') {\n          warning(4 /* Empty (numeric) */, diff)\n        }\n      } else if (type === 'named') {\n        // An ampersand followed by anything unknown, and not terminated, is\n        // invalid.\n        if (terminated && !characterReference) {\n          warning(5 /* Unknown (named) */, 1)\n        } else {\n          // If there’s something after an named reference which is not known,\n          // cap the reference.\n          if (characterReferenceCharacters !== characters) {\n            end = begin + characterReferenceCharacters.length\n            diff = 1 + end - begin\n            terminated = false\n          }\n\n          // If the reference is not terminated, warn.\n          if (!terminated) {\n            const reason = characterReferenceCharacters\n              ? 1 /* Non terminated (named) */\n              : 3 /* Empty (named) */\n\n            if (options.attribute) {\n              const following = value.charCodeAt(end)\n\n              if (following === 61 /* `=` */) {\n                warning(reason, diff)\n                characterReference = ''\n              } else if (isAlphanumerical(following)) {\n                characterReference = ''\n              } else {\n                warning(reason, diff)\n              }\n            } else {\n              warning(reason, diff)\n            }\n          }\n        }\n\n        reference = characterReference\n      } else {\n        if (!terminated) {\n          // All nonterminated numeric references are not rendered, and emit a\n          // warning.\n          warning(2 /* Non terminated (numeric) */, diff)\n        }\n\n        // When terminated and numerical, parse as either hexadecimal or\n        // decimal.\n        let referenceCode = Number.parseInt(\n          characters,\n          type === 'hexadecimal' ? 16 : 10\n        )\n\n        // Emit a warning when the parsed number is prohibited, and replace with\n        // replacement character.\n        if (prohibited(referenceCode)) {\n          warning(7 /* Prohibited (numeric) */, diff)\n          reference = fromCharCode(65533 /* `�` */)\n        } else if (referenceCode in characterReferenceInvalid) {\n          // Emit a warning when the parsed number is disallowed, and replace by\n          // an alternative.\n          warning(6 /* Disallowed (numeric) */, diff)\n          reference = characterReferenceInvalid[referenceCode]\n        } else {\n          // Parse the number.\n          let output = ''\n\n          // Emit a warning when the parsed number should not be used.\n          if (disallowed(referenceCode)) {\n            warning(6 /* Disallowed (numeric) */, diff)\n          }\n\n          // Serialize the number.\n          if (referenceCode > 0xffff) {\n            referenceCode -= 0x10000\n            output += fromCharCode((referenceCode >>> (10 & 0x3ff)) | 0xd800)\n            referenceCode = 0xdc00 | (referenceCode & 0x3ff)\n          }\n\n          reference = output + fromCharCode(referenceCode)\n        }\n      }\n\n      // Found it!\n      // First eat the queued characters as normal text, then eat a reference.\n      if (reference) {\n        flush()\n\n        previous = now()\n        index = end - 1\n        column += end - start + 1\n        result.push(reference)\n        const next = now()\n        next.offset++\n\n        if (options.reference) {\n          options.reference.call(\n            options.referenceContext,\n            reference,\n            {start: previous, end: next},\n            value.slice(start - 1, end)\n          )\n        }\n\n        previous = next\n      } else {\n        // If we could not find a reference, queue the checked characters (as\n        // normal characters), and move the pointer to their end.\n        // This is possible because we can be certain neither newlines nor\n        // ampersands are included.\n        characters = value.slice(start - 1, end)\n        queue += characters\n        column += characters.length\n        index = end - 1\n      }\n    } else {\n      // Handle anything other than an ampersand, including newlines and EOF.\n      if (character === 10 /* `\\n` */) {\n        line++\n        lines++\n        column = 0\n      }\n\n      if (Number.isNaN(character)) {\n        flush()\n      } else {\n        queue += fromCharCode(character)\n        column++\n      }\n    }\n  }\n\n  // Return the reduced nodes.\n  return result.join('')\n\n  // Get current position.\n  function now() {\n    return {\n      line,\n      column,\n      offset: index + ((point ? point.offset : 0) || 0)\n    }\n  }\n\n  /**\n   * Handle the warning.\n   *\n   * @param {1|2|3|4|5|6|7} code\n   * @param {number} offset\n   */\n  function warning(code, offset) {\n    /** @type {ReturnType<now>} */\n    let position\n\n    if (options.warning) {\n      position = now()\n      position.column += offset\n      position.offset += offset\n\n      options.warning.call(\n        options.warningContext,\n        messages[code],\n        position,\n        code\n      )\n    }\n  }\n\n  /**\n   * Flush `queue` (normal text).\n   * Macro invoked before each reference and at the end of `value`.\n   * Does nothing when `queue` is empty.\n   */\n  function flush() {\n    if (queue) {\n      result.push(queue)\n\n      if (options.text) {\n        options.text.call(options.textContext, queue, {\n          start: previous,\n          end: now()\n        })\n      }\n\n      queue = ''\n    }\n  }\n}\n\n/**\n * Check if `character` is outside the permissible unicode range.\n *\n * @param {number} code\n * @returns {boolean}\n */\nfunction prohibited(code) {\n  return (code >= 0xd800 && code <= 0xdfff) || code > 0x10ffff\n}\n\n/**\n * Check if `character` is disallowed.\n *\n * @param {number} code\n * @returns {boolean}\n */\nfunction disallowed(code) {\n  return (\n    (code >= 0x0001 && code <= 0x0008) ||\n    code === 0x000b ||\n    (code >= 0x000d && code <= 0x001f) ||\n    (code >= 0x007f && code <= 0x009f) ||\n    (code >= 0xfdd0 && code <= 0xfdef) ||\n    (code & 0xffff) === 0xffff ||\n    (code & 0xffff) === 0xfffe\n  )\n}\n","/**\n * @typedef CoreOptions\n * @property {ReadonlyArray<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\nconst defaultSubsetRegex = /[\"&'<>`]/g\nconst surrogatePairsRegex = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g\nconst controlCharactersRegex =\n  // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n  /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g\nconst regexEscapeRegex = /[|\\\\{}()[\\]^$+*?.]/g\n\n/** @type {WeakMap<ReadonlyArray<string>, RegExp>} */\nconst subsetToRegexCache = new WeakMap()\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(\n    options.subset\n      ? charactersToExpressionCached(options.subset)\n      : defaultSubsetRegex,\n    basic\n  )\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(surrogatePairsRegex, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(controlCharactersRegex, basic)\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * A wrapper function that caches the result of `charactersToExpression` with a WeakMap.\n * This can improve performance when tooling calls `charactersToExpression` repeatedly\n * with the same subset.\n *\n * @param {ReadonlyArray<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpressionCached(subset) {\n  let cached = subsetToRegexCache.get(subset)\n\n  if (!cached) {\n    cached = charactersToExpression(subset)\n    subsetToRegexCache.set(subset, cached)\n  }\n\n  return cached\n}\n\n/**\n * @param {ReadonlyArray<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = []\n  let index = -1\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(regexEscapeRegex, '\\\\$&'))\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n","/**\n * The smallest way to encode a character.\n *\n * @param {number} code\n * @returns {string}\n */\nexport function formatBasic(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\nimport {core} from './core.js'\nimport {formatSmart} from './util/format-smart.js'\nimport {formatBasic} from './util/format-basic.js'\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * Encode special characters in `value` as hexadecimals.\n *\n * @param {string} value\n *   Value to encode.\n * @param {LightOptions} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntitiesLight(value, options) {\n  return core(value, Object.assign({format: formatBasic}, options))\n}\n","/**\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, OnEnterError, OnExitError, Token} from 'mdast-util-from-markdown'\n * @import {Handle as ToMarkdownHandle, Options as ToMarkdownExtension, State, Tracker} from 'mdast-util-to-markdown'\n * @import {Point} from 'unist'\n * @import {MdxJsxAttribute, MdxJsxAttributeValueExpression, MdxJsxExpressionAttribute, MdxJsxFlowElement, MdxJsxTextElement} from '../index.js'\n */\n\n/**\n * @typedef Tag\n *   Single tag.\n * @property {string | undefined} name\n *   Name of tag, or `undefined` for fragment.\n *\n *   > 👉 **Note**: `null` is used in the AST for fragments, as it serializes in\n *   > JSON.\n * @property {Array<MdxJsxAttribute | MdxJsxExpressionAttribute>} attributes\n *   Attributes.\n * @property {boolean} close\n *   Whether the tag is closing (`</x>`).\n * @property {boolean} selfClosing\n *   Whether the tag is self-closing (`<x/>`).\n * @property {Token['start']} start\n *   Start point.\n * @property {Token['start']} end\n *   End point.\n *\n * @typedef ToMarkdownOptions\n *   Configuration.\n * @property {'\"' | \"'\" | null | undefined} [quote='\"']\n *   Preferred quote to use around attribute values (default: `'\"'`).\n * @property {boolean | null | undefined} [quoteSmart=false]\n *   Use the other quote if that results in less bytes (default: `false`).\n * @property {boolean | null | undefined} [tightSelfClosing=false]\n *   Do not use an extra space when closing self-closing elements: `<img/>`\n *   instead of `<img />` (default: `false`).\n * @property {number | null | undefined} [printWidth=Infinity]\n *   Try and wrap syntax at this width (default: `Infinity`).\n *\n *   When set to a finite number (say, `80`), the formatter will print\n *   attributes on separate lines when a tag doesn’t fit on one line.\n *   The normal behavior is to print attributes with spaces between them\n *   instead of line endings.\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {parseEntities} from 'parse-entities'\nimport {stringifyEntitiesLight} from 'stringify-entities'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst indent = '  '\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX JSX.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX JSX.\n *\n *   When using the syntax extension with `addResult`, nodes will have a\n *   `data.estree` field set to an ESTree `Program` node.\n */\nexport function mdxJsxFromMarkdown() {\n  return {\n    canContainEols: ['mdxJsxTextElement'],\n    enter: {\n      mdxJsxFlowTag: enterMdxJsxTag,\n      mdxJsxFlowTagClosingMarker: enterMdxJsxTagClosingMarker,\n      mdxJsxFlowTagAttribute: enterMdxJsxTagAttribute,\n      mdxJsxFlowTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,\n      mdxJsxFlowTagAttributeValueLiteral: buffer,\n      mdxJsxFlowTagAttributeValueExpression: buffer,\n      mdxJsxFlowTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker,\n\n      mdxJsxTextTag: enterMdxJsxTag,\n      mdxJsxTextTagClosingMarker: enterMdxJsxTagClosingMarker,\n      mdxJsxTextTagAttribute: enterMdxJsxTagAttribute,\n      mdxJsxTextTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,\n      mdxJsxTextTagAttributeValueLiteral: buffer,\n      mdxJsxTextTagAttributeValueExpression: buffer,\n      mdxJsxTextTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker\n    },\n    exit: {\n      mdxJsxFlowTagClosingMarker: exitMdxJsxTagClosingMarker,\n      mdxJsxFlowTagNamePrimary: exitMdxJsxTagNamePrimary,\n      mdxJsxFlowTagNameMember: exitMdxJsxTagNameMember,\n      mdxJsxFlowTagNameLocal: exitMdxJsxTagNameLocal,\n      mdxJsxFlowTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,\n      mdxJsxFlowTagExpressionAttributeValue: data,\n      mdxJsxFlowTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,\n      mdxJsxFlowTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,\n      mdxJsxFlowTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,\n      mdxJsxFlowTagAttributeValueLiteralValue: data,\n      mdxJsxFlowTagAttributeValueExpression:\n        exitMdxJsxTagAttributeValueExpression,\n      mdxJsxFlowTagAttributeValueExpressionValue: data,\n      mdxJsxFlowTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,\n      mdxJsxFlowTag: exitMdxJsxTag,\n\n      mdxJsxTextTagClosingMarker: exitMdxJsxTagClosingMarker,\n      mdxJsxTextTagNamePrimary: exitMdxJsxTagNamePrimary,\n      mdxJsxTextTagNameMember: exitMdxJsxTagNameMember,\n      mdxJsxTextTagNameLocal: exitMdxJsxTagNameLocal,\n      mdxJsxTextTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,\n      mdxJsxTextTagExpressionAttributeValue: data,\n      mdxJsxTextTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,\n      mdxJsxTextTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,\n      mdxJsxTextTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,\n      mdxJsxTextTagAttributeValueLiteralValue: data,\n      mdxJsxTextTagAttributeValueExpression:\n        exitMdxJsxTagAttributeValueExpression,\n      mdxJsxTextTagAttributeValueExpressionValue: data,\n      mdxJsxTextTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,\n      mdxJsxTextTag: exitMdxJsxTag\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function buffer() {\n    this.buffer()\n  }\n\n  /**\n   * Copy a point-like value.\n   *\n   * @param {Point} d\n   *   Point-like value.\n   * @returns {Point}\n   *   unist point.\n   */\n  function point(d) {\n    return {line: d.line, column: d.column, offset: d.offset}\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function data(token) {\n    this.config.enter.data.call(this, token)\n    this.config.exit.data.call(this, token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTag(token) {\n    /** @type {Tag} */\n    const tag = {\n      name: undefined,\n      attributes: [],\n      close: false,\n      selfClosing: false,\n      start: token.start,\n      end: token.end\n    }\n    if (!this.data.mdxJsxTagStack) this.data.mdxJsxTagStack = []\n    this.data.mdxJsxTag = tag\n    this.buffer()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagClosingMarker(token) {\n    const stack = this.data.mdxJsxTagStack\n    assert(stack, 'expected `mdxJsxTagStack`')\n\n    if (stack.length === 0) {\n      throw new VFileMessage(\n        'Unexpected closing slash `/` in tag, expected an open tag first',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:unexpected-closing-slash'\n      )\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagAnyAttribute(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n\n    if (tag.close) {\n      throw new VFileMessage(\n        'Unexpected attribute in closing tag, expected the end of the tag',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:unexpected-attribute'\n      )\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagSelfClosingMarker(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n\n    if (tag.close) {\n      throw new VFileMessage(\n        'Unexpected self-closing slash `/` in closing tag, expected the end of the tag',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:unexpected-self-closing-slash'\n      )\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagClosingMarker() {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    tag.close = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagNamePrimary(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    tag.name = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagNameMember(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    tag.name += '.' + this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagNameLocal(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    tag.name += ':' + this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagAttribute(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    enterMdxJsxTagAnyAttribute.call(this, token)\n    tag.attributes.push({\n      type: 'mdxJsxAttribute',\n      name: '',\n      value: null,\n      position: {\n        start: point(token.start),\n        // @ts-expect-error: `end` will be patched later.\n        end: undefined\n      }\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagExpressionAttribute(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    enterMdxJsxTagAnyAttribute.call(this, token)\n    tag.attributes.push({type: 'mdxJsxExpressionAttribute', value: ''})\n    this.buffer()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagExpressionAttribute(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const tail = tag.attributes[tag.attributes.length - 1]\n    assert(tail.type === 'mdxJsxExpressionAttribute')\n    const estree = token.estree\n\n    tail.value = this.resume()\n\n    if (estree) {\n      tail.data = {estree}\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeNamePrimary(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const node = tag.attributes[tag.attributes.length - 1]\n    assert(node.type === 'mdxJsxAttribute')\n    node.name = this.sliceSerialize(token)\n    assert(node.position !== undefined)\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeNameLocal(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const node = tag.attributes[tag.attributes.length - 1]\n    assert(node.type === 'mdxJsxAttribute')\n    node.name += ':' + this.sliceSerialize(token)\n    assert(node.position !== undefined)\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeValueLiteral(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const node = tag.attributes[tag.attributes.length - 1]\n    node.value = parseEntities(this.resume(), {nonTerminated: false})\n    assert(node.position !== undefined)\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeValueExpression(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const tail = tag.attributes[tag.attributes.length - 1]\n    assert(tail.type === 'mdxJsxAttribute')\n    /** @type {MdxJsxAttributeValueExpression} */\n    const node = {type: 'mdxJsxAttributeValueExpression', value: this.resume()}\n    const estree = token.estree\n\n    if (estree) {\n      node.data = {estree}\n    }\n\n    tail.value = node\n    assert(tail.position !== undefined)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagSelfClosingMarker() {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n\n    tag.selfClosing = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTag(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const stack = this.data.mdxJsxTagStack\n    assert(stack, 'expected `mdxJsxTagStack`')\n    const tail = stack[stack.length - 1]\n\n    if (tag.close && tail.name !== tag.name) {\n      throw new VFileMessage(\n        'Unexpected closing tag `' +\n          serializeAbbreviatedTag(tag) +\n          '`, expected corresponding closing tag for `' +\n          serializeAbbreviatedTag(tail) +\n          '` (' +\n          stringifyPosition(tail) +\n          ')',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:end-tag-mismatch'\n      )\n    }\n\n    // End of a tag, so drop the buffer.\n    this.resume()\n\n    if (tag.close) {\n      stack.pop()\n    } else {\n      this.enter(\n        {\n          type:\n            token.type === 'mdxJsxTextTag'\n              ? 'mdxJsxTextElement'\n              : 'mdxJsxFlowElement',\n          name: tag.name || null,\n          attributes: tag.attributes,\n          children: []\n        },\n        token,\n        onErrorRightIsTag\n      )\n    }\n\n    if (tag.selfClosing || tag.close) {\n      this.exit(token, onErrorLeftIsTag)\n    } else {\n      stack.push(tag)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {OnEnterError}\n   */\n  function onErrorRightIsTag(closing, open) {\n    const stack = this.data.mdxJsxTagStack\n    assert(stack, 'expected `mdxJsxTagStack`')\n    const tag = stack[stack.length - 1]\n    assert(tag, 'expected `mdxJsxTag`')\n    const place = closing ? ' before the end of `' + closing.type + '`' : ''\n    const position = closing\n      ? {start: closing.start, end: closing.end}\n      : undefined\n\n    throw new VFileMessage(\n      'Expected a closing tag for `' +\n        serializeAbbreviatedTag(tag) +\n        '` (' +\n        stringifyPosition({start: open.start, end: open.end}) +\n        ')' +\n        place,\n      position,\n      'mdast-util-mdx-jsx:end-tag-mismatch'\n    )\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {OnExitError}\n   */\n  function onErrorLeftIsTag(a, b) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n\n    throw new VFileMessage(\n      'Expected the closing tag `' +\n        serializeAbbreviatedTag(tag) +\n        '` either after the end of `' +\n        b.type +\n        '` (' +\n        stringifyPosition(b.end) +\n        ') or another opening tag after the start of `' +\n        b.type +\n        '` (' +\n        stringifyPosition(b.start) +\n        ')',\n      {start: a.start, end: a.end},\n      'mdast-util-mdx-jsx:end-tag-mismatch'\n    )\n  }\n\n  /**\n   * Serialize a tag, excluding attributes.\n   * `self-closing` is not supported, because we don’t need it yet.\n   *\n   * @param {Tag} tag\n   * @returns {string}\n   */\n  function serializeAbbreviatedTag(tag) {\n    return '<' + (tag.close ? '/' : '') + (tag.name || '') + '>'\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX JSX.\n *\n * This extension configures `mdast-util-to-markdown` with\n * `options.fences: true` and `options.resourceLink: true` too, do not\n * overwrite them!\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX JSX.\n */\nexport function mdxJsxToMarkdown(options) {\n  const options_ = options || {}\n  const quote = options_.quote || '\"'\n  const quoteSmart = options_.quoteSmart || false\n  const tightSelfClosing = options_.tightSelfClosing || false\n  const printWidth = options_.printWidth || Number.POSITIVE_INFINITY\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error(\n      'Cannot serialize attribute values with `' +\n        quote +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  mdxElement.peek = peekElement\n\n  return {\n    handlers: {\n      mdxJsxFlowElement: mdxElement,\n      mdxJsxTextElement: mdxElement\n    },\n    unsafe: [\n      {character: '<', inConstruct: ['phrasing']},\n      {atBreak: true, character: '<'}\n    ],\n    // Always generate fenced code (never indented code).\n    fences: true,\n    // Always generate links with resources (never autolinks).\n    resourceLink: true\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n   */\n  // eslint-disable-next-line complexity\n  function mdxElement(node, _, state, info) {\n    const flow = node.type === 'mdxJsxFlowElement'\n    const selfClosing = node.name\n      ? !node.children || node.children.length === 0\n      : false\n    const depth = inferDepth(state)\n    const currentIndent = createIndent(depth)\n    const trackerOneLine = state.createTracker(info)\n    const trackerMultiLine = state.createTracker(info)\n    /** @type {Array<string>} */\n    const serializedAttributes = []\n    const prefix = (flow ? currentIndent : '') + '<' + (node.name || '')\n    const exit = state.enter(node.type)\n\n    trackerOneLine.move(prefix)\n    trackerMultiLine.move(prefix)\n\n    // None.\n    if (node.attributes && node.attributes.length > 0) {\n      if (!node.name) {\n        throw new Error('Cannot serialize fragment w/ attributes')\n      }\n\n      let index = -1\n      while (++index < node.attributes.length) {\n        const attribute = node.attributes[index]\n        /** @type {string} */\n        let result\n\n        if (attribute.type === 'mdxJsxExpressionAttribute') {\n          result = '{' + (attribute.value || '') + '}'\n        } else {\n          if (!attribute.name) {\n            throw new Error('Cannot serialize attribute w/o name')\n          }\n\n          const value = attribute.value\n          const left = attribute.name\n          /** @type {string} */\n          let right = ''\n\n          if (value === null || value === undefined) {\n            // Empty.\n          } else if (typeof value === 'object') {\n            right = '{' + (value.value || '') + '}'\n          } else {\n            // If the alternative is less common than `quote`, switch.\n            const appliedQuote =\n              quoteSmart && ccount(value, quote) > ccount(value, alternative)\n                ? alternative\n                : quote\n            right =\n              appliedQuote +\n              stringifyEntitiesLight(value, {subset: [appliedQuote]}) +\n              appliedQuote\n          }\n\n          result = left + (right ? '=' : '') + right\n        }\n\n        serializedAttributes.push(result)\n      }\n    }\n\n    let attributesOnTheirOwnLine = false\n    const attributesOnOneLine = serializedAttributes.join(' ')\n\n    if (\n      // Block:\n      flow &&\n      // Including a line ending (expressions).\n      (/\\r?\\n|\\r/.test(attributesOnOneLine) ||\n        // Current position (including `<tag`).\n        trackerOneLine.current().now.column +\n          // -1 because columns, +1 for ` ` before attributes.\n          // Attributes joined by spaces.\n          attributesOnOneLine.length +\n          // ` />`.\n          (selfClosing ? (tightSelfClosing ? 2 : 3) : 1) >\n          printWidth)\n    ) {\n      attributesOnTheirOwnLine = true\n    }\n\n    let tracker = trackerOneLine\n    let value = prefix\n\n    if (attributesOnTheirOwnLine) {\n      tracker = trackerMultiLine\n\n      let index = -1\n\n      while (++index < serializedAttributes.length) {\n        // Only indent first line of of attributes, we can’t indent attribute\n        // values.\n        serializedAttributes[index] =\n          currentIndent + indent + serializedAttributes[index]\n      }\n\n      value += tracker.move(\n        '\\n' + serializedAttributes.join('\\n') + '\\n' + currentIndent\n      )\n    } else if (attributesOnOneLine) {\n      value += tracker.move(' ' + attributesOnOneLine)\n    }\n\n    if (selfClosing) {\n      value += tracker.move(\n        (tightSelfClosing || attributesOnTheirOwnLine ? '' : ' ') + '/'\n      )\n    }\n\n    value += tracker.move('>')\n\n    if (node.children && node.children.length > 0) {\n      if (node.type === 'mdxJsxTextElement') {\n        value += tracker.move(\n          // @ts-expect-error: `containerPhrasing` is typed correctly, but TS\n          // generates *hardcoded* types, which means that our dynamically added\n          // directives are not present.\n          // At some point, TS should fix that, and `from-markdown` should be fine.\n          state.containerPhrasing(node, {\n            ...tracker.current(),\n            before: '>',\n            after: '<'\n          })\n        )\n      } else {\n        tracker.shift(2)\n        value += tracker.move('\\n')\n        value += tracker.move(containerFlow(node, state, tracker.current()))\n        value += tracker.move('\\n')\n      }\n    }\n\n    if (!selfClosing) {\n      value += tracker.move(\n        (flow ? currentIndent : '') + '</' + (node.name || '') + '>'\n      )\n    }\n\n    exit()\n    return value\n  }\n}\n\n// Modified copy of:\n// <https://github.com/syntax-tree/mdast-util-to-markdown/blob/a381cbc/lib/util/container-flow.js>.\n//\n// To do: add `indent` support to `mdast-util-to-markdown`.\n// As indents are only used for JSX, it’s fine for now, but perhaps better\n// there.\n/**\n * @param {MdxJsxFlowElement} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {ReturnType<Tracker['current']>} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nfunction containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children\n  const tracker = state.createTracker(info)\n  const currentIndent = createIndent(inferDepth(state))\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    const childInfo = {before: '\\n', after: '\\n', ...tracker.current()}\n\n    const result = state.handle(child, parent, state, childInfo)\n\n    const serializedChild =\n      child.type === 'mdxJsxFlowElement'\n        ? result\n        : state.indentLines(result, function (line, _, blank) {\n            return (blank ? '' : currentIndent) + line\n          })\n\n    results.push(tracker.move(serializedChild))\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(tracker.move('\\n\\n'))\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {State} state\n * @returns {number}\n */\nfunction inferDepth(state) {\n  let depth = 0\n  let index = state.stack.length\n\n  while (--index > -1) {\n    const name = state.stack[index]\n\n    if (name === 'blockquote' || name === 'listItem') break\n    if (name === 'mdxJsxFlowElement') depth++\n  }\n\n  return depth\n}\n\n/**\n * @param {number} depth\n * @returns {string}\n */\nfunction createIndent(depth) {\n  return indent.repeat(depth)\n}\n\n/**\n * @type {ToMarkdownHandle}\n */\nfunction peekElement() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('../index.js').MdxjsEsm} MdxjsEsm\n */\n\n// To do: next major: expose functions.\nimport {ok as assert} from 'devlop'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX.js ESM in\n * markdown.\n *\n * When using the micromark syntax extension with `addResult`, nodes will have\n * a `data.estree` field set to an ESTree [`Program`][program] node.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX.js ESM.\n */\nexport function mdxjsEsmFromMarkdown() {\n  return {\n    enter: {mdxjsEsm: enterMdxjsEsm},\n    exit: {mdxjsEsm: exitMdxjsEsm, mdxjsEsmData: exitMdxjsEsmData}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX.js ESM in\n * markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX.js ESM.\n */\nexport function mdxjsEsmToMarkdown() {\n  return {handlers: {mdxjsEsm: handleMdxjsEsm}}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxjsEsm(token) {\n  this.enter({type: 'mdxjsEsm', value: ''}, token)\n  this.buffer() // Capture EOLs\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxjsEsm(token) {\n  const value = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'mdxjsEsm')\n\n  this.exit(token)\n\n  const estree = token.estree\n\n  node.value = value\n\n  if (estree) {\n    node.data = {estree}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxjsEsmData(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxjsEsm} node\n */\nfunction handleMdxjsEsm(node) {\n  return node.value || ''\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-mdx-jsx').ToMarkdownOptions} ToMarkdownOptions\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {\n  mdxExpressionFromMarkdown,\n  mdxExpressionToMarkdown\n} from 'mdast-util-mdx-expression'\nimport {mdxJsxFromMarkdown, mdxJsxToMarkdown} from 'mdast-util-mdx-jsx'\nimport {mdxjsEsmFromMarkdown, mdxjsEsmToMarkdown} from 'mdast-util-mdxjs-esm'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX (ESM, JSX,\n * expressions).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable MDX (ESM, JSX,\n *   expressions).\n *\n *   When using the syntax extensions with `addResult`, ESM and expression\n *   nodes will have `data.estree` fields set to ESTree `Program` node.\n */\nexport function mdxFromMarkdown() {\n  return [\n    mdxExpressionFromMarkdown(),\n    mdxJsxFromMarkdown(),\n    mdxjsEsmFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX (ESM, JSX,\n * expressions).\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX (ESM, JSX,\n *   expressions).\n */\nexport function mdxToMarkdown(options) {\n  return {\n    extensions: [\n      mdxExpressionToMarkdown(),\n      mdxJsxToMarkdown(options),\n      mdxjsEsmToMarkdown()\n    ]\n  }\n}\n","// This file was generated. Do not modify manually!\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\n// This file was generated. Do not modify manually!\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];\n\n// This file was generated. Do not modify manually!\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\n// This file was generated. Do not modify manually!\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range.\n\n// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords$1 = {\n  5: ecma5AndLessKeywords,\n  \"5module\": ecma5AndLessKeywords + \" export import\",\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) { return false }\n    pos += set[i + 1];\n    if (pos >= code) { return true }\n  }\n  return false\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) { return code === 36 }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) { return code === 36 }\n  if (code < 58) { return true }\n  if (code < 65) { return false }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords[name] = new TokenType(name, options)\n}\n\nvar types$1 = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  privateId: new TokenType(\"privateId\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n  coalesce: binop(\"??\", 1),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\", startsExpr),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029\n}\n\nfunction nextLineBreak(code, from, end) {\n  if ( end === void 0 ) end = code.length;\n\n  for (var i = from; i < end; i++) {\n    var next = code.charCodeAt(i);\n    if (isNewLine(next))\n      { return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1 }\n  }\n  return -1\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\n\nvar hasOwn = Object.hasOwn || (function (obj, propName) { return (\n  hasOwnProperty.call(obj, propName)\n); });\n\nvar isArray = Array.isArray || (function (obj) { return (\n  toString.call(obj) === \"[object Array]\"\n); });\n\nvar regexpCache = Object.create(null);\n\nfunction wordsRegexp(words) {\n  return regexpCache[words] || (regexpCache[words] = new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\"))\n}\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) { return String.fromCharCode(code) }\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\nvar loneSurrogate = /(?:[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) { this.source = p.sourceFile; }\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    var nextBreak = nextLineBreak(input, cur, offset);\n    if (nextBreak < 0) { return new Position(line, offset - cur) }\n    ++line;\n    cur = nextBreak;\n  }\n}\n\n// A second argument must be given to configure the parser process.\n// These options are recognized (only `ecmaVersion` is required):\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n  // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10\n  // (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), or `\"latest\"`\n  // (the latest version the library supports). This influences\n  // support for strict mode, the set of reserved words, and support\n  // for new syntax features.\n  ecmaVersion: null,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called when\n  // a semicolon is automatically inserted. It will be passed the\n  // position of the inserted semicolon as an offset, and if\n  // `locations` is enabled, it is given the location as a `{line,\n  // column}` object as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program, and an import.meta expression\n  // in a script isn't considered an error.\n  allowImportExportEverywhere: false,\n  // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.\n  // When enabled, await identifiers are allowed to appear at the top-level scope,\n  // but they are still not allowed in non-async functions.\n  allowAwaitOutsideFunction: null,\n  // When enabled, super identifiers are not constrained to\n  // appearing in methods and do not raise an error when they appear elsewhere.\n  allowSuperOutsideMethod: null,\n  // When enabled, hashbang directive in the beginning of file is\n  // allowed and treated as a line comment. Enabled by default when\n  // `ecmaVersion` >= 2023.\n  allowHashBang: false,\n  // By default, the parser will verify that private properties are\n  // only used in places where they are valid and have been declared.\n  // Set this to false to turn such checks off.\n  checkPrivateFields: true,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  // When this option has an array as value, objects representing the\n  // comments are pushed to it.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false\n};\n\n// Interpret and default an options object\n\nvar warnedAboutEcmaVersion = false;\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    { options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n  if (options.ecmaVersion === \"latest\") {\n    options.ecmaVersion = 1e8;\n  } else if (options.ecmaVersion == null) {\n    if (!warnedAboutEcmaVersion && typeof console === \"object\" && console.warn) {\n      warnedAboutEcmaVersion = true;\n      console.warn(\"Since Acorn 8.0.0, options.ecmaVersion is required.\\nDefaulting to 2020, but this will stop working in the future.\");\n    }\n    options.ecmaVersion = 11;\n  } else if (options.ecmaVersion >= 2015) {\n    options.ecmaVersion -= 2009;\n  }\n\n  if (options.allowReserved == null)\n    { options.allowReserved = options.ecmaVersion < 5; }\n\n  if (!opts || opts.allowHashBang == null)\n    { options.allowHashBang = options.ecmaVersion >= 14; }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    { options.onComment = pushComment(options, options.onComment); }\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations)\n      { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n    if (options.ranges)\n      { comment.range = [start, end]; }\n    array.push(comment);\n  }\n}\n\n// Each scope gets a bitset that may contain these flags\nvar\n    SCOPE_TOP = 1,\n    SCOPE_FUNCTION = 2,\n    SCOPE_ASYNC = 4,\n    SCOPE_GENERATOR = 8,\n    SCOPE_ARROW = 16,\n    SCOPE_SIMPLE_CATCH = 32,\n    SCOPE_SUPER = 64,\n    SCOPE_DIRECT_SUPER = 128,\n    SCOPE_CLASS_STATIC_BLOCK = 256,\n    SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;\n\nfunction functionFlags(async, generator) {\n  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n}\n\n// Used in checkLVal* and declareName to determine the type of a binding\nvar\n    BIND_NONE = 0, // Not a binding\n    BIND_VAR = 1, // Var-style binding\n    BIND_LEXICAL = 2, // Let- or const-style binding\n    BIND_FUNCTION = 3, // Function declaration\n    BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding\n    BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n  var reserved = \"\";\n  if (options.allowReserved !== true) {\n    reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];\n    if (options.sourceType === \"module\") { reserved += \" await\"; }\n  }\n  this.reservedWords = wordsRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = wordsRegexp(reservedStrict);\n  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types$1.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos);\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n  this.potentialArrowInForAwait = false;\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n  // Labels in scope.\n  this.labels = [];\n  // Thus-far undefined exports.\n  this.undefinedExports = Object.create(null);\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n    { this.skipLineComment(2); }\n\n  // Scope tracking for duplicate variable names (see scope.js)\n  this.scopeStack = [];\n  this.enterScope(SCOPE_TOP);\n\n  // For RegExp validation\n  this.regexpState = null;\n\n  // The stack of private names.\n  // Each element has two properties: 'declared' and 'used'.\n  // When it exited from the outermost class definition, all used private names must be declared.\n  this.privateNameStack = [];\n};\n\nvar prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },canAwait: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true },allowNewDotTarget: { configurable: true },inClassStaticBlock: { configurable: true } };\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nprototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\n\nprototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit };\n\nprototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit };\n\nprototypeAccessors.canAwait.get = function () {\n  for (var i = this.scopeStack.length - 1; i >= 0; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) { return false }\n    if (scope.flags & SCOPE_FUNCTION) { return (scope.flags & SCOPE_ASYNC) > 0 }\n  }\n  return (this.inModule && this.options.ecmaVersion >= 13) || this.options.allowAwaitOutsideFunction\n};\n\nprototypeAccessors.allowSuper.get = function () {\n  var ref = this.currentThisScope();\n    var flags = ref.flags;\n    var inClassFieldInit = ref.inClassFieldInit;\n  return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod\n};\n\nprototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\n\nprototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\n\nprototypeAccessors.allowNewDotTarget.get = function () {\n  var ref = this.currentThisScope();\n    var flags = ref.flags;\n    var inClassFieldInit = ref.inClassFieldInit;\n  return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit\n};\n\nprototypeAccessors.inClassStaticBlock.get = function () {\n  return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0\n};\n\nParser.extend = function extend () {\n    var plugins = [], len = arguments.length;\n    while ( len-- ) plugins[ len ] = arguments[ len ];\n\n  var cls = this;\n  for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n  return cls\n};\n\nParser.parse = function parse (input, options) {\n  return new this(options, input).parse()\n};\n\nParser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\n  var parser = new this(options, input, pos);\n  parser.nextToken();\n  return parser.parseExpression()\n};\n\nParser.tokenizer = function tokenizer (input, options) {\n  return new this(options, input)\n};\n\nObject.defineProperties( Parser.prototype, prototypeAccessors );\n\nvar pp$9 = Parser.prototype;\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\[^]|[^'\\\\])*?)'|\"((?:\\\\[^]|[^\"\\\\])*?)\")/;\npp$9.strictDirective = function(start) {\n  if (this.options.ecmaVersion < 5) { return false }\n  for (;;) {\n    // Try to find string literal.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    var match = literal.exec(this.input.slice(start));\n    if (!match) { return false }\n    if ((match[1] || match[2]) === \"use strict\") {\n      skipWhiteSpace.lastIndex = start + match[0].length;\n      var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;\n      var next = this.input.charAt(end);\n      return next === \";\" || next === \"}\" ||\n        (lineBreak.test(spaceAfter[0]) &&\n         !(/[(`.[+\\-/*%<>=,?^&]/.test(next) || next === \"!\" && this.input.charAt(end + 1) === \"=\"))\n    }\n    start += match[0].length;\n\n    // Skip semicolon, if any.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    if (this.input[start] === \";\")\n      { start++; }\n  }\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp$9.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp$9.isContextual = function(name) {\n  return this.type === types$1.name && this.value === name && !this.containsEsc\n};\n\n// Consumes contextual keyword if possible.\n\npp$9.eatContextual = function(name) {\n  if (!this.isContextual(name)) { return false }\n  this.next();\n  return true\n};\n\n// Asserts that following token is given contextual keyword.\n\npp$9.expectContextual = function(name) {\n  if (!this.eatContextual(name)) { this.unexpected(); }\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp$9.canInsertSemicolon = function() {\n  return this.type === types$1.eof ||\n    this.type === types$1.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\npp$9.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n    return true\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp$9.semicolon = function() {\n  if (!this.eat(types$1.semi) && !this.insertSemicolon()) { this.unexpected(); }\n};\n\npp$9.afterTrailingComma = function(tokType, notNext) {\n  if (this.type === tokType) {\n    if (this.options.onTrailingComma)\n      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n    if (!notNext)\n      { this.next(); }\n    return true\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp$9.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp$9.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nvar DestructuringErrors = function DestructuringErrors() {\n  this.shorthandAssign =\n  this.trailingComma =\n  this.parenthesizedAssign =\n  this.parenthesizedBind =\n  this.doubleProto =\n    -1;\n};\n\npp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) { return }\n  if (refDestructuringErrors.trailingComma > -1)\n    { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n  if (parens > -1) { this.raiseRecoverable(parens, isAssign ? \"Assigning to rvalue\" : \"Parenthesized pattern\"); }\n};\n\npp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) { return false }\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n  if (shorthandAssign >= 0)\n    { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n  if (doubleProto >= 0)\n    { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n};\n\npp$9.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n  if (this.awaitPos)\n    { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n};\n\npp$9.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    { return this.isSimpleAssignTarget(expr.expression) }\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n};\n\nvar pp$8 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$8.parseTopLevel = function(node) {\n  var exports = Object.create(null);\n  if (!node.body) { node.body = []; }\n  while (this.type !== types$1.eof) {\n    var stmt = this.parseStatement(null, true, exports);\n    node.body.push(stmt);\n  }\n  if (this.inModule)\n    { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)\n      {\n        var name = list[i];\n\n        this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\n      } }\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  node.sourceType = this.options.sourceType;\n  return this.finishNode(node, \"Program\")\n};\n\nvar loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\npp$8.isLet = function(context) {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n  // For ambiguous cases, determine if a LexicalDeclaration (or only a\n  // Statement) is allowed here. If context is not empty then only a Statement\n  // is allowed. However, `let [` is an explicit negative lookahead for\n  // ExpressionStatement, so special-case it first.\n  if (nextCh === 91 || nextCh === 92) { return true } // '[', '\\'\n  if (context) { return false }\n\n  if (nextCh === 123 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true } // '{', astral\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n    while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) { ++pos; }\n    if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true }\n    var ident = this.input.slice(next, pos);\n    if (!keywordRelationalOperator.test(ident)) { return true }\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$8.isAsyncFunction = function() {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n    { return false }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, after;\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 === this.input.length ||\n     !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$8.parseStatement = function(context, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind;\n\n  if (this.isLet(context)) {\n    starttype = types$1._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types$1._break: case types$1._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case types$1._debugger: return this.parseDebuggerStatement(node)\n  case types$1._do: return this.parseDoStatement(node)\n  case types$1._for: return this.parseForStatement(node)\n  case types$1._function:\n    // Function as sole body of either an if statement or a labeled statement\n    // works, but not when it is part of a labeled statement that is the sole\n    // body of an if statement.\n    if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n    return this.parseFunctionStatement(node, false, !context)\n  case types$1._class:\n    if (context) { this.unexpected(); }\n    return this.parseClass(node, true)\n  case types$1._if: return this.parseIfStatement(node)\n  case types$1._return: return this.parseReturnStatement(node)\n  case types$1._switch: return this.parseSwitchStatement(node)\n  case types$1._throw: return this.parseThrowStatement(node)\n  case types$1._try: return this.parseTryStatement(node)\n  case types$1._const: case types$1._var:\n    kind = kind || this.value;\n    if (context && kind !== \"var\") { this.unexpected(); }\n    return this.parseVarStatement(node, kind)\n  case types$1._while: return this.parseWhileStatement(node)\n  case types$1._with: return this.parseWithStatement(node)\n  case types$1.braceL: return this.parseBlock(true, node)\n  case types$1.semi: return this.parseEmptyStatement(node)\n  case types$1._export:\n  case types$1._import:\n    if (this.options.ecmaVersion > 10 && starttype === types$1._import) {\n      skipWhiteSpace.lastIndex = this.pos;\n      var skip = skipWhiteSpace.exec(this.input);\n      var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n      if (nextCh === 40 || nextCh === 46) // '(' or '.'\n        { return this.parseExpressionStatement(node, this.parseExpression()) }\n    }\n\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n      if (!this.inModule)\n        { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n    }\n    return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction()) {\n      if (context) { this.unexpected(); }\n      this.next();\n      return this.parseFunctionStatement(node, true, !context)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression();\n    if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon))\n      { return this.parseLabeledStatement(node, maybeName, expr, context) }\n    else { return this.parseExpressionStatement(node, expr) }\n  }\n};\n\npp$8.parseBreakContinueStatement = function(node, keyword) {\n  var isBreak = keyword === \"break\";\n  this.next();\n  if (this.eat(types$1.semi) || this.insertSemicolon()) { node.label = null; }\n  else if (this.type !== types$1.name) { this.unexpected(); }\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = 0;\n  for (; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n      if (node.label && isBreak) { break }\n    }\n  }\n  if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n};\n\npp$8.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\")\n};\n\npp$8.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"do\");\n  this.labels.pop();\n  this.expect(types$1._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    { this.eat(types$1.semi); }\n  else\n    { this.semicolon(); }\n  return this.finishNode(node, \"DoWhileStatement\")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$8.parseForStatement = function(node) {\n  this.next();\n  var awaitAt = (this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterScope(0);\n  this.expect(types$1.parenL);\n  if (this.type === types$1.semi) {\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, null)\n  }\n  var isLet = this.isLet();\n  if (this.type === types$1._var || this.type === types$1._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n    if ((this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types$1._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      return this.parseForIn(node, init$1)\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init$1)\n  }\n  var startsWithLet = this.isContextual(\"let\"), isForOf = false;\n  var containsEsc = this.containsEsc;\n  var refDestructuringErrors = new DestructuringErrors;\n  var initPos = this.start;\n  var init = awaitAt > -1\n    ? this.parseExprSubscripts(refDestructuringErrors, \"await\")\n    : this.parseExpression(true, refDestructuringErrors);\n  if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    if (awaitAt > -1) { // implies `ecmaVersion >= 9` (see declaration of awaitAt)\n      if (this.type === types$1._in) { this.unexpected(awaitAt); }\n      node.await = true;\n    } else if (isForOf && this.options.ecmaVersion >= 8) {\n      if (init.start === initPos && !containsEsc && init.type === \"Identifier\" && init.name === \"async\") { this.unexpected(); }\n      else if (this.options.ecmaVersion >= 9) { node.await = false; }\n    }\n    if (startsWithLet && isForOf) { this.raise(init.start, \"The left-hand side of a for-of loop may not start with 'let'.\"); }\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLValPattern(init);\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  if (awaitAt > -1) { this.unexpected(awaitAt); }\n  return this.parseFor(node, init)\n};\n\npp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n  this.next();\n  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\n};\n\npp$8.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(\"if\");\n  node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n  return this.finishNode(node, \"IfStatement\")\n};\n\npp$8.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    { this.raise(this.start, \"'return' outside of function\"); }\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types$1.semi) || this.insertSemicolon()) { node.argument = null; }\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node, \"ReturnStatement\")\n};\n\npp$8.parseSwitchStatement = function(node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types$1.braceL);\n  this.labels.push(switchLabel);\n  this.enterScope(0);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n  for (var sawDefault = false; this.type !== types$1.braceR;) {\n    if (this.type === types$1._case || this.type === types$1._default) {\n      var isCase = this.type === types$1._case;\n      if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(types$1.colon);\n    } else {\n      if (!cur) { this.unexpected(); }\n      cur.consequent.push(this.parseStatement(null));\n    }\n  }\n  this.exitScope();\n  if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\")\n};\n\npp$8.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty$1 = [];\n\npp$8.parseCatchClauseParam = function() {\n  var param = this.parseBindingAtom();\n  var simple = param.type === \"Identifier\";\n  this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n  this.checkLValPattern(param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n  this.expect(types$1.parenR);\n\n  return param\n};\n\npp$8.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types$1._catch) {\n    var clause = this.startNode();\n    this.next();\n    if (this.eat(types$1.parenL)) {\n      clause.param = this.parseCatchClauseParam();\n    } else {\n      if (this.options.ecmaVersion < 10) { this.unexpected(); }\n      clause.param = null;\n      this.enterScope(0);\n    }\n    clause.body = this.parseBlock(false);\n    this.exitScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    { this.raise(node.start, \"Missing catch or finally clause\"); }\n  return this.finishNode(node, \"TryStatement\")\n};\n\npp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {\n  this.next();\n  this.parseVar(node, false, kind, allowMissingInitializer);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\npp$8.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"while\");\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\")\n};\n\npp$8.parseWithStatement = function(node) {\n  if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(\"with\");\n  return this.finishNode(node, \"WithStatement\")\n};\n\npp$8.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\")\n};\n\npp$8.parseLabeledStatement = function(node, maybeName, expr, context) {\n  for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)\n    {\n    var label = list[i$1];\n\n    if (label.name === maybeName)\n      { this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  } }\n  var kind = this.type.isLoop ? \"loop\" : this.type === types$1._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this.labels[i];\n    if (label$1.statementStart === node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this.start;\n      label$1.kind = kind;\n    } else { break }\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n  node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\")\n};\n\npp$8.parseExpressionStatement = function(node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\")\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {\n  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n  if ( node === void 0 ) node = this.startNode();\n\n  node.body = [];\n  this.expect(types$1.braceL);\n  if (createNewLexicalScope) { this.enterScope(0); }\n  while (this.type !== types$1.braceR) {\n    var stmt = this.parseStatement(null);\n    node.body.push(stmt);\n  }\n  if (exitStrict) { this.strict = false; }\n  this.next();\n  if (createNewLexicalScope) { this.exitScope(); }\n  return this.finishNode(node, \"BlockStatement\")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$8.parseFor = function(node, init) {\n  node.init = init;\n  this.expect(types$1.semi);\n  node.test = this.type === types$1.semi ? null : this.parseExpression();\n  this.expect(types$1.semi);\n  node.update = this.type === types$1.parenR ? null : this.parseExpression();\n  this.expect(types$1.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$8.parseForIn = function(node, init) {\n  var isForIn = this.type === types$1._in;\n  this.next();\n\n  if (\n    init.type === \"VariableDeclaration\" &&\n    init.declarations[0].init != null &&\n    (\n      !isForIn ||\n      this.options.ecmaVersion < 8 ||\n      this.strict ||\n      init.kind !== \"var\" ||\n      init.declarations[0].id.type !== \"Identifier\"\n    )\n  ) {\n    this.raise(\n      init.start,\n      ((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")\n    );\n  }\n  node.left = init;\n  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types$1.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")\n};\n\n// Parse a list of variable declarations.\n\npp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl, kind);\n    if (this.eat(types$1.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (!allowMissingInitializer && kind === \"const\" && !(this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n      this.unexpected();\n    } else if (!allowMissingInitializer && decl.id.type !== \"Identifier\" && !(isFor && (this.type === types$1._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(types$1.comma)) { break }\n  }\n  return node\n};\n\npp$8.parseVarId = function(decl, kind) {\n  decl.id = this.parseBindingAtom();\n  this.checkLValPattern(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n};\n\nvar FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n\n// Parse a function declaration or literal (depending on the\n// `statement & FUNC_STATEMENT`).\n\n// Remove `allowExpressionBody` for 7.0.0, as it is only called with false\npp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n    if (this.type === types$1.star && (statement & FUNC_HANGING_STATEMENT))\n      { this.unexpected(); }\n    node.generator = this.eat(types$1.star);\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  if (statement & FUNC_STATEMENT) {\n    node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types$1.name ? null : this.parseIdent();\n    if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n      // If it is a regular function declaration in sloppy mode, then it is\n      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n      // mode depends on properties of the current scope (see\n      // treatFunctionsAsVar).\n      { this.checkLValSimple(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n  }\n\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(node.async, node.generator));\n\n  if (!(statement & FUNC_STATEMENT))\n    { node.id = this.type === types$1.name ? this.parseIdent() : null; }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody, false, forInit);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\npp$8.parseFunctionParams = function(node) {\n  this.expect(types$1.parenL);\n  node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$8.parseClass = function(node, isStatement) {\n  this.next();\n\n  // ecma-262 14.6 Class Definitions\n  // A class definition is always strict mode code.\n  var oldStrict = this.strict;\n  this.strict = true;\n\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var privateNameMap = this.enterClassBody();\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types$1.braceL);\n  while (this.type !== types$1.braceR) {\n    var element = this.parseClassElement(node.superClass !== null);\n    if (element) {\n      classBody.body.push(element);\n      if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n        if (hadConstructor) { this.raiseRecoverable(element.start, \"Duplicate constructor in the same class\"); }\n        hadConstructor = true;\n      } else if (element.key && element.key.type === \"PrivateIdentifier\" && isPrivateNameConflicted(privateNameMap, element)) {\n        this.raiseRecoverable(element.key.start, (\"Identifier '#\" + (element.key.name) + \"' has already been declared\"));\n      }\n    }\n  }\n  this.strict = oldStrict;\n  this.next();\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  this.exitClassBody();\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\npp$8.parseClassElement = function(constructorAllowsSuper) {\n  if (this.eat(types$1.semi)) { return null }\n\n  var ecmaVersion = this.options.ecmaVersion;\n  var node = this.startNode();\n  var keyName = \"\";\n  var isGenerator = false;\n  var isAsync = false;\n  var kind = \"method\";\n  var isStatic = false;\n\n  if (this.eatContextual(\"static\")) {\n    // Parse static init block\n    if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {\n      this.parseClassStaticBlock(node);\n      return node\n    }\n    if (this.isClassElementNameStart() || this.type === types$1.star) {\n      isStatic = true;\n    } else {\n      keyName = \"static\";\n    }\n  }\n  node.static = isStatic;\n  if (!keyName && ecmaVersion >= 8 && this.eatContextual(\"async\")) {\n    if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {\n      isAsync = true;\n    } else {\n      keyName = \"async\";\n    }\n  }\n  if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {\n    isGenerator = true;\n  }\n  if (!keyName && !isAsync && !isGenerator) {\n    var lastValue = this.value;\n    if (this.eatContextual(\"get\") || this.eatContextual(\"set\")) {\n      if (this.isClassElementNameStart()) {\n        kind = lastValue;\n      } else {\n        keyName = lastValue;\n      }\n    }\n  }\n\n  // Parse element name\n  if (keyName) {\n    // 'async', 'get', 'set', or 'static' were not a keyword contextually.\n    // The last token is any of those. Make it the element name.\n    node.computed = false;\n    node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);\n    node.key.name = keyName;\n    this.finishNode(node.key, \"Identifier\");\n  } else {\n    this.parseClassElementName(node);\n  }\n\n  // Parse element value\n  if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== \"method\" || isGenerator || isAsync) {\n    var isConstructor = !node.static && checkKeyName(node, \"constructor\");\n    var allowsDirectSuper = isConstructor && constructorAllowsSuper;\n    // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.\n    if (isConstructor && kind !== \"method\") { this.raise(node.key.start, \"Constructor can't have get/set modifier\"); }\n    node.kind = isConstructor ? \"constructor\" : kind;\n    this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);\n  } else {\n    this.parseClassField(node);\n  }\n\n  return node\n};\n\npp$8.isClassElementNameStart = function() {\n  return (\n    this.type === types$1.name ||\n    this.type === types$1.privateId ||\n    this.type === types$1.num ||\n    this.type === types$1.string ||\n    this.type === types$1.bracketL ||\n    this.type.keyword\n  )\n};\n\npp$8.parseClassElementName = function(element) {\n  if (this.type === types$1.privateId) {\n    if (this.value === \"constructor\") {\n      this.raise(this.start, \"Classes can't have an element named '#constructor'\");\n    }\n    element.computed = false;\n    element.key = this.parsePrivateIdent();\n  } else {\n    this.parsePropertyName(element);\n  }\n};\n\npp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n  // Check key and flags\n  var key = method.key;\n  if (method.kind === \"constructor\") {\n    if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n    if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n  } else if (method.static && checkKeyName(method, \"prototype\")) {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n\n  // Parse value\n  var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n\n  // Check value\n  if (method.kind === \"get\" && value.params.length !== 0)\n    { this.raiseRecoverable(value.start, \"getter should have no params\"); }\n  if (method.kind === \"set\" && value.params.length !== 1)\n    { this.raiseRecoverable(value.start, \"setter should have exactly one param\"); }\n  if (method.kind === \"set\" && value.params[0].type === \"RestElement\")\n    { this.raiseRecoverable(value.params[0].start, \"Setter cannot use rest params\"); }\n\n  return this.finishNode(method, \"MethodDefinition\")\n};\n\npp$8.parseClassField = function(field) {\n  if (checkKeyName(field, \"constructor\")) {\n    this.raise(field.key.start, \"Classes can't have a field named 'constructor'\");\n  } else if (field.static && checkKeyName(field, \"prototype\")) {\n    this.raise(field.key.start, \"Classes can't have a static field named 'prototype'\");\n  }\n\n  if (this.eat(types$1.eq)) {\n    // To raise SyntaxError if 'arguments' exists in the initializer.\n    var scope = this.currentThisScope();\n    var inClassFieldInit = scope.inClassFieldInit;\n    scope.inClassFieldInit = true;\n    field.value = this.parseMaybeAssign();\n    scope.inClassFieldInit = inClassFieldInit;\n  } else {\n    field.value = null;\n  }\n  this.semicolon();\n\n  return this.finishNode(field, \"PropertyDefinition\")\n};\n\npp$8.parseClassStaticBlock = function(node) {\n  node.body = [];\n\n  var oldLabels = this.labels;\n  this.labels = [];\n  this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);\n  while (this.type !== types$1.braceR) {\n    var stmt = this.parseStatement(null);\n    node.body.push(stmt);\n  }\n  this.next();\n  this.exitScope();\n  this.labels = oldLabels;\n\n  return this.finishNode(node, \"StaticBlock\")\n};\n\npp$8.parseClassId = function(node, isStatement) {\n  if (this.type === types$1.name) {\n    node.id = this.parseIdent();\n    if (isStatement)\n      { this.checkLValSimple(node.id, BIND_LEXICAL, false); }\n  } else {\n    if (isStatement === true)\n      { this.unexpected(); }\n    node.id = null;\n  }\n};\n\npp$8.parseClassSuper = function(node) {\n  node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;\n};\n\npp$8.enterClassBody = function() {\n  var element = {declared: Object.create(null), used: []};\n  this.privateNameStack.push(element);\n  return element.declared\n};\n\npp$8.exitClassBody = function() {\n  var ref = this.privateNameStack.pop();\n  var declared = ref.declared;\n  var used = ref.used;\n  if (!this.options.checkPrivateFields) { return }\n  var len = this.privateNameStack.length;\n  var parent = len === 0 ? null : this.privateNameStack[len - 1];\n  for (var i = 0; i < used.length; ++i) {\n    var id = used[i];\n    if (!hasOwn(declared, id.name)) {\n      if (parent) {\n        parent.used.push(id);\n      } else {\n        this.raiseRecoverable(id.start, (\"Private field '#\" + (id.name) + \"' must be declared in an enclosing class\"));\n      }\n    }\n  }\n};\n\nfunction isPrivateNameConflicted(privateNameMap, element) {\n  var name = element.key.name;\n  var curr = privateNameMap[name];\n\n  var next = \"true\";\n  if (element.type === \"MethodDefinition\" && (element.kind === \"get\" || element.kind === \"set\")) {\n    next = (element.static ? \"s\" : \"i\") + element.kind;\n  }\n\n  // `class { get #a(){}; static set #a(_){} }` is also conflict.\n  if (\n    curr === \"iget\" && next === \"iset\" ||\n    curr === \"iset\" && next === \"iget\" ||\n    curr === \"sget\" && next === \"sset\" ||\n    curr === \"sset\" && next === \"sget\"\n  ) {\n    privateNameMap[name] = \"true\";\n    return false\n  } else if (!curr) {\n    privateNameMap[name] = next;\n    return false\n  } else {\n    return true\n  }\n}\n\nfunction checkKeyName(node, name) {\n  var computed = node.computed;\n  var key = node.key;\n  return !computed && (\n    key.type === \"Identifier\" && key.name === name ||\n    key.type === \"Literal\" && key.value === name\n  )\n}\n\n// Parses module export declaration.\n\npp$8.parseExportAllDeclaration = function(node, exports) {\n  if (this.options.ecmaVersion >= 11) {\n    if (this.eatContextual(\"as\")) {\n      node.exported = this.parseModuleExportName();\n      this.checkExport(exports, node.exported, this.lastTokStart);\n    } else {\n      node.exported = null;\n    }\n  }\n  this.expectContextual(\"from\");\n  if (this.type !== types$1.string) { this.unexpected(); }\n  node.source = this.parseExprAtom();\n  if (this.options.ecmaVersion >= 16)\n    { node.attributes = this.parseWithClause(); }\n  this.semicolon();\n  return this.finishNode(node, \"ExportAllDeclaration\")\n};\n\npp$8.parseExport = function(node, exports) {\n  this.next();\n  // export * from '...'\n  if (this.eat(types$1.star)) {\n    return this.parseExportAllDeclaration(node, exports)\n  }\n  if (this.eat(types$1._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    node.declaration = this.parseExportDefaultDeclaration();\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseExportDeclaration(node);\n    if (node.declaration.type === \"VariableDeclaration\")\n      { this.checkVariableExport(exports, node.declaration.declarations); }\n    else\n      { this.checkExport(exports, node.declaration.id, node.declaration.id.start); }\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types$1.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n      if (this.options.ecmaVersion >= 16)\n        { node.attributes = this.parseWithClause(); }\n    } else {\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        // check for keywords used as local names\n        var spec = list[i];\n\n        this.checkUnreserved(spec.local);\n        // check if export is defined\n        this.checkLocalExport(spec.local);\n\n        if (spec.local.type === \"Literal\") {\n          this.raise(spec.local.start, \"A string literal cannot be used as an exported binding without `from`.\");\n        }\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\npp$8.parseExportDeclaration = function(node) {\n  return this.parseStatement(null)\n};\n\npp$8.parseExportDefaultDeclaration = function() {\n  var isAsync;\n  if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {\n    var fNode = this.startNode();\n    this.next();\n    if (isAsync) { this.next(); }\n    return this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync)\n  } else if (this.type === types$1._class) {\n    var cNode = this.startNode();\n    return this.parseClass(cNode, \"nullableID\")\n  } else {\n    var declaration = this.parseMaybeAssign();\n    this.semicolon();\n    return declaration\n  }\n};\n\npp$8.checkExport = function(exports, name, pos) {\n  if (!exports) { return }\n  if (typeof name !== \"string\")\n    { name = name.type === \"Identifier\" ? name.name : name.value; }\n  if (hasOwn(exports, name))\n    { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n  exports[name] = true;\n};\n\npp$8.checkPatternExport = function(exports, pat) {\n  var type = pat.type;\n  if (type === \"Identifier\")\n    { this.checkExport(exports, pat, pat.start); }\n  else if (type === \"ObjectPattern\")\n    { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n      {\n        var prop = list[i];\n\n        this.checkPatternExport(exports, prop);\n      } }\n  else if (type === \"ArrayPattern\")\n    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n        if (elt) { this.checkPatternExport(exports, elt); }\n    } }\n  else if (type === \"Property\")\n    { this.checkPatternExport(exports, pat.value); }\n  else if (type === \"AssignmentPattern\")\n    { this.checkPatternExport(exports, pat.left); }\n  else if (type === \"RestElement\")\n    { this.checkPatternExport(exports, pat.argument); }\n};\n\npp$8.checkVariableExport = function(exports, decls) {\n  if (!exports) { return }\n  for (var i = 0, list = decls; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    this.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$8.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\" ||\n    this.type.keyword === \"const\" ||\n    this.type.keyword === \"class\" ||\n    this.type.keyword === \"function\" ||\n    this.isLet() ||\n    this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$8.parseExportSpecifier = function(exports) {\n  var node = this.startNode();\n  node.local = this.parseModuleExportName();\n\n  node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local;\n  this.checkExport(\n    exports,\n    node.exported,\n    node.exported.start\n  );\n\n  return this.finishNode(node, \"ExportSpecifier\")\n};\n\npp$8.parseExportSpecifiers = function(exports) {\n  var nodes = [], first = true;\n  // export { x, y as z } [from '...']\n  this.expect(types$1.braceL);\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    nodes.push(this.parseExportSpecifier(exports));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$8.parseImport = function(node) {\n  this.next();\n\n  // import '...'\n  if (this.type === types$1.string) {\n    node.specifiers = empty$1;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();\n  }\n  if (this.options.ecmaVersion >= 16)\n    { node.attributes = this.parseWithClause(); }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$8.parseImportSpecifier = function() {\n  var node = this.startNode();\n  node.imported = this.parseModuleExportName();\n\n  if (this.eatContextual(\"as\")) {\n    node.local = this.parseIdent();\n  } else {\n    this.checkUnreserved(node.imported);\n    node.local = node.imported;\n  }\n  this.checkLValSimple(node.local, BIND_LEXICAL);\n\n  return this.finishNode(node, \"ImportSpecifier\")\n};\n\npp$8.parseImportDefaultSpecifier = function() {\n  // import defaultObj, { x, y as z } from '...'\n  var node = this.startNode();\n  node.local = this.parseIdent();\n  this.checkLValSimple(node.local, BIND_LEXICAL);\n  return this.finishNode(node, \"ImportDefaultSpecifier\")\n};\n\npp$8.parseImportNamespaceSpecifier = function() {\n  var node = this.startNode();\n  this.next();\n  this.expectContextual(\"as\");\n  node.local = this.parseIdent();\n  this.checkLValSimple(node.local, BIND_LEXICAL);\n  return this.finishNode(node, \"ImportNamespaceSpecifier\")\n};\n\npp$8.parseImportSpecifiers = function() {\n  var nodes = [], first = true;\n  if (this.type === types$1.name) {\n    nodes.push(this.parseImportDefaultSpecifier());\n    if (!this.eat(types$1.comma)) { return nodes }\n  }\n  if (this.type === types$1.star) {\n    nodes.push(this.parseImportNamespaceSpecifier());\n    return nodes\n  }\n  this.expect(types$1.braceL);\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    nodes.push(this.parseImportSpecifier());\n  }\n  return nodes\n};\n\npp$8.parseWithClause = function() {\n  var nodes = [];\n  if (!this.eat(types$1._with)) {\n    return nodes\n  }\n  this.expect(types$1.braceL);\n  var attributeKeys = {};\n  var first = true;\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    var attr = this.parseImportAttribute();\n    var keyName = attr.key.type === \"Identifier\" ? attr.key.name : attr.key.value;\n    if (hasOwn(attributeKeys, keyName))\n      { this.raiseRecoverable(attr.key.start, \"Duplicate attribute key '\" + keyName + \"'\"); }\n    attributeKeys[keyName] = true;\n    nodes.push(attr);\n  }\n  return nodes\n};\n\npp$8.parseImportAttribute = function() {\n  var node = this.startNode();\n  node.key = this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\");\n  this.expect(types$1.colon);\n  if (this.type !== types$1.string) {\n    this.unexpected();\n  }\n  node.value = this.parseExprAtom();\n  return this.finishNode(node, \"ImportAttribute\")\n};\n\npp$8.parseModuleExportName = function() {\n  if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {\n    var stringLiteral = this.parseLiteral(this.value);\n    if (loneSurrogate.test(stringLiteral.value)) {\n      this.raise(stringLiteral.start, \"An export name cannot include a lone surrogate.\");\n    }\n    return stringLiteral\n  }\n  return this.parseIdent(true)\n};\n\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$8.adaptDirectivePrologue = function(statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\npp$8.isDirectiveCandidate = function(statement) {\n  return (\n    this.options.ecmaVersion >= 5 &&\n    statement.type === \"ExpressionStatement\" &&\n    statement.expression.type === \"Literal\" &&\n    typeof statement.expression.value === \"string\" &&\n    // Reject parenthesized strings.\n    (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n  )\n};\n\nvar pp$7 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n    case \"AssignmentPattern\":\n    case \"RestElement\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      for (var i = 0, list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this.toAssignable(prop, isBinding);\n        // Early error:\n        //   AssignmentRestProperty[Yield, Await] :\n        //     `...` DestructuringAssignmentTarget[Yield, Await]\n        //\n        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n        if (\n          prop.type === \"RestElement\" &&\n          (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n        ) {\n          this.raise(prop.argument.start, \"Unexpected token\");\n        }\n      }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n      this.toAssignable(node.value, isBinding);\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      this.toAssignableList(node.elements, isBinding);\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, isBinding);\n      if (node.argument.type === \"AssignmentPattern\")\n        { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n      this.toAssignable(node.left, isBinding);\n      break\n\n    case \"ParenthesizedExpression\":\n      this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n      break\n\n    case \"ChainExpression\":\n      this.raiseRecoverable(node.start, \"Optional chaining cannot appear in left-hand side\");\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) { break }\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$7.toAssignableList = function(exprList, isBinding) {\n  var end = exprList.length;\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) { this.toAssignable(elt, isBinding); }\n  }\n  if (end) {\n    var last = exprList[end - 1];\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      { this.unexpected(last.argument.start); }\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$7.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\")\n};\n\npp$7.parseRestBinding = function() {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (this.options.ecmaVersion === 6 && this.type !== types$1.name)\n    { this.unexpected(); }\n\n  node.argument = this.parseBindingAtom();\n\n  return this.finishNode(node, \"RestElement\")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$7.parseBindingAtom = function() {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n    case types$1.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types$1.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case types$1.braceL:\n      return this.parseObj(true)\n    }\n  }\n  return this.parseIdent()\n};\n\npp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (first) { first = false; }\n    else { this.expect(types$1.comma); }\n    if (allowEmpty && this.type === types$1.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break\n    } else if (this.type === types$1.ellipsis) {\n      var rest = this.parseRestBinding();\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this.type === types$1.comma) { this.raiseRecoverable(this.start, \"Comma is not permitted after the rest element\"); }\n      this.expect(close);\n      break\n    } else {\n      elts.push(this.parseAssignableListItem(allowModifiers));\n    }\n  }\n  return elts\n};\n\npp$7.parseAssignableListItem = function(allowModifiers) {\n  var elem = this.parseMaybeDefault(this.start, this.startLoc);\n  this.parseBindingListItem(elem);\n  return elem\n};\n\npp$7.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$7.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) { return left }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\")\n};\n\n// The following three functions all verify that a node is an lvalue —\n// something that can be bound, or assigned to. In order to do so, they perform\n// a variety of checks:\n//\n// - Check that none of the bound/assigned-to identifiers are reserved words.\n// - Record name declarations for bindings in the appropriate scope.\n// - Check duplicate argument names, if checkClashes is set.\n//\n// If a complex binding pattern is encountered (e.g., object and array\n// destructuring), the entire pattern is recursively checked.\n//\n// There are three versions of checkLVal*() appropriate for different\n// circumstances:\n//\n// - checkLValSimple() shall be used if the syntactic construct supports\n//   nothing other than identifiers and member expressions. Parenthesized\n//   expressions are also correctly handled. This is generally appropriate for\n//   constructs for which the spec says\n//\n//   > It is a Syntax Error if AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   It is also appropriate for checking if an identifier is valid and not\n//   defined elsewhere, like import declarations or function/class identifiers.\n//\n//   Examples where this is used include:\n//     a += …;\n//     import a from '…';\n//   where a is the node to be checked.\n//\n// - checkLValPattern() shall be used if the syntactic construct supports\n//   anything checkLValSimple() supports, as well as object and array\n//   destructuring patterns. This is generally appropriate for constructs for\n//   which the spec says\n//\n//   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor\n//   > an ArrayLiteral and AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   Examples where this is used include:\n//     (a = …);\n//     const a = …;\n//     try { … } catch (a) { … }\n//   where a is the node to be checked.\n//\n// - checkLValInnerPattern() shall be used if the syntactic construct supports\n//   anything checkLValPattern() supports, as well as default assignment\n//   patterns, rest elements, and other constructs that may appear within an\n//   object or array destructuring pattern.\n//\n//   As a special case, function parameters also use checkLValInnerPattern(),\n//   as they also support defaults and rest constructs.\n//\n// These functions deliberately support both assignment and binding constructs,\n// as the logic for both is exceedingly similar. If the node is the target of\n// an assignment, then bindingType should be set to BIND_NONE. Otherwise, it\n// should be set to the appropriate BIND_* constant, like BIND_VAR or\n// BIND_LEXICAL.\n//\n// If the function is called with a non-BIND_NONE bindingType, then\n// additionally a checkClashes object may be specified to allow checking for\n// duplicate argument names. checkClashes is ignored if the provided construct\n// is an assignment (i.e., bindingType is BIND_NONE).\n\npp$7.checkLValSimple = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  var isBind = bindingType !== BIND_NONE;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      { this.raiseRecoverable(expr.start, (isBind ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n    if (isBind) {\n      if (bindingType === BIND_LEXICAL && expr.name === \"let\")\n        { this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); }\n      if (checkClashes) {\n        if (hasOwn(checkClashes, expr.name))\n          { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n        checkClashes[expr.name] = true;\n      }\n      if (bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\n    }\n    break\n\n  case \"ChainExpression\":\n    this.raiseRecoverable(expr.start, \"Optional chaining cannot appear in left-hand side\");\n    break\n\n  case \"MemberExpression\":\n    if (isBind) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n    break\n\n  case \"ParenthesizedExpression\":\n    if (isBind) { this.raiseRecoverable(expr.start, \"Binding parenthesized expression\"); }\n    return this.checkLValSimple(expr.expression, bindingType, checkClashes)\n\n  default:\n    this.raise(expr.start, (isBind ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\npp$7.checkLValPattern = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case \"ObjectPattern\":\n    for (var i = 0, list = expr.properties; i < list.length; i += 1) {\n      var prop = list[i];\n\n    this.checkLValInnerPattern(prop, bindingType, checkClashes);\n    }\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n      var elem = list$1[i$1];\n\n    if (elem) { this.checkLValInnerPattern(elem, bindingType, checkClashes); }\n    }\n    break\n\n  default:\n    this.checkLValSimple(expr, bindingType, checkClashes);\n  }\n};\n\npp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case \"Property\":\n    // AssignmentProperty has type === \"Property\"\n    this.checkLValInnerPattern(expr.value, bindingType, checkClashes);\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLValPattern(expr.left, bindingType, checkClashes);\n    break\n\n  case \"RestElement\":\n    this.checkLValPattern(expr.argument, bindingType, checkClashes);\n    break\n\n  default:\n    this.checkLValPattern(expr, bindingType, checkClashes);\n  }\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\n\nvar pp$6 = Parser.prototype;\n\npp$6.initialContext = function() {\n  return [types.b_stat]\n};\n\npp$6.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\npp$6.braceIsBlock = function(prevType) {\n  var parent = this.curContext();\n  if (parent === types.f_expr || parent === types.f_stat)\n    { return true }\n  if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr))\n    { return !parent.isExpr }\n\n  // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n  if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed)\n    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n  if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow)\n    { return true }\n  if (prevType === types$1.braceL)\n    { return parent === types.b_stat }\n  if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name)\n    { return false }\n  return !this.exprAllowed\n};\n\npp$6.inGeneratorContext = function() {\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this.context[i];\n    if (context.token === \"function\")\n      { return context.generator }\n  }\n  return false\n};\n\npp$6.updateContext = function(prevType) {\n  var update, type = this.type;\n  if (type.keyword && prevType === types$1.dot)\n    { this.exprAllowed = false; }\n  else if (update = type.updateContext)\n    { update.call(this, prevType); }\n  else\n    { this.exprAllowed = type.beforeExpr; }\n};\n\n// Used to handle edge cases when token context could not be inferred correctly during tokenization phase\n\npp$6.overrideContext = function(tokenCtx) {\n  if (this.curContext() !== tokenCtx) {\n    this.context[this.context.length - 1] = tokenCtx;\n  }\n};\n\n// Token-specific context update code\n\ntypes$1.parenR.updateContext = types$1.braceR.updateContext = function() {\n  if (this.context.length === 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes$1.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes$1.dollarBraceL.updateContext = function() {\n  this.context.push(types.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes$1.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;\n  this.context.push(statementParens ? types.p_stat : types.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes$1.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes$1._function.updateContext = types$1._class.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types$1._else &&\n      !(prevType === types$1.semi && this.curContext() !== types.p_stat) &&\n      !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\n      !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat))\n    { this.context.push(types.f_expr); }\n  else\n    { this.context.push(types.f_stat); }\n  this.exprAllowed = false;\n};\n\ntypes$1.colon.updateContext = function() {\n  if (this.curContext().token === \"function\") { this.context.pop(); }\n  this.exprAllowed = true;\n};\n\ntypes$1.backQuote.updateContext = function() {\n  if (this.curContext() === types.q_tmpl)\n    { this.context.pop(); }\n  else\n    { this.context.push(types.q_tmpl); }\n  this.exprAllowed = false;\n};\n\ntypes$1.star.updateContext = function(prevType) {\n  if (prevType === types$1._function) {\n    var index = this.context.length - 1;\n    if (this.context[index] === types.f_expr)\n      { this.context[index] = types.f_expr_gen; }\n    else\n      { this.context[index] = types.f_gen; }\n  }\n  this.exprAllowed = true;\n};\n\ntypes$1.name.updateContext = function(prevType) {\n  var allowed = false;\n  if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {\n    if (this.value === \"of\" && !this.exprAllowed ||\n        this.value === \"yield\" && this.inGeneratorContext())\n      { allowed = true; }\n  }\n  this.exprAllowed = allowed;\n};\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\nvar pp$5 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n    { return }\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    { return }\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors) {\n          if (refDestructuringErrors.doubleProto < 0) {\n            refDestructuringErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n        }\n      }\n      propHash.proto = true;\n    }\n    return\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var redefinition;\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n    if (redefinition)\n      { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$5.parseExpression = function(forInit, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);\n  if (this.type === types$1.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types$1.comma)) { node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {\n  if (this.isContextual(\"yield\")) {\n    if (this.inGenerator) { return this.parseYield(forInit) }\n    // The tokenizer will assume an expression is allowed after\n    // `yield`, but this isn't that kind of yield\n    else { this.exprAllowed = false; }\n  }\n\n  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    oldDoubleProto = refDestructuringErrors.doubleProto;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start, startLoc = this.startLoc;\n  if (this.type === types$1.parenL || this.type === types$1.name) {\n    this.potentialArrowAt = this.start;\n    this.potentialArrowInForAwait = forInit === \"await\";\n  }\n  var left = this.parseMaybeConditional(forInit, refDestructuringErrors);\n  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    if (this.type === types$1.eq)\n      { left = this.toAssignable(left, false, refDestructuringErrors); }\n    if (!ownDestructuringErrors) {\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n    }\n    if (refDestructuringErrors.shorthandAssign >= left.start)\n      { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly\n    if (this.type === types$1.eq)\n      { this.checkLValPattern(left); }\n    else\n      { this.checkLValSimple(left); }\n    node.left = left;\n    this.next();\n    node.right = this.parseMaybeAssign(forInit);\n    if (oldDoubleProto > -1) { refDestructuringErrors.doubleProto = oldDoubleProto; }\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n  }\n  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprOps(forInit, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  if (this.eat(types$1.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types$1.colon);\n    node.alternate = this.parseMaybeAssign(forInit);\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$5.parseExprOps = function(forInit, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {\n  var prec = this.type.binop;\n  if (prec != null && (!forInit || this.type !== types$1._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;\n      var coalesce = this.type === types$1.coalesce;\n      if (coalesce) {\n        // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n        // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n        prec = types$1.logicalAND.binop;\n      }\n      var op = this.value;\n      this.next();\n      var startPos = this.start, startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);\n      if ((logical && this.type === types$1.coalesce) || (coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND))) {\n        this.raiseRecoverable(this.start, \"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");\n      }\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit)\n    }\n  }\n  return left\n};\n\npp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  if (right.type === \"PrivateIdentifier\") { this.raise(right.start, \"Private identifier can only be left side of binary expression\"); }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {\n  var startPos = this.start, startLoc = this.startLoc, expr;\n  if (this.isContextual(\"await\") && this.canAwait) {\n    expr = this.parseAwait(forInit);\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === types$1.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true, update, forInit);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) { this.checkLValSimple(node.argument); }\n    else if (this.strict && node.operator === \"delete\" && isLocalVariableAccess(node.argument))\n      { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n    else if (node.operator === \"delete\" && isPrivateFieldAccess(node.argument))\n      { this.raiseRecoverable(node.start, \"Private fields can not be deleted\"); }\n    else { sawUnary = true; }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else if (!sawUnary && this.type === types$1.privateId) {\n    if ((forInit || this.privateNameStack.length === 0) && this.options.checkPrivateFields) { this.unexpected(); }\n    expr = this.parsePrivateIdent();\n    // only could be private fields in 'in', such as #x in obj\n    if (this.type !== types$1._in) { this.unexpected(); }\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors, forInit);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this.startNodeAt(startPos, startLoc);\n      node$1.operator = this.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this.checkLValSimple(expr);\n      this.next();\n      expr = this.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!incDec && this.eat(types$1.starstar)) {\n    if (sawUnary)\n      { this.unexpected(this.lastTokStart); }\n    else\n      { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), \"**\", false) }\n  } else {\n    return expr\n  }\n};\n\nfunction isLocalVariableAccess(node) {\n  return (\n    node.type === \"Identifier\" ||\n    node.type === \"ParenthesizedExpression\" && isLocalVariableAccess(node.expression)\n  )\n}\n\nfunction isPrivateFieldAccess(node) {\n  return (\n    node.type === \"MemberExpression\" && node.property.type === \"PrivateIdentifier\" ||\n    node.type === \"ChainExpression\" && isPrivateFieldAccess(node.expression) ||\n    node.type === \"ParenthesizedExpression\" && isPrivateFieldAccess(node.expression)\n  )\n}\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors, forInit);\n  if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\")\n    { return expr }\n  var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n    if (refDestructuringErrors.trailingComma >= result.start) { refDestructuringErrors.trailingComma = -1; }\n  }\n  return result\n};\n\npp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n      this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&\n      this.potentialArrowAt === base.start;\n  var optionalChained = false;\n\n  while (true) {\n    var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);\n\n    if (element.optional) { optionalChained = true; }\n    if (element === base || element.type === \"ArrowFunctionExpression\") {\n      if (optionalChained) {\n        var chainNode = this.startNodeAt(startPos, startLoc);\n        chainNode.expression = element;\n        element = this.finishNode(chainNode, \"ChainExpression\");\n      }\n      return element\n    }\n\n    base = element;\n  }\n};\n\npp$5.shouldParseAsyncArrow = function() {\n  return !this.canInsertSemicolon() && this.eat(types$1.arrow)\n};\n\npp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit)\n};\n\npp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {\n  var optionalSupported = this.options.ecmaVersion >= 11;\n  var optional = optionalSupported && this.eat(types$1.questionDot);\n  if (noCalls && optional) { this.raise(this.lastTokStart, \"Optional chaining cannot appear in the callee of new expressions\"); }\n\n  var computed = this.eat(types$1.bracketL);\n  if (computed || (optional && this.type !== types$1.parenL && this.type !== types$1.backQuote) || this.eat(types$1.dot)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(types$1.bracketR);\n    } else if (this.type === types$1.privateId && base.type !== \"Super\") {\n      node.property = this.parsePrivateIdent();\n    } else {\n      node.property = this.parseIdent(this.options.allowReserved !== \"never\");\n    }\n    node.computed = !!computed;\n    if (optionalSupported) {\n      node.optional = optional;\n    }\n    base = this.finishNode(node, \"MemberExpression\");\n  } else if (!noCalls && this.eat(types$1.parenL)) {\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n    if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      if (this.awaitIdentPos > 0)\n        { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos;\n      return this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit)\n    }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n    var node$1 = this.startNodeAt(startPos, startLoc);\n    node$1.callee = base;\n    node$1.arguments = exprList;\n    if (optionalSupported) {\n      node$1.optional = optional;\n    }\n    base = this.finishNode(node$1, \"CallExpression\");\n  } else if (this.type === types$1.backQuote) {\n    if (optional || optionalChained) {\n      this.raise(this.start, \"Optional chaining cannot appear in the tag of tagged template expressions\");\n    }\n    var node$2 = this.startNodeAt(startPos, startLoc);\n    node$2.tag = base;\n    node$2.quasi = this.parseTemplate({isTagged: true});\n    base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n  }\n  return base\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {\n  // If a division operator appears in an expression position, the\n  // tokenizer got confused, and we force it to read a regexp instead.\n  if (this.type === types$1.slash) { this.readRegexp(); }\n\n  var node, canBeArrow = this.potentialArrowAt === this.start;\n  switch (this.type) {\n  case types$1._super:\n    if (!this.allowSuper)\n      { this.raise(this.start, \"'super' keyword outside a method\"); }\n    node = this.startNode();\n    this.next();\n    if (this.type === types$1.parenL && !this.allowDirectSuper)\n      { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\n    // The `super` keyword can appear at below:\n    // SuperProperty:\n    //     super [ Expression ]\n    //     super . IdentifierName\n    // SuperCall:\n    //     super ( Arguments )\n    if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL)\n      { this.unexpected(); }\n    return this.finishNode(node, \"Super\")\n\n  case types$1._this:\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"ThisExpression\")\n\n  case types$1.name:\n    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n    var id = this.parseIdent(false);\n    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types$1._function)) {\n      this.overrideContext(types.f_expr);\n      return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit)\n    }\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types$1.arrow))\n        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit) }\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types$1.name && !containsEsc &&\n          (!this.potentialArrowInForAwait || this.value !== \"of\" || this.containsEsc)) {\n        id = this.parseIdent(false);\n        if (this.canInsertSemicolon() || !this.eat(types$1.arrow))\n          { this.unexpected(); }\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit)\n      }\n    }\n    return id\n\n  case types$1.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern, flags: value.flags};\n    return node\n\n  case types$1.num: case types$1.string:\n    return this.parseLiteral(this.value)\n\n  case types$1._null: case types$1._true: case types$1._false:\n    node = this.startNode();\n    node.value = this.type === types$1._null ? null : this.type === types$1._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case types$1.parenL:\n    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        { refDestructuringErrors.parenthesizedAssign = start; }\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        { refDestructuringErrors.parenthesizedBind = start; }\n    }\n    return expr\n\n  case types$1.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case types$1.braceL:\n    this.overrideContext(types.b_expr);\n    return this.parseObj(false, refDestructuringErrors)\n\n  case types$1._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, 0)\n\n  case types$1._class:\n    return this.parseClass(this.startNode(), false)\n\n  case types$1._new:\n    return this.parseNew()\n\n  case types$1.backQuote:\n    return this.parseTemplate()\n\n  case types$1._import:\n    if (this.options.ecmaVersion >= 11) {\n      return this.parseExprImport(forNew)\n    } else {\n      return this.unexpected()\n    }\n\n  default:\n    return this.parseExprAtomDefault()\n  }\n};\n\npp$5.parseExprAtomDefault = function() {\n  this.unexpected();\n};\n\npp$5.parseExprImport = function(forNew) {\n  var node = this.startNode();\n\n  // Consume `import` as an identifier for `import.meta`.\n  // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword import\"); }\n  this.next();\n\n  if (this.type === types$1.parenL && !forNew) {\n    return this.parseDynamicImport(node)\n  } else if (this.type === types$1.dot) {\n    var meta = this.startNodeAt(node.start, node.loc && node.loc.start);\n    meta.name = \"import\";\n    node.meta = this.finishNode(meta, \"Identifier\");\n    return this.parseImportMeta(node)\n  } else {\n    this.unexpected();\n  }\n};\n\npp$5.parseDynamicImport = function(node) {\n  this.next(); // skip `(`\n\n  // Parse node.source.\n  node.source = this.parseMaybeAssign();\n\n  if (this.options.ecmaVersion >= 16) {\n    if (!this.eat(types$1.parenR)) {\n      this.expect(types$1.comma);\n      if (!this.afterTrailingComma(types$1.parenR)) {\n        node.options = this.parseMaybeAssign();\n        if (!this.eat(types$1.parenR)) {\n          this.expect(types$1.comma);\n          if (!this.afterTrailingComma(types$1.parenR)) {\n            this.unexpected();\n          }\n        }\n      } else {\n        node.options = null;\n      }\n    } else {\n      node.options = null;\n    }\n  } else {\n    // Verify ending.\n    if (!this.eat(types$1.parenR)) {\n      var errorPos = this.start;\n      if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {\n        this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n      } else {\n        this.unexpected(errorPos);\n      }\n    }\n  }\n\n  return this.finishNode(node, \"ImportExpression\")\n};\n\npp$5.parseImportMeta = function(node) {\n  this.next(); // skip `.`\n\n  var containsEsc = this.containsEsc;\n  node.property = this.parseIdent(true);\n\n  if (node.property.name !== \"meta\")\n    { this.raiseRecoverable(node.property.start, \"The only valid meta property for import is 'import.meta'\"); }\n  if (containsEsc)\n    { this.raiseRecoverable(node.start, \"'import.meta' must not contain escaped characters\"); }\n  if (this.options.sourceType !== \"module\" && !this.options.allowImportExportEverywhere)\n    { this.raiseRecoverable(node.start, \"Cannot use 'import.meta' outside a module\"); }\n\n  return this.finishNode(node, \"MetaProperty\")\n};\n\npp$5.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\"); }\n  this.next();\n  return this.finishNode(node, \"Literal\")\n};\n\npp$5.parseParenExpression = function() {\n  this.expect(types$1.parenL);\n  var val = this.parseExpression();\n  this.expect(types$1.parenR);\n  return val\n};\n\npp$5.shouldParseArrow = function(exprList) {\n  return !this.canInsertSemicolon()\n};\n\npp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc;\n    var exprList = [], first = true, lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    // Do not save awaitIdentPos to allow checking awaits nested in parameters\n    while (this.type !== types$1.parenR) {\n      first ? first = false : this.expect(types$1.comma);\n      if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {\n        lastIsComma = true;\n        break\n      } else if (this.type === types$1.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding()));\n        if (this.type === types$1.comma) {\n          this.raiseRecoverable(\n            this.start,\n            \"Comma is not permitted after the rest element\"\n          );\n        }\n        break\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;\n    this.expect(types$1.parenR);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList, forInit)\n    }\n\n    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n    if (spreadStart) { this.unexpected(spreadStart); }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n};\n\npp$5.parseParenItem = function(item) {\n  return item\n};\n\npp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty = [];\n\npp$5.parseNew = function() {\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword new\"); }\n  var node = this.startNode();\n  this.next();\n  if (this.options.ecmaVersion >= 6 && this.type === types$1.dot) {\n    var meta = this.startNodeAt(node.start, node.loc && node.loc.start);\n    meta.name = \"new\";\n    node.meta = this.finishNode(meta, \"Identifier\");\n    this.next();\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\")\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is 'new.target'\"); }\n    if (containsEsc)\n      { this.raiseRecoverable(node.start, \"'new.target' must not contain escaped characters\"); }\n    if (!this.allowNewDotTarget)\n      { this.raiseRecoverable(node.start, \"'new.target' can only be used in functions and class static block\"); }\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false);\n  if (this.eat(types$1.parenL)) { node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false); }\n  else { node.arguments = empty; }\n  return this.finishNode(node, \"NewExpression\")\n};\n\n// Parse template expression.\n\npp$5.parseTemplateElement = function(ref) {\n  var isTagged = ref.isTagged;\n\n  var elem = this.startNode();\n  if (this.type === types$1.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n    elem.value = {\n      raw: this.value.replace(/\\r\\n?/g, \"\\n\"),\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n  this.next();\n  elem.tail = this.type === types$1.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\npp$5.parseTemplate = function(ref) {\n  if ( ref === void 0 ) ref = {};\n  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({isTagged: isTagged});\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    if (this.type === types$1.eof) { this.raise(this.pos, \"Unterminated template literal\"); }\n    this.expect(types$1.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(types$1.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\npp$5.isAsyncProp = function(prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n    (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types$1.star)) &&\n    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\n// Parse an object literal or binding pattern.\n\npp$5.parseObj = function(isPattern, refDestructuringErrors) {\n  var node = this.startNode(), first = true, propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    var prop = this.parseProperty(isPattern, refDestructuringErrors);\n    if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }\n    node.properties.push(prop);\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n};\n\npp$5.parseProperty = function(isPattern, refDestructuringErrors) {\n  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n  if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n      if (this.type === types$1.comma) {\n        this.raiseRecoverable(this.start, \"Comma is not permitted after the rest element\");\n      }\n      return this.finishNode(prop, \"RestElement\")\n    }\n    // Parse argument.\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    // To disallow trailing comma via `this.toAssignable()`.\n    if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    }\n    // Finish\n    return this.finishNode(prop, \"SpreadElement\")\n  }\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n    if (!isPattern)\n      { isGenerator = this.eat(types$1.star); }\n  }\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);\n    this.parsePropertyName(prop);\n  } else {\n    isAsync = false;\n  }\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\")\n};\n\npp$5.parseGetterSetter = function(prop) {\n  prop.kind = prop.key.name;\n  this.parsePropertyName(prop);\n  prop.value = this.parseMethod(false);\n  var paramCount = prop.kind === \"get\" ? 0 : 1;\n  if (prop.value.params.length !== paramCount) {\n    var start = prop.value.start;\n    if (prop.kind === \"get\")\n      { this.raiseRecoverable(start, \"getter should have no params\"); }\n    else\n      { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n  } else {\n    if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n      { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n  }\n};\n\npp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types$1.colon)\n    { this.unexpected(); }\n\n  if (this.eat(types$1.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {\n    if (isPattern) { this.unexpected(); }\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc &&\n             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    this.parseGetterSetter(prop);\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    this.checkUnreserved(prop.key);\n    if (prop.key.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = startPos; }\n    prop.kind = \"init\";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n    } else if (this.type === types$1.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        { refDestructuringErrors.shorthandAssign = this.start; }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n    } else {\n      prop.value = this.copyNode(prop.key);\n    }\n    prop.shorthand = true;\n  } else { this.unexpected(); }\n};\n\npp$5.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types$1.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types$1.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")\n};\n\n// Initialize empty function node.\n\npp$5.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n  if (this.options.ecmaVersion >= 8) { node.async = false; }\n};\n\n// Parse object or class method.\n\npp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n  var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n  this.expect(types$1.parenL);\n  node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false, true, false);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$5.parseArrowExpression = function(node, params, isAsync, forInit) {\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true, false, forInit);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\n// Parse function body and check parameters.\n\npp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {\n  var isExpression = isArrowFunction && this.type !== types$1.braceL;\n  var oldStrict = this.strict, useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign(forInit);\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end);\n      // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels;\n    this.labels = [];\n    if (useStrict) { this.strict = true; }\n\n    // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    if (this.strict && node.id) { this.checkLValSimple(node.id, BIND_OUTSIDE); }\n    node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n  this.exitScope();\n};\n\npp$5.isSimpleParamList = function(params) {\n  for (var i = 0, list = params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") { return false\n  } }\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$5.checkParams = function(node, allowDuplicates) {\n  var nameHash = Object.create(null);\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (allowTrailingComma && this.afterTrailingComma(close)) { break }\n    } else { first = false; }\n\n    var elt = (void 0);\n    if (allowEmpty && this.type === types$1.comma)\n      { elt = null; }\n    else if (this.type === types$1.ellipsis) {\n      elt = this.parseSpread(refDestructuringErrors);\n      if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0)\n        { refDestructuringErrors.trailingComma = this.start; }\n    } else {\n      elt = this.parseMaybeAssign(false, refDestructuringErrors);\n    }\n    elts.push(elt);\n  }\n  return elts\n};\n\npp$5.checkUnreserved = function(ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\")\n    { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\n  if (this.inAsync && name === \"await\")\n    { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\n  if (this.currentThisScope().inClassFieldInit && name === \"arguments\")\n    { this.raiseRecoverable(start, \"Cannot use 'arguments' in class field initializer\"); }\n  if (this.inClassStaticBlock && (name === \"arguments\" || name === \"await\"))\n    { this.raise(start, (\"Cannot use \" + name + \" in class static initialization block\")); }\n  if (this.keywords.test(name))\n    { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n  if (this.options.ecmaVersion < 6 &&\n    this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\n    this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n  }\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$5.parseIdent = function(liberal) {\n  var node = this.parseIdentNode();\n  this.next(!!liberal);\n  this.finishNode(node, \"Identifier\");\n  if (!liberal) {\n    this.checkUnreserved(node);\n    if (node.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = node.start; }\n  }\n  return node\n};\n\npp$5.parseIdentNode = function() {\n  var node = this.startNode();\n  if (this.type === types$1.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword;\n\n    // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n    if ((node.name === \"class\" || node.name === \"function\") &&\n      (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n    this.type = types$1.name;\n  } else {\n    this.unexpected();\n  }\n  return node\n};\n\npp$5.parsePrivateIdent = function() {\n  var node = this.startNode();\n  if (this.type === types$1.privateId) {\n    node.name = this.value;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  this.finishNode(node, \"PrivateIdentifier\");\n\n  // For validating existence\n  if (this.options.checkPrivateFields) {\n    if (this.privateNameStack.length === 0) {\n      this.raise(node.start, (\"Private field '#\" + (node.name) + \"' must be declared in an enclosing class\"));\n    } else {\n      this.privateNameStack[this.privateNameStack.length - 1].used.push(node);\n    }\n  }\n\n  return node\n};\n\n// Parses yield expression inside generator.\n\npp$5.parseYield = function(forInit) {\n  if (!this.yieldPos) { this.yieldPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  if (this.type === types$1.semi || this.canInsertSemicolon() || (this.type !== types$1.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types$1.star);\n    node.argument = this.parseMaybeAssign(forInit);\n  }\n  return this.finishNode(node, \"YieldExpression\")\n};\n\npp$5.parseAwait = function(forInit) {\n  if (!this.awaitPos) { this.awaitPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, true, false, forInit);\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n};\n\nvar pp$3 = Parser.prototype;\n\nvar Scope = function Scope(flags) {\n  this.flags = flags;\n  // A list of var-declared names in the current lexical scope\n  this.var = [];\n  // A list of lexically-declared names in the current lexical scope\n  this.lexical = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  this.functions = [];\n  // A switch to disallow the identifier reference 'arguments'\n  this.inClassFieldInit = false;\n};\n\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\npp$3.enterScope = function(flags) {\n  this.scopeStack.push(new Scope(flags));\n};\n\npp$3.exitScope = function() {\n  this.scopeStack.pop();\n};\n\n// The spec says:\n// > At the top level of a function, or script, function declarations are\n// > treated like var declarations rather than like lexical declarations.\npp$3.treatFunctionsAsVarInScope = function(scope) {\n  return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n};\n\npp$3.declareName = function(name, bindingType, pos) {\n  var redeclared = false;\n  if (bindingType === BIND_LEXICAL) {\n    var scope = this.currentScope();\n    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    scope.lexical.push(name);\n    if (this.inModule && (scope.flags & SCOPE_TOP))\n      { delete this.undefinedExports[name]; }\n  } else if (bindingType === BIND_SIMPLE_CATCH) {\n    var scope$1 = this.currentScope();\n    scope$1.lexical.push(name);\n  } else if (bindingType === BIND_FUNCTION) {\n    var scope$2 = this.currentScope();\n    if (this.treatFunctionsAsVar)\n      { redeclared = scope$2.lexical.indexOf(name) > -1; }\n    else\n      { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n    scope$2.functions.push(name);\n  } else {\n    for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n      var scope$3 = this.scopeStack[i];\n      if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n          !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n        redeclared = true;\n        break\n      }\n      scope$3.var.push(name);\n      if (this.inModule && (scope$3.flags & SCOPE_TOP))\n        { delete this.undefinedExports[name]; }\n      if (scope$3.flags & SCOPE_VAR) { break }\n    }\n  }\n  if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\n};\n\npp$3.checkLocalExport = function(id) {\n  // scope.functions must be empty as Module code is always strict.\n  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1) {\n    this.undefinedExports[id.name] = id;\n  }\n};\n\npp$3.currentScope = function() {\n  return this.scopeStack[this.scopeStack.length - 1]\n};\n\npp$3.currentVarScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR) { return scope }\n  }\n};\n\n// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\npp$3.currentThisScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n  }\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    { this.loc = new SourceLocation(parser, loc); }\n  if (parser.options.directSourceFile)\n    { this.sourceFile = parser.options.directSourceFile; }\n  if (parser.options.ranges)\n    { this.range = [pos, 0]; }\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$2 = Parser.prototype;\n\npp$2.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n};\n\npp$2.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    { node.loc.end = loc; }\n  if (this.options.ranges)\n    { node.range[1] = pos; }\n  return node\n}\n\npp$2.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$2.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n};\n\npp$2.copyNode = function(node) {\n  var newNode = new Node(this, node.start, this.startLoc);\n  for (var prop in node) { newNode[prop] = node[prop]; }\n  return newNode\n};\n\n// This file was generated by \"bin/generate-unicode-script-values.js\". Do not modify manually!\nvar scriptValuesAddedInUnicode = \"Gara Garay Gukh Gurung_Khema Hrkt Katakana_Or_Hiragana Kawi Kirat_Rai Krai Nag_Mundari Nagm Ol_Onal Onao Sunu Sunuwar Todhri Todr Tulu_Tigalari Tutg Unknown Zzzz\";\n\n// This file contains Unicode properties extracted from the ECMAScript specification.\n// The lists are extracted like so:\n// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n\n// #table-binary-unicode-properties\nvar ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\nvar ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\nvar ecma11BinaryProperties = ecma10BinaryProperties;\nvar ecma12BinaryProperties = ecma11BinaryProperties + \" EBase EComp EMod EPres ExtPict\";\nvar ecma13BinaryProperties = ecma12BinaryProperties;\nvar ecma14BinaryProperties = ecma13BinaryProperties;\n\nvar unicodeBinaryProperties = {\n  9: ecma9BinaryProperties,\n  10: ecma10BinaryProperties,\n  11: ecma11BinaryProperties,\n  12: ecma12BinaryProperties,\n  13: ecma13BinaryProperties,\n  14: ecma14BinaryProperties\n};\n\n// #table-binary-unicode-properties-of-strings\nvar ecma14BinaryPropertiesOfStrings = \"Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji\";\n\nvar unicodeBinaryPropertiesOfStrings = {\n  9: \"\",\n  10: \"\",\n  11: \"\",\n  12: \"\",\n  13: \"\",\n  14: ecma14BinaryPropertiesOfStrings\n};\n\n// #table-unicode-general-category-values\nvar unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n\n// #table-unicode-script-values\nvar ecma9ScriptValues = \"Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\nvar ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\nvar ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\nvar ecma12ScriptValues = ecma11ScriptValues + \" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi\";\nvar ecma13ScriptValues = ecma12ScriptValues + \" Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith\";\nvar ecma14ScriptValues = ecma13ScriptValues + \" \" + scriptValuesAddedInUnicode;\n\nvar unicodeScriptValues = {\n  9: ecma9ScriptValues,\n  10: ecma10ScriptValues,\n  11: ecma11ScriptValues,\n  12: ecma12ScriptValues,\n  13: ecma13ScriptValues,\n  14: ecma14ScriptValues\n};\n\nvar data = {};\nfunction buildUnicodeData(ecmaVersion) {\n  var d = data[ecmaVersion] = {\n    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n    binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]),\n    nonBinary: {\n      General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n    }\n  };\n  d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n  d.nonBinary.gc = d.nonBinary.General_Category;\n  d.nonBinary.sc = d.nonBinary.Script;\n  d.nonBinary.scx = d.nonBinary.Script_Extensions;\n}\n\nfor (var i = 0, list = [9, 10, 11, 12, 13, 14]; i < list.length; i += 1) {\n  var ecmaVersion = list[i];\n\n  buildUnicodeData(ecmaVersion);\n}\n\nvar pp$1 = Parser.prototype;\n\n// Track disjunction structure to determine whether a duplicate\n// capture group name is allowed because it is in a separate branch.\nvar BranchID = function BranchID(parent, base) {\n  // Parent disjunction branch\n  this.parent = parent;\n  // Identifies this set of sibling branches\n  this.base = base || this;\n};\n\nBranchID.prototype.separatedFrom = function separatedFrom (alt) {\n  // A branch is separate from another branch if they or any of\n  // their parents are siblings in a given disjunction\n  for (var self = this; self; self = self.parent) {\n    for (var other = alt; other; other = other.parent) {\n      if (self.base === other.base && self !== other) { return true }\n    }\n  }\n  return false\n};\n\nBranchID.prototype.sibling = function sibling () {\n  return new BranchID(this.parent, this.base)\n};\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\") + (parser.options.ecmaVersion >= 13 ? \"d\" : \"\") + (parser.options.ecmaVersion >= 15 ? \"v\" : \"\");\n  this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion];\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchV = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = Object.create(null);\n  this.backReferenceNames = [];\n  this.branchID = null;\n};\n\nRegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n  var unicodeSets = flags.indexOf(\"v\") !== -1;\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  if (unicodeSets && this.parser.options.ecmaVersion >= 15) {\n    this.switchU = true;\n    this.switchV = true;\n    this.switchN = true;\n  } else {\n    this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n    this.switchV = false;\n    this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n  }\n};\n\nRegExpValidationState.prototype.raise = function raise (message) {\n  this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n};\n\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return -1\n  }\n  var c = s.charCodeAt(i);\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c\n  }\n  var next = s.charCodeAt(i + 1);\n  return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return l\n  }\n  var c = s.charCodeAt(i), next;\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\n      (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n    return i + 1\n  }\n  return i + 2\n};\n\nRegExpValidationState.prototype.current = function current (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.pos, forceU)\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.nextIndex(this.pos, forceU), forceU)\n};\n\nRegExpValidationState.prototype.advance = function advance (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  this.pos = this.nextIndex(this.pos, forceU);\n};\n\nRegExpValidationState.prototype.eat = function eat (ch, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  if (this.current(forceU) === ch) {\n    this.advance(forceU);\n    return true\n  }\n  return false\n};\n\nRegExpValidationState.prototype.eatChars = function eatChars (chs, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var pos = this.pos;\n  for (var i = 0, list = chs; i < list.length; i += 1) {\n    var ch = list[i];\n\n      var current = this.at(pos, forceU);\n    if (current === -1 || current !== ch) {\n      return false\n    }\n    pos = this.nextIndex(pos, forceU);\n  }\n  this.pos = pos;\n  return true\n};\n\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$1.validateRegExpFlags = function(state) {\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  var u = false;\n  var v = false;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n    if (validFlags.indexOf(flag) === -1) {\n      this.raise(state.start, \"Invalid regular expression flag\");\n    }\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this.raise(state.start, \"Duplicate regular expression flag\");\n    }\n    if (flag === \"u\") { u = true; }\n    if (flag === \"v\") { v = true; }\n  }\n  if (this.options.ecmaVersion >= 15 && u && v) {\n    this.raise(state.start, \"Invalid regular expression flag\");\n  }\n};\n\nfunction hasProp(obj) {\n  for (var _ in obj) { return true }\n  return false\n}\n\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$1.validateRegExpPattern = function(state) {\n  this.regexp_pattern(state);\n\n  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n  if (!state.switchN && this.options.ecmaVersion >= 9 && hasProp(state.groupNames)) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$1.regexp_pattern = function(state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames = Object.create(null);\n  state.backReferenceNames.length = 0;\n  state.branchID = null;\n\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29 /* ) */)) {\n      state.raise(\"Unmatched ')'\");\n    }\n    if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (!state.groupNames[name]) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$1.regexp_disjunction = function(state) {\n  var trackDisjunction = this.options.ecmaVersion >= 16;\n  if (trackDisjunction) { state.branchID = new BranchID(state.branchID, null); }\n  this.regexp_alternative(state);\n  while (state.eat(0x7C /* | */)) {\n    if (trackDisjunction) { state.branchID = state.branchID.sibling(); }\n    this.regexp_alternative(state);\n  }\n  if (trackDisjunction) { state.branchID = state.branchID.parent; }\n\n  // Make the same message as V8.\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  if (state.eat(0x7B /* { */)) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$1.regexp_alternative = function(state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state)) {}\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$1.regexp_eatTerm = function(state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n    return true\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$1.regexp_eatAssertion = function(state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false;\n\n  // ^, $\n  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n    return true\n  }\n\n  // \\b \\B\n  if (state.eat(0x5C /* \\ */)) {\n    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  // Lookahead / Lookbehind\n  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n    var lookbehind = false;\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C /* < */);\n    }\n    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n      this.regexp_disjunction(state);\n      if (!state.eat(0x29 /* ) */)) {\n        state.raise(\"Unterminated group\");\n      }\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true\n    }\n  }\n\n  state.pos = start;\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$1.regexp_eatQuantifier = function(state, noError) {\n  if ( noError === void 0 ) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F /* ? */);\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$1.regexp_eatQuantifierPrefix = function(state, noError) {\n  return (\n    state.eat(0x2A /* * */) ||\n    state.eat(0x2B /* + */) ||\n    state.eat(0x3F /* ? */) ||\n    this.regexp_eatBracedQuantifier(state, noError)\n  )\n};\npp$1.regexp_eatBracedQuantifier = function(state, noError) {\n  var start = state.pos;\n  if (state.eat(0x7B /* { */)) {\n    var min = 0, max = -1;\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n      if (state.eat(0x7D /* } */)) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n        return true\n      }\n    }\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$1.regexp_eatAtom = function(state) {\n  return (\n    this.regexp_eatPatternCharacters(state) ||\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state)\n  )\n};\npp$1.regexp_eatReverseSolidusAtomEscape = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatUncapturingGroup = function(state) {\n  var start = state.pos;\n  if (state.eat(0x28 /* ( */)) {\n    if (state.eat(0x3F /* ? */)) {\n      if (this.options.ecmaVersion >= 16) {\n        var addModifiers = this.regexp_eatModifiers(state);\n        var hasHyphen = state.eat(0x2D /* - */);\n        if (addModifiers || hasHyphen) {\n          for (var i = 0; i < addModifiers.length; i++) {\n            var modifier = addModifiers.charAt(i);\n            if (addModifiers.indexOf(modifier, i + 1) > -1) {\n              state.raise(\"Duplicate regular expression modifiers\");\n            }\n          }\n          if (hasHyphen) {\n            var removeModifiers = this.regexp_eatModifiers(state);\n            if (!addModifiers && !removeModifiers && state.current() === 0x3A /* : */) {\n              state.raise(\"Invalid regular expression modifiers\");\n            }\n            for (var i$1 = 0; i$1 < removeModifiers.length; i$1++) {\n              var modifier$1 = removeModifiers.charAt(i$1);\n              if (\n                removeModifiers.indexOf(modifier$1, i$1 + 1) > -1 ||\n                addModifiers.indexOf(modifier$1) > -1\n              ) {\n                state.raise(\"Duplicate regular expression modifiers\");\n              }\n            }\n          }\n        }\n      }\n      if (state.eat(0x3A /* : */)) {\n        this.regexp_disjunction(state);\n        if (state.eat(0x29 /* ) */)) {\n          return true\n        }\n        state.raise(\"Unterminated group\");\n      }\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatCapturingGroup = function(state) {\n  if (state.eat(0x28 /* ( */)) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F /* ? */) {\n      state.raise(\"Invalid group\");\n    }\n    this.regexp_disjunction(state);\n    if (state.eat(0x29 /* ) */)) {\n      state.numCapturingParens += 1;\n      return true\n    }\n    state.raise(\"Unterminated group\");\n  }\n  return false\n};\n// RegularExpressionModifiers ::\n//   [empty]\n//   RegularExpressionModifiers RegularExpressionModifier\npp$1.regexp_eatModifiers = function(state) {\n  var modifiers = \"\";\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && isRegularExpressionModifier(ch)) {\n    modifiers += codePointToString(ch);\n    state.advance();\n  }\n  return modifiers\n};\n// RegularExpressionModifier :: one of\n//   `i` `m` `s`\nfunction isRegularExpressionModifier(ch) {\n  return ch === 0x69 /* i */ || ch === 0x6d /* m */ || ch === 0x73 /* s */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$1.regexp_eatExtendedAtom = function(state) {\n  return (\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state) ||\n    this.regexp_eatInvalidBracedQuantifier(state) ||\n    this.regexp_eatExtendedPatternCharacter(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$1.regexp_eatInvalidBracedQuantifier = function(state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$1.regexp_eatSyntaxCharacter = function(state) {\n  var ch = state.current();\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isSyntaxCharacter(ch) {\n  return (\n    ch === 0x24 /* $ */ ||\n    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n    ch === 0x2E /* . */ ||\n    ch === 0x3F /* ? */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$1.regexp_eatPatternCharacters = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n  return state.pos !== start\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$1.regexp_eatExtendedPatternCharacter = function(state) {\n  var ch = state.current();\n  if (\n    ch !== -1 &&\n    ch !== 0x24 /* $ */ &&\n    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n    ch !== 0x2E /* . */ &&\n    ch !== 0x3F /* ? */ &&\n    ch !== 0x5B /* [ */ &&\n    ch !== 0x5E /* ^ */ &&\n    ch !== 0x7C /* | */\n  ) {\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// GroupSpecifier ::\n//   [empty]\n//   `?` GroupName\npp$1.regexp_groupSpecifier = function(state) {\n  if (state.eat(0x3F /* ? */)) {\n    if (!this.regexp_eatGroupName(state)) { state.raise(\"Invalid group\"); }\n    var trackDisjunction = this.options.ecmaVersion >= 16;\n    var known = state.groupNames[state.lastStringValue];\n    if (known) {\n      if (trackDisjunction) {\n        for (var i = 0, list = known; i < list.length; i += 1) {\n          var altID = list[i];\n\n          if (!altID.separatedFrom(state.branchID))\n            { state.raise(\"Duplicate capture group name\"); }\n        }\n      } else {\n        state.raise(\"Duplicate capture group name\");\n      }\n    }\n    if (trackDisjunction) {\n      (known || (state.groupNames[state.lastStringValue] = [])).push(state.branchID);\n    } else {\n      state.groupNames[state.lastStringValue] = true;\n    }\n  }\n};\n\n// GroupName ::\n//   `<` RegExpIdentifierName `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$1.regexp_eatGroupName = function(state) {\n  state.lastStringValue = \"\";\n  if (state.eat(0x3C /* < */)) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n      return true\n    }\n    state.raise(\"Invalid capture group name\");\n  }\n  return false\n};\n\n// RegExpIdentifierName ::\n//   RegExpIdentifierStart\n//   RegExpIdentifierName RegExpIdentifierPart\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$1.regexp_eatRegExpIdentifierName = function(state) {\n  state.lastStringValue = \"\";\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString(state.lastIntValue);\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString(state.lastIntValue);\n    }\n    return true\n  }\n  return false\n};\n\n// RegExpIdentifierStart ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\npp$1.regexp_eatRegExpIdentifierStart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n}\n\n// RegExpIdentifierPart ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\n//   <ZWNJ>\n//   <ZWJ>\npp$1.regexp_eatRegExpIdentifierPart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$1.regexp_eatAtomEscape = function(state) {\n  if (\n    this.regexp_eatBackReference(state) ||\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state) ||\n    (state.switchN && this.regexp_eatKGroupName(state))\n  ) {\n    return true\n  }\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63 /* c */) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.raise(\"Invalid escape\");\n  }\n  return false\n};\npp$1.regexp_eatBackReference = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n      return true\n    }\n    if (n <= state.numCapturingParens) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatKGroupName = function(state) {\n  if (state.eat(0x6B /* k */)) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true\n    }\n    state.raise(\"Invalid named reference\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$1.regexp_eatCharacterEscape = function(state) {\n  return (\n    this.regexp_eatControlEscape(state) ||\n    this.regexp_eatCControlLetter(state) ||\n    this.regexp_eatZero(state) ||\n    this.regexp_eatHexEscapeSequence(state) ||\n    this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||\n    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n    this.regexp_eatIdentityEscape(state)\n  )\n};\npp$1.regexp_eatCControlLetter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x63 /* c */)) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatZero = function(state) {\n  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$1.regexp_eatControlEscape = function(state) {\n  var ch = state.current();\n  if (ch === 0x74 /* t */) {\n    state.lastIntValue = 0x09; /* \\t */\n    state.advance();\n    return true\n  }\n  if (ch === 0x6E /* n */) {\n    state.lastIntValue = 0x0A; /* \\n */\n    state.advance();\n    return true\n  }\n  if (ch === 0x76 /* v */) {\n    state.lastIntValue = 0x0B; /* \\v */\n    state.advance();\n    return true\n  }\n  if (ch === 0x66 /* f */) {\n    state.lastIntValue = 0x0C; /* \\f */\n    state.advance();\n    return true\n  }\n  if (ch === 0x72 /* r */) {\n    state.lastIntValue = 0x0D; /* \\r */\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$1.regexp_eatControlLetter = function(state) {\n  var ch = state.current();\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isControlLetter(ch) {\n  return (\n    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {\n  if ( forceU === void 0 ) forceU = false;\n\n  var start = state.pos;\n  var switchU = forceU || state.switchU;\n\n  if (state.eat(0x75 /* u */)) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n      if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n        if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true\n          }\n        }\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n      return true\n    }\n    if (\n      switchU &&\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatHexDigits(state) &&\n      state.eat(0x7D /* } */) &&\n      isValidUnicode(state.lastIntValue)\n    ) {\n      return true\n    }\n    if (switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.pos = start;\n  }\n\n  return false\n};\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$1.regexp_eatIdentityEscape = function(state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true\n    }\n    if (state.eat(0x2F /* / */)) {\n      state.lastIntValue = 0x2F; /* / */\n      return true\n    }\n    return false\n  }\n\n  var ch = state.current();\n  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$1.regexp_eatDecimalEscape = function(state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n    do {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n    return true\n  }\n  return false\n};\n\n// Return values used by character set parsing methods, needed to\n// forbid negation of sets that can match strings.\nvar CharSetNone = 0; // Nothing parsed\nvar CharSetOk = 1; // Construct parsed, cannot contain strings\nvar CharSetString = 2; // Construct parsed, can contain strings\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$1.regexp_eatCharacterClassEscape = function(state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return CharSetOk\n  }\n\n  var negate = false;\n  if (\n    state.switchU &&\n    this.options.ecmaVersion >= 9 &&\n    ((negate = ch === 0x50 /* P */) || ch === 0x70 /* p */)\n  ) {\n    state.lastIntValue = -1;\n    state.advance();\n    var result;\n    if (\n      state.eat(0x7B /* { */) &&\n      (result = this.regexp_eatUnicodePropertyValueExpression(state)) &&\n      state.eat(0x7D /* } */)\n    ) {\n      if (negate && result === CharSetString) { state.raise(\"Invalid property name\"); }\n      return result\n    }\n    state.raise(\"Invalid property name\");\n  }\n\n  return CharSetNone\n};\n\nfunction isCharacterClassEscape(ch) {\n  return (\n    ch === 0x64 /* d */ ||\n    ch === 0x44 /* D */ ||\n    ch === 0x73 /* s */ ||\n    ch === 0x53 /* S */ ||\n    ch === 0x77 /* w */ ||\n    ch === 0x57 /* W */\n  )\n}\n\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$1.regexp_eatUnicodePropertyValueExpression = function(state) {\n  var start = state.pos;\n\n  // UnicodePropertyName `=` UnicodePropertyValue\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n    var name = state.lastStringValue;\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return CharSetOk\n    }\n  }\n  state.pos = start;\n\n  // LoneUnicodePropertyNameOrValue\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue)\n  }\n  return CharSetNone\n};\n\npp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n  if (!hasOwn(state.unicodeProperties.nonBinary, name))\n    { state.raise(\"Invalid property name\"); }\n  if (!state.unicodeProperties.nonBinary[name].test(value))\n    { state.raise(\"Invalid property value\"); }\n};\n\npp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n  if (state.unicodeProperties.binary.test(nameOrValue)) { return CharSetOk }\n  if (state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue)) { return CharSetString }\n  state.raise(\"Invalid property name\");\n};\n\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$1.regexp_eatUnicodePropertyName = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\n\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F /* _ */\n}\n\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$1.regexp_eatUnicodePropertyValue = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n}\n\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n  return this.regexp_eatUnicodePropertyValue(state)\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$1.regexp_eatCharacterClass = function(state) {\n  if (state.eat(0x5B /* [ */)) {\n    var negate = state.eat(0x5E /* ^ */);\n    var result = this.regexp_classContents(state);\n    if (!state.eat(0x5D /* ] */))\n      { state.raise(\"Unterminated character class\"); }\n    if (negate && result === CharSetString)\n      { state.raise(\"Negated character class may contain strings\"); }\n    return true\n  }\n  return false\n};\n\n// https://tc39.es/ecma262/#prod-ClassContents\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\npp$1.regexp_classContents = function(state) {\n  if (state.current() === 0x5D /* ] */) { return CharSetOk }\n  if (state.switchV) { return this.regexp_classSetExpression(state) }\n  this.regexp_nonEmptyClassRanges(state);\n  return CharSetOk\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$1.regexp_nonEmptyClassRanges = function(state) {\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$1.regexp_eatClassAtom = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n\n  var ch = state.current();\n  if (ch !== 0x5D /* ] */) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$1.regexp_eatClassEscape = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x62 /* b */)) {\n    state.lastIntValue = 0x08; /* <BS> */\n    return true\n  }\n\n  if (state.switchU && state.eat(0x2D /* - */)) {\n    state.lastIntValue = 0x2D; /* - */\n    return true\n  }\n\n  if (!state.switchU && state.eat(0x63 /* c */)) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  return (\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state)\n  )\n};\n\n// https://tc39.es/ecma262/#prod-ClassSetExpression\n// https://tc39.es/ecma262/#prod-ClassUnion\n// https://tc39.es/ecma262/#prod-ClassIntersection\n// https://tc39.es/ecma262/#prod-ClassSubtraction\npp$1.regexp_classSetExpression = function(state) {\n  var result = CharSetOk, subResult;\n  if (this.regexp_eatClassSetRange(state)) ; else if (subResult = this.regexp_eatClassSetOperand(state)) {\n    if (subResult === CharSetString) { result = CharSetString; }\n    // https://tc39.es/ecma262/#prod-ClassIntersection\n    var start = state.pos;\n    while (state.eatChars([0x26, 0x26] /* && */)) {\n      if (\n        state.current() !== 0x26 /* & */ &&\n        (subResult = this.regexp_eatClassSetOperand(state))\n      ) {\n        if (subResult !== CharSetString) { result = CharSetOk; }\n        continue\n      }\n      state.raise(\"Invalid character in character class\");\n    }\n    if (start !== state.pos) { return result }\n    // https://tc39.es/ecma262/#prod-ClassSubtraction\n    while (state.eatChars([0x2D, 0x2D] /* -- */)) {\n      if (this.regexp_eatClassSetOperand(state)) { continue }\n      state.raise(\"Invalid character in character class\");\n    }\n    if (start !== state.pos) { return result }\n  } else {\n    state.raise(\"Invalid character in character class\");\n  }\n  // https://tc39.es/ecma262/#prod-ClassUnion\n  for (;;) {\n    if (this.regexp_eatClassSetRange(state)) { continue }\n    subResult = this.regexp_eatClassSetOperand(state);\n    if (!subResult) { return result }\n    if (subResult === CharSetString) { result = CharSetString; }\n  }\n};\n\n// https://tc39.es/ecma262/#prod-ClassSetRange\npp$1.regexp_eatClassSetRange = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatClassSetCharacter(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this.regexp_eatClassSetCharacter(state)) {\n      var right = state.lastIntValue;\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://tc39.es/ecma262/#prod-ClassSetOperand\npp$1.regexp_eatClassSetOperand = function(state) {\n  if (this.regexp_eatClassSetCharacter(state)) { return CharSetOk }\n  return this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state)\n};\n\n// https://tc39.es/ecma262/#prod-NestedClass\npp$1.regexp_eatNestedClass = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5B /* [ */)) {\n    var negate = state.eat(0x5E /* ^ */);\n    var result = this.regexp_classContents(state);\n    if (state.eat(0x5D /* ] */)) {\n      if (negate && result === CharSetString) {\n        state.raise(\"Negated character class may contain strings\");\n      }\n      return result\n    }\n    state.pos = start;\n  }\n  if (state.eat(0x5C /* \\ */)) {\n    var result$1 = this.regexp_eatCharacterClassEscape(state);\n    if (result$1) {\n      return result$1\n    }\n    state.pos = start;\n  }\n  return null\n};\n\n// https://tc39.es/ecma262/#prod-ClassStringDisjunction\npp$1.regexp_eatClassStringDisjunction = function(state) {\n  var start = state.pos;\n  if (state.eatChars([0x5C, 0x71] /* \\q */)) {\n    if (state.eat(0x7B /* { */)) {\n      var result = this.regexp_classStringDisjunctionContents(state);\n      if (state.eat(0x7D /* } */)) {\n        return result\n      }\n    } else {\n      // Make the same message as V8.\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n  return null\n};\n\n// https://tc39.es/ecma262/#prod-ClassStringDisjunctionContents\npp$1.regexp_classStringDisjunctionContents = function(state) {\n  var result = this.regexp_classString(state);\n  while (state.eat(0x7C /* | */)) {\n    if (this.regexp_classString(state) === CharSetString) { result = CharSetString; }\n  }\n  return result\n};\n\n// https://tc39.es/ecma262/#prod-ClassString\n// https://tc39.es/ecma262/#prod-NonEmptyClassString\npp$1.regexp_classString = function(state) {\n  var count = 0;\n  while (this.regexp_eatClassSetCharacter(state)) { count++; }\n  return count === 1 ? CharSetOk : CharSetString\n};\n\n// https://tc39.es/ecma262/#prod-ClassSetCharacter\npp$1.regexp_eatClassSetCharacter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (\n      this.regexp_eatCharacterEscape(state) ||\n      this.regexp_eatClassSetReservedPunctuator(state)\n    ) {\n      return true\n    }\n    if (state.eat(0x62 /* b */)) {\n      state.lastIntValue = 0x08; /* <BS> */\n      return true\n    }\n    state.pos = start;\n    return false\n  }\n  var ch = state.current();\n  if (ch < 0 || ch === state.lookahead() && isClassSetReservedDoublePunctuatorCharacter(ch)) { return false }\n  if (isClassSetSyntaxCharacter(ch)) { return false }\n  state.advance();\n  state.lastIntValue = ch;\n  return true\n};\n\n// https://tc39.es/ecma262/#prod-ClassSetReservedDoublePunctuator\nfunction isClassSetReservedDoublePunctuatorCharacter(ch) {\n  return (\n    ch === 0x21 /* ! */ ||\n    ch >= 0x23 /* # */ && ch <= 0x26 /* & */ ||\n    ch >= 0x2A /* * */ && ch <= 0x2C /* , */ ||\n    ch === 0x2E /* . */ ||\n    ch >= 0x3A /* : */ && ch <= 0x40 /* @ */ ||\n    ch === 0x5E /* ^ */ ||\n    ch === 0x60 /* ` */ ||\n    ch === 0x7E /* ~ */\n  )\n}\n\n// https://tc39.es/ecma262/#prod-ClassSetSyntaxCharacter\nfunction isClassSetSyntaxCharacter(ch) {\n  return (\n    ch === 0x28 /* ( */ ||\n    ch === 0x29 /* ) */ ||\n    ch === 0x2D /* - */ ||\n    ch === 0x2F /* / */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5D /* ] */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator\npp$1.regexp_eatClassSetReservedPunctuator = function(state) {\n  var ch = state.current();\n  if (isClassSetReservedPunctuator(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator\nfunction isClassSetReservedPunctuator(ch) {\n  return (\n    ch === 0x21 /* ! */ ||\n    ch === 0x23 /* # */ ||\n    ch === 0x25 /* % */ ||\n    ch === 0x26 /* & */ ||\n    ch === 0x2C /* , */ ||\n    ch === 0x2D /* - */ ||\n    ch >= 0x3A /* : */ && ch <= 0x3E /* > */ ||\n    ch === 0x40 /* @ */ ||\n    ch === 0x60 /* ` */ ||\n    ch === 0x7E /* ~ */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$1.regexp_eatClassControlLetter = function(state) {\n  var ch = state.current();\n  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$1.regexp_eatHexEscapeSequence = function(state) {\n  var start = state.pos;\n  if (state.eat(0x78 /* x */)) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$1.regexp_eatDecimalDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$1.regexp_eatHexDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isHexDigit(ch) {\n  return (\n    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n  )\n}\nfunction hexToInt(ch) {\n  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n    return 10 + (ch - 0x41 /* A */)\n  }\n  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n    return 10 + (ch - 0x61 /* a */)\n  }\n  return ch - 0x30 /* 0 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$1.regexp_eatOctalDigit = function(state) {\n  var ch = state.current();\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30; /* 0 */\n    state.advance();\n    return true\n  }\n  state.lastIntValue = 0;\n  return false\n};\nfunction isOctalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$1.regexp_eatFixedHexDigits = function(state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false\n    }\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return true\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n  if (p.options.ranges)\n    { this.range = [p.start, p.end]; }\n};\n\n// ## Tokenizer\n\nvar pp = Parser.prototype;\n\n// Move to the next token\n\npp.next = function(ignoreEscapeSequenceInKeyword) {\n  if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\n    { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword); }\n  if (this.options.onToken)\n    { this.options.onToken(new Token(this)); }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  { pp[Symbol.iterator] = function() {\n    var this$1$1 = this;\n\n    return {\n      next: function () {\n        var token = this$1$1.getToken();\n        return {\n          done: token.type === types$1.eof,\n          value: token\n        }\n      }\n    }\n  }; }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n  this.start = this.pos;\n  if (this.options.locations) { this.startLoc = this.curPosition(); }\n  if (this.pos >= this.input.length) { return this.finishToken(types$1.eof) }\n\n  if (curContext.override) { return curContext.override(this) }\n  else { this.readToken(this.fullCharCodeAtPos()); }\n};\n\npp.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    { return this.readWord() }\n\n  return this.getTokenFromCode(code)\n};\n\npp.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xdc00) { return code }\n  var next = this.input.charCodeAt(this.pos + 1);\n  return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00\n};\n\npp.skipBlockComment = function() {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n  this.pos = end + 2;\n  if (this.options.locations) {\n    for (var nextBreak = (void 0), pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;) {\n      ++this.curLine;\n      pos = this.lineStart = nextBreak;\n    }\n  }\n  if (this.options.onComment)\n    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\npp.skipLineComment = function(startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this.input.charCodeAt(++this.pos);\n  }\n  if (this.options.onComment)\n    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp.skipSpace = function() {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this.pos;\n      break\n    case 13:\n      if (this.input.charCodeAt(this.pos + 1) === 10) {\n        ++this.pos;\n      }\n    case 10: case 8232: case 8233:\n      ++this.pos;\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      break\n    case 47: // '/'\n      switch (this.input.charCodeAt(this.pos + 1)) {\n      case 42: // '*'\n        this.skipBlockComment();\n        break\n      case 47:\n        this.skipLineComment(2);\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this.pos;\n      } else {\n        break loop\n      }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function(type, val) {\n  this.end = this.pos;\n  if (this.options.locations) { this.endLoc = this.curPosition(); }\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) { return this.readNumber(true) }\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types$1.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types$1.dot)\n  }\n};\n\npp.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(types$1.slash, 1)\n};\n\npp.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types$1.star : types$1.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n    ++size;\n    tokentype = types$1.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) { return this.finishOp(types$1.assign, size + 1) }\n  return this.finishOp(tokentype, size)\n};\n\npp.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (this.options.ecmaVersion >= 12) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 === 61) { return this.finishOp(types$1.assign, 3) }\n    }\n    return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2)\n  }\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1)\n};\n\npp.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(types$1.bitwiseXOR, 1)\n};\n\npp.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types$1.incDec, 2)\n  }\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(types$1.plusMin, 1)\n};\n\npp.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types$1.assign, size + 1) }\n    return this.finishOp(types$1.bitShift, size)\n  }\n  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n      this.input.charCodeAt(this.pos + 3) === 45) {\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) { size = 2; }\n  return this.finishOp(types$1.relational, size)\n};\n\npp.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types$1.arrow)\n  }\n  return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1)\n};\n\npp.readToken_question = function() { // '?'\n  var ecmaVersion = this.options.ecmaVersion;\n  if (ecmaVersion >= 11) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 46) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 < 48 || next2 > 57) { return this.finishOp(types$1.questionDot, 2) }\n    }\n    if (next === 63) {\n      if (ecmaVersion >= 12) {\n        var next2$1 = this.input.charCodeAt(this.pos + 2);\n        if (next2$1 === 61) { return this.finishOp(types$1.assign, 3) }\n      }\n      return this.finishOp(types$1.coalesce, 2)\n    }\n  }\n  return this.finishOp(types$1.question, 1)\n};\n\npp.readToken_numberSign = function() { // '#'\n  var ecmaVersion = this.options.ecmaVersion;\n  var code = 35; // '#'\n  if (ecmaVersion >= 13) {\n    ++this.pos;\n    code = this.fullCharCodeAtPos();\n    if (isIdentifierStart(code, true) || code === 92 /* '\\' */) {\n      return this.finishToken(types$1.privateId, this.readWord1())\n    }\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp.getTokenFromCode = function(code) {\n  switch (code) {\n  // The interpretation of a dot depends on whether it is followed\n  // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n  // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types$1.parenL)\n  case 41: ++this.pos; return this.finishToken(types$1.parenR)\n  case 59: ++this.pos; return this.finishToken(types$1.semi)\n  case 44: ++this.pos; return this.finishToken(types$1.comma)\n  case 91: ++this.pos; return this.finishToken(types$1.bracketL)\n  case 93: ++this.pos; return this.finishToken(types$1.bracketR)\n  case 123: ++this.pos; return this.finishToken(types$1.braceL)\n  case 125: ++this.pos; return this.finishToken(types$1.braceR)\n  case 58: ++this.pos; return this.finishToken(types$1.colon)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) { break }\n    ++this.pos;\n    return this.finishToken(types$1.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n    }\n\n  // Anything else beginning with a digit is an integer, octal\n  // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n  // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n  // Operators are parsed inline in tiny state machines. '=' (61) is\n  // often referred to. `finishOp` simply skips the amount of\n  // characters it is given as second argument, and returns a token\n  // of the type given by its first argument.\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 63: // '?'\n    return this.readToken_question()\n\n  case 126: // '~'\n    return this.finishOp(types$1.prefix, 1)\n\n  case 35: // '#'\n    return this.readToken_numberSign()\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str)\n};\n\npp.readRegexp = function() {\n  var escaped, inClass, start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }\n    var ch = this.input.charAt(this.pos);\n    if (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); }\n    if (!escaped) {\n      if (ch === \"[\") { inClass = true; }\n      else if (ch === \"]\" && inClass) { inClass = false; }\n      else if (ch === \"/\" && !inClass) { break }\n      escaped = ch === \"\\\\\";\n    } else { escaped = false; }\n    ++this.pos;\n  }\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n  if (this.containsEsc) { this.unexpected(flagsStart); }\n\n  // Validate pattern\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state);\n\n  // Create Literal#value property value.\n  var value = null;\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types$1.regexp, {pattern: pattern, flags: flags, value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {\n  // `len` is used for character escape sequences. In that case, disallow separators.\n  var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n\n  // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\n  // and isn't fraction part nor exponent part. In that case, if the first digit\n  // is zero then disallow separators.\n  var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n\n  var start = this.pos, total = 0, lastCode = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {\n    var code = this.input.charCodeAt(this.pos), val = (void 0);\n\n    if (allowSeparators && code === 95) {\n      if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed in legacy octal numeric literals\"); }\n      if (lastCode === 95) { this.raiseRecoverable(this.pos, \"Numeric separator must be exactly one underscore\"); }\n      if (i === 0) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed at the first of digits\"); }\n      lastCode = code;\n      continue\n    }\n\n    if (code >= 97) { val = code - 97 + 10; } // a\n    else if (code >= 65) { val = code - 65 + 10; } // A\n    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n    else { val = Infinity; }\n    if (val >= radix) { break }\n    lastCode = code;\n    total = total * radix + val;\n  }\n\n  if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, \"Numeric separator is not allowed at the last of digits\"); }\n  if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n  return total\n};\n\nfunction stringToNumber(str, isLegacyOctalNumericLiteral) {\n  if (isLegacyOctalNumericLiteral) {\n    return parseInt(str, 8)\n  }\n\n  // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\n  return parseFloat(str.replace(/_/g, \"\"))\n}\n\nfunction stringToBigInt(str) {\n  if (typeof BigInt !== \"function\") {\n    return null\n  }\n\n  // `BigInt(value)` throws syntax error if the string contains numeric separators.\n  return BigInt(str.replace(/_/g, \"\"))\n}\n\npp.readRadixNumber = function(radix) {\n  var start = this.pos;\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n    val = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n  } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n  return this.finishToken(types$1.num, val)\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp.readNumber = function(startsWithDot) {\n  var start = this.pos;\n  if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, \"Invalid number\"); }\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n  if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n  var next = this.input.charCodeAt(this.pos);\n  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n    var val$1 = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n    return this.finishToken(types$1.num, val$1)\n  }\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) { ++this.pos; } // '+-'\n    if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n  var val = stringToNumber(this.input.slice(start, this.pos), octal);\n  return this.finishToken(types$1.num, val)\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code;\n\n  if (ch === 123) { // '{'\n    if (this.options.ecmaVersion < 6) { this.unexpected(); }\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\npp.readString = function(quote) {\n  var out = \"\", chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) { break }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else if (ch === 0x2028 || ch === 0x2029) {\n      if (this.options.ecmaVersion < 10) { this.raise(this.start, \"Unterminated string constant\"); }\n      ++this.pos;\n      if (this.options.locations) {\n        this.curLine++;\n        this.lineStart = this.pos;\n      }\n    } else {\n      if (isNewLine(ch)) { this.raise(this.start, \"Unterminated string constant\"); }\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types$1.string, out)\n};\n\n// Reads template string tokens.\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp.tryReadTemplateToken = function() {\n  this.inTemplateElement = true;\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp.invalidStringToken = function(position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp.readTmplToken = function() {\n  var out = \"\", chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n      if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(types$1.dollarBraceL)\n        } else {\n          ++this.pos;\n          return this.finishToken(types$1.backQuote)\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(types$1.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n      switch (ch) {\n      case 13:\n        if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\n      case 10:\n        out += \"\\n\";\n        break\n      default:\n        out += String.fromCharCode(ch);\n        break\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Reads a template token to search for the end, without validating any escape sequences\npp.readInvalidTemplateToken = function() {\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this.input[this.pos]) {\n    case \"\\\\\":\n      ++this.pos;\n      break\n\n    case \"$\":\n      if (this.input[this.pos + 1] !== \"{\") { break }\n      // fall through\n    case \"`\":\n      return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos))\n\n    case \"\\r\":\n      if (this.input[this.pos + 1] === \"\\n\") { ++this.pos; }\n      // fall through\n    case \"\\n\": case \"\\u2028\": case \"\\u2029\":\n      ++this.curLine;\n      this.lineStart = this.pos + 1;\n      break\n    }\n  }\n  this.raise(this.start, \"Unterminated template\");\n};\n\n// Used to read escaped characters\n\npp.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return \"\"\n  case 56:\n  case 57:\n    if (this.strict) {\n      this.invalidStringToken(\n        this.pos - 1,\n        \"Invalid escape sequence\"\n      );\n    }\n    if (inTemplate) {\n      var codePos = this.pos - 1;\n\n      this.invalidStringToken(\n        codePos,\n        \"Invalid escape sequence in template string\"\n      );\n    }\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr, 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1);\n        octal = parseInt(octalStr, 8);\n      }\n      this.pos += octalStr.length - 1;\n      ch = this.input.charCodeAt(this.pos);\n      if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n        this.invalidStringToken(\n          this.pos - 1 - octalStr.length,\n          inTemplate\n            ? \"Octal literal in template string\"\n            : \"Octal literal in strict mode\"\n        );\n      }\n      return String.fromCharCode(octal)\n    }\n    if (isNewLine(ch)) {\n      // Unicode new line characters after \\ get removed from output in both\n      // template literals and strings\n      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n      return \"\"\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n  return n\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function() {\n  this.containsEsc = false;\n  var word = \"\", first = true, chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // \"\\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"\n        { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n      word += codePointToString(esc);\n      chunkStart = this.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function() {\n  var word = this.readWord1();\n  var type = types$1.name;\n  if (this.keywords.test(word)) {\n    type = keywords[word];\n  }\n  return this.finishToken(type, word)\n};\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/acornjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/acornjs/acorn/issues\n//\n// [walk]: util/walk.js\n\n\nvar version = \"8.14.0\";\n\nParser.acorn = {\n  Parser: Parser,\n  version: version,\n  defaultOptions: defaultOptions,\n  Position: Position,\n  SourceLocation: SourceLocation,\n  getLineInfo: getLineInfo,\n  Node: Node,\n  TokenType: TokenType,\n  tokTypes: types$1,\n  keywordTypes: keywords,\n  TokContext: TokContext,\n  tokContexts: types,\n  isIdentifierChar: isIdentifierChar,\n  isIdentifierStart: isIdentifierStart,\n  Token: Token,\n  isNewLine: isNewLine,\n  lineBreak: lineBreak,\n  lineBreakG: lineBreakG,\n  nonASCIIwhitespace: nonASCIIwhitespace\n};\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and returns\n// an abstract syntax tree as specified by the [ESTree spec][estree].\n//\n// [estree]: https://github.com/estree/estree\n\nfunction parse(input, options) {\n  return Parser.parse(input, options)\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  return Parser.parseExpressionAt(input, pos, options)\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return Parser.tokenizer(input, options)\n}\n\nexport { Node, Parser, Position, SourceLocation, TokContext, Token, TokenType, defaultOptions, getLineInfo, isIdentifierChar, isIdentifierStart, isNewLine, keywords as keywordTypes, lineBreak, lineBreakG, nonASCIIwhitespace, parse, parseExpressionAt, types as tokContexts, types$1 as tokTypes, tokenizer, version };\n","/**\n * @typedef {import('micromark-extension-mdx-expression').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {Parser} from 'acorn'\nimport acornJsx from 'acorn-jsx'\nimport {mdxExpression} from 'micromark-extension-mdx-expression'\nimport {mdxJsx} from 'micromark-extension-mdx-jsx'\nimport {mdxMd} from 'micromark-extension-mdx-md'\nimport {mdxjsEsm} from 'micromark-extension-mdxjs-esm'\nimport {combineExtensions} from 'micromark-util-combine-extensions'\n\n/**\n * Create an extension for `micromark` to enable MDX syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   syntax.\n */\nexport function mdxjs(options) {\n  const settings = Object.assign(\n    {\n      acorn: Parser.extend(acornJsx()),\n      acornOptions: {ecmaVersion: 2024, sourceType: 'module'},\n      addResult: true\n    },\n    options\n  )\n\n  return combineExtensions([\n    mdxjsEsm(settings),\n    mdxExpression(settings),\n    mdxJsx(settings),\n    mdxMd()\n  ])\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return '\\u001B[33m' + d + '\\u001B[39m'\n}\n","/**\n * @typedef {import('estree-jsx').Node} Node\n */\n\n/**\n * @typedef {CONTINUE | EXIT | SKIP} Action\n *   Union of the action types.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed), when moving in an array.\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n */\n\n/**\n * @callback Visitor\n *   Handle a node.\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node`, the `Visitor` should\n *   return a new `Index` to specify the sibling to traverse after `node` is\n *   traversed.\n *   Adding or removing next siblings of `node` is handled as expected without\n *   needing to return a new `Index`.\n * @param {Node} node\n *   Found node.\n * @param {string | undefined} key\n *   Field at which `node` lives in its parent (or where a list of nodes lives).\n * @param {number | undefined} index\n *   Index where `node` lives if `parent[key]` is an array.\n * @param {Array<Node>} ancestors\n *   Ancestors of `node`.\n * @returns {Action | ActionTuple | Index | null | undefined | void}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @typedef Visitors\n *   Handle nodes when entering (preorder) and leaving (postorder).\n * @property {Visitor | null | undefined} [enter]\n *   Handle nodes when entering (preorder) (optional).\n * @property {Visitor | null | undefined} [leave]\n *   Handle nodes when leaving (postorder) (optional).\n */\n\nimport {color} from 'estree-util-visit/do-not-use-color'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = Symbol('continue')\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = Symbol('exit')\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = Symbol('skip')\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) and/or *postorder* (**LRN**).\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor(s) when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * @param {Node} tree\n *   Tree to traverse\n * @param {Visitor | Visitors | null | undefined} [visitor]\n *   Handle each node (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport function visit(tree, visitor) {\n  /** @type {Visitor | undefined} */\n  let enter\n  /** @type {Visitor | undefined} */\n  let leave\n\n  if (typeof visitor === 'function') {\n    enter = visitor\n  } else if (visitor && typeof visitor === 'object') {\n    if (visitor.enter) enter = visitor.enter\n    if (visitor.leave) leave = visitor.leave\n  }\n\n  build(tree, undefined, undefined, [])()\n\n  /**\n   * @param {Node} node\n   * @param {string | undefined} key\n   * @param {number | undefined} index\n   * @param {Array<Node>} parents\n   */\n  function build(node, key, index, parents) {\n    if (nodelike(node)) {\n      visit.displayName = 'node (' + color(node.type) + ')'\n    }\n\n    return visit\n\n    /**\n     * @returns {ActionTuple}\n     */\n    function visit() {\n      /** @type {ActionTuple} */\n      const result = enter ? toResult(enter(node, key, index, parents)) : []\n\n      if (result[0] === EXIT) {\n        return result\n      }\n\n      if (result[0] !== SKIP) {\n        /** @type {keyof node} */\n        let cKey\n\n        for (cKey in node) {\n          if (\n            own.call(node, cKey) &&\n            node[cKey] &&\n            typeof node[cKey] === 'object' &&\n            // @ts-expect-error: custom esast extension.\n            cKey !== 'data' &&\n            // @ts-expect-error: custom esast extension.\n            cKey !== 'position'\n          ) {\n            const grandparents = parents.concat(node)\n            /** @type {unknown} */\n            const value = node[cKey]\n\n            if (Array.isArray(value)) {\n              const nodes = /** @type {Array<unknown>} */ (value)\n              let cIndex = 0\n\n              while (cIndex > -1 && cIndex < nodes.length) {\n                const subvalue = nodes[cIndex]\n\n                if (nodelike(subvalue)) {\n                  const subresult = build(\n                    subvalue,\n                    cKey,\n                    cIndex,\n                    grandparents\n                  )()\n                  if (subresult[0] === EXIT) return subresult\n                  cIndex =\n                    typeof subresult[1] === 'number' ? subresult[1] : cIndex + 1\n                } else {\n                  cIndex++\n                }\n              }\n            } else if (nodelike(value)) {\n              const subresult = build(value, cKey, undefined, grandparents)()\n              if (subresult[0] === EXIT) return subresult\n            }\n          }\n        }\n      }\n\n      return leave ? toResult(leave(node, key, index, parents)) : result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {Action | ActionTuple | Index | null | undefined | void} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n\n/**\n * Check if something looks like a node.\n *\n * @param {unknown} value\n *   Anything.\n * @returns {value is Node}\n *   Whether `value` looks like a node.\n */\nfunction nodelike(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'type' in value &&\n      typeof value.type === 'string' &&\n      value.type.length > 0\n  )\n}\n","/**\n * @typedef {import('acorn').Comment} Comment\n * @typedef {import('acorn').Node} AcornNode\n * @typedef {import('acorn').Options} AcornOptions\n * @typedef {import('acorn').Token} Token\n * @typedef {import('estree').Node} EstreeNode\n * @typedef {import('estree').Program} Program\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} MicromarkPoint\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('unist').Point} UnistPoint\n */\n\n/**\n * @typedef Acorn\n *   Acorn-like interface.\n * @property {import('acorn').parse} parse\n *   Parse a program.\n * @property {import('acorn').parseExpressionAt} parseExpressionAt\n *   Parse an expression.\n *\n * @typedef AcornLoc\n * @property {number} line\n * @property {number} column\n *\n * @typedef AcornErrorFields\n * @property {number} raisedAt\n * @property {number} pos\n * @property {AcornLoc} loc\n *\n * @typedef {Error & AcornErrorFields} AcornError\n *\n * @typedef Options\n *   Configuration.\n * @property {Acorn} acorn\n *   Typically `acorn`, object with `parse` and `parseExpressionAt` fields (required).\n * @property {Array<TokenType>} tokenTypes\n *   Names of (void) tokens to consider as data; `'lineEnding'` is always\n *   included (required).\n * @property {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for `acorn` (optional).\n * @property {MicromarkPoint | null | undefined} [start]\n *   Place where events start (optional, required if `allowEmpty`).\n * @property {string | null | undefined} [prefix='']\n *   Text to place before events (default: `''`).\n * @property {string | null | undefined} [suffix='']\n *   Text to place after events (default: `''`).\n * @property {boolean | null | undefined} [expression=false]\n *   Whether this is a program or expression (default: `false`).\n * @property {boolean | null | undefined} [allowEmpty=false]\n *   Whether an empty expression is allowed (programs are always allowed to\n *   be empty) (default: `false`).\n *\n * @typedef Result\n *   Result.\n * @property {Program | undefined} estree\n *   Program.\n * @property {AcornError | undefined} error\n *   Error if unparseable\n * @property {boolean} swallow\n *   Whether the error, if there is one, can be swallowed and more JavaScript\n *   could be valid.\n *\n * @typedef {[number, MicromarkPoint]} Stop\n *\n * @typedef Collection\n * @property {string} value\n * @property {Array<Stop>} stops\n */\n\nimport { visit } from 'estree-util-visit';\nimport { VFileMessage } from 'vfile-message';\n\n/**\n * Parse a list of micromark events with acorn.\n *\n * @param {Array<Event>} events\n *   Events.\n * @param {Options} options\n *   Configuration (required).\n * @returns {Result}\n *   Result.\n */\n// eslint-disable-next-line complexity\nexport function eventsToAcorn(events, options) {\n  const prefix = options.prefix || '';\n  const suffix = options.suffix || '';\n  const acornOptions = Object.assign({}, options.acornOptions);\n  /** @type {Array<Comment>} */\n  const comments = [];\n  /** @type {Array<Token>} */\n  const tokens = [];\n  const onComment = acornOptions.onComment;\n  const onToken = acornOptions.onToken;\n  let swallow = false;\n  /** @type {AcornNode | undefined} */\n  let estree;\n  /** @type {AcornError | undefined} */\n  let exception;\n  /** @type {AcornOptions} */\n  const acornConfig = Object.assign({}, acornOptions, {\n    onComment: comments,\n    preserveParens: true\n  });\n  if (onToken) {\n    acornConfig.onToken = tokens;\n  }\n  const collection = collect(events, options.tokenTypes);\n  const source = collection.value;\n  const value = prefix + source + suffix;\n  const isEmptyExpression = options.expression && empty(source);\n  if (isEmptyExpression && !options.allowEmpty) {\n    throw new VFileMessage('Unexpected empty expression', {\n      place: parseOffsetToUnistPoint(0),\n      ruleId: 'unexpected-empty-expression',\n      source: 'micromark-extension-mdx-expression'\n    });\n  }\n  try {\n    estree = options.expression && !isEmptyExpression ? options.acorn.parseExpressionAt(value, 0, acornConfig) : options.acorn.parse(value, acornConfig);\n  } catch (error_) {\n    const error = /** @type {AcornError} */error_;\n    const point = parseOffsetToUnistPoint(error.pos);\n    error.message = String(error.message).replace(/ \\(\\d+:\\d+\\)$/, '');\n    // Always defined in our unist points that come from micromark.\n\n    error.pos = point.offset;\n    error.loc = {\n      line: point.line,\n      column: point.column - 1\n    };\n    exception = error;\n    swallow = error.raisedAt >= prefix.length + source.length ||\n    // Broken comments are raised at their start, not their end.\n    error.message === 'Unterminated comment';\n  }\n  if (estree && options.expression && !isEmptyExpression) {\n    if (empty(value.slice(estree.end, value.length - suffix.length))) {\n      estree = {\n        type: 'Program',\n        start: 0,\n        end: prefix.length + source.length,\n        // @ts-expect-error: It’s good.\n        body: [{\n          type: 'ExpressionStatement',\n          expression: estree,\n          start: 0,\n          end: prefix.length + source.length\n        }],\n        sourceType: 'module',\n        comments: []\n      };\n    } else {\n      const point = parseOffsetToUnistPoint(estree.end);\n      const error = /** @type {AcornError} */\n      new Error('Unexpected content after expression');\n      // Always defined in our unist points that come from micromark.\n\n      error.pos = point.offset;\n      error.loc = {\n        line: point.line,\n        column: point.column - 1\n      };\n      exception = error;\n      estree = undefined;\n    }\n  }\n  if (estree) {\n    // @ts-expect-error: acorn *does* allow comments\n    estree.comments = comments;\n\n    // @ts-expect-error: acorn looks enough like estree.\n    visit(estree, function (esnode, field, index, parents) {\n      let context = /** @type {AcornNode | Array<AcornNode>} */\n      parents[parents.length - 1];\n      /** @type {number | string | undefined} */\n      let prop = field;\n\n      // Remove non-standard `ParenthesizedExpression`.\n      // @ts-expect-error: included in acorn.\n      if (esnode.type === 'ParenthesizedExpression' && context && prop) {\n        /* c8 ignore next 5 */\n        if (typeof index === 'number') {\n          // @ts-expect-error: indexable.\n          context = context[prop];\n          prop = index;\n        }\n\n        // @ts-expect-error: indexable.\n        context[prop] = esnode.expression;\n      }\n      fixPosition(esnode);\n    });\n\n    // Comment positions are fixed by `visit` because they’re in the tree.\n    if (Array.isArray(onComment)) {\n      onComment.push(...comments);\n    } else if (typeof onComment === 'function') {\n      for (const comment of comments) {\n        onComment(comment.type === 'Block', comment.value, comment.start, comment.end, comment.loc.start, comment.loc.end);\n      }\n    }\n    for (const token of tokens) {\n      // Ignore tokens that ends in prefix or start in suffix:\n      if (token.end <= prefix.length || token.start - prefix.length >= source.length) {\n        continue;\n      }\n      fixPosition(token);\n      if (Array.isArray(onToken)) {\n        onToken.push(token);\n      } else {\n        // `tokens` are not added if `onToken` is not defined, so it must be a\n        // function.\n\n        onToken(token);\n      }\n    }\n  }\n\n  // @ts-expect-error: It’s a program now.\n  return {\n    estree,\n    error: exception,\n    swallow\n  };\n\n  /**\n   * Update the position of a node.\n   *\n   * @param {AcornNode | EstreeNode | Token} nodeOrToken\n   * @returns {undefined}\n   */\n  function fixPosition(nodeOrToken) {\n    const pointStart = parseOffsetToUnistPoint(nodeOrToken.start);\n    const pointEnd = parseOffsetToUnistPoint(nodeOrToken.end);\n    // Always defined in our unist points that come from micromark.\n\n    nodeOrToken.start = pointStart.offset;\n    nodeOrToken.end = pointEnd.offset;\n    nodeOrToken.loc = {\n      start: {\n        line: pointStart.line,\n        column: pointStart.column - 1,\n        offset: pointStart.offset\n      },\n      end: {\n        line: pointEnd.line,\n        column: pointEnd.column - 1,\n        offset: pointEnd.offset\n      }\n    };\n    nodeOrToken.range = [nodeOrToken.start, nodeOrToken.end];\n  }\n\n  /**\n   * Turn an arbitrary offset into the parsed value, into a point in the source\n   * value.\n   *\n   * @param {number} acornOffset\n   * @returns {UnistPoint}\n   */\n  function parseOffsetToUnistPoint(acornOffset) {\n    let sourceOffset = acornOffset - prefix.length;\n    if (sourceOffset < 0) {\n      sourceOffset = 0;\n    } else if (sourceOffset > source.length) {\n      sourceOffset = source.length;\n    }\n    let point = relativeToPoint(collection.stops, sourceOffset);\n    if (!point) {\n      point = {\n        line: options.start.line,\n        column: options.start.column,\n        offset: options.start.offset\n      };\n    }\n    return point;\n  }\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return /^\\s*$/.test(value\n  // Multiline comments.\n  .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '')\n  // Line comments.\n  // EOF instead of EOL is specifically not allowed, because that would\n  // mean the closing brace is on the commented-out line\n  .replace(/\\/\\/[^\\r\\n]*(\\r\\n|\\n|\\r)/g, ''));\n}\n\n// Port from <https://github.com/wooorm/markdown-rs/blob/e692ab0/src/util/mdx_collect.rs#L15>.\n/**\n * @param {Array<Event>} events\n * @param {Array<TokenType>} tokenTypes\n * @returns {Collection}\n */\nfunction collect(events, tokenTypes) {\n  /** @type {Collection} */\n  const result = {\n    value: '',\n    stops: []\n  };\n  let index = -1;\n  while (++index < events.length) {\n    const event = events[index];\n\n    // Assume void.\n    if (event[0] === 'enter') {\n      const type = event[1].type;\n      if (type === \"lineEnding\" || tokenTypes.includes(type)) {\n        const chunks = event[2].sliceStream(event[1]);\n\n        // Drop virtual spaces.\n        while (chunks.length > 0 && chunks[0] === -1) {\n          chunks.shift();\n        }\n        const value = serializeChunks(chunks);\n        result.stops.push([result.value.length, event[1].start]);\n        result.value += value;\n        result.stops.push([result.value.length, event[1].end]);\n      }\n    }\n  }\n  return result;\n}\n\n// Port from <https://github.com/wooorm/markdown-rs/blob/e692ab0/src/util/location.rs#L91>.\n/**\n * Turn a relative offset into an absolute offset.\n *\n * @param {Array<Stop>} stops\n * @param {number} relative\n * @returns {UnistPoint | undefined}\n */\nfunction relativeToPoint(stops, relative) {\n  let index = 0;\n  while (index < stops.length && stops[index][0] <= relative) {\n    index += 1;\n  }\n\n  // There are no points: that only occurs if there was an empty string.\n  if (index === 0) {\n    return undefined;\n  }\n  const [stopRelative, stopAbsolute] = stops[index - 1];\n  const rest = relative - stopRelative;\n  return {\n    line: stopAbsolute.line,\n    column: stopAbsolute.column + rest,\n    offset: stopAbsolute.offset + rest\n  };\n}\n\n// Copy from <https://github.com/micromark/micromark/blob/ce3593a/packages/micromark/dev/lib/create-tokenizer.js#L595>\n// To do: expose that?\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @returns {string}\n */\nfunction serializeChunks(chunks) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = \"\\t\";\n          break;\n        }\n\n      /* c8 ignore next 6 */\n      case -1:\n        {\n          if (atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          // eslint-disable-next-line unicorn/prefer-code-point\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @typedef {import('unist').Point} UnistPoint\n * @typedef {import('unist').Position} UnistPosition\n */\n\n/**\n * @typedef {[start: number | null | undefined, end: number | null | undefined]} RangeLike\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n *\n * @typedef LocLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {LocLike | null | undefined} [loc]\n * @property {RangeLike | null | undefined} [range]\n * @property {number | null | undefined} [start]\n * @property {number | null | undefined} [end]\n */\n\n/**\n * Turn an estree `node` into a unist `position`.\n *\n * @param {NodeLike | null | undefined} [node]\n *   estree node.\n * @returns {UnistPosition | undefined}\n *   unist position.\n */\nexport function positionFromEstree(node) {\n  const nodeLike = node || {}\n  const loc = nodeLike.loc || {}\n  const range = nodeLike.range || [undefined, undefined]\n  const start = pointOrUndefined(loc.start, range[0] || nodeLike.start)\n  const end = pointOrUndefined(loc.end, range[1] || nodeLike.end)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n\n/**\n * @param {unknown} estreePoint\n *   estree point.\n * @param {unknown} estreeOffset\n *  estree offset.\n * @returns {UnistPoint | undefined}\n *   unist point.\n */\nfunction pointOrUndefined(estreePoint, estreeOffset) {\n  if (estreePoint && typeof estreePoint === 'object') {\n    const line =\n      'line' in estreePoint ? numberOrUndefined(estreePoint.line) : undefined\n    const column =\n      'column' in estreePoint\n        ? numberOrUndefined(estreePoint.column)\n        : undefined\n\n    if (line && column !== undefined) {\n      return {\n        line,\n        column: column + 1,\n        offset: numberOrUndefined(estreeOffset)\n      }\n    }\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {number | undefined}\n */\nfunction numberOrUndefined(value) {\n  return typeof value === 'number' && value > -1 ? value : undefined\n}\n","/**\n * @import {Program} from 'estree'\n * @import {Acorn, AcornOptions} from 'micromark-util-events-to-acorn'\n * @import {Effects, Point, State, TokenType, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * @typedef MdxSignalOk\n *   Good result.\n * @property {'ok'} type\n *   Type.\n * @property {Program | undefined} estree\n *   Value.\n *\n * @typedef MdxSignalNok\n *   Bad result.\n * @property {'nok'} type\n *   Type.\n * @property {VFileMessage} message\n *   Value.\n *\n * @typedef {MdxSignalNok | MdxSignalOk} MdxSignal\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { eventsToAcorn } from 'micromark-util-events-to-acorn';\nimport { positionFromEstree } from 'unist-util-position-from-estree';\nimport { VFileMessage } from 'vfile-message';\n\n// Tab-size to eat has to be the same as what we serialize as.\n// While in some places in markdown that’s 4, in JS it’s more common as 2.\n// Which is what’s also in `mdast-util-mdx-jsx`:\n// <https://github.com/syntax-tree/mdast-util-mdx-jsx/blob/40b951b/lib/index.js#L52>\nconst indentSize = 2;\nconst trouble = 'https://github.com/micromark/micromark-extension-mdx-expression/tree/main/packages/micromark-extension-mdx-expression';\nconst unexpectedEndOfFileHash = '#unexpected-end-of-file-in-expression-expected-a-corresponding-closing-brace-for-';\nconst unexpectedLazyHash = '#unexpected-lazy-line-in-expression-in-container-expected-line-to-be-prefixed';\nconst nonSpreadHash = '#unexpected-type-in-code-expected-an-object-spread-spread';\nconst spreadExtraHash = '#unexpected-extra-content-in-spread-only-a-single-spread-is-supported';\nconst acornHash = '#could-not-parse-expression-with-acorn';\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful\n * @param {TokenType} type\n *   Token type for whole (`{}`).\n * @param {TokenType} markerType\n *   Token type for the markers (`{`, `}`).\n * @param {TokenType} chunkType\n *   Token type for the value (`1`).\n * @param {Acorn | null | undefined} [acorn]\n *   Object with `acorn.parse` and `acorn.parseExpressionAt`.\n * @param {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for acorn.\n * @param {boolean | null | undefined} [addResult=false]\n *   Add `estree` to token (default: `false`).\n * @param {boolean | null | undefined} [spread=false]\n *   Support a spread (`{...a}`) only (default: `false`).\n * @param {boolean | null | undefined} [allowEmpty=false]\n *   Support an empty expression (default: `false`).\n * @param {boolean | null | undefined} [allowLazy=false]\n *   Support lazy continuation of an expression (default: `false`).\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryMdxExpression(effects, ok, type, markerType, chunkType, acorn, acornOptions, addResult, spread, allowEmpty, allowLazy) {\n  const self = this;\n  const eventStart = this.events.length + 3; // Add main and marker token\n  let size = 0;\n  /** @type {Point} */\n  let pointStart;\n  /** @type {Error} */\n  let lastCrash;\n  return start;\n\n  /**\n   * Start of an MDX expression.\n   *\n   * ```markdown\n   * > | a {Math.PI} c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    pointStart = self.now();\n    return before;\n  }\n\n  /**\n   * Before data.\n   *\n   * ```markdown\n   * > | a {Math.PI} c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    if (code === null) {\n      if (lastCrash) throw lastCrash;\n      const error = new VFileMessage('Unexpected end of file in expression, expected a corresponding closing brace for `{`', {\n        place: self.now(),\n        ruleId: 'unexpected-eof',\n        source: 'micromark-extension-mdx-expression'\n      });\n      error.url = trouble + unexpectedEndOfFileHash;\n      throw error;\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return eolAfter;\n    }\n    if (code === 125 && size === 0) {\n      /** @type {MdxSignal} */\n      const next = acorn ? mdxExpressionParse.call(self, acorn, acornOptions, chunkType, eventStart, pointStart, allowEmpty || false, spread || false) : {\n        type: 'ok',\n        estree: undefined\n      };\n      if (next.type === 'ok') {\n        effects.enter(markerType);\n        effects.consume(code);\n        effects.exit(markerType);\n        const token = effects.exit(type);\n        if (addResult && next.estree) {\n          Object.assign(token, {\n            estree: next.estree\n          });\n        }\n        return ok;\n      }\n      lastCrash = next.message;\n      effects.enter(chunkType);\n      effects.consume(code);\n      return inside;\n    }\n    effects.enter(chunkType);\n    return inside(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | a {Math.PI} c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === 125 && size === 0 || code === null || markdownLineEnding(code)) {\n      effects.exit(chunkType);\n      return before(code);\n    }\n\n    // Don’t count if gnostic.\n    if (code === 123 && !acorn) {\n      size += 1;\n    } else if (code === 125) {\n      size -= 1;\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /**\n   * After eol.\n   *\n   * ```markdown\n   *   | a {b +\n   * > | c} d\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function eolAfter(code) {\n    const now = self.now();\n\n    // Lazy continuation in a flow expression (or flow tag) is a syntax error.\n    if (now.line !== pointStart.line && !allowLazy && self.parser.lazy[now.line]) {\n      const error = new VFileMessage('Unexpected lazy line in expression in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc', {\n        place: self.now(),\n        ruleId: 'unexpected-lazy',\n        source: 'micromark-extension-mdx-expression'\n      });\n      error.url = trouble + unexpectedLazyHash;\n      throw error;\n    }\n\n    // Note: `markdown-rs` uses `4`, but we use `2`.\n    //\n    // Idea: investigate if we’d need to use more complex stripping.\n    // Take this example:\n    //\n    // ```markdown\n    // >  aaa <b c={`\n    // >      d\n    // >  `} /> eee\n    // ```\n    //\n    // Currently, the “paragraph” starts at `> | aaa`, so for the next line\n    // here we split it into `>␠|␠␠|␠␠␠d` (prefix, this indent here,\n    // expression data).\n    if (markdownSpace(code)) {\n      return factorySpace(effects, before, \"linePrefix\", indentSize + 1)(code);\n    }\n    return before(code);\n  }\n}\n\n/**\n * Mix of `markdown-rs`’s `parse_expression` and `MdxExpressionParse`\n * functionality, to wrap our `eventsToAcorn`.\n *\n * In the future, the plan is to realise the rust way, which allows arbitrary\n * parsers.\n *\n * @this {TokenizeContext}\n * @param {Acorn} acorn\n * @param {AcornOptions | null | undefined} acornOptions\n * @param {TokenType} chunkType\n * @param {number} eventStart\n * @param {Point} pointStart\n * @param {boolean} allowEmpty\n * @param {boolean} spread\n * @returns {MdxSignal}\n */\n// eslint-disable-next-line max-params\nfunction mdxExpressionParse(acorn, acornOptions, chunkType, eventStart, pointStart, allowEmpty, spread) {\n  // Gnostic mode: parse w/ acorn.\n  const result = eventsToAcorn(this.events.slice(eventStart), {\n    acorn,\n    tokenTypes: [chunkType],\n    acornOptions,\n    start: pointStart,\n    expression: true,\n    allowEmpty,\n    prefix: spread ? '({' : '',\n    suffix: spread ? '})' : ''\n  });\n  const estree = result.estree;\n\n  // Get the spread value.\n  if (spread && estree) {\n    // Should always be the case as we wrap in `d={}`\n\n    const head = estree.body[0];\n    if (head.type !== 'ExpressionStatement' || head.expression.type !== 'ObjectExpression') {\n      const place = positionFromEstree(head);\n      const error = new VFileMessage('Unexpected `' + head.type + '` in code: expected an object spread (`{...spread}`)', {\n        place: place.start,\n        ruleId: 'non-spread',\n        source: 'micromark-extension-mdx-expression'\n      });\n      error.url = trouble + nonSpreadHash;\n      throw error;\n    }\n    if (head.expression.properties[1]) {\n      const place = positionFromEstree(head.expression.properties[1]);\n      const error = new VFileMessage('Unexpected extra content in spread: only a single spread is supported', {\n        place: place.start,\n        ruleId: 'spread-extra',\n        source: 'micromark-extension-mdx-expression'\n      });\n      error.url = trouble + spreadExtraHash;\n      throw error;\n    }\n    if (head.expression.properties[0] && head.expression.properties[0].type !== 'SpreadElement') {\n      const place = positionFromEstree(head.expression.properties[0]);\n      const error = new VFileMessage('Unexpected `' + head.expression.properties[0].type + '` in code: only spread elements are supported', {\n        place: place.start,\n        ruleId: 'non-spread',\n        source: 'micromark-extension-mdx-expression'\n      });\n      error.url = trouble + nonSpreadHash;\n      throw error;\n    }\n  }\n  if (result.error) {\n    const error = new VFileMessage('Could not parse expression with acorn', {\n      cause: result.error,\n      place: {\n        line: result.error.loc.line,\n        column: result.error.loc.column + 1,\n        offset: result.error.pos\n      },\n      ruleId: 'acorn',\n      source: 'micromark-extension-mdx-expression'\n    });\n    error.url = trouble + acornHash;\n    return {\n      type: 'nok',\n      message: error\n    };\n  }\n  return {\n    type: 'ok',\n    estree\n  };\n}","/**\n * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn\n * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {Acorn | null | undefined} [acorn]\n *   Acorn parser to use (optional).\n * @property {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for acorn (default: `{ecmaVersion: 2024, locations: true,\n *   sourceType: 'module'}`).\n *\n *   All fields except `locations` can be set.\n * @property {boolean | null | undefined} [addResult=false]\n *   Whether to add `estree` fields to tokens with results from acorn (default:\n *   `false`).\n * @property {boolean | null | undefined} [spread=false]\n *   Undocumented option to parse only a spread (used by\n *   `micromark-extension-mdx-jsx` to parse spread attributes) (default:\n *   `false`).\n * @property {boolean | null | undefined} [allowEmpty=true]\n *   Undocumented option to disallow empty attributes (used by\n *   `micromark-extension-mdx-jsx` to prohobit empty attribute values)\n *   (default: `false`).\n */\n\nimport { factoryMdxExpression } from 'micromark-factory-mdx-expression';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Create an extension for `micromark` to enable MDX expression syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   expression syntax.\n */\nexport function mdxExpression(options) {\n  const options_ = options || {};\n  const addResult = options_.addResult;\n  const acorn = options_.acorn;\n  // Hidden: `micromark-extension-mdx-jsx` supports expressions in tags,\n  // and one of them is only “spread” elements.\n  // It also has expressions that are not allowed to be empty (`<x y={}/>`).\n  // Instead of duplicating code there, this are two small hidden feature here\n  // to test that behavior.\n  const spread = options_.spread;\n  let allowEmpty = options_.allowEmpty;\n  /** @type {AcornOptions} */\n  let acornOptions;\n  if (allowEmpty === null || allowEmpty === undefined) {\n    allowEmpty = true;\n  }\n  if (acorn) {\n    if (!acorn.parseExpressionAt) {\n      throw new Error('Expected a proper `acorn` instance passed in as `options.acorn`');\n    }\n    acornOptions = Object.assign({\n      ecmaVersion: 2024,\n      sourceType: 'module'\n    }, options_.acornOptions);\n  } else if (options_.acornOptions || options_.addResult) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`');\n  }\n  return {\n    flow: {\n      [123]: {\n        name: 'mdxFlowExpression',\n        tokenize: tokenizeFlowExpression,\n        concrete: true\n      }\n    },\n    text: {\n      [123]: {\n        name: 'mdxTextExpression',\n        tokenize: tokenizeTextExpression\n      }\n    }\n  };\n\n  /**\n   * MDX expression (flow).\n   *\n   * ```markdown\n   * > | {Math.PI}\n   *     ^^^^^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeFlowExpression(effects, ok, nok) {\n    const self = this;\n    return start;\n\n    /**\n     * Start of an MDX expression (flow).\n     *\n     * ```markdown\n     * > | {Math.PI}\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // To do: in `markdown-rs`, constructs need to parse the indent themselves.\n      // This should also be introduced in `micromark-js`.\n\n      return before(code);\n    }\n\n    /**\n     * After optional whitespace, before expression.\n     *\n     * ```markdown\n     * > | {Math.PI}\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function before(code) {\n      return factoryMdxExpression.call(self, effects, after, 'mdxFlowExpression', 'mdxFlowExpressionMarker', 'mdxFlowExpressionChunk', acorn, acornOptions, addResult, spread, allowEmpty)(code);\n    }\n\n    /**\n     * After expression.\n     *\n     * ```markdown\n     * > | {Math.PI}\n     *              ^\n     * ```\n     *\n     * @type {State}\n     */\n    function after(code) {\n      return markdownSpace(code) ? factorySpace(effects, end, \"whitespace\")(code) : end(code);\n    }\n\n    /**\n     * After expression, after optional whitespace.\n     *\n     * ```markdown\n     * > | {Math.PI}␠␊\n     *               ^\n     * ```\n     *\n     * @type {State}\n     */\n    function end(code) {\n      // We want to allow tags directly after expressions.\n      //\n      // This case is useful:\n      //\n      // ```mdx\n      // <a>{b}</a>\n      // ```\n      //\n      // This case is not (very?) useful:\n      //\n      // ```mdx\n      // {a}<b/>\n      // ```\n      //\n      // …but it would be tougher than needed to disallow.\n      //\n      // To allow that, here we call the flow construct of\n      // `micromark-extension-mdx-jsx`, and there we call this one.\n      //\n      // It would introduce a cyclical interdependency if we test JSX and\n      // expressions here.\n      // Because the JSX extension already uses parts of this monorepo, we\n      // instead test it there.\n      const lessThanValue = self.parser.constructs.flow[60];\n      const constructs = Array.isArray(lessThanValue) ? lessThanValue : /* c8 ignore next 3 -- always a list when normalized. */\n      lessThanValue ? [lessThanValue] : [];\n      const jsxTag = constructs.find(function (d) {\n        return d.name === 'mdxJsxFlowTag';\n      });\n\n      /* c8 ignore next 3 -- this is tested in `micromark-extension-mdx-jsx` */\n      if (code === 60 && jsxTag) {\n        return effects.attempt(jsxTag, end, nok)(code);\n      }\n      return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n    }\n  }\n\n  /**\n   * MDX expression (text).\n   *\n   * ```markdown\n   * > | a {Math.PI} c.\n   *       ^^^^^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeTextExpression(effects, ok) {\n    const self = this;\n    return start;\n\n    /**\n     * Start of an MDX expression (text).\n     *\n     * ```markdown\n     * > | a {Math.PI} c.\n     *       ^\n     * ```\n     *\n     *\n     * @type {State}\n     */\n    function start(code) {\n      return factoryMdxExpression.call(self, effects, ok, 'mdxTextExpression', 'mdxTextExpressionMarker', 'mdxTextExpressionChunk', acorn, acornOptions, addResult, spread, allowEmpty, true)(code);\n    }\n  }\n}","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @import {Acorn, AcornOptions} from 'micromark-util-events-to-acorn'\n * @import {Code, Effects, State, TokenizeContext, TokenType} from 'micromark-util-types'\n */\n\nimport { cont as idCont, start as idStart } from 'estree-util-is-identifier-name';\nimport { factoryMdxExpression } from 'micromark-factory-mdx-expression';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace, unicodeWhitespace } from 'micromark-util-character';\nimport { VFileMessage } from 'vfile-message';\nconst trouble = 'https://github.com/micromark/micromark-extension-mdx-jsx';\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {Acorn | null | undefined} acorn\n * @param {AcornOptions | null | undefined} acornOptions\n * @param {boolean | null | undefined} addResult\n * @param {boolean | undefined} allowLazy\n * @param {TokenType} tagType\n * @param {TokenType} tagMarkerType\n * @param {TokenType} tagClosingMarkerType\n * @param {TokenType} tagSelfClosingMarker\n * @param {TokenType} tagNameType\n * @param {TokenType} tagNamePrimaryType\n * @param {TokenType} tagNameMemberMarkerType\n * @param {TokenType} tagNameMemberType\n * @param {TokenType} tagNamePrefixMarkerType\n * @param {TokenType} tagNameLocalType\n * @param {TokenType} tagExpressionAttributeType\n * @param {TokenType} tagExpressionAttributeMarkerType\n * @param {TokenType} tagExpressionAttributeValueType\n * @param {TokenType} tagAttributeType\n * @param {TokenType} tagAttributeNameType\n * @param {TokenType} tagAttributeNamePrimaryType\n * @param {TokenType} tagAttributeNamePrefixMarkerType\n * @param {TokenType} tagAttributeNameLocalType\n * @param {TokenType} tagAttributeInitializerMarkerType\n * @param {TokenType} tagAttributeValueLiteralType\n * @param {TokenType} tagAttributeValueLiteralMarkerType\n * @param {TokenType} tagAttributeValueLiteralValueType\n * @param {TokenType} tagAttributeValueExpressionType\n * @param {TokenType} tagAttributeValueExpressionMarkerType\n * @param {TokenType} tagAttributeValueExpressionValueType\n */\n// eslint-disable-next-line max-params\nexport function factoryTag(effects, ok, nok, acorn, acornOptions, addResult, allowLazy, tagType, tagMarkerType, tagClosingMarkerType, tagSelfClosingMarker, tagNameType, tagNamePrimaryType, tagNameMemberMarkerType, tagNameMemberType, tagNamePrefixMarkerType, tagNameLocalType, tagExpressionAttributeType, tagExpressionAttributeMarkerType, tagExpressionAttributeValueType, tagAttributeType, tagAttributeNameType, tagAttributeNamePrimaryType, tagAttributeNamePrefixMarkerType, tagAttributeNameLocalType, tagAttributeInitializerMarkerType, tagAttributeValueLiteralType, tagAttributeValueLiteralMarkerType, tagAttributeValueLiteralValueType, tagAttributeValueExpressionType, tagAttributeValueExpressionMarkerType, tagAttributeValueExpressionValueType) {\n  const self = this;\n  /** @type {State} */\n  let returnState;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  return start;\n\n  /**\n   * Start of MDX: JSX.\n   *\n   * ```markdown\n   * > | a <B /> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(tagType);\n    effects.enter(tagMarkerType);\n    effects.consume(code);\n    effects.exit(tagMarkerType);\n    return startAfter;\n  }\n\n  /**\n   * After `<`.\n   *\n   * ```markdown\n   * > | a <B /> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function startAfter(code) {\n    // Deviate from JSX, which allows arbitrary whitespace.\n    // See: <https://github.com/micromark/micromark-extension-mdx-jsx/issues/7>.\n    if (markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n\n    // Any other ES whitespace does not get this treatment.\n    returnState = nameBefore;\n    return esWhitespaceStart(code);\n  }\n\n  /**\n   * Before name, self slash, or end of tag for fragments.\n   *\n   * ```markdown\n   * > | a <B> c\n   *        ^\n   * > | a </B> c\n   *        ^\n   * > | a <> b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function nameBefore(code) {\n    // Closing tag.\n    if (code === 47) {\n      effects.enter(tagClosingMarkerType);\n      effects.consume(code);\n      effects.exit(tagClosingMarkerType);\n      returnState = closingTagNameBefore;\n      return esWhitespaceStart;\n    }\n\n    // Fragment opening tag.\n    if (code === 62) {\n      return tagEnd(code);\n    }\n\n    // Start of a name.\n    if (code !== null && code >= 0 && idStart(code)) {\n      effects.enter(tagNameType);\n      effects.enter(tagNamePrimaryType);\n      effects.consume(code);\n      return primaryName;\n    }\n    crash(code, 'before name', 'a character that can start a name, such as a letter, `$`, or `_`' + (code === 33 ? ' (note: to create a comment in MDX, use `{/* text */}`)' : ''));\n  }\n\n  /**\n   * Before name of closing tag or end of closing fragment tag.\n   *\n   * ```markdown\n   * > | a </> b\n   *         ^\n   * > | a </B> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function closingTagNameBefore(code) {\n    // Fragment closing tag.\n    if (code === 62) {\n      return tagEnd(code);\n    }\n\n    // Start of a closing tag name.\n    if (code !== null && code >= 0 && idStart(code)) {\n      effects.enter(tagNameType);\n      effects.enter(tagNamePrimaryType);\n      effects.consume(code);\n      return primaryName;\n    }\n    crash(code, 'before name', 'a character that can start a name, such as a letter, `$`, or `_`' + (code === 42 || code === 47 ? ' (note: JS comments in JSX tags are not supported in MDX)' : ''));\n  }\n\n  /**\n   * In primary name.\n   *\n   * ```markdown\n   * > | a <Bc> d\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function primaryName(code) {\n    // Continuation of name: remain.\n    if (code !== null && code >= 0 && idCont(code, {\n      jsx: true\n    })) {\n      effects.consume(code);\n      return primaryName;\n    }\n\n    // End of name.\n    if (code === 46 || code === 47 || code === 58 || code === 62 || code === 123 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      effects.exit(tagNamePrimaryType);\n      returnState = primaryNameAfter;\n      return esWhitespaceStart(code);\n    }\n    crash(code, 'in name', 'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' + (code === 64 ? ' (note: to create a link in MDX, use `[text](url)`)' : ''));\n  }\n\n  /**\n   * After primary name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *         ^\n   * > | a <b:c> d\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function primaryNameAfter(code) {\n    // Start of a member name.\n    if (code === 46) {\n      effects.enter(tagNameMemberMarkerType);\n      effects.consume(code);\n      effects.exit(tagNameMemberMarkerType);\n      returnState = memberNameBefore;\n      return esWhitespaceStart;\n    }\n\n    // Start of a local name.\n    if (code === 58) {\n      effects.enter(tagNamePrefixMarkerType);\n      effects.consume(code);\n      effects.exit(tagNamePrefixMarkerType);\n      returnState = localNameBefore;\n      return esWhitespaceStart;\n    }\n\n    // End of name.\n    if (code === 47 || code === 62 || code === 123 || code !== null && code >= 0 && idStart(code)) {\n      effects.exit(tagNameType);\n      return attributeBefore(code);\n    }\n    crash(code, 'after name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * Before member name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberNameBefore(code) {\n    // Start of a member name.\n    if (code !== null && code >= 0 && idStart(code)) {\n      effects.enter(tagNameMemberType);\n      effects.consume(code);\n      return memberName;\n    }\n    crash(code, 'before member name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * In member name.\n   *\n   * ```markdown\n   * > | a <b.cd> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberName(code) {\n    // Continuation of name: remain.\n    if (code !== null && code >= 0 && idCont(code, {\n      jsx: true\n    })) {\n      effects.consume(code);\n      return memberName;\n    }\n\n    // End of name.\n    // Note: no `:` allowed here.\n    if (code === 46 || code === 47 || code === 62 || code === 123 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      effects.exit(tagNameMemberType);\n      returnState = memberNameAfter;\n      return esWhitespaceStart(code);\n    }\n    crash(code, 'in member name', 'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' + (code === 64 ? ' (note: to create a link in MDX, use `[text](url)`)' : ''));\n  }\n\n  /**\n   * After member name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *           ^\n   * > | a <b.c.d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberNameAfter(code) {\n    // Start another member name.\n    if (code === 46) {\n      effects.enter(tagNameMemberMarkerType);\n      effects.consume(code);\n      effects.exit(tagNameMemberMarkerType);\n      returnState = memberNameBefore;\n      return esWhitespaceStart;\n    }\n\n    // End of name.\n    if (code === 47 || code === 62 || code === 123 || code !== null && code >= 0 && idStart(code)) {\n      effects.exit(tagNameType);\n      return attributeBefore(code);\n    }\n    crash(code, 'after member name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * Local member name.\n   *\n   * ```markdown\n   * > | a <b:c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localNameBefore(code) {\n    // Start of a local name.\n    if (code !== null && code >= 0 && idStart(code)) {\n      effects.enter(tagNameLocalType);\n      effects.consume(code);\n      return localName;\n    }\n    crash(code, 'before local name', 'a character that can start a name, such as a letter, `$`, or `_`' + (code === 43 || code !== null && code > 46 && code < 58 /* `/` - `9` */ ? ' (note: to create a link in MDX, use `[text](url)`)' : ''));\n  }\n\n  /**\n   * In local name.\n   *\n   * ```markdown\n   * > | a <b:cd> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localName(code) {\n    // Continuation of name: remain.\n    if (code !== null && code >= 0 && idCont(code, {\n      jsx: true\n    })) {\n      effects.consume(code);\n      return localName;\n    }\n\n    // End of local name (note that we don’t expect another colon, or a member).\n    if (code === 47 || code === 62 || code === 123 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      effects.exit(tagNameLocalType);\n      returnState = localNameAfter;\n      return esWhitespaceStart(code);\n    }\n    crash(code, 'in local name', 'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * After local name.\n   *\n   * This is like as `primary_name_after`, but we don’t expect colons or\n   * periods.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *           ^\n   * > | a <b.c.d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localNameAfter(code) {\n    // End of name.\n    if (code === 47 || code === 62 || code === 123 || code !== null && code >= 0 && idStart(code)) {\n      effects.exit(tagNameType);\n      return attributeBefore(code);\n    }\n    crash(code, 'after local name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * Before attribute.\n   *\n   * ```markdown\n   * > | a <b /> c\n   *          ^\n   * > | a <b > c\n   *          ^\n   * > | a <b {...c}> d\n   *          ^\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeBefore(code) {\n    // Self-closing.\n    if (code === 47) {\n      effects.enter(tagSelfClosingMarker);\n      effects.consume(code);\n      effects.exit(tagSelfClosingMarker);\n      returnState = selfClosing;\n      return esWhitespaceStart;\n    }\n\n    // End of tag.\n    if (code === 62) {\n      return tagEnd(code);\n    }\n\n    // Attribute expression.\n    if (code === 123) {\n      return factoryMdxExpression.call(self, effects, attributeExpressionAfter, tagExpressionAttributeType, tagExpressionAttributeMarkerType, tagExpressionAttributeValueType, acorn, acornOptions, addResult, true, false, allowLazy)(code);\n    }\n\n    // Start of an attribute name.\n    if (code !== null && code >= 0 && idStart(code)) {\n      effects.enter(tagAttributeType);\n      effects.enter(tagAttributeNameType);\n      effects.enter(tagAttributeNamePrimaryType);\n      effects.consume(code);\n      return attributePrimaryName;\n    }\n    crash(code, 'before attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * After attribute expression.\n   *\n   * ```markdown\n   * > | a <b {c} d/> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeExpressionAfter(code) {\n    returnState = attributeBefore;\n    return esWhitespaceStart(code);\n  }\n\n  /**\n   * In primary attribute name.\n   *\n   * ```markdown\n   * > | a <b cd/> e\n   *           ^\n   * > | a <b c:d> e\n   *           ^\n   * > | a <b c=d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributePrimaryName(code) {\n    // Continuation of name: remain.\n    if (code !== null && code >= 0 && idCont(code, {\n      jsx: true\n    })) {\n      effects.consume(code);\n      return attributePrimaryName;\n    }\n\n    // End of attribute name or tag.\n    if (code === 47 || code === 58 || code === 61 || code === 62 || code === 123 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      effects.exit(tagAttributeNamePrimaryType);\n      returnState = attributePrimaryNameAfter;\n      return esWhitespaceStart(code);\n    }\n    crash(code, 'in attribute name', 'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * After primary attribute name.\n   *\n   * ```markdown\n   * > | a <b c/> d\n   *           ^\n   * > | a <b c:d> e\n   *           ^\n   * > | a <b c=d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributePrimaryNameAfter(code) {\n    // Start of a local name.\n    if (code === 58) {\n      effects.enter(tagAttributeNamePrefixMarkerType);\n      effects.consume(code);\n      effects.exit(tagAttributeNamePrefixMarkerType);\n      returnState = attributeLocalNameBefore;\n      return esWhitespaceStart;\n    }\n\n    // Initializer: start of an attribute value.\n    if (code === 61) {\n      effects.exit(tagAttributeNameType);\n      effects.enter(tagAttributeInitializerMarkerType);\n      effects.consume(code);\n      effects.exit(tagAttributeInitializerMarkerType);\n      returnState = attributeValueBefore;\n      return esWhitespaceStart;\n    }\n\n    // End of tag / new attribute.\n    if (code === 47 || code === 62 || code === 123 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== null && code >= 0 && idStart(code)) {\n      effects.exit(tagAttributeNameType);\n      effects.exit(tagAttributeType);\n      returnState = attributeBefore;\n      return esWhitespaceStart(code);\n    }\n    crash(code, 'after attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag');\n  }\n\n  /**\n   * Before local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:d/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalNameBefore(code) {\n    // Start of a local name.\n    if (code !== null && code >= 0 && idStart(code)) {\n      effects.enter(tagAttributeNameLocalType);\n      effects.consume(code);\n      return attributeLocalName;\n    }\n    crash(code, 'before local attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag');\n  }\n\n  /**\n   * In local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:de/> f\n   *             ^\n   * > | a <b c:d=e/> f\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalName(code) {\n    // Continuation of name: remain.\n    if (code !== null && code >= 0 && idCont(code, {\n      jsx: true\n    })) {\n      effects.consume(code);\n      return attributeLocalName;\n    }\n\n    // End of local name (note that we don’t expect another colon).\n    if (code === 47 || code === 61 || code === 62 || code === 123 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      effects.exit(tagAttributeNameLocalType);\n      effects.exit(tagAttributeNameType);\n      returnState = attributeLocalNameAfter;\n      return esWhitespaceStart(code);\n    }\n    crash(code, 'in local attribute name', 'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * After local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:d/> f\n   *             ^\n   * > | a <b c:d=e/> f\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalNameAfter(code) {\n    // Start of an attribute value.\n    if (code === 61) {\n      effects.enter(tagAttributeInitializerMarkerType);\n      effects.consume(code);\n      effects.exit(tagAttributeInitializerMarkerType);\n      returnState = attributeValueBefore;\n      return esWhitespaceStart;\n    }\n\n    // End of name.\n    if (code === 47 || code === 62 || code === 123 || code !== null && code >= 0 && idStart(code)) {\n      effects.exit(tagAttributeType);\n      return attributeBefore(code);\n    }\n    crash(code, 'after local attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag');\n  }\n\n  /**\n   * After `=`, before value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *            ^\n   * > | a <b c={d}/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueBefore(code) {\n    // Start of double- or single quoted value.\n    if (code === 34 || code === 39) {\n      effects.enter(tagAttributeValueLiteralType);\n      effects.enter(tagAttributeValueLiteralMarkerType);\n      effects.consume(code);\n      effects.exit(tagAttributeValueLiteralMarkerType);\n      marker = code;\n      return attributeValueQuotedStart;\n    }\n\n    // Attribute value expression.\n    if (code === 123) {\n      return factoryMdxExpression.call(self, effects, attributeValueExpressionAfter, tagAttributeValueExpressionType, tagAttributeValueExpressionMarkerType, tagAttributeValueExpressionValueType, acorn, acornOptions, addResult, false, false, allowLazy)(code);\n    }\n    crash(code, 'before attribute value', 'a character that can start an attribute value, such as `\"`, `\\'`, or `{`' + (code === 60 ? ' (note: to use an element or fragment as a prop value in MDX, use `{<element />}`)' : ''));\n  }\n\n  /**\n   * After attribute value expression.\n   *\n   * ```markdown\n   * > | a <b c={d} e/> f\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueExpressionAfter(code) {\n    effects.exit(tagAttributeType);\n    returnState = attributeBefore;\n    return esWhitespaceStart(code);\n  }\n\n  /**\n   * Before quoted literal attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueQuotedStart(code) {\n    if (code === null) {\n      crash(code, 'in attribute value', 'a corresponding closing quote `' + String.fromCodePoint(marker) + '`');\n    }\n    if (code === marker) {\n      effects.enter(tagAttributeValueLiteralMarkerType);\n      effects.consume(code);\n      effects.exit(tagAttributeValueLiteralMarkerType);\n      effects.exit(tagAttributeValueLiteralType);\n      effects.exit(tagAttributeType);\n      marker = undefined;\n      returnState = attributeBefore;\n      return esWhitespaceStart;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = attributeValueQuotedStart;\n      return esWhitespaceStart(code);\n    }\n    effects.enter(tagAttributeValueLiteralValueType);\n    return attributeValueQuoted(code);\n  }\n\n  /**\n   * In quoted literal attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueQuoted(code) {\n    if (code === null || code === marker || markdownLineEnding(code)) {\n      effects.exit(tagAttributeValueLiteralValueType);\n      return attributeValueQuotedStart(code);\n    }\n    effects.consume(code);\n    return attributeValueQuoted;\n  }\n\n  /**\n   * After self-closing slash.\n   *\n   * ```markdown\n   * > | a <b/> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function selfClosing(code) {\n    if (code === 62) {\n      return tagEnd(code);\n    }\n    crash(code, 'after self-closing slash', '`>` to end the tag' + (code === 42 || code === 47 ? ' (note: JS comments in JSX tags are not supported in MDX)' : ''));\n  }\n\n  /**\n   * At final `>`.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagEnd(code) {\n    effects.enter(tagMarkerType);\n    effects.consume(code);\n    effects.exit(tagMarkerType);\n    effects.exit(tagType);\n    return ok;\n  }\n\n  /**\n   * Before optional ECMAScript whitespace.\n   *\n   * ```markdown\n   * > | a <a b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceStart(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return esWhitespaceEolAfter;\n    }\n    if (markdownSpace(code) || unicodeWhitespace(code)) {\n      effects.enter('esWhitespace');\n      return esWhitespaceInside(code);\n    }\n    return returnState(code);\n  }\n\n  /**\n   * In ECMAScript whitespace.\n   *\n   * ```markdown\n   * > | a <a  b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceInside(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('esWhitespace');\n      return esWhitespaceStart(code);\n    }\n    if (markdownSpace(code) || unicodeWhitespace(code)) {\n      effects.consume(code);\n      return esWhitespaceInside;\n    }\n    effects.exit('esWhitespace');\n    return returnState(code);\n  }\n\n  /**\n   * After eol in whitespace.\n   *\n   * ```markdown\n   * > | a <a\\nb> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceEolAfter(code) {\n    // Lazy continuation in a flow tag is a syntax error.\n    if (!allowLazy && self.parser.lazy[self.now().line]) {\n      const error = new VFileMessage('Unexpected lazy line in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc', self.now(), 'micromark-extension-mdx-jsx:unexpected-lazy');\n      error.url = trouble + '#unexpected-lazy-line-in-container-expected-line-to-be';\n      throw error;\n    }\n    return esWhitespaceStart(code);\n  }\n\n  /**\n   * Crash at a nonconforming character.\n   *\n   * @param {Code} code\n   * @param {string} at\n   * @param {string} expect\n   */\n  function crash(code, at, expect) {\n    const error = new VFileMessage('Unexpected ' + (code === null ? 'end of file' : 'character `' + (code === 96 ? '` ` `' : String.fromCodePoint(code)) + '` (' + serializeCharCode(code) + ')') + ' ' + at + ', expected ' + expect, self.now(), 'micromark-extension-mdx-jsx:unexpected-' + (code === null ? 'eof' : 'character'));\n    error.url = trouble + (code === null ? '#unexpected-end-of-file-at-expected-expect' : '#unexpected-character-at-expected-expect');\n    throw error;\n  }\n}\n\n/**\n * @param {NonNullable<Code>} code\n * @returns {string}\n */\nfunction serializeCharCode(code) {\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}","/**\n * @import {Options} from 'micromark-extension-mdx-jsx'\n * @import {Acorn} from 'micromark-util-events-to-acorn'\n * @import {Construct, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factoryTag } from './factory-tag.js';\n\n/**\n * Parse JSX (text).\n *\n * @param {Acorn | undefined} acorn\n *   Acorn parser to use (optional).\n * @param {Options} options\n *   Configuration.\n * @returns {Construct}\n *   Construct.\n */\nexport function jsxText(acorn, options) {\n  return {\n    name: 'mdxJsxTextTag',\n    tokenize: tokenizeJsxText\n  };\n\n  /**\n   * MDX JSX (text).\n   *\n   * ```markdown\n   * > | a <b />.\n   *       ^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeJsxText(effects, ok, nok) {\n    return factoryTag.call(this, effects, ok, nok, acorn, options.acornOptions, options.addResult, true, 'mdxJsxTextTag', 'mdxJsxTextTagMarker', 'mdxJsxTextTagClosingMarker', 'mdxJsxTextTagSelfClosingMarker', 'mdxJsxTextTagName', 'mdxJsxTextTagNamePrimary', 'mdxJsxTextTagNameMemberMarker', 'mdxJsxTextTagNameMember', 'mdxJsxTextTagNamePrefixMarker', 'mdxJsxTextTagNameLocal', 'mdxJsxTextTagExpressionAttribute', 'mdxJsxTextTagExpressionAttributeMarker', 'mdxJsxTextTagExpressionAttributeValue', 'mdxJsxTextTagAttribute', 'mdxJsxTextTagAttributeName', 'mdxJsxTextTagAttributeNamePrimary', 'mdxJsxTextTagAttributeNamePrefixMarker', 'mdxJsxTextTagAttributeNameLocal', 'mdxJsxTextTagAttributeInitializerMarker', 'mdxJsxTextTagAttributeValueLiteral', 'mdxJsxTextTagAttributeValueLiteralMarker', 'mdxJsxTextTagAttributeValueLiteralValue', 'mdxJsxTextTagAttributeValueExpression', 'mdxJsxTextTagAttributeValueExpressionMarker', 'mdxJsxTextTagAttributeValueExpressionValue');\n  }\n}","/**\n * @import {Options} from 'micromark-extension-mdx-jsx'\n * @import {Acorn} from 'micromark-util-events-to-acorn'\n * @import {Construct, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTag } from './factory-tag.js';\n\n/**\n * Parse JSX (flow).\n *\n * @param {Acorn | undefined} acorn\n *   Acorn parser to use (optional).\n * @param {Options} options\n *   Configuration.\n * @returns {Construct}\n *   Construct.\n */\nexport function jsxFlow(acorn, options) {\n  return {\n    name: 'mdxJsxFlowTag',\n    tokenize: tokenizeJsxFlow,\n    concrete: true\n  };\n\n  /**\n   * MDX JSX (flow).\n   *\n   * ```markdown\n   * > | <A />\n   *     ^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeJsxFlow(effects, ok, nok) {\n    const self = this;\n    return start;\n\n    /**\n     * Start of MDX: JSX (flow).\n     *\n     * ```markdown\n     * > | <A />\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // To do: in `markdown-rs`, constructs need to parse the indent themselves.\n      // This should also be introduced in `micromark-js`.\n\n      return before(code);\n    }\n\n    /**\n     * After optional whitespace, before of MDX JSX (flow).\n     *\n     * ```markdown\n     * > | <A />\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function before(code) {\n      return factoryTag.call(self, effects, after, nok, acorn, options.acornOptions, options.addResult, false, 'mdxJsxFlowTag', 'mdxJsxFlowTagMarker', 'mdxJsxFlowTagClosingMarker', 'mdxJsxFlowTagSelfClosingMarker', 'mdxJsxFlowTagName', 'mdxJsxFlowTagNamePrimary', 'mdxJsxFlowTagNameMemberMarker', 'mdxJsxFlowTagNameMember', 'mdxJsxFlowTagNamePrefixMarker', 'mdxJsxFlowTagNameLocal', 'mdxJsxFlowTagExpressionAttribute', 'mdxJsxFlowTagExpressionAttributeMarker', 'mdxJsxFlowTagExpressionAttributeValue', 'mdxJsxFlowTagAttribute', 'mdxJsxFlowTagAttributeName', 'mdxJsxFlowTagAttributeNamePrimary', 'mdxJsxFlowTagAttributeNamePrefixMarker', 'mdxJsxFlowTagAttributeNameLocal', 'mdxJsxFlowTagAttributeInitializerMarker', 'mdxJsxFlowTagAttributeValueLiteral', 'mdxJsxFlowTagAttributeValueLiteralMarker', 'mdxJsxFlowTagAttributeValueLiteralValue', 'mdxJsxFlowTagAttributeValueExpression', 'mdxJsxFlowTagAttributeValueExpressionMarker', 'mdxJsxFlowTagAttributeValueExpressionValue')(code);\n    }\n\n    /**\n     * After an MDX JSX (flow) tag.\n     *\n     * ```markdown\n     * > | <A>\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function after(code) {\n      return markdownSpace(code) ? factorySpace(effects, end, \"whitespace\")(code) : end(code);\n    }\n\n    /**\n     * After an MDX JSX (flow) tag, after optional whitespace.\n     *\n     * ```markdown\n     * > | <A> <B>\n     *         ^\n     * ```\n     *\n     * @type {State}\n     */\n    function end(code) {\n      // We want to allow expressions directly after tags.\n      // See <https://github.com/micromark/micromark-extension-mdx-expression/blob/d5d92b9/packages/micromark-extension-mdx-expression/dev/lib/syntax.js#L183>\n      // for more info.\n      const leftBraceValue = self.parser.constructs.flow[123];\n      /* c8 ignore next 5 -- always a list when normalized. */\n      const constructs = Array.isArray(leftBraceValue) ? leftBraceValue : leftBraceValue ? [leftBraceValue] : [];\n      const expression = constructs.find(d => d.name === 'mdxFlowExpression');\n\n      // Another tag.\n      return code === 60 ?\n      // We can’t just say: fine. Lines of blocks have to be parsed until an eol/eof.\n      start(code) : code === 123 && expression ? effects.attempt(expression, end, nok)(code) : code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n    }\n  }\n}","/**\n * @import {Options} from 'micromark-extension-mdx-jsx'\n * @import {AcornOptions} from 'micromark-util-events-to-acorn'\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { jsxText } from './jsx-text.js';\nimport { jsxFlow } from './jsx-flow.js';\n\n/**\n * Create an extension for `micromark` to enable MDX JSX syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   JSX syntax.\n */\nexport function mdxJsx(options) {\n  const settings = options || {};\n  const acorn = settings.acorn;\n  /** @type {AcornOptions | undefined} */\n  let acornOptions;\n  if (acorn) {\n    if (!acorn.parse || !acorn.parseExpressionAt) {\n      throw new Error('Expected a proper `acorn` instance passed in as `options.acorn`');\n    }\n    acornOptions = Object.assign({\n      ecmaVersion: 2024,\n      sourceType: 'module'\n    }, settings.acornOptions, {\n      locations: true\n    });\n  } else if (settings.acornOptions || settings.addResult) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`');\n  }\n  return {\n    flow: {\n      [60]: jsxFlow(acorn || undefined, {\n        acornOptions,\n        addResult: settings.addResult || undefined\n      })\n    },\n    text: {\n      [60]: jsxText(acorn || undefined, {\n        acornOptions,\n        addResult: settings.addResult || undefined\n      })\n    }\n  };\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\n/**\n * Create an extension for `micromark` to disable some CommonMark syntax (code\n * (indented), autolinks, and HTML (flow and text)) for MDX.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to disable\n *   some CommonMark syntax for MDX.\n */\nexport function mdxMd() {\n  return {\n    disable: {null: ['autolink', 'codeIndented', 'htmlFlow', 'htmlText']}\n  }\n}\n","/**\n * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn\n * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef Options\n *   Configuration (required).\n * @property {Acorn} acorn\n *   Acorn parser to use (required).\n * @property {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for acorn (default: `{ecmaVersion: 2024, locations: true,\n *   sourceType: 'module'}`); all fields except `locations` can be set.\n * @property {boolean | null | undefined} [addResult=false]\n *   Whether to add `estree` fields to tokens with results from acorn\n *   (default: `false`).\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { asciiAlpha, markdownLineEnding } from 'micromark-util-character';\nimport { eventsToAcorn } from 'micromark-util-events-to-acorn';\nimport { positionFromEstree } from 'unist-util-position-from-estree';\nimport { VFileMessage } from 'vfile-message';\nconst blankLineBefore = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n};\nconst trouble = 'https://github.com/micromark/micromark-extension-mdxjs-esm';\nconst allowedAcornTypes = new Set(['ExportAllDeclaration', 'ExportDefaultDeclaration', 'ExportNamedDeclaration', 'ImportDeclaration']);\n\n/**\n * Create an extension for `micromark` to enable MDX ESM syntax.\n *\n * @param {Options} options\n *   Configuration (required).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   ESM syntax.\n */\nexport function mdxjsEsm(options) {\n  const exportImportConstruct = {\n    tokenize: tokenizeExportImport,\n    concrete: true\n  };\n  if (!options || !options.acorn || !options.acorn.parse) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`');\n  }\n  const acorn = options.acorn;\n  const acornOptions = Object.assign({\n    ecmaVersion: 2024,\n    sourceType: 'module'\n  }, options.acornOptions, {\n    locations: true\n  });\n  return {\n    flow: {\n      [101]: exportImportConstruct,\n      [105]: exportImportConstruct\n    }\n  };\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeExportImport(effects, ok, nok) {\n    const self = this;\n    const definedModuleSpecifiers = self.parser.definedModuleSpecifiers || (self.parser.definedModuleSpecifiers = []);\n    const eventStart = this.events.length + 1; // Add the main `mdxjsEsm` token\n    let buffer = '';\n    return self.interrupt ? nok : start;\n\n    /**\n     * Start of MDX ESM.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Only at the start of a line, not at whitespace or in a container.\n      if (self.now().column > 1) return nok(code);\n      effects.enter('mdxjsEsm');\n      effects.enter('mdxjsEsmData');\n      effects.consume(code);\n      // eslint-disable-next-line unicorn/prefer-code-point\n      buffer += String.fromCharCode(code);\n      return word;\n    }\n\n    /**\n     * In keyword.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *     ^^^^^^\n     * ```\n     *\n     * @type {State}\n     */\n    function word(code) {\n      if (asciiAlpha(code)) {\n        effects.consume(code);\n        // @ts-expect-error: definitely a number.\n        // eslint-disable-next-line unicorn/prefer-code-point\n        buffer += String.fromCharCode(code);\n        return word;\n      }\n      if ((buffer === 'import' || buffer === 'export') && code === 32) {\n        effects.consume(code);\n        return inside;\n      }\n      return nok(code);\n    }\n\n    /**\n     * In data.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *           ^\n     * ```\n     *\n     * @type {State}\n     */\n    function inside(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('mdxjsEsmData');\n        return lineStart(code);\n      }\n      effects.consume(code);\n      return inside;\n    }\n\n    /**\n     * At line ending.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *                      ^\n     *   | export {a}\n     * ```\n     *\n     * @type {State}\n     */\n    function lineStart(code) {\n      if (code === null) {\n        return atEnd(code);\n      }\n      if (markdownLineEnding(code)) {\n        return effects.check(blankLineBefore, atEnd, continuationStart)(code);\n      }\n      effects.enter('mdxjsEsmData');\n      return inside(code);\n    }\n\n    /**\n     * At line ending that continues.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *                      ^\n     *   | export {a}\n     * ```\n     *\n     * @type {State}\n     */\n    function continuationStart(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return lineStart;\n    }\n\n    /**\n     * At end of line (blank or eof).\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *                      ^\n     * ```\n     *\n     * @type {State}\n     */\n    function atEnd(code) {\n      const result = eventsToAcorn(self.events.slice(eventStart), {\n        acorn,\n        acornOptions,\n        tokenTypes: ['mdxjsEsmData'],\n        prefix: definedModuleSpecifiers.length > 0 ? 'var ' + definedModuleSpecifiers.join(',') + '\\n' : ''\n      });\n      if (result.error) {\n        // There’s an error, which could be solved with more content, and there\n        // is more content.\n        if (code !== null && result.swallow) {\n          return continuationStart(code);\n        }\n        const error = new VFileMessage('Could not parse import/exports with acorn', {\n          cause: result.error,\n          place: {\n            line: result.error.loc.line,\n            column: result.error.loc.column + 1,\n            offset: result.error.pos\n          },\n          ruleId: 'acorn',\n          source: 'micromark-extension-mdxjs-esm'\n        });\n        error.url = trouble + '#could-not-parse-importexports-with-acorn';\n        throw error;\n      }\n      // Remove the `VariableDeclaration`.\n      if (definedModuleSpecifiers.length > 0) {\n        const declaration = result.estree.body.shift();\n      }\n      let index = -1;\n      while (++index < result.estree.body.length) {\n        const node = result.estree.body[index];\n        if (!allowedAcornTypes.has(node.type)) {\n          const error = new VFileMessage('Unexpected `' + node.type + '` in code: only import/exports are supported', {\n            place: positionFromEstree(node),\n            ruleId: 'non-esm',\n            source: 'micromark-extension-mdxjs-esm'\n          });\n          error.url = trouble + '#unexpected-type-in-code-only-importexports-are-supported';\n          throw error;\n        }\n\n        // Otherwise, when we’re not interrupting (hacky, because `interrupt` is\n        // used to parse containers and “sniff” if this is ESM), collect all the\n        // local values that are imported.\n        if (node.type === 'ImportDeclaration' && !self.interrupt) {\n          let index = -1;\n          while (++index < node.specifiers.length) {\n            const specifier = node.specifiers[index];\n            definedModuleSpecifiers.push(specifier.local.name);\n          }\n        }\n      }\n      Object.assign(effects.exit('mdxjsEsm'), options.addResult ? {\n        estree: result.estree\n      } : undefined);\n      return ok(code);\n    }\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {ToMarkdownOptions} from 'mdast-util-mdx'\n * @import {Options as MicromarkOptions} from 'micromark-extension-mdxjs'\n * @import {Processor} from 'unified'\n */\n\n/**\n * @typedef {MicromarkOptions & ToMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {mdxFromMarkdown, mdxToMarkdown} from 'mdast-util-mdx'\nimport {mdxjs} from 'micromark-extension-mdxjs'\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {}\n\n/**\n * Add support for MDX (JSX: `<Video id={123} />`, export/imports: `export {x}\n * from 'y'`; and expressions: `{1 + 1}`).\n *\n * @this {Processor}\n *   Processor.\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkMdx(options) {\n  const self = this\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(mdxjs(settings))\n  fromMarkdownExtensions.push(mdxFromMarkdown())\n  toMarkdownExtensions.push(mdxToMarkdown(settings))\n}\n","// @ts-expect-error\nimport formatter from 'format'\n\nexport const fault = Object.assign(create(Error), {\n  eval: create(EvalError),\n  range: create(RangeError),\n  reference: create(ReferenceError),\n  syntax: create(SyntaxError),\n  type: create(TypeError),\n  uri: create(URIError)\n})\n\n/**\n * Create a new `EConstructor`, with the formatted `format` as a first argument.\n *\n * @template {Error} Fault\n * @template {new (reason: string) => Fault} Class\n * @param {Class} Constructor\n */\nexport function create(Constructor) {\n  /** @type {string} */\n  // @ts-expect-error\n  FormattedError.displayName = Constructor.displayName || Constructor.name\n\n  return FormattedError\n\n  /**\n   * Create an error with a printf-like formatted message.\n   *\n   * @param {string|null} [format]\n   *   Template string.\n   * @param {...unknown} values\n   *   Values to render in `format`.\n   * @returns {Fault}\n   */\n  function FormattedError(format, ...values) {\n    /** @type {string} */\n    const reason = format ? formatter(format, ...values) : format\n    return new Constructor(reason)\n  }\n}\n","/**\n * @typedef {'toml' | 'yaml'} Preset\n *   Known name of a frontmatter style.\n *\n * @typedef Info\n *   Sequence.\n *\n *   Depending on how this structure is used, it reflects a marker or a fence.\n * @property {string} close\n *   Closing.\n * @property {string} open\n *   Opening.\n *\n * @typedef MatterProps\n *   Fields describing a kind of matter.\n * @property {string} type\n *   Node type to tokenize as.\n * @property {boolean | null | undefined} [anywhere=false]\n *   Whether matter can be found anywhere in the document, normally, only matter\n *   at the start of the document is recognized.\n *\n *   > 👉 **Note**: using this is a terrible idea.\n *   > It’s called frontmatter, not matter-in-the-middle or so.\n *   > This makes your markdown less portable.\n *\n * @typedef MarkerProps\n *   Marker configuration.\n * @property {Info | string} marker\n *   Character repeated 3 times, used as complete fences.\n *\n *   For example the character `'-'` will result in `'---'` being used as the\n *   fence\n *   Pass `open` and `close` to specify different characters for opening and\n *   closing fences.\n * @property {never} [fence]\n *   If `marker` is set, `fence` must not be set.\n *\n * @typedef FenceProps\n *   Fence configuration.\n * @property {Info | string} fence\n *   Complete fences.\n *\n *   This can be used when fences contain different characters or lengths\n *   other than 3.\n *   Pass `open` and `close` to interface to specify different characters for opening and\n *   closing fences.\n * @property {never} [marker]\n *   If `fence` is set, `marker` must not be set.\n *\n * @typedef {(MatterProps & FenceProps) | (MatterProps & MarkerProps)} Matter\n *   Fields describing a kind of matter.\n *\n *   > 👉 **Note**: using `anywhere` is a terrible idea.\n *   > It’s called frontmatter, not matter-in-the-middle or so.\n *   > This makes your markdown less portable.\n *\n *   > 👉 **Note**: `marker` and `fence` are mutually exclusive.\n *   > If `marker` is set, `fence` must not be set, and vice versa.\n *\n * @typedef {Matter | Preset | Array<Matter | Preset>} Options\n *   Configuration.\n */\n\nimport {fault} from 'fault'\nconst own = {}.hasOwnProperty\nconst markers = {\n  yaml: '-',\n  toml: '+'\n}\n\n/**\n * Simplify options by normalizing them to an array of matters.\n *\n * @param {Options | null | undefined} [options='yaml']\n *   Configuration (default: `'yaml'`).\n * @returns {Array<Matter>}\n *   List of matters.\n */\nexport function toMatters(options) {\n  /** @type {Array<Matter>} */\n  const result = []\n  let index = -1\n\n  /** @type {Array<Matter | Preset>} */\n  const presetsOrMatters = Array.isArray(options)\n    ? options\n    : options\n    ? [options]\n    : ['yaml']\n  while (++index < presetsOrMatters.length) {\n    result[index] = matter(presetsOrMatters[index])\n  }\n  return result\n}\n\n/**\n * Simplify an option.\n *\n * @param {Matter | Preset} option\n *   Configuration.\n * @returns {Matter}\n *   Matter.\n */\nfunction matter(option) {\n  let result = option\n  if (typeof result === 'string') {\n    if (!own.call(markers, result)) {\n      throw fault('Missing matter definition for `%s`', result)\n    }\n    result = {\n      type: result,\n      marker: markers[result]\n    }\n  } else if (typeof result !== 'object') {\n    throw fault('Expected matter to be an object, not `%j`', result)\n  }\n  if (!own.call(result, 'type')) {\n    throw fault('Missing `type` in matter `%j`', result)\n  }\n  if (!own.call(result, 'fence') && !own.call(result, 'marker')) {\n    throw fault('Missing `marker` or `fence` in matter `%j`', result)\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef {import('./to-matters.js').Info} Info\n * @typedef {import('./to-matters.js').Matter} Matter\n * @typedef {import('./to-matters.js').Options} Options\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {toMatters} from './to-matters.js'\n\n/**\n * Create an extension for `micromark` to enable frontmatter syntax.\n *\n * @param {Options | null | undefined} [options='yaml']\n *   Configuration (default: `'yaml'`).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable frontmatter syntax.\n */\nexport function frontmatter(options) {\n  const matters = toMatters(options)\n  /** @type {ConstructRecord} */\n  const flow = {}\n  let index = -1\n  while (++index < matters.length) {\n    const matter = matters[index]\n    const code = fence(matter, 'open').charCodeAt(0)\n    const construct = createConstruct(matter)\n    const existing = flow[code]\n    if (Array.isArray(existing)) {\n      existing.push(construct)\n    } else {\n      // Never a single object, always an array.\n      flow[code] = [construct]\n    }\n  }\n  return {\n    flow\n  }\n}\n\n/**\n * @param {Matter} matter\n * @returns {Construct}\n */\nfunction createConstruct(matter) {\n  const anywhere = matter.anywhere\n  const frontmatterType = /** @type {TokenType} */ matter.type\n  const fenceType = /** @type {TokenType} */ frontmatterType + 'Fence'\n  const sequenceType = /** @type {TokenType} */ fenceType + 'Sequence'\n  const valueType = /** @type {TokenType} */ frontmatterType + 'Value'\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n\n  /**\n   * Fence to look for.\n   *\n   * @type {string}\n   */\n  let buffer\n  let bufferIndex = 0\n  return {\n    tokenize: tokenizeFrontmatter,\n    concrete: true\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeFrontmatter(effects, ok, nok) {\n    const self = this\n    return start\n\n    /**\n     * Start of frontmatter.\n     *\n     * ```markdown\n     * > | ---\n     *     ^\n     *   | title: \"Venus\"\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      const position = self.now()\n      if (\n        // Indent not allowed.\n        position.column === 1 &&\n        // Normally, only allowed in first line.\n        (position.line === 1 || anywhere)\n      ) {\n        buffer = fence(matter, 'open')\n        bufferIndex = 0\n        if (code === buffer.charCodeAt(bufferIndex)) {\n          effects.enter(frontmatterType)\n          effects.enter(fenceType)\n          effects.enter(sequenceType)\n          return openSequence(code)\n        }\n      }\n      return nok(code)\n    }\n\n    /**\n     * In open sequence.\n     *\n     * ```markdown\n     * > | ---\n     *     ^\n     *   | title: \"Venus\"\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function openSequence(code) {\n      if (bufferIndex === buffer.length) {\n        effects.exit(sequenceType)\n        if (markdownSpace(code)) {\n          effects.enter('whitespace')\n          return openSequenceWhitespace(code)\n        }\n        return openAfter(code)\n      }\n      if (code === buffer.charCodeAt(bufferIndex++)) {\n        effects.consume(code)\n        return openSequence\n      }\n      return nok(code)\n    }\n\n    /**\n     * In whitespace after open sequence.\n     *\n     * ```markdown\n     * > | ---␠\n     *        ^\n     *   | title: \"Venus\"\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function openSequenceWhitespace(code) {\n      if (markdownSpace(code)) {\n        effects.consume(code)\n        return openSequenceWhitespace\n      }\n      effects.exit('whitespace')\n      return openAfter(code)\n    }\n\n    /**\n     * After open sequence.\n     *\n     * ```markdown\n     * > | ---\n     *        ^\n     *   | title: \"Venus\"\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function openAfter(code) {\n      if (markdownLineEnding(code)) {\n        effects.exit(fenceType)\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        // Get ready for closing fence.\n        buffer = fence(matter, 'close')\n        bufferIndex = 0\n        return effects.attempt(closingFenceConstruct, after, contentStart)\n      }\n\n      // EOF is not okay.\n      return nok(code)\n    }\n\n    /**\n     * Start of content chunk.\n     *\n     * ```markdown\n     *   | ---\n     * > | title: \"Venus\"\n     *     ^\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function contentStart(code) {\n      if (code === null || markdownLineEnding(code)) {\n        return contentEnd(code)\n      }\n      effects.enter(valueType)\n      return contentInside(code)\n    }\n\n    /**\n     * In content chunk.\n     *\n     * ```markdown\n     *   | ---\n     * > | title: \"Venus\"\n     *     ^\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function contentInside(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(valueType)\n        return contentEnd(code)\n      }\n      effects.consume(code)\n      return contentInside\n    }\n\n    /**\n     * End of content chunk.\n     *\n     * ```markdown\n     *   | ---\n     * > | title: \"Venus\"\n     *                   ^\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function contentEnd(code) {\n      // Require a closing fence.\n      if (code === null) {\n        return nok(code)\n      }\n\n      // Can only be an eol.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return effects.attempt(closingFenceConstruct, after, contentStart)\n    }\n\n    /**\n     * After frontmatter.\n     *\n     * ```markdown\n     *   | ---\n     *   | title: \"Venus\"\n     * > | ---\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function after(code) {\n      // `code` must be eol/eof.\n      effects.exit(frontmatterType)\n      return ok(code)\n    }\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeClosingFence(effects, ok, nok) {\n    let bufferIndex = 0\n    return closeStart\n\n    /**\n     * Start of close sequence.\n     *\n     * ```markdown\n     *   | ---\n     *   | title: \"Venus\"\n     * > | ---\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function closeStart(code) {\n      if (code === buffer.charCodeAt(bufferIndex)) {\n        effects.enter(fenceType)\n        effects.enter(sequenceType)\n        return closeSequence(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In close sequence.\n     *\n     * ```markdown\n     *   | ---\n     *   | title: \"Venus\"\n     * > | ---\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function closeSequence(code) {\n      if (bufferIndex === buffer.length) {\n        effects.exit(sequenceType)\n        if (markdownSpace(code)) {\n          effects.enter('whitespace')\n          return closeSequenceWhitespace(code)\n        }\n        return closeAfter(code)\n      }\n      if (code === buffer.charCodeAt(bufferIndex++)) {\n        effects.consume(code)\n        return closeSequence\n      }\n      return nok(code)\n    }\n\n    /**\n     * In whitespace after close sequence.\n     *\n     * ```markdown\n     * > | ---\n     *   | title: \"Venus\"\n     *   | ---␠\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function closeSequenceWhitespace(code) {\n      if (markdownSpace(code)) {\n        effects.consume(code)\n        return closeSequenceWhitespace\n      }\n      effects.exit('whitespace')\n      return closeAfter(code)\n    }\n\n    /**\n     * After close sequence.\n     *\n     * ```markdown\n     *   | ---\n     *   | title: \"Venus\"\n     * > | ---\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function closeAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(fenceType)\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @param {Matter} matter\n * @param {'close' | 'open'} prop\n * @returns {string}\n */\nfunction fence(matter, prop) {\n  return matter.marker\n    ? pick(matter.marker, prop).repeat(3)\n    : // @ts-expect-error: They’re mutually exclusive.\n      pick(matter.fence, prop)\n}\n\n/**\n * @param {Info | string} schema\n * @param {'close' | 'open'} prop\n * @returns {string}\n */\nfunction pick(schema, prop) {\n  return typeof schema === 'string' ? schema : schema[prop]\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Literal} Literal\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('micromark-extension-frontmatter').Info} Info\n * @typedef {import('micromark-extension-frontmatter').Matter} Matter\n * @typedef {import('micromark-extension-frontmatter').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {toMatters} from 'micromark-extension-frontmatter'\nimport escapeStringRegexp from 'escape-string-regexp'\n\n/**\n * Create an extension for `mdast-util-from-markdown`.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function frontmatterFromMarkdown(options) {\n  const matters = toMatters(options)\n  /** @type {FromMarkdownExtension['enter']} */\n  const enter = {}\n  /** @type {FromMarkdownExtension['exit']} */\n  const exit = {}\n  let index = -1\n\n  while (++index < matters.length) {\n    const matter = matters[index]\n    enter[matter.type] = opener(matter)\n    exit[matter.type] = close\n    exit[matter.type + 'Value'] = value\n  }\n\n  return {enter, exit}\n}\n\n/**\n * @param {Matter} matter\n * @returns {FromMarkdownHandle} enter\n */\nfunction opener(matter) {\n  return open\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function open(token) {\n    // @ts-expect-error: custom.\n    this.enter({type: matter.type, value: ''}, token)\n    this.buffer()\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction close(token) {\n  const data = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert('value' in node)\n  this.exit(token)\n  // Remove the initial and final eol.\n  node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction value(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown`.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function frontmatterToMarkdown(options) {\n  /** @type {ToMarkdownExtension['unsafe']} */\n  const unsafe = []\n  /** @type {ToMarkdownExtension['handlers']} */\n  const handlers = {}\n  const matters = toMatters(options)\n  let index = -1\n\n  while (++index < matters.length) {\n    const matter = matters[index]\n\n    // @ts-expect-error: this can add custom frontmatter nodes.\n    // Typing those is the responsibility of the end user.\n    handlers[matter.type] = handler(matter)\n\n    const open = fence(matter, 'open')\n\n    unsafe.push({\n      atBreak: true,\n      character: open.charAt(0),\n      after: escapeStringRegexp(open.charAt(1))\n    })\n  }\n\n  return {unsafe, handlers}\n}\n\n/**\n * Create a handle that can serialize a frontmatter node as markdown.\n *\n * @param {Matter} matter\n *   Structure.\n * @returns {(node: Literal) => string} enter\n *   Handler.\n */\nfunction handler(matter) {\n  const open = fence(matter, 'open')\n  const close = fence(matter, 'close')\n\n  return handle\n\n  /**\n   * Serialize a frontmatter node as markdown.\n   *\n   * @param {Literal} node\n   *   Node to serialize.\n   * @returns {string}\n   *   Serialized node.\n   */\n  function handle(node) {\n    return open + (node.value ? '\\n' + node.value : '') + '\\n' + close\n  }\n}\n\n/**\n * Get an `open` or `close` fence.\n *\n * @param {Matter} matter\n *   Structure.\n * @param {'close' | 'open'} prop\n *   Field to get.\n * @returns {string}\n *   Fence.\n */\nfunction fence(matter, prop) {\n  return matter.marker\n    ? pick(matter.marker, prop).repeat(3)\n    : // @ts-expect-error: They’re mutually exclusive.\n      pick(matter.fence, prop)\n}\n\n/**\n * Take `open` or `close` fields when schema is an info object, or use the\n * given value when it is a string.\n *\n * @param {Info | string} schema\n *   Info object or value.\n * @param {'close' | 'open'} prop\n *   Field to get.\n * @returns {string}\n *   Thing to use for the opening or closing.\n */\nfunction pick(schema, prop) {\n  return typeof schema === 'string' ? schema : schema[prop]\n}\n","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-frontmatter').Options} Options\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\nimport {\n  frontmatterFromMarkdown,\n  frontmatterToMarkdown\n} from 'mdast-util-frontmatter'\nimport {frontmatter} from 'micromark-extension-frontmatter'\n\n/** @type {Options} */\nconst emptyOptions = 'yaml'\n\n/**\n * Add support for frontmatter.\n *\n * ###### Notes\n *\n * Doesn’t parse the data inside them: create your own plugin to do that.\n *\n * @param {Options | null | undefined} [options='yaml']\n *   Configuration (default: `'yaml'`).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkFrontmatter(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(frontmatter(settings))\n  fromMarkdownExtensions.push(frontmatterFromMarkdown(settings))\n  toMarkdownExtensions.push(frontmatterToMarkdown(settings))\n}\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n","/**\n * @import {Options, State} from './types.js'\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {State} base\n * @param {Options} extension\n * @returns {State}\n */\nexport function configure(base, extension) {\n  let index = -1\n  /** @type {keyof Options} */\n  let key\n\n  // First do subextensions.\n  if (extension.extensions) {\n    while (++index < extension.extensions.length) {\n      configure(base, extension.extensions[index])\n    }\n  }\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'extensions': {\n          // Empty.\n          break\n        }\n\n        /* c8 ignore next 4 */\n        case 'unsafe': {\n          list(base[key], extension[key])\n          break\n        }\n\n        case 'join': {\n          list(base[key], extension[key])\n          break\n        }\n\n        case 'handlers': {\n          map(base[key], extension[key])\n          break\n        }\n\n        default: {\n          // @ts-expect-error: matches.\n          base.options[key] = extension[key]\n        }\n      }\n    }\n  }\n\n  return base\n}\n\n/**\n * @template T\n * @param {Array<T>} left\n * @param {Array<T> | null | undefined} right\n */\nfunction list(left, right) {\n  if (right) {\n    left.push(...right)\n  }\n}\n\n/**\n * @template T\n * @param {Record<string, T>} left\n * @param {Record<string, T> | null | undefined} right\n */\nfunction map(left, right) {\n  if (right) {\n    Object.assign(left, right)\n  }\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return '\\u001B[33m' + d + '\\u001B[39m'\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Join} from 'mdast-util-to-markdown'\n */\n\nimport {formatCodeAsIndented} from './util/format-code-as-indented.js'\nimport {formatHeadingAsSetext} from './util/format-heading-as-setext.js'\n\n/** @type {Array<Join>} */\nexport const join = [joinDefaults]\n\n/** @type {Join} */\nfunction joinDefaults(left, right, parent, state) {\n  // Indented code after list or another indented code.\n  if (\n    right.type === 'code' &&\n    formatCodeAsIndented(right, state) &&\n    (left.type === 'list' ||\n      (left.type === right.type && formatCodeAsIndented(left, state)))\n  ) {\n    return false\n  }\n\n  // Join children of a list or an item.\n  // In which case, `parent` has a `spread` field.\n  if ('spread' in parent && typeof parent.spread === 'boolean') {\n    if (\n      left.type === 'paragraph' &&\n      // Two paragraphs.\n      (left.type === right.type ||\n        right.type === 'definition' ||\n        // Paragraph followed by a setext heading.\n        (right.type === 'heading' && formatHeadingAsSetext(right, state)))\n    ) {\n      return\n    }\n\n    return parent.spread ? 1 : 0\n  }\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain things like attention (emphasis, strong), images, or links.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * @type {Array<ConstructName>}\n */\nconst fullPhrasingSpans = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\n/** @type {Array<Unsafe>} */\nexport const unsafe = [\n  {character: '\\t', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: '\\t', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: '\\t',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  {\n    character: '\\r',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {\n    character: '\\n',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {character: ' ', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: ' ', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: ' ',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  // An exclamation mark can start an image, if it is followed by a link or\n  // a link reference.\n  {\n    character: '!',\n    after: '\\\\[',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A quote can break out of a title.\n  {character: '\"', inConstruct: 'titleQuote'},\n  // A number sign could start an ATX heading if it starts a line.\n  {atBreak: true, character: '#'},\n  {character: '#', inConstruct: 'headingAtx', after: '(?:[\\r\\n]|$)'},\n  // Dollar sign and percentage are not used in markdown.\n  // An ampersand could start a character reference.\n  {character: '&', after: '[#A-Za-z]', inConstruct: 'phrasing'},\n  // An apostrophe can break out of a title.\n  {character: \"'\", inConstruct: 'titleApostrophe'},\n  // A left paren could break out of a destination raw.\n  {character: '(', inConstruct: 'destinationRaw'},\n  // A left paren followed by `]` could make something into a link or image.\n  {\n    before: '\\\\]',\n    character: '(',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A right paren could start a list item or break out of a destination\n  // raw.\n  {atBreak: true, before: '\\\\d+', character: ')'},\n  {character: ')', inConstruct: 'destinationRaw'},\n  // An asterisk can start thematic breaks, list items, emphasis, strong.\n  {atBreak: true, character: '*', after: '(?:[ \\t\\r\\n*])'},\n  {character: '*', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A plus sign could start a list item.\n  {atBreak: true, character: '+', after: '(?:[ \\t\\r\\n])'},\n  // A dash can start thematic breaks, list items, and setext heading\n  // underlines.\n  {atBreak: true, character: '-', after: '(?:[ \\t\\r\\n-])'},\n  // A dot could start a list item.\n  {atBreak: true, before: '\\\\d+', character: '.', after: '(?:[ \\t\\r\\n]|$)'},\n  // Slash, colon, and semicolon are not used in markdown for constructs.\n  // A less than can start html (flow or text) or an autolink.\n  // HTML could start with an exclamation mark (declaration, cdata, comment),\n  // slash (closing tag), question mark (instruction), or a letter (tag).\n  // An autolink also starts with a letter.\n  // Finally, it could break out of a destination literal.\n  {atBreak: true, character: '<', after: '[!/?A-Za-z]'},\n  {\n    character: '<',\n    after: '[!/?A-Za-z]',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  {character: '<', inConstruct: 'destinationLiteral'},\n  // An equals to can start setext heading underlines.\n  {atBreak: true, character: '='},\n  // A greater than can start block quotes and it can break out of a\n  // destination literal.\n  {atBreak: true, character: '>'},\n  {character: '>', inConstruct: 'destinationLiteral'},\n  // Question mark and at sign are not used in markdown for constructs.\n  // A left bracket can start definitions, references, labels,\n  {atBreak: true, character: '['},\n  {character: '[', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  {character: '[', inConstruct: ['label', 'reference']},\n  // A backslash can start an escape (when followed by punctuation) or a\n  // hard break (when followed by an eol).\n  // Note: typical escapes are handled in `safe`!\n  {character: '\\\\', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  // A right bracket can exit labels.\n  {character: ']', inConstruct: ['label', 'reference']},\n  // Caret is not used in markdown for constructs.\n  // An underscore can start emphasis, strong, or a thematic break.\n  {atBreak: true, character: '_'},\n  {character: '_', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A grave accent can start code (fenced or text), or it can break out of\n  // a grave accent code fence.\n  {atBreak: true, character: '`'},\n  {\n    character: '`',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']\n  },\n  {character: '`', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // Left brace, vertical bar, right brace are not used in markdown for\n  // constructs.\n  // A tilde can start code (fenced).\n  {atBreak: true, character: '~'}\n]\n","/**\n * @import {AssociationId} from '../types.js'\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @import {CompilePattern} from '../types.js'\n */\n\n/**\n * @type {CompilePattern}\n */\nexport function compilePattern(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @import {Handle, Info, State} from 'mdast-util-to-markdown'\n * @import {PhrasingParents} from '../types.js'\n */\n\nimport {encodeCharacterReference} from './encode-character-reference.js'\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {PhrasingParents} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n  /** @type {string | undefined} */\n  let encodeAfter\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    let value = state.handle(child, parent, state, {\n      ...tracker.current(),\n      after,\n      before\n    })\n\n    // If we had to encode the first character after the previous node and it’s\n    // still the same character,\n    // encode it.\n    if (encodeAfter && encodeAfter === value.slice(0, 1)) {\n      value =\n        encodeCharacterReference(encodeAfter.charCodeAt(0)) + value.slice(1)\n    }\n\n    const encodingInfo = state.attentionEncodeSurroundingInfo\n    state.attentionEncodeSurroundingInfo = undefined\n    encodeAfter = undefined\n\n    // If we have to encode the first character before the current node and\n    // it’s still the same character,\n    // encode it.\n    if (encodingInfo) {\n      if (\n        results.length > 0 &&\n        encodingInfo.before &&\n        before === results[results.length - 1].slice(-1)\n      ) {\n        results[results.length - 1] =\n          results[results.length - 1].slice(0, -1) +\n          encodeCharacterReference(before.charCodeAt(0))\n      }\n\n      if (encodingInfo.after) encodeAfter = after\n    }\n\n    tracker.move(value)\n    results.push(value)\n    before = value.slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {FlowChildren, FlowParents, TrackFields} from '../types.js'\n */\n\n/**\n * @param {FlowParents} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {FlowChildren} left\n * @param {FlowChildren} right\n * @param {FlowParents} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @import {IndentLines} from '../types.js'\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @import {SafeConfig, State} from 'mdast-util-to-markdown'\n */\n\nimport {encodeCharacterReference} from './encode-character-reference.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(encodeCharacterReference(value.charCodeAt(position)))\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @import {CreateTracker, TrackCurrent, TrackMove, TrackShift} from '../types.js'\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @import {Info, Join, Options, SafeConfig, State} from 'mdast-util-to-markdown'\n * @import {Nodes} from 'mdast'\n * @import {Enter, FlowParents, PhrasingParents, TrackFields} from './types.js'\n */\n\nimport {zwitch} from 'zwitch'\nimport {configure} from './configure.js'\nimport {handle as handlers} from './handle/index.js'\nimport {join} from './join.js'\nimport {unsafe} from './unsafe.js'\nimport {association} from './util/association.js'\nimport {compilePattern} from './util/compile-pattern.js'\nimport {containerPhrasing} from './util/container-phrasing.js'\nimport {containerFlow} from './util/container-flow.js'\nimport {indentLines} from './util/indent-lines.js'\nimport {safe} from './util/safe.js'\nimport {track} from './util/track.js'\n\n/**\n * Turn an mdast syntax tree into markdown.\n *\n * @param {Nodes} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized markdown representing `tree`.\n */\nexport function toMarkdown(tree, options) {\n  const settings = options || {}\n  /** @type {State} */\n  const state = {\n    associationId: association,\n    containerPhrasing: containerPhrasingBound,\n    containerFlow: containerFlowBound,\n    createTracker: track,\n    compilePattern,\n    enter,\n    // @ts-expect-error: GFM / frontmatter are typed in `mdast` but not defined\n    // here.\n    handlers: {...handlers},\n    // @ts-expect-error: add `handle` in a second.\n    handle: undefined,\n    indentLines,\n    indexStack: [],\n    join: [...join],\n    options: {},\n    safe: safeBound,\n    stack: [],\n    unsafe: [...unsafe]\n  }\n\n  configure(state, settings)\n\n  if (state.options.tightDefinitions) {\n    state.join.push(joinDefinition)\n  }\n\n  state.handle = zwitch('type', {\n    invalid,\n    unknown,\n    handlers: state.handlers\n  })\n\n  let result = state.handle(tree, undefined, state, {\n    before: '\\n',\n    after: '\\n',\n    now: {line: 1, column: 1},\n    lineShift: 0\n  })\n\n  if (\n    result &&\n    result.charCodeAt(result.length - 1) !== 10 &&\n    result.charCodeAt(result.length - 1) !== 13\n  ) {\n    result += '\\n'\n  }\n\n  return result\n\n  /** @type {Enter} */\n  function enter(name) {\n    state.stack.push(name)\n    return exit\n\n    /**\n     * @returns {undefined}\n     */\n    function exit() {\n      state.stack.pop()\n    }\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {never}\n */\nfunction invalid(value) {\n  throw new Error('Cannot handle value `' + value + '`, expected node')\n}\n\n/**\n * @param {unknown} value\n * @returns {never}\n */\nfunction unknown(value) {\n  // Always a node.\n  const node = /** @type {Nodes} */ (value)\n  throw new Error('Cannot handle unknown node `' + node.type + '`')\n}\n\n/** @type {Join} */\nfunction joinDefinition(left, right) {\n  // No blank line between adjacent definitions.\n  if (left.type === 'definition' && left.type === right.type) {\n    return 0\n  }\n}\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {PhrasingParents} parent\n *   Parent of flow nodes.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nfunction containerPhrasingBound(parent, info) {\n  return containerPhrasing(parent, this, info)\n}\n\n/**\n * Serialize the children of a parent that contains flow children.\n *\n * These children will typically be joined by blank lines.\n * What they are joined by exactly is defined by `Join` functions.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {FlowParents} parent\n *   Parent of flow nodes.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nfunction containerFlowBound(parent, info) {\n  return containerFlow(parent, this, info)\n}\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {string | null | undefined} value\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nfunction safeBound(value, config) {\n  return safe(this, value, config)\n}\n","export const NODE_TYPES = {\n  MDX_JSX_FLOW_ELEMENT: 'mdxJsxFlowElement',\n  MDX_JSX_TEXT_ELEMENT: 'mdxJsxTextElement',\n  MDX_JSX_ESM: 'mdxjsEsm',\n  YAML: 'yaml',\n  MDX_TEXT_EXPRESSION: 'mdxTextExpression',\n  MDX_FLOW_EXPRESSION: 'mdxFlowExpression',\n  LIST: 'list',\n  LIST_ITEM: 'listItem',\n  TEXT: 'text',\n  PARAGRAPH: 'paragraph',\n  HTML: 'html',\n} as const;\n\nexport const MDX_JSX_ATTRIBUTE_TYPES = {\n  MDX_JSX_ATTRIBUTE: 'mdxJsxAttribute',\n  MDX_JSX_ATTRIBUTE_VALUE_EXPRESSION: 'mdxJsxAttributeValueExpression',\n  MDX_JSX_EXPRESSION_ATTRIBUTE: 'mdxJsxExpressionAttribute',\n} as const;","import { TagPlugin } from './tag-plugin';\n\nexport class TagPluginRegistry {\n  private static plugins: Map<string, TagPlugin> = new Map();\n\n  static register(plugin: TagPlugin, names: string[]): void {\n    names.forEach((name) => {\n      this.plugins.set(name, plugin);\n    });\n  }\n\n  static get(name: string): TagPlugin | undefined {\n    return this.plugins.get(name);\n  }\n\n  static getAll(): Map<string, TagPlugin> {\n    return new Map(this.plugins);\n  }\n\n  static remove(name: string): void {\n    this.plugins.delete(name);\n  }\n\n  static removeAll(): void {\n    this.plugins.clear();\n  }\n}","import { NODE_TYPES } from './constants';\nimport { unified } from 'unified';\nimport yaml from 'js-yaml';\nimport {\n  MdxJsxFlowElement,\n  MdxJsxTextElement,\n} from 'mdast-util-mdx';\nimport type {\n  Parent,\n  Node,\n  Root,\n} from 'mdast';\nimport remarkParse from 'remark-parse';\nimport remarkMdx from 'remark-mdx';\nimport remarkFrontmatter from 'remark-frontmatter';\nimport remarkStringify from 'remark-stringify';\n\nexport const createBaseProcessor = () =>\n  unified().use(remarkParse).use(remarkMdx).use(remarkFrontmatter);\n\nexport function isMdxJsxElement(\n  node: Node\n): node is MdxJsxFlowElement | MdxJsxTextElement {\n  return isMdxJsxFlowElement(node) || isMdxJsxTextElement(node);\n}\n\nexport function isMdxJsxFlowElement(node: Node): node is MdxJsxFlowElement {\n  return node.type === NODE_TYPES.MDX_JSX_FLOW_ELEMENT;\n}\n\nexport function isMdxJsxTextElement(node: Node): node is MdxJsxTextElement {\n  return node.type === NODE_TYPES.MDX_JSX_TEXT_ELEMENT;\n}\n\nexport function isParentNode(node: Node): node is Parent {\n  return 'children' in node && Array.isArray(node.children);\n}\n\nexport function compressAst(node: any): void {\n  const propertiesToDelete = [\n    'position',\n    'start',\n    'end',\n    'loc',\n    'range',\n    'data',\n    'meta',\n    'raw',\n    'extra',\n    'comments',\n  ];\n\n  for (const prop of propertiesToDelete) {\n    if (prop in node) {\n      delete node[prop];\n    }\n  }\n\n  if (Array.isArray(node.children)) {\n    for (const child of node.children) {\n      compressAst(child);\n    }\n  }\n\n  if (Array.isArray(node.attributes)) {\n    for (const attr of node.attributes) {\n      compressAst(attr);\n    }\n  }\n\n  for (const key in node) {\n    if (\n      node.hasOwnProperty(key) &&\n      typeof node[key] === 'object' &&\n      node[key] !== null\n    ) {\n      compressAst(node[key]);\n    }\n  }\n}\n\nexport const getFrontMatter = (tree: Root) => {\n  const frontmatterNode = tree.children.find(\n    (node) => node.type === NODE_TYPES.YAML\n  );\n  return yaml.load(frontmatterNode?.value || '');\n};\n\nexport function parse(mdxContent: string): Root {\n  const processor = unified().use(remarkParse).use(remarkMdx).use(remarkFrontmatter);\n  return processor.parse(mdxContent) as Root;\n}\n\nexport const stringify = (tree: Root): string => {\n  const processor = createBaseProcessor().use(remarkStringify);\n  return String(processor.stringify(tree));\n};\n\nexport function hasFunctionBody(childNode: Node): boolean {\n  if (childNode.type !== 'mdxFlowExpression') {\n    return false;\n  }\n\n  const estree = (childNode as any).data?.estree;\n\n  if (!estree || estree.body.length === 0) {\n    return false;\n  }\n\n  const expression = estree.body[0].expression;\n\n  return expression.type === 'ArrowFunctionExpression';\n}\n\nexport function getFunctionBody(\n  childNode: Node,\n): { body: Node[]; argumentNames: string[] } {\n  if (childNode.type !== 'mdxFlowExpression') {\n    throw new Error('Expected a function as the child.');\n  }\n\n  const functionCode = (childNode as any).value;\n  const estree = (childNode as any).data?.estree;\n  if (!estree || estree.body.length === 0) {\n    throw new Error('Invalid function expression.');\n  }\n\n  const functionExpression = estree.body[0].expression;\n  if (functionExpression.type !== 'ArrowFunctionExpression') {\n    throw new Error('Child must be an arrow function.');\n  }\n\n  const params = functionExpression.params;\n  const argumentNames = params.map((param: any) => {\n    if (param.type === 'Identifier') {\n      return param.name;\n    } else {\n      throw new Error('Only simple identifiers are supported as function parameters.');\n    }\n  });\n\n  if (argumentNames.length < 1) {\n    throw new Error('Function must have at least one parameter.');\n  }\n\n  const arrowIndex = functionCode.indexOf('=>');\n  if (arrowIndex === -1) {\n    throw new Error('Invalid function expression.');\n  }\n  let functionBodyCode = functionCode.substring(arrowIndex + 2).trim();\n\n  if (functionBodyCode.startsWith('(') && functionBodyCode.endsWith(')')) {\n    functionBodyCode = functionBodyCode.substring(1, functionBodyCode.length - 1).trim();\n  }\n  const functionBodyTree = parse(functionBodyCode) as Root;\n  const unwrappedNodes = unwrapFragments(functionBodyTree.children);\n\n  return { body: unwrappedNodes, argumentNames };\n}\n\nfunction unwrapFragments(nodes: Node[]): Node[] {\n  const unwrappedNodes: Node[] = [];\n\n  for (const node of nodes) {\n    if (isFragmentNode(node)) {\n      if ((node as any).children) {\n        const childNodes = unwrapFragments((node as any).children);\n        unwrappedNodes.push(...childNodes);\n      }\n    } else {\n      unwrappedNodes.push(node);\n    }\n  }\n\n  return unwrappedNodes;\n}\n\n\nfunction isFragmentNode(node: Node): boolean {\n  return (\n    node.type === NODE_TYPES.MDX_JSX_FLOW_ELEMENT &&\n    (node as any).name === null\n  );\n}\n\n\n","export function resolvePath(basePath: string, targetPath: string): string {\n  if (targetPath.startsWith('/')) {\n    return targetPath;\n  }\n\n  const baseParts = basePath.split('/').filter(Boolean);\n  const targetParts = targetPath.split('/').filter(Boolean);\n  \n  for (const part of targetParts) {\n    if (part === '.') continue;\n    if (part === '..') {\n      baseParts.pop();\n    } else {\n      baseParts.push(part);\n    }\n  }\n\n  return '/' + baseParts.join('/');\n}\n\nexport function getDirname(filePath: string): string {\n  const parts = filePath.split('/').filter(Boolean);\n  parts.pop();\n  return '/' + parts.join('/');\n}\n\nexport function cloneObject(obj: any): any {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nexport function stringifyValue(value: any): string {\n  if (Array.isArray(value)) {\n    return value.join('');\n  } else if (typeof value === 'object' && value !== null) {\n    return JSON.stringify(value);\n  } else {\n    return String(value);\n  }\n}","export type FilterFunction<Input = any, Output = any, Args extends any[] = any[]> = (\n  input: Input,\n  ...args: Args\n) => Output;\n\nexport class FilterRegistry {\n  private static filters: Map<string, FilterFunction> = new Map();\n\n  static register(name: string, filterFunction: FilterFunction): void {\n    this.filters.set(name, filterFunction);\n  }\n\n  static get(name: string): FilterFunction | undefined {\n    return this.filters.get(name);\n  }\n\n  static getAll(): Map<string, FilterFunction> {\n    return new Map(this.filters);\n  }\n\n  static remove(name: string): void {\n    this.filters.delete(name);\n  }\n\n  static removeAll(): void {\n    this.filters.clear();\n  }\n}\n","export class Scope {\n  private variables: Record<string, any>;\n  private shared: Record<string, any>;\n  private parent?: Scope;\n\n  constructor(variables: Record<string, any> = {}, shared: Record<string, any>, parent?: Scope) {\n    this.variables = variables;\n    // shared = global scope\n    this.shared = shared; \n    this.parent = parent;\n  }\n\n  get(key: string): any {\n    if (key in this.variables) {\n      return this.variables[key];\n    } else if (this.parent) {\n      return this.parent.get(key);\n    } else if (key in this.shared) {\n      return this.shared[key];\n    } else {\n      return undefined;\n    }\n  }\n\n  getLocal(key: string): any {\n    return this.variables[key];\n  }\n\n  getShared(key: string): any {\n    return this.shared[key]\n  }\n\n  setShared(key: string, value: any): void {\n    this.shared[key] = value;\n  }\n\n  setLocal(key: string, value: any): void {\n    this.variables[key] = value;\n  }\n\n  createChild(variables: Record<string, any> = {}): Scope {\n    return new Scope(variables, this.shared, this);\n  }\n}\n","/**\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle} from 'mdast-util-from-markdown'\n * @import {MdxFlowExpression, MdxTextExpression} from 'mdast-util-mdx-expression'\n * @import {Handle as ToMarkdownHandle, Options as ToMarkdownExtension, State} from 'mdast-util-to-markdown'\n * @import {Parents} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX expressions\n * in markdown.\n *\n * When using the micromark syntax extension with `addResult`, nodes will have\n * a `data.estree` field set to an ESTree `Program` node.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX expressions.\n */\nexport function mdxExpressionFromMarkdown() {\n  return {\n    enter: {\n      mdxFlowExpression: enterMdxFlowExpression,\n      mdxTextExpression: enterMdxTextExpression\n    },\n    exit: {\n      mdxFlowExpression: exitMdxExpression,\n      mdxFlowExpressionChunk: exitMdxExpressionData,\n      mdxTextExpression: exitMdxExpression,\n      mdxTextExpressionChunk: exitMdxExpressionData\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX expressions\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX expressions.\n */\nexport function mdxExpressionToMarkdown() {\n  return {\n    handlers: {\n      mdxFlowExpression: handleMdxExpression,\n      mdxTextExpression: handleMdxExpression\n    },\n    unsafe: [\n      {character: '{', inConstruct: ['phrasing']},\n      {atBreak: true, character: '{'}\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxFlowExpression(token) {\n  this.enter({type: 'mdxFlowExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxTextExpression(token) {\n  this.enter({type: 'mdxTextExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpression(token) {\n  const value = this.resume()\n  const estree = token.estree\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression')\n  this.exit(token)\n  node.value = value\n\n  if (estree) {\n    node.data = {estree}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpressionData(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Node.\n * @param {Parents | undefined} parent\n *   Parent, if any.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized markdown.\n */\nfunction handleMdxExpression(node, parent, state) {\n  const value = node.value || ''\n  const result = state.indentLines(value, function (line, index, blank) {\n    // Tab-size to eat has to be the same as what we serialize as.\n    // While in some places in markdown that’s 4, in JS it’s more common as 2.\n    // Which is what’s also in `mdast-util-mdx-jsx`:\n    // <https://github.com/syntax-tree/mdast-util-mdx-jsx/blob/40b951b/lib/index.js#L52>\n    return (index === 0 || blank ? '' : '  ') + line\n  })\n  return '{' + result + '}'\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef CoreOptions\n * @property {ReadonlyArray<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\nconst defaultSubsetRegex = /[\"&'<>`]/g\nconst surrogatePairsRegex = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g\nconst controlCharactersRegex =\n  // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n  /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g\nconst regexEscapeRegex = /[|\\\\{}()[\\]^$+*?.]/g\n\n/** @type {WeakMap<ReadonlyArray<string>, RegExp>} */\nconst subsetToRegexCache = new WeakMap()\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(\n    options.subset\n      ? charactersToExpressionCached(options.subset)\n      : defaultSubsetRegex,\n    basic\n  )\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(surrogatePairsRegex, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(controlCharactersRegex, basic)\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * A wrapper function that caches the result of `charactersToExpression` with a WeakMap.\n * This can improve performance when tooling calls `charactersToExpression` repeatedly\n * with the same subset.\n *\n * @param {ReadonlyArray<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpressionCached(subset) {\n  let cached = subsetToRegexCache.get(subset)\n\n  if (!cached) {\n    cached = charactersToExpression(subset)\n    subsetToRegexCache.set(subset, cached)\n  }\n\n  return cached\n}\n\n/**\n * @param {ReadonlyArray<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = []\n  let index = -1\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(regexEscapeRegex, '\\\\$&'))\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n","/**\n * The smallest way to encode a character.\n *\n * @param {number} code\n * @returns {string}\n */\nexport function formatBasic(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\nimport {core} from './core.js'\nimport {formatSmart} from './util/format-smart.js'\nimport {formatBasic} from './util/format-basic.js'\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * Encode special characters in `value` as hexadecimals.\n *\n * @param {string} value\n *   Value to encode.\n * @param {LightOptions} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntitiesLight(value, options) {\n  return core(value, Object.assign({format: formatBasic}, options))\n}\n","/**\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, OnEnterError, OnExitError, Token} from 'mdast-util-from-markdown'\n * @import {Handle as ToMarkdownHandle, Options as ToMarkdownExtension, State, Tracker} from 'mdast-util-to-markdown'\n * @import {Point} from 'unist'\n * @import {MdxJsxAttribute, MdxJsxAttributeValueExpression, MdxJsxExpressionAttribute, MdxJsxFlowElement, MdxJsxTextElement} from '../index.js'\n */\n\n/**\n * @typedef Tag\n *   Single tag.\n * @property {string | undefined} name\n *   Name of tag, or `undefined` for fragment.\n *\n *   > 👉 **Note**: `null` is used in the AST for fragments, as it serializes in\n *   > JSON.\n * @property {Array<MdxJsxAttribute | MdxJsxExpressionAttribute>} attributes\n *   Attributes.\n * @property {boolean} close\n *   Whether the tag is closing (`</x>`).\n * @property {boolean} selfClosing\n *   Whether the tag is self-closing (`<x/>`).\n * @property {Token['start']} start\n *   Start point.\n * @property {Token['start']} end\n *   End point.\n *\n * @typedef ToMarkdownOptions\n *   Configuration.\n * @property {'\"' | \"'\" | null | undefined} [quote='\"']\n *   Preferred quote to use around attribute values (default: `'\"'`).\n * @property {boolean | null | undefined} [quoteSmart=false]\n *   Use the other quote if that results in less bytes (default: `false`).\n * @property {boolean | null | undefined} [tightSelfClosing=false]\n *   Do not use an extra space when closing self-closing elements: `<img/>`\n *   instead of `<img />` (default: `false`).\n * @property {number | null | undefined} [printWidth=Infinity]\n *   Try and wrap syntax at this width (default: `Infinity`).\n *\n *   When set to a finite number (say, `80`), the formatter will print\n *   attributes on separate lines when a tag doesn’t fit on one line.\n *   The normal behavior is to print attributes with spaces between them\n *   instead of line endings.\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {parseEntities} from 'parse-entities'\nimport {stringifyEntitiesLight} from 'stringify-entities'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst indent = '  '\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX JSX.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX JSX.\n *\n *   When using the syntax extension with `addResult`, nodes will have a\n *   `data.estree` field set to an ESTree `Program` node.\n */\nexport function mdxJsxFromMarkdown() {\n  return {\n    canContainEols: ['mdxJsxTextElement'],\n    enter: {\n      mdxJsxFlowTag: enterMdxJsxTag,\n      mdxJsxFlowTagClosingMarker: enterMdxJsxTagClosingMarker,\n      mdxJsxFlowTagAttribute: enterMdxJsxTagAttribute,\n      mdxJsxFlowTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,\n      mdxJsxFlowTagAttributeValueLiteral: buffer,\n      mdxJsxFlowTagAttributeValueExpression: buffer,\n      mdxJsxFlowTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker,\n\n      mdxJsxTextTag: enterMdxJsxTag,\n      mdxJsxTextTagClosingMarker: enterMdxJsxTagClosingMarker,\n      mdxJsxTextTagAttribute: enterMdxJsxTagAttribute,\n      mdxJsxTextTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,\n      mdxJsxTextTagAttributeValueLiteral: buffer,\n      mdxJsxTextTagAttributeValueExpression: buffer,\n      mdxJsxTextTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker\n    },\n    exit: {\n      mdxJsxFlowTagClosingMarker: exitMdxJsxTagClosingMarker,\n      mdxJsxFlowTagNamePrimary: exitMdxJsxTagNamePrimary,\n      mdxJsxFlowTagNameMember: exitMdxJsxTagNameMember,\n      mdxJsxFlowTagNameLocal: exitMdxJsxTagNameLocal,\n      mdxJsxFlowTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,\n      mdxJsxFlowTagExpressionAttributeValue: data,\n      mdxJsxFlowTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,\n      mdxJsxFlowTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,\n      mdxJsxFlowTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,\n      mdxJsxFlowTagAttributeValueLiteralValue: data,\n      mdxJsxFlowTagAttributeValueExpression:\n        exitMdxJsxTagAttributeValueExpression,\n      mdxJsxFlowTagAttributeValueExpressionValue: data,\n      mdxJsxFlowTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,\n      mdxJsxFlowTag: exitMdxJsxTag,\n\n      mdxJsxTextTagClosingMarker: exitMdxJsxTagClosingMarker,\n      mdxJsxTextTagNamePrimary: exitMdxJsxTagNamePrimary,\n      mdxJsxTextTagNameMember: exitMdxJsxTagNameMember,\n      mdxJsxTextTagNameLocal: exitMdxJsxTagNameLocal,\n      mdxJsxTextTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,\n      mdxJsxTextTagExpressionAttributeValue: data,\n      mdxJsxTextTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,\n      mdxJsxTextTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,\n      mdxJsxTextTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,\n      mdxJsxTextTagAttributeValueLiteralValue: data,\n      mdxJsxTextTagAttributeValueExpression:\n        exitMdxJsxTagAttributeValueExpression,\n      mdxJsxTextTagAttributeValueExpressionValue: data,\n      mdxJsxTextTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,\n      mdxJsxTextTag: exitMdxJsxTag\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function buffer() {\n    this.buffer()\n  }\n\n  /**\n   * Copy a point-like value.\n   *\n   * @param {Point} d\n   *   Point-like value.\n   * @returns {Point}\n   *   unist point.\n   */\n  function point(d) {\n    return {line: d.line, column: d.column, offset: d.offset}\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function data(token) {\n    this.config.enter.data.call(this, token)\n    this.config.exit.data.call(this, token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTag(token) {\n    /** @type {Tag} */\n    const tag = {\n      name: undefined,\n      attributes: [],\n      close: false,\n      selfClosing: false,\n      start: token.start,\n      end: token.end\n    }\n    if (!this.data.mdxJsxTagStack) this.data.mdxJsxTagStack = []\n    this.data.mdxJsxTag = tag\n    this.buffer()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagClosingMarker(token) {\n    const stack = this.data.mdxJsxTagStack\n    assert(stack, 'expected `mdxJsxTagStack`')\n\n    if (stack.length === 0) {\n      throw new VFileMessage(\n        'Unexpected closing slash `/` in tag, expected an open tag first',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:unexpected-closing-slash'\n      )\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagAnyAttribute(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n\n    if (tag.close) {\n      throw new VFileMessage(\n        'Unexpected attribute in closing tag, expected the end of the tag',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:unexpected-attribute'\n      )\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagSelfClosingMarker(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n\n    if (tag.close) {\n      throw new VFileMessage(\n        'Unexpected self-closing slash `/` in closing tag, expected the end of the tag',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:unexpected-self-closing-slash'\n      )\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagClosingMarker() {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    tag.close = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagNamePrimary(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    tag.name = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagNameMember(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    tag.name += '.' + this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagNameLocal(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    tag.name += ':' + this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagAttribute(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    enterMdxJsxTagAnyAttribute.call(this, token)\n    tag.attributes.push({\n      type: 'mdxJsxAttribute',\n      name: '',\n      value: null,\n      position: {\n        start: point(token.start),\n        // @ts-expect-error: `end` will be patched later.\n        end: undefined\n      }\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagExpressionAttribute(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    enterMdxJsxTagAnyAttribute.call(this, token)\n    tag.attributes.push({type: 'mdxJsxExpressionAttribute', value: ''})\n    this.buffer()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagExpressionAttribute(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const tail = tag.attributes[tag.attributes.length - 1]\n    assert(tail.type === 'mdxJsxExpressionAttribute')\n    const estree = token.estree\n\n    tail.value = this.resume()\n\n    if (estree) {\n      tail.data = {estree}\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeNamePrimary(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const node = tag.attributes[tag.attributes.length - 1]\n    assert(node.type === 'mdxJsxAttribute')\n    node.name = this.sliceSerialize(token)\n    assert(node.position !== undefined)\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeNameLocal(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const node = tag.attributes[tag.attributes.length - 1]\n    assert(node.type === 'mdxJsxAttribute')\n    node.name += ':' + this.sliceSerialize(token)\n    assert(node.position !== undefined)\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeValueLiteral(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const node = tag.attributes[tag.attributes.length - 1]\n    node.value = parseEntities(this.resume(), {nonTerminated: false})\n    assert(node.position !== undefined)\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeValueExpression(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const tail = tag.attributes[tag.attributes.length - 1]\n    assert(tail.type === 'mdxJsxAttribute')\n    /** @type {MdxJsxAttributeValueExpression} */\n    const node = {type: 'mdxJsxAttributeValueExpression', value: this.resume()}\n    const estree = token.estree\n\n    if (estree) {\n      node.data = {estree}\n    }\n\n    tail.value = node\n    assert(tail.position !== undefined)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagSelfClosingMarker() {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n\n    tag.selfClosing = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTag(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const stack = this.data.mdxJsxTagStack\n    assert(stack, 'expected `mdxJsxTagStack`')\n    const tail = stack[stack.length - 1]\n\n    if (tag.close && tail.name !== tag.name) {\n      throw new VFileMessage(\n        'Unexpected closing tag `' +\n          serializeAbbreviatedTag(tag) +\n          '`, expected corresponding closing tag for `' +\n          serializeAbbreviatedTag(tail) +\n          '` (' +\n          stringifyPosition(tail) +\n          ')',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:end-tag-mismatch'\n      )\n    }\n\n    // End of a tag, so drop the buffer.\n    this.resume()\n\n    if (tag.close) {\n      stack.pop()\n    } else {\n      this.enter(\n        {\n          type:\n            token.type === 'mdxJsxTextTag'\n              ? 'mdxJsxTextElement'\n              : 'mdxJsxFlowElement',\n          name: tag.name || null,\n          attributes: tag.attributes,\n          children: []\n        },\n        token,\n        onErrorRightIsTag\n      )\n    }\n\n    if (tag.selfClosing || tag.close) {\n      this.exit(token, onErrorLeftIsTag)\n    } else {\n      stack.push(tag)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {OnEnterError}\n   */\n  function onErrorRightIsTag(closing, open) {\n    const stack = this.data.mdxJsxTagStack\n    assert(stack, 'expected `mdxJsxTagStack`')\n    const tag = stack[stack.length - 1]\n    assert(tag, 'expected `mdxJsxTag`')\n    const place = closing ? ' before the end of `' + closing.type + '`' : ''\n    const position = closing\n      ? {start: closing.start, end: closing.end}\n      : undefined\n\n    throw new VFileMessage(\n      'Expected a closing tag for `' +\n        serializeAbbreviatedTag(tag) +\n        '` (' +\n        stringifyPosition({start: open.start, end: open.end}) +\n        ')' +\n        place,\n      position,\n      'mdast-util-mdx-jsx:end-tag-mismatch'\n    )\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {OnExitError}\n   */\n  function onErrorLeftIsTag(a, b) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n\n    throw new VFileMessage(\n      'Expected the closing tag `' +\n        serializeAbbreviatedTag(tag) +\n        '` either after the end of `' +\n        b.type +\n        '` (' +\n        stringifyPosition(b.end) +\n        ') or another opening tag after the start of `' +\n        b.type +\n        '` (' +\n        stringifyPosition(b.start) +\n        ')',\n      {start: a.start, end: a.end},\n      'mdast-util-mdx-jsx:end-tag-mismatch'\n    )\n  }\n\n  /**\n   * Serialize a tag, excluding attributes.\n   * `self-closing` is not supported, because we don’t need it yet.\n   *\n   * @param {Tag} tag\n   * @returns {string}\n   */\n  function serializeAbbreviatedTag(tag) {\n    return '<' + (tag.close ? '/' : '') + (tag.name || '') + '>'\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX JSX.\n *\n * This extension configures `mdast-util-to-markdown` with\n * `options.fences: true` and `options.resourceLink: true` too, do not\n * overwrite them!\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX JSX.\n */\nexport function mdxJsxToMarkdown(options) {\n  const options_ = options || {}\n  const quote = options_.quote || '\"'\n  const quoteSmart = options_.quoteSmart || false\n  const tightSelfClosing = options_.tightSelfClosing || false\n  const printWidth = options_.printWidth || Number.POSITIVE_INFINITY\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error(\n      'Cannot serialize attribute values with `' +\n        quote +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  mdxElement.peek = peekElement\n\n  return {\n    handlers: {\n      mdxJsxFlowElement: mdxElement,\n      mdxJsxTextElement: mdxElement\n    },\n    unsafe: [\n      {character: '<', inConstruct: ['phrasing']},\n      {atBreak: true, character: '<'}\n    ],\n    // Always generate fenced code (never indented code).\n    fences: true,\n    // Always generate links with resources (never autolinks).\n    resourceLink: true\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n   */\n  // eslint-disable-next-line complexity\n  function mdxElement(node, _, state, info) {\n    const flow = node.type === 'mdxJsxFlowElement'\n    const selfClosing = node.name\n      ? !node.children || node.children.length === 0\n      : false\n    const depth = inferDepth(state)\n    const currentIndent = createIndent(depth)\n    const trackerOneLine = state.createTracker(info)\n    const trackerMultiLine = state.createTracker(info)\n    /** @type {Array<string>} */\n    const serializedAttributes = []\n    const prefix = (flow ? currentIndent : '') + '<' + (node.name || '')\n    const exit = state.enter(node.type)\n\n    trackerOneLine.move(prefix)\n    trackerMultiLine.move(prefix)\n\n    // None.\n    if (node.attributes && node.attributes.length > 0) {\n      if (!node.name) {\n        throw new Error('Cannot serialize fragment w/ attributes')\n      }\n\n      let index = -1\n      while (++index < node.attributes.length) {\n        const attribute = node.attributes[index]\n        /** @type {string} */\n        let result\n\n        if (attribute.type === 'mdxJsxExpressionAttribute') {\n          result = '{' + (attribute.value || '') + '}'\n        } else {\n          if (!attribute.name) {\n            throw new Error('Cannot serialize attribute w/o name')\n          }\n\n          const value = attribute.value\n          const left = attribute.name\n          /** @type {string} */\n          let right = ''\n\n          if (value === null || value === undefined) {\n            // Empty.\n          } else if (typeof value === 'object') {\n            right = '{' + (value.value || '') + '}'\n          } else {\n            // If the alternative is less common than `quote`, switch.\n            const appliedQuote =\n              quoteSmart && ccount(value, quote) > ccount(value, alternative)\n                ? alternative\n                : quote\n            right =\n              appliedQuote +\n              stringifyEntitiesLight(value, {subset: [appliedQuote]}) +\n              appliedQuote\n          }\n\n          result = left + (right ? '=' : '') + right\n        }\n\n        serializedAttributes.push(result)\n      }\n    }\n\n    let attributesOnTheirOwnLine = false\n    const attributesOnOneLine = serializedAttributes.join(' ')\n\n    if (\n      // Block:\n      flow &&\n      // Including a line ending (expressions).\n      (/\\r?\\n|\\r/.test(attributesOnOneLine) ||\n        // Current position (including `<tag`).\n        trackerOneLine.current().now.column +\n          // -1 because columns, +1 for ` ` before attributes.\n          // Attributes joined by spaces.\n          attributesOnOneLine.length +\n          // ` />`.\n          (selfClosing ? (tightSelfClosing ? 2 : 3) : 1) >\n          printWidth)\n    ) {\n      attributesOnTheirOwnLine = true\n    }\n\n    let tracker = trackerOneLine\n    let value = prefix\n\n    if (attributesOnTheirOwnLine) {\n      tracker = trackerMultiLine\n\n      let index = -1\n\n      while (++index < serializedAttributes.length) {\n        // Only indent first line of of attributes, we can’t indent attribute\n        // values.\n        serializedAttributes[index] =\n          currentIndent + indent + serializedAttributes[index]\n      }\n\n      value += tracker.move(\n        '\\n' + serializedAttributes.join('\\n') + '\\n' + currentIndent\n      )\n    } else if (attributesOnOneLine) {\n      value += tracker.move(' ' + attributesOnOneLine)\n    }\n\n    if (selfClosing) {\n      value += tracker.move(\n        (tightSelfClosing || attributesOnTheirOwnLine ? '' : ' ') + '/'\n      )\n    }\n\n    value += tracker.move('>')\n\n    if (node.children && node.children.length > 0) {\n      if (node.type === 'mdxJsxTextElement') {\n        value += tracker.move(\n          // @ts-expect-error: `containerPhrasing` is typed correctly, but TS\n          // generates *hardcoded* types, which means that our dynamically added\n          // directives are not present.\n          // At some point, TS should fix that, and `from-markdown` should be fine.\n          state.containerPhrasing(node, {\n            ...tracker.current(),\n            before: '>',\n            after: '<'\n          })\n        )\n      } else {\n        tracker.shift(2)\n        value += tracker.move('\\n')\n        value += tracker.move(containerFlow(node, state, tracker.current()))\n        value += tracker.move('\\n')\n      }\n    }\n\n    if (!selfClosing) {\n      value += tracker.move(\n        (flow ? currentIndent : '') + '</' + (node.name || '') + '>'\n      )\n    }\n\n    exit()\n    return value\n  }\n}\n\n// Modified copy of:\n// <https://github.com/syntax-tree/mdast-util-to-markdown/blob/a381cbc/lib/util/container-flow.js>.\n//\n// To do: add `indent` support to `mdast-util-to-markdown`.\n// As indents are only used for JSX, it’s fine for now, but perhaps better\n// there.\n/**\n * @param {MdxJsxFlowElement} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {ReturnType<Tracker['current']>} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nfunction containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children\n  const tracker = state.createTracker(info)\n  const currentIndent = createIndent(inferDepth(state))\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    const childInfo = {before: '\\n', after: '\\n', ...tracker.current()}\n\n    const result = state.handle(child, parent, state, childInfo)\n\n    const serializedChild =\n      child.type === 'mdxJsxFlowElement'\n        ? result\n        : state.indentLines(result, function (line, _, blank) {\n            return (blank ? '' : currentIndent) + line\n          })\n\n    results.push(tracker.move(serializedChild))\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(tracker.move('\\n\\n'))\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {State} state\n * @returns {number}\n */\nfunction inferDepth(state) {\n  let depth = 0\n  let index = state.stack.length\n\n  while (--index > -1) {\n    const name = state.stack[index]\n\n    if (name === 'blockquote' || name === 'listItem') break\n    if (name === 'mdxJsxFlowElement') depth++\n  }\n\n  return depth\n}\n\n/**\n * @param {number} depth\n * @returns {string}\n */\nfunction createIndent(depth) {\n  return indent.repeat(depth)\n}\n\n/**\n * @type {ToMarkdownHandle}\n */\nfunction peekElement() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('../index.js').MdxjsEsm} MdxjsEsm\n */\n\n// To do: next major: expose functions.\nimport {ok as assert} from 'devlop'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX.js ESM in\n * markdown.\n *\n * When using the micromark syntax extension with `addResult`, nodes will have\n * a `data.estree` field set to an ESTree [`Program`][program] node.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX.js ESM.\n */\nexport function mdxjsEsmFromMarkdown() {\n  return {\n    enter: {mdxjsEsm: enterMdxjsEsm},\n    exit: {mdxjsEsm: exitMdxjsEsm, mdxjsEsmData: exitMdxjsEsmData}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX.js ESM in\n * markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX.js ESM.\n */\nexport function mdxjsEsmToMarkdown() {\n  return {handlers: {mdxjsEsm: handleMdxjsEsm}}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxjsEsm(token) {\n  this.enter({type: 'mdxjsEsm', value: ''}, token)\n  this.buffer() // Capture EOLs\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxjsEsm(token) {\n  const value = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'mdxjsEsm')\n\n  this.exit(token)\n\n  const estree = token.estree\n\n  node.value = value\n\n  if (estree) {\n    node.data = {estree}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxjsEsmData(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxjsEsm} node\n */\nfunction handleMdxjsEsm(node) {\n  return node.value || ''\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-mdx-jsx').ToMarkdownOptions} ToMarkdownOptions\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {\n  mdxExpressionFromMarkdown,\n  mdxExpressionToMarkdown\n} from 'mdast-util-mdx-expression'\nimport {mdxJsxFromMarkdown, mdxJsxToMarkdown} from 'mdast-util-mdx-jsx'\nimport {mdxjsEsmFromMarkdown, mdxjsEsmToMarkdown} from 'mdast-util-mdxjs-esm'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX (ESM, JSX,\n * expressions).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable MDX (ESM, JSX,\n *   expressions).\n *\n *   When using the syntax extensions with `addResult`, ESM and expression\n *   nodes will have `data.estree` fields set to ESTree `Program` node.\n */\nexport function mdxFromMarkdown() {\n  return [\n    mdxExpressionFromMarkdown(),\n    mdxJsxFromMarkdown(),\n    mdxjsEsmFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX (ESM, JSX,\n * expressions).\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX (ESM, JSX,\n *   expressions).\n */\nexport function mdxToMarkdown(options) {\n  return {\n    extensions: [\n      mdxExpressionToMarkdown(),\n      mdxJsxToMarkdown(options),\n      mdxjsEsmToMarkdown()\n    ]\n  }\n}\n","import jsep from 'jsep';\nimport jsepObject from '@jsep-plugin/object';\nimport {\n  MdxJsxFlowElement,\n  MdxJsxTextElement,\n} from 'mdast-util-mdx';\nimport { NODE_TYPES, MDX_JSX_ATTRIBUTE_TYPES } from './constants';\nimport { OperatorFunction } from './types';\nimport { TagPluginRegistry } from './tag-plugin-registry';\nimport { PluginContext } from './tag-plugin';\nimport { hasFunctionBody, getFunctionBody } from './ast-utils';\nimport { stringifyValue } from './utils';\nimport {\n  isMdxJsxElement,\n  isMdxJsxFlowElement,\n  isMdxJsxTextElement,\n  isParentNode,\n} from './ast-utils';\nimport { FilterRegistry } from './filter-registry';\nimport { Scope } from './scope';\nimport type { \n  Root,\n  Node, \n  Parent, \n  RootContent,\n} from 'mdast';\nimport { mdxToMarkdown } from \"mdast-util-mdx\";\nimport { toMarkdown, Options } from 'mdast-util-to-markdown';\n\njsep.plugins.register(jsepObject);\n\nconst options: Options = {\n  extensions: [mdxToMarkdown()],\n};\nconst toMdxMarkdown = (node: Root) => {\n  return toMarkdown(node, options);\n}\n\nconst nodeHelpers = {\n  isMdxJsxElement,\n  isMdxJsxFlowElement,\n  isMdxJsxTextElement,\n  isParentNode,\n  toMarkdown: toMdxMarkdown,\n  hasFunctionBody,\n  getFunctionBody,\n  NODE_TYPES,\n};\n\nexport class NodeTransformer {\n  private scope: Scope;\n\n  constructor(scope: Scope) {\n    this.scope = scope;\n  }\n\n  async transformNode(node: Node): Promise<Node | Node[]> {\n    if (\n      node.type === NODE_TYPES.MDX_TEXT_EXPRESSION ||\n      node.type === NODE_TYPES.MDX_FLOW_EXPRESSION\n    ) {\n      return this.evaluateExpressionNode(node);\n    }\n\n    if (isMdxJsxElement(node)) {\n      return await this.processMdxJsxElement(node);\n    }\n\n    if (this.isFragmentNode(node)) {\n      const processedChildren = await Promise.all(\n        (node as Parent).children.map(async (child) => {\n          const childTransformer = new NodeTransformer(this.scope);\n          const result = await childTransformer.transformNode(child);\n          return Array.isArray(result) ? result : [result];\n        })\n      );\n\n      return processedChildren.flat();\n    }\n\n    if (isParentNode(node)) {\n      const newNode = { ...node } as Parent;\n\n      const processedChildren = await Promise.all(\n        node.children.map(async (child) => {\n          const childTransformer = new NodeTransformer(this.scope);\n          const result = await childTransformer.transformNode(child);\n          return Array.isArray(result) ? result : [result];\n        })\n      );\n\n      newNode.children = processedChildren.flat() as RootContent[];\n\n      return newNode;\n    }\n\n    return node;\n  }\n\n  private isFragmentNode(node: Node): boolean {\n    return (\n      isMdxJsxElement(node) &&\n      (node.name === null ||\n        node.name === '' ||\n        node.name === 'Fragment' ||\n        node.name === 'React.Fragment')\n    );\n  }\n\n  evaluateExpressionNode(node: Node): Node {\n    const expression = (node as any).value;\n    try {\n      const evaluatedValue = this.resolveExpression(expression);\n      return {\n        type: NODE_TYPES.TEXT,\n        value: stringifyValue(evaluatedValue),\n      } as Node;\n    } catch (error: any) {\n      throw new Error(\n        `Error evaluating expression \"${expression}\": ${error.message}`\n      );\n    }\n  }\n\n  resolveExpression(expression: string): any {\n    expression = expression.trim();\n    let ast: jsep.Expression;\n    try {\n      ast = jsep(expression);\n    } catch (e) {\n      throw new Error(`Failed to parse expression: \"${expression}\"`);\n    }\n    return this.evaluateJsepExpression(ast);\n  }\n\n  evaluateJsepExpression(node: jsep.Expression): any {\n    switch (node.type) {\n      case 'BinaryExpression':\n        return this.evaluateBinaryExpression(node as jsep.BinaryExpression);\n\n      case 'UnaryExpression':\n        return this.evaluateUnaryExpression(node as jsep.UnaryExpression);\n\n      case 'Literal':\n        return (node as jsep.Literal).value;\n\n      case 'Identifier':\n        return this.resolveVariable((node as jsep.Identifier).name);\n\n      case 'MemberExpression':\n        return this.evaluateMemberExpression(node as jsep.MemberExpression);\n\n      case 'CallExpression':\n        return this.evaluateCallExpression(node as jsep.CallExpression);\n\n      case 'ArrayExpression':\n        return this.evaluateArrayExpression(node as jsep.ArrayExpression);\n\n      case 'ObjectExpression':\n        return this.evaluateObjectExpression(node as any);\n\n      default:\n        throw new Error(`Unsupported node type: ${node.type}`);\n    }\n  }\n\n  evaluateArrayExpression(node: jsep.ArrayExpression): any[] {\n    return node.elements.map((element) => this.evaluateJsepExpression(element!));\n  }\n\n  evaluateObjectExpression(node: any): object {\n    const obj: Record<string, any> = {};\n    for (const property of node.properties) {\n      let key: string;\n      if (property.key.type === 'Identifier') {\n        key = property.key.name;\n      } else if (property.key.type === 'Literal') {\n        key = property.key.value;\n      } else {\n        throw new Error(`Unsupported object key type: ${property.key.type}`);\n      }\n      const value = this.evaluateJsepExpression(property.value);\n      obj[key] = value;\n    }\n    return obj;\n  }\n\n  evaluateCallExpression(node: jsep.CallExpression): any {\n    const callee = node.callee;\n    if (callee.type !== 'Identifier') {\n      throw new Error(`Only calls to registered filters are allowed.`);\n    }\n\n    const functionName = (callee as jsep.Identifier).name;\n    const filterFunction = FilterRegistry.get(functionName);\n    if (!filterFunction) {\n      throw new Error(`Filter \"${functionName}\" is not registered.`);\n    }\n\n    const args = node.arguments.map(arg => this.evaluateJsepExpression(arg));\n    const [input, ...rest] = args;\n    return filterFunction(input, ...rest);\n  }\n\n  resolveVariable(variablePath: string): any {\n    if (!variablePath) {\n      throw new Error(`Variable path cannot be empty.`);\n    }\n\n    const parts = variablePath.split('.');\n    let value: any;\n\n    try {\n      value = this.scope.get(parts[0]);\n    } catch (error) {\n      throw new Error(`Variable \"${parts[0]}\" is not defined in the scope.`);\n    }\n\n    for (let i = 1; i < parts.length; i++) {\n      const part = parts[i];\n      if (value == null) {\n        throw new Error(\n          `Cannot access property \"${part}\" of null or undefined in \"${variablePath}\".`\n        );\n      }\n      value = value[part];\n    }\n\n    return value;\n  }\n\n  evaluateBinaryExpression(node: jsep.BinaryExpression): any {\n    const operatorFunctions: { [key: string]: OperatorFunction } = {\n      '+': (left, right) => left + this.evaluateJsepExpression(right),\n      '-': (left, right) => left - this.evaluateJsepExpression(right),\n      '*': (left, right) => left * this.evaluateJsepExpression(right),\n      '/': (left, right) => left / this.evaluateJsepExpression(right),\n      '%': (left, right) => left % this.evaluateJsepExpression(right),\n      '==': (left, right) => left == this.evaluateJsepExpression(right),\n      '!=': (left, right) => left != this.evaluateJsepExpression(right),\n      '>': (left, right) => left > this.evaluateJsepExpression(right),\n      '>=': (left, right) => left >= this.evaluateJsepExpression(right),\n      '<': (left, right) => left < this.evaluateJsepExpression(right),\n      '<=': (left, right) => left <= this.evaluateJsepExpression(right),\n      '&&': (left, right) => left && this.evaluateJsepExpression(right),\n      '||': (left, right) => left || this.evaluateJsepExpression(right),\n    };\n    const operator = node.operator;\n\n    const operation = operatorFunctions[operator];\n    if (!operation) {\n      throw new Error(`Operator \"${operator}\" is not allowed.`);\n    }\n\n    const left = this.evaluateJsepExpression(node.left);\n\n    return operation(left, node.right);\n  }\n\n  evaluateUnaryExpression(node: jsep.UnaryExpression): any {\n    const argument = this.evaluateJsepExpression(node.argument);\n    switch (node.operator) {\n      case '+':\n        return +argument;\n      case '-':\n        return -argument;\n      case '!':\n        return !argument;\n      default:\n        throw new Error(`Unsupported operator: ${node.operator}`);\n    }\n  }\n\n  evaluateMemberExpression(node: jsep.MemberExpression): any {\n    const object = this.evaluateJsepExpression(node.object);\n    const property = node.computed\n      ? this.evaluateJsepExpression(node.property)\n      : (node.property as jsep.Identifier).name;\n\n    if (object && typeof object === 'object' && property in object) {\n      if (object[property] === undefined) return '';\n      return object[property];\n    } else {\n      return '';\n    }\n  }\n\n  async processMdxJsxElement(\n    node: MdxJsxFlowElement | MdxJsxTextElement\n  ): Promise<Node | Node[]> {\n    try {\n      const tagName = node.name!;\n      const plugin = TagPluginRegistry.get(tagName);\n      if (plugin) {\n        const props = this.evaluateProps(node);\n        const pluginContext: PluginContext = {\n          createNodeTransformer: (scope: Scope) => new NodeTransformer(scope),\n          scope: this.scope,\n          tagName,\n          nodeHelpers,\n        };\n        const result = await plugin.transform(props, node.children, pluginContext);\n        return result;\n      } else {\n        const newNode = { ...node } as Parent;\n\n        const processedChildren = await Promise.all(\n          node.children.map(async (child) => {\n            const childTransformer = new NodeTransformer(this.scope);\n            const result = await childTransformer.transformNode(child);\n            return Array.isArray(result) ? result : [result];\n          })\n        );\n\n        newNode.children = processedChildren.flat() as RootContent[];\n        return newNode;\n      }\n    } catch (error) {\n      throw new Error(\n        `Error processing MDX JSX Element: ${(error as Error).message}`\n      );\n    }\n  }\n\n  evaluateProps(node: any): Record<string, any> {\n    const props: Record<string, any> = {};\n\n    for (const attr of node.attributes) {\n      if (attr.type === MDX_JSX_ATTRIBUTE_TYPES.MDX_JSX_ATTRIBUTE) {\n        if (attr.value === null || typeof attr.value === 'string') {\n          props[attr.name] = attr.value || '';\n        } else if (\n          attr.value.type ===\n          MDX_JSX_ATTRIBUTE_TYPES.MDX_JSX_ATTRIBUTE_VALUE_EXPRESSION\n        ) {\n          const expression = attr.value.value;\n          props[attr.name] = this.resolveExpression(expression);\n        }\n      } else if (\n        attr.type === MDX_JSX_ATTRIBUTE_TYPES.MDX_JSX_EXPRESSION_ATTRIBUTE\n      ) {\n        throw new Error(\n          `Unsupported attribute type in component <${node.name}>.`\n        );\n      }\n    }\n\n    return props;\n  }\n}\n\nexport const transformTree = async (\n  tree: Root,\n  props: Record<string, any> = {},\n  shared: Record<string, any> = {},\n): Promise<Root> => {\n  const scope = new Scope({ props }, shared);\n  const transformer = new NodeTransformer(scope);\n  const processedTree = await transformer.transformNode(tree);\n  return processedTree as Root;\n};\n","import { NODE_TYPES, MDX_JSX_ATTRIBUTE_TYPES } from './constants';\nimport { getDirname, resolvePath, cloneObject } from './utils';\nimport { visit } from 'unist-util-visit';\nimport type { Root, RootContent, Paragraph, Parent, Node } from 'mdast';\nimport type { ComponentASTs, ContentLoader } from './types';\nimport { SKIP } from 'unist-util-visit';\nimport {\n  isMdxJsxElement,\n  isParentNode,\n  parse,\n} from './ast-utils';\n\nexport async function bundle(\n  mdxContent: string,\n  baseDir: string,\n  contentLoader: ContentLoader\n): Promise<Root> {\n  const processedFiles = new Set<string>();\n  const mainAbsolutePath = resolvePath(baseDir, '__PROMPTDX_IGNORE__.mdx');\n\n  const { tree: mainTree, componentASTs } = await processMdxContent(\n    mdxContent,\n    mainAbsolutePath,\n    new Set(),\n    processedFiles,\n    contentLoader\n  );\n\n  await inlineComponents(mainTree, componentASTs);\n\n  return mainTree;\n}\n\nasync function processMdxContent(\n  content: string,\n  absolutePath: string,\n  callStack: Set<string>,\n  processedFiles: Set<string>,\n  contentLoader: ContentLoader\n): Promise<{ tree: Root; componentASTs: ComponentASTs }> {\n  if (processedFiles.has(absolutePath)) {\n    return { tree: { type: 'root', children: [] }, componentASTs: {} };\n  }\n\n  if (callStack.has(absolutePath)) {\n    throw new Error(\n      `Circular import detected: ${[...callStack, absolutePath].join(' -> ')}`\n    );\n  }\n\n  callStack.add(absolutePath);\n\n  const tree = parse(content);\n  removeComments(tree);\n  const imports = extractImports(tree, absolutePath);\n  const componentASTs: ComponentASTs = {};\n\n  for (const [componentName, sourcePath] of Object.entries(imports)) {\n    const importAbsolutePath = resolvePath(getDirname(absolutePath), sourcePath);\n    const importedContent = await contentLoader(importAbsolutePath);\n\n    const { tree: componentTree, componentASTs: nestedComponentASTs } =\n      await processMdxContent(\n        importedContent,\n        importAbsolutePath,\n        new Set(callStack),\n        processedFiles,\n        contentLoader\n      );\n\n    Object.assign(componentASTs, nestedComponentASTs);\n    componentASTs[componentName] = componentTree.children;\n  }\n\n  tree.children = tree.children.filter(\n    (node: any) => node.type !== NODE_TYPES.MDX_JSX_ESM\n  );\n  processedFiles.add(absolutePath);\n  callStack.delete(absolutePath);\n\n  return { tree, componentASTs };\n}\n\nfunction removeComments(tree: Root): void {\n  visit(tree, (node, index, parent) => {\n    if (isCommentNode(node) && parent) {\n      parent.children.splice(index!, 1);\n      return [SKIP, index];\n    }\n  });\n}\n\nfunction isCommentNode(node: Node): boolean {\n  if (\n    node.type === NODE_TYPES.MDX_FLOW_EXPRESSION ||\n    node.type === NODE_TYPES.MDX_TEXT_EXPRESSION\n  ) {\n    const value = (node as any).value.trim();\n    return (\n      (value.startsWith('/*') && value.endsWith('*/')) ||\n      value.startsWith('//')\n    );\n  }\n  return false;\n}\n\nfunction extractImports(tree: Root, absolutePath: string): Record<string, string> {\n  const imports: Record<string, string> = {};\n\n  visit(tree, NODE_TYPES.MDX_JSX_ESM, (node: any) => {\n    const estree = node.data?.estree;\n\n    if (!estree) {\n      throw new Error(`No ESTree found in ${absolutePath}`);\n    }\n\n    for (const stmt of estree.body) {\n      if (stmt.type === 'ImportDeclaration') {\n        const defaultSpecifier = stmt.specifiers.find(\n          (spec: any) => spec.type === 'ImportDefaultSpecifier'\n        );\n\n        if (\n          stmt.specifiers.some(\n            (spec: any) => spec.type !== 'ImportDefaultSpecifier'\n          )\n        ) {\n          throw new Error(\n            `Only default imports are supported. Invalid import in ${absolutePath}: ${node.value.trim()}`\n          );\n        }\n\n        if (defaultSpecifier) {\n          const importedName = defaultSpecifier.local.name;\n          const source = stmt.source.value as string;\n          imports[importedName] = source;\n        } else {\n          throw new Error(\n            `Invalid import in ${absolutePath}: ${node.value.trim()}`\n          );\n        }\n      } else if (stmt.type.startsWith('Export')) {\n        throw new Error(\n          `Exports are not supported. Found in ${absolutePath}: ${node.value.trim()}`\n        );\n      }\n    }\n  });\n\n  return imports;\n}\n\nasync function inlineComponents(\n  tree: Root,\n  componentASTs: ComponentASTs\n): Promise<void> {\n  let hasReplacements: boolean;\n\n  do {\n    hasReplacements = inlineJsxElements(tree, componentASTs);\n  } while (hasReplacements);\n}\n\nfunction inlineJsxElements(\n  tree: Root | Parent,\n  componentASTs: ComponentASTs,\n  parentProps: Record<string, any> = {}\n): boolean {\n  let replaced = false;\n\n  visit(\n    tree,\n    [NODE_TYPES.MDX_JSX_FLOW_ELEMENT, NODE_TYPES.MDX_JSX_TEXT_ELEMENT],\n    (node: any, index, parent) => {\n      const componentName = node.name;\n      if (componentASTs[componentName]) {\n        const componentNodes = cloneObject(componentASTs[componentName]);\n        const props = extractRawProps(node, parentProps);\n        const childrenContent = node.children || [];\n\n        const processedComponentNodes = componentNodes.map((childNode: any) =>\n          inlineComponentsAndResolveProps(\n            childNode,\n            props,\n            childrenContent,\n            componentASTs\n          )\n        );\n\n        parent.children.splice(index, 1, ...processedComponentNodes.flat());\n        replaced = true;\n      }\n    }\n  );\n\n  return replaced;\n}\n\nfunction extractRawProps(\n  node: any,\n  parentProps: Record<string, any>\n): Record<string, any> {\n  const props: Record<string, any> = {};\n\n  for (const attr of node.attributes) {\n    if (attr.type === MDX_JSX_ATTRIBUTE_TYPES.MDX_JSX_ATTRIBUTE) {\n      if (attr.value === null || typeof attr.value === 'string') {\n        props[attr.name] = JSON.stringify(attr.value || '');\n      } else if (attr.value.type === MDX_JSX_ATTRIBUTE_TYPES.MDX_JSX_ATTRIBUTE_VALUE_EXPRESSION) {\n        const { value: resolvedValue } = substitutePropsInExpression(\n          attr.value.value,\n          parentProps\n        );\n        props[attr.name] = resolvedValue;\n      }\n    } else if (attr.type === MDX_JSX_ATTRIBUTE_TYPES.MDX_JSX_EXPRESSION_ATTRIBUTE) {\n      throw new Error(\n        `Only literal attribute values are supported. Invalid attribute in component <${node.name}>.`\n      );\n    }\n  }\n\n  return props;\n}\n\nfunction substitutePropsInExpression(\n  expression: string,\n  props: Record<string, any>,\n): { value: string; isLiteral: boolean } {\n  const propRegex = /props\\.(\\w+)/g;\n  const visitedProps = new Set();\n  let currentExpression = expression;\n\n  const substitute = (expr: string): string => {\n    return expr.replace(propRegex, (match, propName) => {\n      if (visitedProps.has(propName)) {\n        throw new Error(`Circular reference detected for property '${propName}'.`);\n      }\n      if (props.hasOwnProperty(propName)) {\n        visitedProps.add(propName);\n        const propValue = props[propName];\n        if (typeof propValue === 'string') {\n          return substitute(propValue);\n        } else {\n          return String(propValue);\n        }\n      } else {\n        return match;\n      }\n    });\n  };\n\n  try {\n    currentExpression = substitute(currentExpression);\n  } catch (error) {\n    throw new Error(`Error substituting props in expression: ${(error as Error).message}`);\n  }\n\n  const isLiteral = /^['\"].*['\"]$|^\\d+(\\.\\d+)?$/.test(currentExpression);\n\n  return { value: currentExpression, isLiteral };\n}\n\nfunction inlineComponentsAndResolveProps(\n  node: Node,\n  props: Record<string, any>,\n  childrenContent: RootContent[],\n  componentASTs: ComponentASTs\n): Node | Node[] {\n  if (\n    node.type === NODE_TYPES.MDX_TEXT_EXPRESSION ||\n    node.type === NODE_TYPES.MDX_FLOW_EXPRESSION\n  ) {\n    if ((node as any).value === 'props.children') {\n      const childrenTree: Root = { type: 'root', children: [...childrenContent] };\n      inlineComponents(childrenTree, componentASTs);\n      return combinedNodesIntoParagraph(childrenTree.children);\n    } else if ((node as any).value.includes('props.')) {\n      const { value: resolvedValue, isLiteral } = substitutePropsInExpression(\n        (node as any).value,\n        props\n      );\n\n      if (isLiteral) {\n        return {\n          type: NODE_TYPES.TEXT,\n          value: JSON.parse(resolvedValue),\n        } as Node;\n      } else {\n        return {\n          type: node.type,\n          value: resolvedValue,\n        } as Node;\n      }\n    }\n  }\n\n  if (isMdxJsxElement(node)) {\n    const componentName = node.name!;\n    if (componentASTs[componentName]) {\n      const componentNodes = cloneObject(componentASTs[componentName]);\n      const newProps = extractRawProps(node, props);\n      const childrenContent = node.children || [];\n\n      const processedComponentNodes = componentNodes.map((childNode: any) =>\n        inlineComponentsAndResolveProps(\n          childNode,\n          newProps,\n          childrenContent,\n          componentASTs\n        )\n      );\n\n      return processedComponentNodes.flat();\n    }\n  }\n\n  if (isParentNode(node)) {\n    const newNode = node as Parent;\n    newNode.children = newNode.children.flatMap((child) =>\n      inlineComponentsAndResolveProps(\n        child,\n        props,\n        childrenContent,\n        componentASTs\n      )\n    ) as RootContent[];\n  }\n\n  return node;\n}\n\nfunction combinedNodesIntoParagraph(nodes: RootContent[]): RootContent[] {\n  const contentChildren: RootContent[] = [];\n\n  nodes.forEach((node, index) => {\n    if (node.type === NODE_TYPES.PARAGRAPH || node.type === NODE_TYPES.LIST) {\n      contentChildren.push(...(node as Parent).children);\n    } else {\n      contentChildren.push(node);\n    }\n\n    if (index !== nodes.length - 1) {\n      contentChildren.push({ type: NODE_TYPES.TEXT, value: '\\n' });\n    }\n  });\n\n  if (contentChildren.length > 0) {\n    return [\n      {\n        type: NODE_TYPES.PARAGRAPH,\n        children: contentChildren,\n      } as Paragraph,\n    ];\n  }\n\n  return [];\n}\n","import { Node } from 'mdast';\nimport { Scope } from './scope';\nimport { NODE_TYPES } from './constants';\n\nexport interface NodeHelpers {\n  isMdxJsxElement(node: Node): boolean;\n  isMdxJsxFlowElement(node: Node): boolean;\n  isMdxJsxTextElement(node: Node): boolean;\n  isParentNode(node: Node): boolean;\n  toMarkdown(node: Node): string;\n  hasFunctionBody(node: Node): boolean;\n  getFunctionBody(node: Node): { body: Node[]; argumentNames: string[] };\n  NODE_TYPES: typeof NODE_TYPES;\n}\n\nexport interface PluginContext {\n  nodeHelpers: NodeHelpers;\n  createNodeTransformer: (scope: Scope) => any;\n  scope: Scope;\n  tagName: string;\n}\n\nexport abstract class TagPlugin<Props = Record<string, any>> {\n  abstract transform(\n    props: Props,\n    children: Node[],\n    context: PluginContext\n  ): Promise<Node[] | Node>;\n}\n","import { Node, Parent } from 'mdast';\nimport { TagPlugin, PluginContext } from '../tag-plugin';\n\nexport const Tags = ['ForEach'];\n\nexport interface ForEachProps<T = any> {\n  children: (item: T, index: number) => any;\n  arr: Array<T>;\n}\n\nexport class ForEachPlugin extends TagPlugin {\n  async transform(\n    props: Record<string, any>,\n    children: Node[],\n    context: PluginContext\n  ): Promise<Node[] | Node> {\n    const {\n      scope,\n      createNodeTransformer,\n      nodeHelpers\n    } = context;\n\n    const { hasFunctionBody, getFunctionBody, NODE_TYPES } = nodeHelpers;\n\n    function areAllListItems(resultNodesPerItem: Node[][]): boolean {\n      return resultNodesPerItem.every((processedNodes) =>\n        processedNodes.every(\n          (n: Node) =>\n            n.type === NODE_TYPES.LIST || n.type === NODE_TYPES.LIST_ITEM\n        )\n      );\n    }\n\n    function collectListItems(resultNodesPerItem: Node[][]): Node[] {\n      return resultNodesPerItem.flatMap((processedNodes) =>\n        processedNodes.flatMap((n: Node) => {\n          if (n.type === NODE_TYPES.LIST) {\n            return (n as Parent).children;\n          } else if (n.type === NODE_TYPES.LIST_ITEM) {\n            return n;\n          } else {\n            return [];\n          }\n        })\n      );\n    }\n\n\n    if (children.length !== 1) {\n      throw new Error(`ForEach expects exactly one child function.`);\n    }\n    const childNode = children[0];\n    if (!hasFunctionBody(childNode)) {\n      throw new Error('ForEach expects a function as its child.');\n    }\n    const { body, argumentNames } = getFunctionBody(childNode);\n    const arr = props['arr'];\n    if (!Array.isArray(arr)) {\n      throw new Error(`The 'arr' prop for <ForEach> must be an array.`);\n    }\n\n    const itemParamName = argumentNames[0];\n    const indexParamName = argumentNames[1];\n    const resultNodesPerItem = await Promise.all(\n      arr.map(async (item: any, index: number) => {\n        const itemScope = scope.createChild({\n          ...(itemParamName && { [itemParamName]: item }),\n          ...(indexParamName && { [indexParamName]: index }),\n        });\n        const itemTransformer = createNodeTransformer(itemScope);\n        const processedChildren = await Promise.all(\n          body.map(async (child) => {\n            const result = await itemTransformer.transformNode(child);\n            return Array.isArray(result) ? result : [result];\n          })\n        );\n        return processedChildren.flat();\n      })\n    );\n    const resultNodes = resultNodesPerItem.flat();\n    if (areAllListItems(resultNodesPerItem)) {\n      return [\n        {\n          type: NODE_TYPES.LIST,\n          ordered: false,\n          spread: false,\n          children: collectListItems(resultNodesPerItem),\n        } as Node,\n      ];\n    } else {\n      return resultNodes;\n    }\n  }\n}\n","import { Node } from \"mdast\";\nimport { TagPlugin, PluginContext } from \"../tag-plugin\";\n\nexport interface IfProps {\n  condition: boolean;\n  children: any;\n}\n\nexport interface ElseIfProps {\n  condition: boolean;\n  children: any;\n}\n\nexport interface ElseProps {\n  children: any;\n}\n\nexport const Tags = ['If', 'ElseIf', 'Else'];\n\nexport class ConditionalPlugin extends TagPlugin {\n  async transform(\n    props: Record<string, any>,\n    children: Node[],\n    context: PluginContext\n  ): Promise<Node[] | Node> {\n    const { scope, createNodeTransformer, tagName } = context;\n\n    if (!tagName) {\n      throw new Error(\"The 'tagName' must be provided in the context.\");\n    }\n\n    let conditionMet = scope.getLocal(\"conditionMet\");\n    if (conditionMet === undefined) {\n      scope.setLocal(\"conditionMet\", false);\n      conditionMet = false;\n    }\n\n    if (conditionMet) {\n      return [];\n    }\n\n    let shouldRender = false;\n\n    if (tagName === \"If\" || tagName === \"ElseIf\") {\n      const condition = props[\"condition\"];\n      if (typeof condition !== \"boolean\") {\n        throw new Error(\n          `The 'condition' prop for <${tagName}> must be a boolean.`\n        );\n      }\n      if (condition) {\n        shouldRender = true;\n      }\n    } else if (tagName === \"Else\") {\n      shouldRender = true;\n    } else {\n      throw new Error(`Unsupported element type: ${tagName}`);\n    }\n\n    if (shouldRender) {\n      scope.setLocal(\"conditionMet\", true);\n      const childScope = scope.createChild();\n      const transformer = createNodeTransformer(childScope);\n\n      const results: Node[] = [];\n      for (const child of children) {\n        const transformed = await transformer.transformNode(child);\n        if (Array.isArray(transformed)) {\n          results.push(...transformed);\n        } else if (transformed) {\n          results.push(transformed);\n        }\n      }\n\n      return results;\n    }\n\n    return [];\n  }\n}\n","import { Node, Root } from \"mdast\";\nimport { TagPlugin, PluginContext } from \"../tag-plugin\";\n\nexport interface RawProps {\n  children: any;\n}\n\nexport const Tags = ['Raw'];\n\nexport class RawPlugin extends TagPlugin {\n  async transform(\n    _props: Record<string, any>,\n    children: Node[],\n    context: PluginContext\n  ): Promise<Node[] | Node> {\n    const { nodeHelpers } = context;\n    const rawContent = nodeHelpers.toMarkdown({\n        type: 'root',\n        children: children,\n    } as Root);\n    return [\n      {\n        type: 'text',\n        value: rawContent,\n      } as Node,\n    ];\n  }\n}","import { FilterFunction } from '../filter-registry';\n\nexport interface Filters {\n  capitalize: FilterFunction<string, string>;\n  upper: FilterFunction<string, string>;\n  lower: FilterFunction<string, string>;\n  truncate: FilterFunction<string, string, [number]>;\n  abs: FilterFunction<number, number>;\n  join: FilterFunction<any[], string, [string?]>;\n  round: FilterFunction<number, number, [number?]>;\n  replace: FilterFunction<string, string, [string, string]>;\n  urlencode: FilterFunction<string, string>;\n  dump: FilterFunction<any, string>;\n}\n\nexport const capitalize: Filters['capitalize'] = (input) => {\n  if (typeof input !== \"string\") return input;\n  return input.charAt(0).toUpperCase() + input.slice(1);\n};\n\nexport const upper: Filters['upper'] = (input) => {\n  if (typeof input !== \"string\") return input;\n  return input.toUpperCase();\n};\n\nexport const lower: Filters['lower']= (input) => {\n  if (typeof input !== \"string\") return input;\n  return input.toLowerCase();\n};\n\nexport const truncate: Filters['truncate'] = (input, length) => {\n  if (typeof input !== \"string\") return input;\n  if (input.length <= length) return input;\n  return input.substring(0, length) + \"...\";\n};\n\nexport const abs: Filters['abs'] = (input) => {\n  return Math.abs(input);\n};\n\nexport const join: Filters['join'] = (input, separator = \", \") => {\n  if (!Array.isArray(input)) return input;\n  return input.join(separator);\n};\n\nexport const round: Filters['round'] = (input, decimals = 0) => {\n  return Number(Math.round(Number(input + \"e\" + decimals)) + \"e-\" + decimals);\n};\n\nexport const replace: Filters['replace'] = (input, search, replace) => {\n  if (typeof input !== \"string\") return input;\n  return input.split(search).join(replace);\n};\n\nexport const urlencode: Filters['urlencode']= (input) => {\n  if (typeof input !== \"string\") return input;\n  return encodeURIComponent(input);\n};\n\nexport const dump: Filters['dump'] = (input) => {\n  return JSON.stringify(input);\n};\n","import { ForEachPlugin, Tags as ForEachTags } from './tag-plugins/for-each';\nimport { ConditionalPlugin, Tags as ConditionalTags } from './tag-plugins/conditional';\nimport { RawPlugin, Tags as RawTags } from './tag-plugins/raw';\nimport { TagPluginRegistry } from './tag-plugin-registry';\n\nimport { FilterRegistry } from \"./filter-registry\";\nimport {\n  capitalize,\n  upper,\n  lower,\n  truncate,\n  abs,\n  join,\n  round,\n  replace,\n  urlencode,\n  dump,\n} from \"./filter-plugins\";\n\n\nTagPluginRegistry.register(new ForEachPlugin(), ForEachTags);\nTagPluginRegistry.register(new ConditionalPlugin(), ConditionalTags);\nTagPluginRegistry.register(new RawPlugin(), RawTags);\n\nFilterRegistry.register(\"capitalize\", capitalize);\nFilterRegistry.register(\"upper\", upper);\nFilterRegistry.register(\"lower\", lower);\nFilterRegistry.register(\"truncate\", truncate);\nFilterRegistry.register(\"abs\", abs);\nFilterRegistry.register(\"join\", join);\nFilterRegistry.register(\"round\", round);\nFilterRegistry.register(\"replace\", replace);\nFilterRegistry.register(\"urlencode\", urlencode);\nFilterRegistry.register(\"dump\", dump)","import { transformTree } from \"./transformer\";\nimport { bundle } from \"./bundler\";\nimport {\n  compressAst,\n  stringify,\n  getFrontMatter,\n} from \"./ast-utils\";\nimport { TagPluginRegistry } from \"./tag-plugin-registry\";\nimport { TagPlugin, PluginContext } from \"./tag-plugin\";\nimport { FilterRegistry } from \"./filter-registry\";\nimport type { FilterFunction } from \"./filter-registry\";\nimport type { ContentLoader } from \"./types\";\nimport type { Root } from \"mdast\";\nimport { getDirname } from \"./utils\";\nimport type { BaseMDXProvidedComponents } from './types';\nimport './global.d';\nimport './register-builtin-plugins';\n\nconst readFile = async (path: string) => {\n  // @ts-ignore\n  if (typeof Deno !== 'undefined') {\n    // @ts-ignore\n    return await Deno.readTextFile(path);\n  } else if (typeof require !== 'undefined') {\n    const { readFile } = await import('fs/promises');\n    return await readFile(path, 'utf8');\n  } else {\n    throw new Error('Unsupported environment');\n  }\n};\n\nasync function load (path: string) {\n  const file = await readFile(path);\n  const componentLoader = async (path: string) => readFile(path);\n  return bundle(file, getDirname(path), componentLoader);\n}\n\nexport type {\n  ContentLoader,\n  Root as Ast,\n  PluginContext,\n  FilterFunction,\n  BaseMDXProvidedComponents\n};\nexport {\n  stringify,\n  bundle as parse,\n  getFrontMatter,\n  compressAst,\n  load,\n  transformTree as transform,\n  TagPluginRegistry,\n  TagPlugin,\n  FilterRegistry\n};","import { IModelPlugin } from \"./model-plugin\";\n\nexport class ModelPluginRegistry {\n  public static plugins: Map<string, IModelPlugin> = new Map<\n    string,\n    IModelPlugin\n  >();\n\n  public static register(\n    modelPlugin: IModelPlugin<any, any>,\n    ids: string[]\n  ) {\n    for (const id of ids) {\n      this.plugins.set(id, modelPlugin);\n    }\n  }\n\n  public static registerAll(\n    pluginEntries: { provider: IModelPlugin<any, any>; models: string[] }[]\n  ) {\n    for (const entry of pluginEntries) {\n      this.register(entry.provider, entry.models);\n    }\n  }\n\n  public static getPlugin(id: string) {\n    return this.plugins.get(id);\n  }\n\n  public static removePlugin(id: string) {\n    this.plugins.delete(id);\n  }\n\n  public static clearRegistry() {\n    this.plugins.clear();\n  }\n}\n","import { TagPlugin, PluginContext } from \"@puzzlet/templatedx\";\nimport { Node } from \"mdast\";\n\nexport class ExtractTextPlugin extends TagPlugin {\n  async transform(\n    _props: Record<string, any>,\n    children: Node[],\n    pluginContext: PluginContext\n  ): Promise<Node[] | Node> {\n    const { scope, tagName, createNodeTransformer, nodeHelpers } =\n      pluginContext;\n\n    if (!tagName) {\n      throw new Error(\"elementName must be provided in pluginContext\");\n    }\n\n    const promise = new Promise(async (resolve, reject) => {\n      try {\n        const childScope = scope.createChild();\n        const transformer = createNodeTransformer(childScope);\n        const processedChildren = await Promise.all(\n          children.map(async (child) => {\n            const result = await transformer.transformNode(child);\n            return Array.isArray(result) ? result : [result];\n          })\n        );\n        const flattenedChildren = processedChildren.flat();\n        const extractedText = nodeHelpers.toMarkdown({\n          type: \"root\",\n          // @ts-ignore\n          children: flattenedChildren,\n        });\n        resolve({ content: extractedText.trim(), name: tagName });\n      } catch (error) {\n        reject(error);\n      }\n    });\n\n    const promises = scope.getShared(\"__puzzlet-extractTextPromises\");\n    if (!promises) {\n      scope.setShared(\"__puzzlet-extractTextPromises\", [promise]);\n    } else {\n      promises.push(promise);\n    }\n  \n    return [];\n  }\n}\n","import { z } from \"zod\";\n\nexport const ChatMessageSchema = z.object({\n  role: z.enum(['system', 'user', 'assistant']),\n  content: z.string(),\n});\n\nconst AgentMarkBaseSettingsSchema = z.object({\n  max_tokens: z.number().optional(),\n  temperature: z.number().optional(),\n  max_llm_calls: z.number().optional(),\n  top_p: z.number().optional(),\n  top_k: z.number().optional(),\n  presence_penalty: z.number().optional(),\n  frequency_penalty: z.number().optional(),\n  stop_sequences: z.array(z.string()).optional(),\n  seed: z.number().optional(),\n  max_retries: z.number().optional(),\n  headers: z.record(z.string()).optional(),\n});\n\nexport const AgentMarkTextSettingsSchema = AgentMarkBaseSettingsSchema.extend({\n  tools: z\n    .record(\n      z.object({\n        description: z.string(),\n        parameters: z.unknown(),\n      })\n    )\n    .optional(),\n});\n\nexport const AgentMarkSchemaSettingsSchema = AgentMarkBaseSettingsSchema.extend({\n  schema: z.unknown(),\n});\n\nexport const AgentMarkSettingsSchema = AgentMarkBaseSettingsSchema.extend({\n  schema: z.unknown().optional(),\n  tools: z\n    .record(\n      z.object({\n        description: z.string(),\n        parameters: z.unknown(),\n      })\n    )\n    .optional(),\n}).refine((data) => ('schema' in data ? !('tools' in data) : true), {\n  message: \"'schema' cannot coexist with 'tools'.\",\n});\n\nconst MetadataSchema = z.object({\n  model: z.object({\n    name: z.string(),\n    settings: AgentMarkSettingsSchema,\n  }),\n});\n\nexport const AgentMarkSchema = z.object({\n  name: z.string(),\n  messages: z.array(ChatMessageSchema),\n  metadata: MetadataSchema,\n});","export type Tool = (...args: any[]) => Promise<any>;\n\nexport class ToolPluginRegistry {\n  public static tools: Map<string, Tool> = new Map<string, Tool>();\n\n  public static register(toolFunction: Tool, name: string) {\n    if (this.tools.has(name)) {\n      throw new Error(`Tool with the name \"${name}\" is already registered.`);\n    }\n    this.tools.set(name, toolFunction);\n  }\n\n  public static registerAll(toolEntries: { toolFunction: Tool; name: string }[]) {\n    for (const entry of toolEntries) {\n      this.register(entry.toolFunction, entry.name);\n    }\n  }\n\n  public static getTool(name: string): Tool | undefined {\n    return this.tools.get(name);\n  }\n\n  public static removeTool(name: string) {\n    if (!this.tools.delete(name)) {\n      throw new Error(`Tool with the name \"${name}\" does not exist.`);\n    }\n  }\n\n  public static clearRegistry() {\n    this.tools.clear();\n  }\n}","import {\n  AgentMarkStreamOutput,\n  AgentMarkTextSettings,\n  ChatMessage,\n  InferenceOptions,\n  JSONObject,\n} from \"./types\";\nimport { jsonSchema, LanguageModel } from \"ai\";\nimport { AgentMarkOutput, AgentMarkSettings, AISDKBaseSettings } from \"./types\";\nimport { streamObject, streamText, generateObject, generateText } from \"ai\";\nimport { ToolPluginRegistry } from \"./tool-plugin-registry\";\nimport { AgentMarkSettingsSchema } from \"./schemas\";\n\nconst OUTPUT_VERSION = \"v2.0\";\n\nexport function omit<T extends JSONObject>(\n  obj: T,\n  ...keysToOmit: (keyof T)[]\n): Partial<T> {\n  const result: Partial<T> = {};\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && !keysToOmit.includes(key)) {\n      result[key] = obj[key];\n    }\n  }\n\n  return result;\n}\n\nexport function toFrontMatter(content: JSONObject): string {\n  function jsonToFrontMatter(json: JSONObject, indent = 0) {\n    let frontMatter = \"\";\n    const indentation = \"  \".repeat(indent);\n\n    for (const key in json) {\n      if (json.hasOwnProperty(key)) {\n        const value = json[key];\n\n        if (typeof value === \"object\" && !Array.isArray(value)) {\n          frontMatter += `${indentation}${key}:\\n`;\n          frontMatter += jsonToFrontMatter(value, indent + 1);\n        } else if (Array.isArray(value)) {\n          frontMatter += `${indentation}${key}:\\n`;\n          value.forEach((item) => {\n            if (typeof item === \"object\") {\n              frontMatter += `${indentation}-\\n`;\n              frontMatter += jsonToFrontMatter(item, indent + 2);\n            } else {\n              frontMatter += `${indentation}- ${item}\\n`;\n            }\n          });\n        } else {\n          frontMatter += `${indentation}${key}: ${value}\\n`;\n        }\n      }\n    }\n\n    return frontMatter;\n  }\n\n  return `---\\n${jsonToFrontMatter(content)}---\\n`;\n}\n\nexport function getEnv(key: string) {\n  if (process.env[key]) {\n    return process.env[key];\n  }\n\n  throw new Error(`Env not found: ${key}`);\n}\n\nexport function createToolsConfig(tools: AgentMarkTextSettings[\"tools\"]) {\n  if (!tools) return undefined;\n  return Object.entries(tools).reduce((acc: any, [toolName, toolData]) => {\n    const toolFn = ToolPluginRegistry.getTool(toolName);\n    acc[toolName] = {\n      description: toolData.description,\n      parameters: jsonSchema(toolData.parameters as any),\n      execute: toolFn,\n    };\n    return acc;\n  }, {});\n}\n\nexport function getBaseSettings(\n  config: AgentMarkSettings,\n  model: LanguageModel,\n  messages: Array<ChatMessage>\n): AISDKBaseSettings {\n  return {\n    messages: messages,\n    model: model,\n    maxTokens: config.max_tokens,\n    temperature: config.temperature,\n    topK: config.top_k,\n    maxSteps: config.max_llm_calls,\n    topP: config.top_p,\n    presencePenalty: config.frequency_penalty,\n    stopSequences: config.stop_sequences,\n    seed: config.seed,\n    maxRetries: config.max_retries,\n    headers: config.headers,\n  };\n}\n\nexport async function runInference(\n  config: AgentMarkSettings,\n  model: LanguageModel,\n  messages: Array<ChatMessage>,\n  options?: InferenceOptions\n): Promise<AgentMarkOutput> {\n  const baseConfig = getBaseSettings(config, model, messages);\n  baseConfig.experimental_telemetry = options?.telemetry;\n  const settings = AgentMarkSettingsSchema.parse(config);\n  if (\"schema\" in settings) {\n    const result = await generateObject({\n      ...baseConfig,\n      schema: jsonSchema(settings.schema as any),\n    });\n    return {\n      result: result.object,\n      tools: [],\n      version: OUTPUT_VERSION,\n      usage: result.usage,\n      finishReason: result.finishReason,\n    };\n  } else {\n    const tools = createToolsConfig(settings.tools);\n    const result = await generateText({\n      ...baseConfig,\n      tools,\n    });\n    return {\n      result: result.text,\n      version: OUTPUT_VERSION,\n      tools: result.toolCalls.map((tool) => ({\n        name: tool.toolName,\n        input: tool.args,\n      })),\n      steps: result.steps,\n      toolResponses: result.toolResults,\n      usage: result.usage,\n      finishReason: result.finishReason,\n    };\n  }\n}\n\nexport async function streamInference(\n  config: AgentMarkSettings,\n  model: LanguageModel,\n  messages: Array<ChatMessage>,\n  options?: InferenceOptions\n): Promise<AgentMarkStreamOutput> {\n  const baseConfig = getBaseSettings(config, model, messages);\n  baseConfig.experimental_telemetry = options?.telemetry;\n  const settings = AgentMarkSettingsSchema.parse(config);\n  if (\"schema\" in settings) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const { partialObjectStream, usage } = streamObject({\n          ...baseConfig,\n          schema: jsonSchema(settings.schema as any),\n        });\n        resolve({\n          resultStream: partialObjectStream as AsyncIterable<Partial<any>>,\n          version: OUTPUT_VERSION,\n          usage: usage,\n          finishReason: Promise.resolve(\"unknown\"),\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  } else {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const { textStream, usage, toolCalls, toolResults, finishReason, steps } = streamText({\n          ...baseConfig,\n          tools: createToolsConfig(settings.tools),\n        });\n        resolve({\n          resultStream: textStream as AsyncIterable<Partial<any>>,\n          version: OUTPUT_VERSION,\n          usage: usage,\n          tools: toolCalls.then((calls) => calls.map((call) => ({\n            name: call.toolName,\n            input: call.args,\n          }))),\n          toolResponses: toolResults,\n          finishReason: finishReason as any,\n          steps,\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n","import { toFrontMatter, runInference, getEnv, streamInference } from \"./utils\"\n\nconst PluginAPI = {\n  toFrontMatter,\n  runInference,\n  getEnv,\n  fetch,\n  streamInference\n};\n\nexport { PluginAPI };\n\ntype IPluginAPI = typeof PluginAPI;\n\nexport { IPluginAPI };","import type { Ast } from \"@puzzlet/templatedx\";\nimport { TagPluginRegistry, transform, getFrontMatter } from \"@puzzlet/templatedx\";\nimport { ModelPluginRegistry } from \"./model-plugin-registry\";\nimport { AgentMarkOutput, AgentMark, ChatMessage, InferenceOptions, AgentMarkStreamOutput } from \"./types\";\nimport { ExtractTextPlugin } from \"./extract-text\";\nimport { AgentMarkSchema } from \"./schemas\";\nimport { PluginAPI } from \"./plugin-api\";\nimport Ajv from 'ajv';\nimport { DeserializeConfig } from \"./types\";\n\nconst ajv = new Ajv();\n\ntype ExtractedField = {\n  name: string;\n  content: string;\n}\n\ntype SharedContext = {\n  \"__puzzlet-extractTextPromises\"?: Promise<ExtractedField>[];\n}\n\n\nTagPluginRegistry.register(new ExtractTextPlugin(), [\"User\", \"System\", \"Assistant\"]);\n\nfunction getMessages(extractedFields: Array<any>): ChatMessage[] {\n  const messages: ChatMessage[] = [];\n  extractedFields.forEach((field, index) => {\n    const fieldName = field.name.toLocaleLowerCase();\n    if (index !== 0 && fieldName === 'system') {\n      throw new Error(`System message may only be the first message only: ${field.content}`);\n    }\n    messages.push({ role: fieldName, content: field.content });\n  });\n  return messages;\n}\n\nexport async function getRawConfig<I extends Record<string, any>>(ast: Ast, props?: I) {\n  const frontMatter: any = getFrontMatter(ast);\n  const shared: SharedContext = {};\n  await transform(ast, props || {}, shared);\n  const extractedFieldPromises = shared[\"__puzzlet-extractTextPromises\"] || [];\n  const messages = getMessages(await Promise.all(extractedFieldPromises));\n\n  frontMatter.metadata.model.settings = frontMatter.metadata?.model?.settings || {};\n\n  const agentMark: AgentMark = AgentMarkSchema.parse({\n    name: frontMatter.name,\n    messages: messages,\n    metadata: frontMatter.metadata,\n  });\n  return agentMark;\n}\n\nexport async function runInference<Input extends Record<string, any>, Output>(\n  ast: Ast,\n  props: Input,\n  options?: InferenceOptions\n): Promise<AgentMarkOutput<Output>> {\n  const agentMark = await getRawConfig(ast, props);\n  const plugin = ModelPluginRegistry.getPlugin(\n    agentMark.metadata.model.name\n  );\n  if (!plugin) {\n    throw new Error(`No registered plugin for ${agentMark.metadata.model.name}`);\n  }\n\n  const frontMatter = getFrontMatter(ast) as {\n    input_schema?: Record<string, any>;\n    metadata?: {\n      model?: {\n        settings?: {\n          schema?: Record<string, any>;\n        };\n      };\n    };\n  };\n\n  if (frontMatter.input_schema) {\n    const validate = ajv.compile(frontMatter.input_schema);\n    if (!validate(props)) {\n      throw new Error(`Invalid input: ${ajv.errorsText(validate.errors)}`);\n    }\n  }\n\n  const inferenceOptions = {\n    ...options,\n    telemetry: {\n      ...options?.telemetry,\n      metadata: {\n        ...options?.telemetry?.metadata,\n        promptName: agentMark.name,\n        props: JSON.stringify(props),\n      },\n    },\n  };\n\n  const response = await plugin.runInference(agentMark, PluginAPI, inferenceOptions) as AgentMarkOutput<Output>;\n\n  if (frontMatter.metadata?.model?.settings?.schema) {\n    const validate = ajv.compile(frontMatter.metadata.model.settings.schema);\n    if (!validate(response.result)) {\n      throw new Error(`Invalid output: ${ajv.errorsText(validate.errors)}`);\n    }\n  }\n\n  return response;\n}\n\nexport async function streamInference<Input extends Record<string, any>, Output>(\n  ast: Ast,\n  props: Input,\n  options?: InferenceOptions\n): Promise<AgentMarkStreamOutput<Output>> {\n  const agentMark = await getRawConfig(ast, props);\n  const plugin = ModelPluginRegistry.getPlugin(\n    agentMark.metadata.model.name\n  );\n  if (!plugin) {\n    throw new Error(`No registered plugin for ${agentMark.metadata.model.name}`);\n  }\n\n  const frontMatter = getFrontMatter(ast) as {\n    input_schema?: Record<string, any>;\n    metadata?: {\n      model?: {\n        settings?: {\n          schema?: Record<string, any>;\n        };\n      };\n    };\n  };\n\n  if (frontMatter.input_schema) {\n    const validate = ajv.compile(frontMatter.input_schema);\n    if (!validate(props)) {\n      throw new Error(`Invalid input: ${ajv.errorsText(validate.errors)}`);\n    }\n  }\n\n  const inferenceOptions = {\n    ...options,\n    telemetry: {\n      ...options?.telemetry,\n      metadata: {\n        ...options?.telemetry?.metadata,\n        promptName: agentMark.name,\n      },\n    },\n  };\n\n  const response = await plugin.streamInference(agentMark, PluginAPI, inferenceOptions);\n\n  // TODO: validate the output chunks\n\n  return response;\n}\n\nexport function serialize(\n  completionParams: any,\n  model: string,\n  promptName: string\n) {\n  const plugin = ModelPluginRegistry.getPlugin(model);\n  return plugin?.serialize(completionParams, promptName, PluginAPI);\n}\n\nexport async function deserialize(ast: Ast, props = {}, config?: DeserializeConfig) {\n  const agentMark = await getRawConfig(ast, props);\n  const plugin = ModelPluginRegistry.getPlugin(\n    agentMark.metadata.model.name\n  );\n  if (!plugin) {\n    throw new Error(`No registered plugin for ${agentMark.metadata.model.name}`);\n  }\n  return plugin.deserialize(agentMark, PluginAPI, config);\n}\n\nexport const getModel = (ast: Ast) => {\n  const frontMatter = getFrontMatter(ast) as any;\n  return frontMatter.metadata.model.name;\n};\n\nexport interface Template<Input extends Record<string, any>, Output> {\n  content: Ast;\n  run: (props: Input, options?: InferenceOptions) => Promise<AgentMarkOutput<Output>>;\n  compile: (props?: Input) => Promise<AgentMark>;\n  deserialize: (props: Input, config?: DeserializeConfig) => Promise<any>;\n}\n\nexport function createTemplateRunner<Input extends Record<string, any>, Output>(ast: Ast) {\n  return {\n    run: (props: Input, options?: InferenceOptions) => runInference<Input, Output>(ast, props, options),\n    stream: (props: Input, options?: InferenceOptions) => streamInference<Input, Output>(ast, props, options),\n    compile: (props?: Input) => getRawConfig(ast, props),\n    deserialize: (props: Input, config?: DeserializeConfig) => deserialize(ast, props, config)\n  };\n}\n","import path from \"path\";\nimport { Ast, load } from \"@puzzlet/templatedx\";\nimport { AgentMarkLoader, TypsafeTemplate } from './types';\nimport type { Template } from './runtime';\n\ntype TemplateRunner = <Input extends Record<string, any>, Output>(ast: Ast) => Omit<Template<Input, Output>, 'content'>;\n\ntype DefaultIO = {\n  input: Record<string, any>;\n  output: any;\n}\n\nexport class FileLoader<T extends { [P in keyof T]: { input: any; output: any } } = { [key: string]: DefaultIO }> implements AgentMarkLoader<T> {\n  private basePath: string;\n\n  constructor(\n    private rootDir: string,\n    private createRunner: TemplateRunner\n  ) {\n    this.basePath = path.resolve(process.cwd(), rootDir);\n  }\n\n  async load<Path extends keyof T | (T extends { [key: string]: DefaultIO } ? string : never)>(\n    templatePath: Path\n  ): Promise<Path extends keyof T \n    ? TypsafeTemplate<T[Path][\"input\"], T[Path][\"output\"]>\n    : TypsafeTemplate<any, any>> {\n    const fullPath = path.join(this.basePath, templatePath as string);\n    const ast = await load(fullPath);\n    const runner = this.createRunner(ast);\n\n    return {\n      content: ast,\n      ...runner\n    } as any;\n  }\n}"]}