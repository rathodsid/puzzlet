{"version":3,"sources":["../src/index.ts","../src/anthropic-chat.ts"],"sourcesContent":["import AnthropicChatPlugin from \"./anthropic-chat\";\n\nexport { AnthropicChatPlugin };\nexport default AnthropicChatPlugin;","import Anthropic from '@anthropic-ai/sdk';\nimport { IModelPlugin, AgentMark, AgentMarkOutput } from \"@puzzlet/agentmark\";\nimport type { AgentMarkStreamOutput, IPluginAPI, InferenceOptions, DeserializeConfig } from '@puzzlet/agentmark';\nimport { createAnthropic } from \"@ai-sdk/anthropic\";\n\ntype MessageCreateParams = Anthropic.MessageCreateParams;\ntype ExtendedMessageParam = Omit<Anthropic.MessageParam, \"role\"> & {\n  role: \"user\" | \"assistant\" | \"system\";\n}\n\nexport default class AnthropicChatPlugin implements IModelPlugin {\n  provider: string;\n  apiKey: string | undefined = \"\";\n  constructor() {\n    this.provider = \"anthropic\";\n  }\n\n  setApiKey(apiKey: string): void {\n    this.apiKey = apiKey;\n  }\n\n  serialize(completionParams: MessageCreateParams, name: string, api: IPluginAPI): string {\n    const { model, messages, tools, tool_choice, stream, system, ...settings } = completionParams;\n    const messagesWithSystem = [...messages] as ExtendedMessageParam[];\n    const metadata: any = {\n      model: {\n        name: model,\n        settings: settings || {},\n      },\n    };\n  \n    if (system && Array.isArray(system) && system.length) {\n      const systemMessages: ExtendedMessageParam[] = system.map((msg) => ({\n        role: 'system',\n        content: [{ text: msg.text, type: 'text' }],\n      }));\n      messagesWithSystem.unshift(...systemMessages);\n    }\n  \n    if (stream) {\n      metadata.model.settings.stream = true;\n    }\n  \n    if (tools) {\n      if (tool_choice?.type === 'auto') {\n        metadata.model.settings.tools = tools.reduce((acc: any, tool) => {\n          acc[tool.name] = {\n            description: tool.description,\n            parameters: tool.input_schema || {},\n          };\n          return acc;\n        }, {});\n      } else {\n        const schemaTool = tools.find((tool) => tool.input_schema);\n        if (schemaTool) {\n          metadata.model.settings.schema = schemaTool.input_schema;\n        }\n      }\n    }\n  \n    const frontMatterData = {\n      name,\n      metadata,\n    };\n    const frontMatter = api.toFrontMatter(frontMatterData);\n  \n    const capitalizeRole = (role: string): string => role.charAt(0).toUpperCase() + role.slice(1);\n  \n    const messageBody = messagesWithSystem\n      .map((message: any) => {\n        const roleTag = `<${capitalizeRole(message.role)}>`;\n        const content = message.content.map((part: any) => part.text).join(' ');\n        return `${roleTag}${content}</${capitalizeRole(message.role)}>`;\n      })\n      .join('\\n');\n  \n    return `${frontMatter}\\n${messageBody}`;\n  }\n  \n  \n  async deserialize(agentMark: AgentMark, api: IPluginAPI, config?: DeserializeConfig): Promise<MessageCreateParams> {\n    const { metadata, messages } = agentMark;\n    const { model: modelConfig } = metadata;\n    const completionParamsPromise = new Promise<MessageCreateParams>(\n      async (resolve) => {\n        const anthropic = createAnthropic({\n          fetch: async (_, options) => {\n            const requestBody = JSON.parse(options!.body! as string);\n            resolve(requestBody as MessageCreateParams);\n            return new Response();\n          },\n        });\n        const providerModel = anthropic(modelConfig.name);\n        try {\n          if (config?.withStream) {\n            await api.streamInference(modelConfig.settings, providerModel, messages);\n          } else {\n            await api.runInference(modelConfig.settings, providerModel, messages);\n          }\n        } catch (e) {}\n      }\n    );\n    return completionParamsPromise;\n  }\n\n  async runInference(agentMark: AgentMark, api: IPluginAPI, options?: InferenceOptions): Promise<AgentMarkOutput> {\n    const apiKey = options?.apiKey || this.apiKey || api.getEnv(\"ANTHROPIC_API_KEY\");\n    if (!apiKey) {\n      throw new Error(\"No API key provided\");\n    }\n    const anthropic = createAnthropic({\n      apiKey,\n      fetch: api.fetch\n    });\n    const { metadata, messages } = agentMark;\n    const { model: modelConfig } = metadata;\n    const providerModel = anthropic(modelConfig.name);\n    const result = await api.runInference(modelConfig.settings, providerModel, messages, options);\n    return result;\n  }\n\n  async streamInference(agentMark: AgentMark, api: IPluginAPI, options?: InferenceOptions): Promise<AgentMarkStreamOutput<any>> {\n    const apiKey = options?.apiKey || this.apiKey || api.getEnv(\"ANTHROPIC_API_KEY\");\n    if (!apiKey) {\n      throw new Error(\"No API key provided\");\n    }\n    const anthropic = createAnthropic({\n      apiKey,\n      fetch: api.fetch\n    });\n    const { metadata, messages } = agentMark;\n    const { model: modelConfig } = metadata;\n    const providerModel = anthropic(modelConfig.name);\n    return api.streamInference(modelConfig.settings, providerModel, messages, options);\n  }\n}\n"],"mappings":"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","names":[]}